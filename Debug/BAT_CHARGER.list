
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003430  08003430  00004430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003498  08003498  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003498  08003498  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800349c  0800349c  0000449c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080034ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080034ac  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb30  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002343  00000000  00000000  00011b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00013ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b4  00000000  00000000  00014b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013fe2  00000000  00000000  00015504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010425  00000000  00000000  000294e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000729c7  00000000  00000000  0003990b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac2d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c0  00000000  00000000  000ac318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000af6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003418 	.word	0x08003418

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08003418 	.word	0x08003418

08000210 <LL_ADC_DMA_GetRegAddr>:
  
  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	334c      	adds	r3, #76	@ 0x4c
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	f043 0201 	orr.w	r2, r3, #1
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	609a      	str	r2, [r3, #8]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000246:	b480      	push	{r7}
 8000248:	b083      	sub	sp, #12
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	609a      	str	r2, [r3, #8]
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	3b01      	subs	r3, #1
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LL_DMA_EnableChannel+0x38>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	461a      	mov	r2, r3
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4413      	add	r3, r2
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	3a01      	subs	r2, #1
 8000282:	4906      	ldr	r1, [pc, #24]	@ (800029c <LL_DMA_EnableChannel+0x38>)
 8000284:	5c8a      	ldrb	r2, [r1, r2]
 8000286:	4611      	mov	r1, r2
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	440a      	add	r2, r1
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	0800344c 	.word	0x0800344c

080002a0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <LL_DMA_DisableChannel+0x38>)
 80002b0:	5cd3      	ldrb	r3, [r2, r3]
 80002b2:	461a      	mov	r2, r3
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	3a01      	subs	r2, #1
 80002be:	4906      	ldr	r1, [pc, #24]	@ (80002d8 <LL_DMA_DisableChannel+0x38>)
 80002c0:	5c8a      	ldrb	r2, [r1, r2]
 80002c2:	4611      	mov	r1, r2
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	440a      	add	r2, r1
 80002c8:	f023 0301 	bic.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	0800344c 	.word	0x0800344c

080002dc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	3b01      	subs	r3, #1
 80002ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000320 <LL_DMA_SetDataTransferDirection+0x44>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	461a      	mov	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	4413      	add	r3, r2
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002fc:	f023 0310 	bic.w	r3, r3, #16
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	3a01      	subs	r2, #1
 8000304:	4906      	ldr	r1, [pc, #24]	@ (8000320 <LL_DMA_SetDataTransferDirection+0x44>)
 8000306:	5c8a      	ldrb	r2, [r1, r2]
 8000308:	4611      	mov	r1, r2
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	440a      	add	r2, r1
 800030e:	4611      	mov	r1, r2
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4313      	orrs	r3, r2
 8000314:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000316:	bf00      	nop
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	0800344c 	.word	0x0800344c

08000324 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3b01      	subs	r3, #1
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <LL_DMA_SetMode+0x40>)
 8000336:	5cd3      	ldrb	r3, [r2, r3]
 8000338:	461a      	mov	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f023 0220 	bic.w	r2, r3, #32
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	3b01      	subs	r3, #1
 8000348:	4906      	ldr	r1, [pc, #24]	@ (8000364 <LL_DMA_SetMode+0x40>)
 800034a:	5ccb      	ldrb	r3, [r1, r3]
 800034c:	4619      	mov	r1, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	440b      	add	r3, r1
 8000352:	4619      	mov	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4313      	orrs	r3, r2
 8000358:	600b      	str	r3, [r1, #0]
             Mode);
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	0800344c 	.word	0x0800344c

08000368 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	3b01      	subs	r3, #1
 8000378:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <LL_DMA_SetPeriphIncMode+0x40>)
 800037a:	5cd3      	ldrb	r3, [r2, r3]
 800037c:	461a      	mov	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	4413      	add	r3, r2
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	3b01      	subs	r3, #1
 800038c:	4906      	ldr	r1, [pc, #24]	@ (80003a8 <LL_DMA_SetPeriphIncMode+0x40>)
 800038e:	5ccb      	ldrb	r3, [r1, r3]
 8000390:	4619      	mov	r1, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	440b      	add	r3, r1
 8000396:	4619      	mov	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4313      	orrs	r3, r2
 800039c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	0800344c 	.word	0x0800344c

080003ac <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0b      	ldr	r2, [pc, #44]	@ (80003ec <LL_DMA_SetMemoryIncMode+0x40>)
 80003be:	5cd3      	ldrb	r3, [r2, r3]
 80003c0:	461a      	mov	r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4413      	add	r3, r2
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4906      	ldr	r1, [pc, #24]	@ (80003ec <LL_DMA_SetMemoryIncMode+0x40>)
 80003d2:	5ccb      	ldrb	r3, [r1, r3]
 80003d4:	4619      	mov	r1, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	440b      	add	r3, r1
 80003da:	4619      	mov	r1, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4313      	orrs	r3, r2
 80003e0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80003e2:	bf00      	nop
 80003e4:	3714      	adds	r7, #20
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	0800344c 	.word	0x0800344c

080003f0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	3b01      	subs	r3, #1
 8000400:	4a0b      	ldr	r2, [pc, #44]	@ (8000430 <LL_DMA_SetPeriphSize+0x40>)
 8000402:	5cd3      	ldrb	r3, [r2, r3]
 8000404:	461a      	mov	r2, r3
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3b01      	subs	r3, #1
 8000414:	4906      	ldr	r1, [pc, #24]	@ (8000430 <LL_DMA_SetPeriphSize+0x40>)
 8000416:	5ccb      	ldrb	r3, [r1, r3]
 8000418:	4619      	mov	r1, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	440b      	add	r3, r1
 800041e:	4619      	mov	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4313      	orrs	r3, r2
 8000424:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	0800344c 	.word	0x0800344c

08000434 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	3b01      	subs	r3, #1
 8000444:	4a0b      	ldr	r2, [pc, #44]	@ (8000474 <LL_DMA_SetMemorySize+0x40>)
 8000446:	5cd3      	ldrb	r3, [r2, r3]
 8000448:	461a      	mov	r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	4413      	add	r3, r2
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	3b01      	subs	r3, #1
 8000458:	4906      	ldr	r1, [pc, #24]	@ (8000474 <LL_DMA_SetMemorySize+0x40>)
 800045a:	5ccb      	ldrb	r3, [r1, r3]
 800045c:	4619      	mov	r1, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	440b      	add	r3, r1
 8000462:	4619      	mov	r1, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4313      	orrs	r3, r2
 8000468:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	0800344c 	.word	0x0800344c

08000478 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a0b      	ldr	r2, [pc, #44]	@ (80004b8 <LL_DMA_SetDataLength+0x40>)
 800048a:	5cd3      	ldrb	r3, [r2, r3]
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	0c1b      	lsrs	r3, r3, #16
 8000496:	041b      	lsls	r3, r3, #16
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	3a01      	subs	r2, #1
 800049c:	4906      	ldr	r1, [pc, #24]	@ (80004b8 <LL_DMA_SetDataLength+0x40>)
 800049e:	5c8a      	ldrb	r2, [r1, r2]
 80004a0:	4611      	mov	r1, r2
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	440a      	add	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4313      	orrs	r3, r2
 80004ac:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	0800344c 	.word	0x0800344c

080004bc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <LL_DMA_SetMemoryAddress+0x2c>)
 80004ce:	5cd3      	ldrb	r3, [r2, r3]
 80004d0:	461a      	mov	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	461a      	mov	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60d3      	str	r3, [r2, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	0800344c 	.word	0x0800344c

080004ec <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4a06      	ldr	r2, [pc, #24]	@ (8000518 <LL_DMA_SetPeriphAddress+0x2c>)
 80004fe:	5cd3      	ldrb	r3, [r2, r3]
 8000500:	461a      	mov	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4413      	add	r3, r2
 8000506:	461a      	mov	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6093      	str	r3, [r2, #8]
}
 800050c:	bf00      	nop
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	0800344c 	.word	0x0800344c

0800051c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3b01      	subs	r3, #1
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LL_DMA_EnableIT_TC+0x38>)
 800052c:	5cd3      	ldrb	r3, [r2, r3]
 800052e:	461a      	mov	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	3a01      	subs	r2, #1
 800053a:	4906      	ldr	r1, [pc, #24]	@ (8000554 <LL_DMA_EnableIT_TC+0x38>)
 800053c:	5c8a      	ldrb	r2, [r1, r2]
 800053e:	4611      	mov	r1, r2
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	440a      	add	r2, r1
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	0800344c 	.word	0x0800344c

08000558 <adc_init>:
    }
}
*/

void adc_init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	adcGain[listVAC]   = Q15(1);
 800055e:	4b39      	ldr	r3, [pc, #228]	@ (8000644 <adc_init+0xec>)
 8000560:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000564:	801a      	strh	r2, [r3, #0]
	adcGain[listTEMP]  = Q15(1);
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <adc_init+0xec>)
 8000568:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800056c:	805a      	strh	r2, [r3, #2]
	adcGain[listIDC]   = Q15(1);
 800056e:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <adc_init+0xec>)
 8000570:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000574:	809a      	strh	r2, [r3, #4]
	adcGain[listVBAT1] = 2490;
 8000576:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <adc_init+0xec>)
 8000578:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 800057c:	80da      	strh	r2, [r3, #6]
	adcGain[listVDC1]  = Q15(1);
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <adc_init+0xec>)
 8000580:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000584:	811a      	strh	r2, [r3, #8]
	adcGain[listVDC2]  = Q15(1);
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <adc_init+0xec>)
 8000588:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800058c:	815a      	strh	r2, [r3, #10]
	adcGain[listIDC2]  = Q15(1);
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <adc_init+0xec>)
 8000590:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000594:	819a      	strh	r2, [r3, #12]

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000596:	2101      	movs	r1, #1
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <adc_init+0xf0>)
 800059a:	f7ff fe81 	bl	80002a0 <LL_DMA_DisableChannel>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
 800059e:	2100      	movs	r1, #0
 80005a0:	482a      	ldr	r0, [pc, #168]	@ (800064c <adc_init+0xf4>)
 80005a2:	f7ff fe35 	bl	8000210 <LL_ADC_DMA_GetRegAddr>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	2101      	movs	r1, #1
 80005ac:	4826      	ldr	r0, [pc, #152]	@ (8000648 <adc_init+0xf0>)
 80005ae:	f7ff ff9d 	bl	80004ec <LL_DMA_SetPeriphAddress>
    LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)adc1Buffer);
 80005b2:	4b27      	ldr	r3, [pc, #156]	@ (8000650 <adc_init+0xf8>)
 80005b4:	461a      	mov	r2, r3
 80005b6:	2101      	movs	r1, #1
 80005b8:	4823      	ldr	r0, [pc, #140]	@ (8000648 <adc_init+0xf0>)
 80005ba:	f7ff ff7f 	bl	80004bc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, ADC1_CHANNEL_COUNT);
 80005be:	2207      	movs	r2, #7
 80005c0:	2101      	movs	r1, #1
 80005c2:	4821      	ldr	r0, [pc, #132]	@ (8000648 <adc_init+0xf0>)
 80005c4:	f7ff ff58 	bl	8000478 <LL_DMA_SetDataLength>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2101      	movs	r1, #1
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <adc_init+0xf0>)
 80005ce:	f7ff fecb 	bl	8000368 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80005d2:	2280      	movs	r2, #128	@ 0x80
 80005d4:	2101      	movs	r1, #1
 80005d6:	481c      	ldr	r0, [pc, #112]	@ (8000648 <adc_init+0xf0>)
 80005d8:	f7ff fee8 	bl	80003ac <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80005dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e0:	2101      	movs	r1, #1
 80005e2:	4819      	ldr	r0, [pc, #100]	@ (8000648 <adc_init+0xf0>)
 80005e4:	f7ff ff04 	bl	80003f0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	2101      	movs	r1, #1
 80005ee:	4816      	ldr	r0, [pc, #88]	@ (8000648 <adc_init+0xf0>)
 80005f0:	f7ff ff20 	bl	8000434 <LL_DMA_SetMemorySize>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80005f4:	2220      	movs	r2, #32
 80005f6:	2101      	movs	r1, #1
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <adc_init+0xf0>)
 80005fa:	f7ff fe93 	bl	8000324 <LL_DMA_SetMode>
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80005fe:	2200      	movs	r2, #0
 8000600:	2101      	movs	r1, #1
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <adc_init+0xf0>)
 8000604:	f7ff fe6a 	bl	80002dc <LL_DMA_SetDataTransferDirection>
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1); // opsiyonel: NVIC enable da yap
 8000608:	2101      	movs	r1, #1
 800060a:	480f      	ldr	r0, [pc, #60]	@ (8000648 <adc_init+0xf0>)
 800060c:	f7ff ff86 	bl	800051c <LL_DMA_EnableIT_TC>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000610:	2101      	movs	r1, #1
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <adc_init+0xf0>)
 8000614:	f7ff fe26 	bl	8000264 <LL_DMA_EnableChannel>

    LL_ADC_Enable(ADC1);
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <adc_init+0xf4>)
 800061a:	f7ff fe05 	bl	8000228 <LL_ADC_Enable>
    for (volatile int i = 0; i < 1000; i++) { __asm volatile("nop"); } // kısa gecikme
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	e003      	b.n	800062c <adc_init+0xd4>
 8000624:	bf00      	nop
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000632:	dbf7      	blt.n	8000624 <adc_init+0xcc>

    // Başlat
    LL_ADC_REG_StartConversionSWStart(ADC1);
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <adc_init+0xf4>)
 8000636:	f7ff fe06 	bl	8000246 <LL_ADC_REG_StartConversionSWStart>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000048 	.word	0x20000048
 8000648:	40020000 	.word	0x40020000
 800064c:	40012400 	.word	0x40012400
 8000650:	20000028 	.word	0x20000028

08000654 <lcd_delay_us>:
static void lcd_send(uint8_t value, uint8_t is_data);

/* Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK.
 * This is approximate; HD44780 is tolerant. For safety we overshoot. */
static void lcd_delay_us(uint16_t micros)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
    if (micros >= 1000u) {
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000664:	d313      	bcc.n	800068e <lcd_delay_us+0x3a>
        HAL_Delay(micros / 1000u);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <lcd_delay_us+0x60>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	099b      	lsrs	r3, r3, #6
 8000670:	b29b      	uxth	r3, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f9d0 	bl	8001a18 <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000678:	88fb      	ldrh	r3, [r7, #6]
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <lcd_delay_us+0x60>)
 800067c:	fba2 1203 	umull	r1, r2, r2, r3
 8000680:	0992      	lsrs	r2, r2, #6
 8000682:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000686:	fb01 f202 	mul.w	r2, r1, r2
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 800068e:	88fa      	ldrh	r2, [r7, #6]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800069a:	e000      	b.n	800069e <lcd_delay_us+0x4a>
        __asm volatile ("nop");
 800069c:	bf00      	nop
    while (count--) {
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	60fa      	str	r2, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1f9      	bne.n	800069c <lcd_delay_us+0x48>
    }
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	10624dd3 	.word	0x10624dd3

080006b8 <lcd_pulse_enable>:

static void lcd_pulse_enable(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <lcd_pulse_enable+0x28>)
 80006c2:	f001 fd57 	bl	8002174 <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff ffc4 	bl	8000654 <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2110      	movs	r1, #16
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <lcd_pulse_enable+0x28>)
 80006d2:	f001 fd4f 	bl	8002174 <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 80006d6:	2032      	movs	r0, #50	@ 0x32
 80006d8:	f7ff ffbc 	bl	8000654 <lcd_delay_us>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <lcd_write4>:

static void lcd_write4(uint8_t nibble)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006fc:	4816      	ldr	r0, [pc, #88]	@ (8000758 <lcd_write4+0x74>)
 80006fe:	f001 fd39 	bl	8002174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	105b      	asrs	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000714:	4810      	ldr	r0, [pc, #64]	@ (8000758 <lcd_write4+0x74>)
 8000716:	f001 fd2d 	bl	8002174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	109b      	asrs	r3, r3, #2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072c:	480a      	ldr	r0, [pc, #40]	@ (8000758 <lcd_write4+0x74>)
 800072e:	f001 fd21 	bl	8002174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	10db      	asrs	r3, r3, #3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <lcd_write4+0x74>)
 8000746:	f001 fd15 	bl	8002174 <HAL_GPIO_WritePin>
    lcd_pulse_enable();
 800074a:	f7ff ffb5 	bl	80006b8 <lcd_pulse_enable>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40010800 	.word	0x40010800

0800075c <lcd_send>:

static void lcd_send(uint8_t value, uint8_t is_data)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	2108      	movs	r1, #8
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <lcd_send+0x48>)
 800077e:	f001 fcf9 	bl	8002174 <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	091b      	lsrs	r3, r3, #4
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ffab 	bl	80006e4 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ffa4 	bl	80006e4 <lcd_write4>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <LCD_Backlight>:

/* Public API */
void LCD_Backlight(uint8_t on)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <LCD_Backlight+0x2c>)
 80007c6:	f001 fcd5 	bl	8002174 <HAL_GPIO_WritePin>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <LCD_Init>:

void LCD_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2110      	movs	r1, #16
 80007e0:	481c      	ldr	r0, [pc, #112]	@ (8000854 <LCD_Init+0x7c>)
 80007e2:	f001 fcc7 	bl	8002174 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	481a      	ldr	r0, [pc, #104]	@ (8000854 <LCD_Init+0x7c>)
 80007ec:	f001 fcc2 	bl	8002174 <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 80007f0:	2028      	movs	r0, #40	@ 0x28
 80007f2:	f001 f911 	bl	8001a18 <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 80007f6:	2003      	movs	r0, #3
 80007f8:	f7ff ff74 	bl	80006e4 <lcd_write4>
    HAL_Delay(5);
 80007fc:	2005      	movs	r0, #5
 80007fe:	f001 f90b 	bl	8001a18 <HAL_Delay>
    lcd_write4(0x03);
 8000802:	2003      	movs	r0, #3
 8000804:	f7ff ff6e 	bl	80006e4 <lcd_write4>
    lcd_delay_us(150);
 8000808:	2096      	movs	r0, #150	@ 0x96
 800080a:	f7ff ff23 	bl	8000654 <lcd_delay_us>
    lcd_write4(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff68 	bl	80006e4 <lcd_write4>
    lcd_delay_us(150);
 8000814:	2096      	movs	r0, #150	@ 0x96
 8000816:	f7ff ff1d 	bl	8000654 <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff62 	bl	80006e4 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 8000820:	2100      	movs	r1, #0
 8000822:	2028      	movs	r0, #40	@ 0x28
 8000824:	f7ff ff9a 	bl	800075c <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 8000828:	2100      	movs	r1, #0
 800082a:	2008      	movs	r0, #8
 800082c:	f7ff ff96 	bl	800075c <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 8000830:	2100      	movs	r1, #0
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff92 	bl	800075c <lcd_send>
    HAL_Delay(2);
 8000838:	2002      	movs	r0, #2
 800083a:	f001 f8ed 	bl	8001a18 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 800083e:	2100      	movs	r1, #0
 8000840:	2006      	movs	r0, #6
 8000842:	f7ff ff8b 	bl	800075c <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000846:	2100      	movs	r1, #0
 8000848:	200c      	movs	r0, #12
 800084a:	f7ff ff87 	bl	800075c <lcd_send>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010c00 	.word	0x40010c00

08000858 <LCD_Clear>:

void LCD_Clear(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    lcd_send(0x01, 0);
 800085c:	2100      	movs	r1, #0
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff ff7c 	bl	800075c <lcd_send>
    HAL_Delay(2);
 8000864:	2002      	movs	r0, #2
 8000866:	f001 f8d7 	bl	8001a18 <HAL_Delay>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <LCD_SetCursor>:
    lcd_send(0x02, 0);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 8000880:	79bb      	ldrb	r3, [r7, #6]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d901      	bls.n	800088a <LCD_SetCursor+0x1a>
 8000886:	2303      	movs	r3, #3
 8000888:	71bb      	strb	r3, [r7, #6]
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <LCD_SetCursor+0x40>)
 800088e:	5cd2      	ldrb	r2, [r2, r3]
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4413      	add	r3, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	b25b      	sxtb	r3, r3
 8000898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800089c:	b25b      	sxtb	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff5a 	bl	800075c <lcd_send>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08003454 	.word	0x08003454

080008b4 <LCD_WriteChar>:

void LCD_WriteChar(char c)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
    lcd_send((uint8_t)c, 1);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff4a 	bl	800075c <lcd_send>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LCD_Print>:

void LCD_Print(const char *str)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    if (str == NULL) return;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00c      	beq.n	80008f8 <LCD_Print+0x28>
    while (*str) {
 80008de:	e006      	b.n	80008ee <LCD_Print+0x1e>
        LCD_WriteChar(*str++);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffe3 	bl	80008b4 <LCD_WriteChar>
    while (*str) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f4      	bne.n	80008e0 <LCD_Print+0x10>
 80008f6:	e000      	b.n	80008fa <LCD_Print+0x2a>
    if (str == NULL) return;
 80008f8:	bf00      	nop
    }
}
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <LCD_PrintUInt8>:
{
    lcd_send(0x08, 0);
}

void LCD_PrintUInt8(uint8_t value)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
    char buf[4]; /* max 255 */
    int idx = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
    if (value >= 200) {
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2bc7      	cmp	r3, #199	@ 0xc7
 8000912:	d90b      	bls.n	800092c <LCD_PrintUInt8+0x2c>
        buf[idx++] = '2';
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60fa      	str	r2, [r7, #12]
 800091a:	3310      	adds	r3, #16
 800091c:	443b      	add	r3, r7
 800091e:	2232      	movs	r2, #50	@ 0x32
 8000920:	f803 2c08 	strb.w	r2, [r3, #-8]
        value -= 200;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	3338      	adds	r3, #56	@ 0x38
 8000928:	71fb      	strb	r3, [r7, #7]
 800092a:	e00d      	b.n	8000948 <LCD_PrintUInt8+0x48>
    } else if (value >= 100) {
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b63      	cmp	r3, #99	@ 0x63
 8000930:	d90a      	bls.n	8000948 <LCD_PrintUInt8+0x48>
        buf[idx++] = '1';
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	60fa      	str	r2, [r7, #12]
 8000938:	3310      	adds	r3, #16
 800093a:	443b      	add	r3, r7
 800093c:	2231      	movs	r2, #49	@ 0x31
 800093e:	f803 2c08 	strb.w	r2, [r3, #-8]
        value -= 100;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	3b64      	subs	r3, #100	@ 0x64
 8000946:	71fb      	strb	r3, [r7, #7]
    }
    if (idx > 0 || value >= 10) {
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dc02      	bgt.n	8000954 <LCD_PrintUInt8+0x54>
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b09      	cmp	r3, #9
 8000952:	d919      	bls.n	8000988 <LCD_PrintUInt8+0x88>
        buf[idx++] = (char)('0' + (value / 10));
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <LCD_PrintUInt8+0xbc>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	b2da      	uxtb	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1c59      	adds	r1, r3, #1
 8000964:	60f9      	str	r1, [r7, #12]
 8000966:	3230      	adds	r2, #48	@ 0x30
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	3310      	adds	r3, #16
 800096c:	443b      	add	r3, r7
 800096e:	f803 2c08 	strb.w	r2, [r3, #-8]
        value = (uint8_t)(value % 10);
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <LCD_PrintUInt8+0xbc>)
 8000976:	fba3 1302 	umull	r1, r3, r3, r2
 800097a:	08d9      	lsrs	r1, r3, #3
 800097c:	460b      	mov	r3, r1
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	71fb      	strb	r3, [r7, #7]
    }
    buf[idx++] = (char)('0' + value);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60fa      	str	r2, [r7, #12]
 800098e:	79fa      	ldrb	r2, [r7, #7]
 8000990:	3230      	adds	r2, #48	@ 0x30
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	3310      	adds	r3, #16
 8000996:	443b      	add	r3, r7
 8000998:	f803 2c08 	strb.w	r2, [r3, #-8]
    buf[idx] = '\0';
 800099c:	f107 0208 	add.w	r2, r7, #8
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
    LCD_Print(buf);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff8f 	bl	80008d0 <LCD_Print>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	cccccccd 	.word	0xcccccccd

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	@ (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	@ (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	@ 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	@ 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <LL_ADC_REG_SetSequencerRanks>:
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	332c      	adds	r3, #44	@ 0x2c
 8000adc:	4619      	mov	r1, r3
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000ae4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ae8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	fa92 f2a2 	rbit	r2, r2
 8000af0:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	f003 031f 	and.w	r3, r3, #31
 8000b0c:	211f      	movs	r1, #31
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	401a      	ands	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f003 011f 	and.w	r1, r3, #31
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	431a      	orrs	r2, r3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	3724      	adds	r7, #36	@ 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <LL_ADC_SetChannelSamplingTime>:
{
 8000b36:	b480      	push	{r7}
 8000b38:	b08d      	sub	sp, #52	@ 0x34
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	fa92 f2a2 	rbit	r2, r2
 8000b5a:	617a      	str	r2, [r7, #20]
  return result;
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	40d3      	lsrs	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 8000b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b76:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000b7a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b7c:	6a39      	ldr	r1, [r7, #32]
 8000b7e:	fa91 f1a1 	rbit	r1, r1
 8000b82:	61f9      	str	r1, [r7, #28]
  return result;
 8000b84:	69f9      	ldr	r1, [r7, #28]
 8000b86:	fab1 f181 	clz	r1, r1
 8000b8a:	b2c9      	uxtb	r1, r1
 8000b8c:	40cb      	lsrs	r3, r1
 8000b8e:	2107      	movs	r1, #7
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000b9e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8000ba2:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ba6:	fa91 f1a1 	rbit	r1, r1
 8000baa:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8000bac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bae:	fab1 f181 	clz	r1, r1
 8000bb2:	b2c9      	uxtb	r1, r1
 8000bb4:	40cb      	lsrs	r3, r1
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc0:	601a      	str	r2, [r3, #0]
}
 8000bc2:	bf00      	nop
 8000bc4:	3734      	adds	r7, #52	@ 0x34
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <LL_DMA_SetDataTransferDirection>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4413      	add	r3, r2
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bec:	f023 0310 	bic.w	r3, r3, #16
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	4906      	ldr	r1, [pc, #24]	@ (8000c10 <LL_DMA_SetDataTransferDirection+0x44>)
 8000bf6:	5c8a      	ldrb	r2, [r1, r2]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	440a      	add	r2, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	08003458 	.word	0x08003458

08000c14 <LL_DMA_SetMode>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <LL_DMA_SetMode+0x40>)
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 0220 	bic.w	r2, r3, #32
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4906      	ldr	r1, [pc, #24]	@ (8000c54 <LL_DMA_SetMode+0x40>)
 8000c3a:	5ccb      	ldrb	r3, [r1, r3]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	440b      	add	r3, r1
 8000c42:	4619      	mov	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	08003458 	.word	0x08003458

08000c58 <LL_DMA_SetPeriphIncMode>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	4906      	ldr	r1, [pc, #24]	@ (8000c98 <LL_DMA_SetPeriphIncMode+0x40>)
 8000c7e:	5ccb      	ldrb	r3, [r1, r3]
 8000c80:	4619      	mov	r1, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	440b      	add	r3, r1
 8000c86:	4619      	mov	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	08003458 	.word	0x08003458

08000c9c <LL_DMA_SetMemoryIncMode>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <LL_DMA_SetMemoryIncMode+0x40>)
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4906      	ldr	r1, [pc, #24]	@ (8000cdc <LL_DMA_SetMemoryIncMode+0x40>)
 8000cc2:	5ccb      	ldrb	r3, [r1, r3]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	440b      	add	r3, r1
 8000cca:	4619      	mov	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	08003458 	.word	0x08003458

08000ce0 <LL_DMA_SetPeriphSize>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <LL_DMA_SetPeriphSize+0x40>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4906      	ldr	r1, [pc, #24]	@ (8000d20 <LL_DMA_SetPeriphSize+0x40>)
 8000d06:	5ccb      	ldrb	r3, [r1, r3]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	440b      	add	r3, r1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	08003458 	.word	0x08003458

08000d24 <LL_DMA_SetMemorySize>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	4a0b      	ldr	r2, [pc, #44]	@ (8000d64 <LL_DMA_SetMemorySize+0x40>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4906      	ldr	r1, [pc, #24]	@ (8000d64 <LL_DMA_SetMemorySize+0x40>)
 8000d4a:	5ccb      	ldrb	r3, [r1, r3]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	440b      	add	r3, r1
 8000d52:	4619      	mov	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	08003458 	.word	0x08003458

08000d68 <LL_DMA_SetChannelPriorityLevel>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4906      	ldr	r1, [pc, #24]	@ (8000da8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000d8e:	5ccb      	ldrb	r3, [r1, r3]
 8000d90:	4619      	mov	r1, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	440b      	add	r3, r1
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	08003458 	.word	0x08003458

08000dac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4013      	ands	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fda9 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f87c 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fa56 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1c:	f000 fa3c 	bl	8001298 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e20:	f000 f8ce 	bl	8000fc0 <MX_ADC1_Init>
  MX_DAC_Init();
 8000e24:	f000 f9ac 	bl	8001180 <MX_DAC_Init>
  MX_I2C1_Init();
 8000e28:	f000 f9de 	bl	80011e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e2c:	f000 fa0a 	bl	8001244 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  adc_init();
 8000e30:	f7ff fb92 	bl	8000558 <adc_init>


  LCD_Backlight(1);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff fcb7 	bl	80007a8 <LCD_Backlight>
  LCD_Init();
 8000e3a:	f7ff fccd 	bl	80007d8 <LCD_Init>
  LCD_SetCursor(3, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2003      	movs	r0, #3
 8000e42:	f7ff fd15 	bl	8000870 <LCD_SetCursor>
  LCD_Print("BAT_CHARGER");
 8000e46:	482b      	ldr	r0, [pc, #172]	@ (8000ef4 <main+0xe8>)
 8000e48:	f7ff fd42 	bl	80008d0 <LCD_Print>
  LCD_SetCursor(3, 3);
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff fd0e 	bl	8000870 <LCD_SetCursor>
  LCD_Print("JHD204A READY");
 8000e54:	4828      	ldr	r0, [pc, #160]	@ (8000ef8 <main+0xec>)
 8000e56:	f7ff fd3b 	bl	80008d0 <LCD_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4827      	ldr	r0, [pc, #156]	@ (8000efc <main+0xf0>)
 8000e5e:	f000 ff2e 	bl	8001cbe <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000e62:	2110      	movs	r1, #16
 8000e64:	4825      	ldr	r0, [pc, #148]	@ (8000efc <main+0xf0>)
 8000e66:	f000 ff2a 	bl	8001cbe <HAL_DAC_Start>

  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e70:	4823      	ldr	r0, [pc, #140]	@ (8000f00 <main+0xf4>)
 8000e72:	f001 f97f 	bl	8002174 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7c:	4821      	ldr	r0, [pc, #132]	@ (8000f04 <main+0xf8>)
 8000e7e:	f001 f979 	bl	8002174 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e88:	481e      	ldr	r0, [pc, #120]	@ (8000f04 <main+0xf8>)
 8000e8a:	f001 f973 	bl	8002174 <HAL_GPIO_WritePin>

  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8000e8e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	4819      	ldr	r0, [pc, #100]	@ (8000efc <main+0xf0>)
 8000e98:	f000 ff67 	bl	8001d6a <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 3000);
 8000e9c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4815      	ldr	r0, [pc, #84]	@ (8000efc <main+0xf0>)
 8000ea6:	f000 ff60 	bl	8001d6a <HAL_DAC_SetValue>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb0:	4814      	ldr	r0, [pc, #80]	@ (8000f04 <main+0xf8>)
 8000eb2:	f001 f95f 	bl	8002174 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8000eb6:	20fa      	movs	r0, #250	@ 0xfa
 8000eb8:	f000 fdae 	bl	8001a18 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec2:	4810      	ldr	r0, [pc, #64]	@ (8000f04 <main+0xf8>)
 8000ec4:	f001 f956 	bl	8002174 <HAL_GPIO_WritePin>
  while (1)
  {
	  LCD_Clear();
 8000ec8:	f7ff fcc6 	bl	8000858 <LCD_Clear>
	  LCD_SetCursor(3, 2);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f7ff fcce 	bl	8000870 <LCD_SetCursor>
	  LCD_PrintUInt8(buttonState);
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <main+0xfc>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fd11 	bl	8000900 <LCD_PrintUInt8>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <main+0x100>)
 8000ee2:	f001 f95f 	bl	80021a4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eea:	f000 fd95 	bl	8001a18 <HAL_Delay>
	  LCD_Clear();
 8000eee:	bf00      	nop
 8000ef0:	e7ea      	b.n	8000ec8 <main+0xbc>
 8000ef2:	bf00      	nop
 8000ef4:	08003430 	.word	0x08003430
 8000ef8:	0800343c 	.word	0x0800343c
 8000efc:	20000058 	.word	0x20000058
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	40011000 	.word	0x40011000
 8000f08:	20000056 	.word	0x20000056
 8000f0c:	40010800 	.word	0x40010800

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b092      	sub	sp, #72	@ 0x48
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2228      	movs	r2, #40	@ 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fa4d 	bl	80033be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 faa0 	bl	80024a4 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f6a:	f000 fa77 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2302      	movs	r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fd0d 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000f94:	f000 fa62 	bl	800145c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fe82 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fae:	f000 fa55 	bl	800145c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000fb2:	f001 fdb1 	bl	8002b18 <HAL_RCC_EnableCSS>
}
 8000fb6:	bf00      	nop
 8000fb8:	3748      	adds	r7, #72	@ 0x48
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	@ 0x30
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000fee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ff2:	f7ff fef3 	bl	8000ddc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f7ff fef0 	bl	8000ddc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000ffc:	2008      	movs	r0, #8
 8000ffe:	f7ff feed 	bl	8000ddc <LL_APB2_GRP1_EnableClock>
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PB0   ------> ADC1_IN8
  PB1   ------> ADC1_IN9
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_6
 8001002:	f24c 73c7 	movw	r3, #51143	@ 0xc7c7
 8001006:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4851      	ldr	r0, [pc, #324]	@ (8001158 <MX_ADC1_Init+0x198>)
 8001012:	f002 f96e 	bl	80032f2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001016:	f240 3303 	movw	r3, #771	@ 0x303
 800101a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	484d      	ldr	r0, [pc, #308]	@ (800115c <MX_ADC1_Init+0x19c>)
 8001026:	f002 f964 	bl	80032f2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	484c      	ldr	r0, [pc, #304]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 8001030:	f7ff fdcc 	bl	8000bcc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_VERYHIGH);
 8001034:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001038:	2101      	movs	r1, #1
 800103a:	4849      	ldr	r0, [pc, #292]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 800103c:	f7ff fe94 	bl	8000d68 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001040:	2220      	movs	r2, #32
 8001042:	2101      	movs	r1, #1
 8001044:	4846      	ldr	r0, [pc, #280]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 8001046:	f7ff fde5 	bl	8000c14 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800104a:	2200      	movs	r2, #0
 800104c:	2101      	movs	r1, #1
 800104e:	4844      	ldr	r0, [pc, #272]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 8001050:	f7ff fe02 	bl	8000c58 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001054:	2280      	movs	r2, #128	@ 0x80
 8001056:	2101      	movs	r1, #1
 8001058:	4841      	ldr	r0, [pc, #260]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 800105a:	f7ff fe1f 	bl	8000c9c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800105e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001062:	2101      	movs	r1, #1
 8001064:	483e      	ldr	r0, [pc, #248]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 8001066:	f7ff fe3b 	bl	8000ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800106a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106e:	2101      	movs	r1, #1
 8001070:	483b      	ldr	r0, [pc, #236]	@ (8001160 <MX_ADC1_Init+0x1a0>)
 8001072:	f7ff fe57 	bl	8000d24 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800107a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001084:	4619      	mov	r1, r3
 8001086:	4837      	ldr	r0, [pc, #220]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001088:	f002 f80e 	bl	80030a8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800108c:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8001090:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 8001092:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8001096:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80010a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	482d      	ldr	r0, [pc, #180]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010ae:	f002 f822 	bl	80030f6 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80010b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ba:	482a      	ldr	r0, [pc, #168]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010bc:	f7ff fd06 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80010c0:	2202      	movs	r2, #2
 80010c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80010c6:	4827      	ldr	r0, [pc, #156]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010c8:	f7ff fd35 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <MX_ADC1_Init+0x1a8>)
 80010ce:	f240 2105 	movw	r1, #517	@ 0x205
 80010d2:	4824      	ldr	r0, [pc, #144]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010d4:	f7ff fcfa 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80010d8:	2202      	movs	r2, #2
 80010da:	4923      	ldr	r1, [pc, #140]	@ (8001168 <MX_ADC1_Init+0x1a8>)
 80010dc:	4821      	ldr	r0, [pc, #132]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010de:	f7ff fd2a 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80010e2:	4a22      	ldr	r2, [pc, #136]	@ (800116c <MX_ADC1_Init+0x1ac>)
 80010e4:	f240 210a 	movw	r1, #522	@ 0x20a
 80010e8:	481e      	ldr	r0, [pc, #120]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010ea:	f7ff fcef 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80010ee:	2202      	movs	r2, #2
 80010f0:	491e      	ldr	r1, [pc, #120]	@ (800116c <MX_ADC1_Init+0x1ac>)
 80010f2:	481c      	ldr	r0, [pc, #112]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 80010f4:	f7ff fd1f 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_6);
 80010f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001170 <MX_ADC1_Init+0x1b0>)
 80010fa:	f240 210f 	movw	r1, #527	@ 0x20f
 80010fe:	4819      	ldr	r0, [pc, #100]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001100:	f7ff fce4 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001104:	2202      	movs	r2, #2
 8001106:	491a      	ldr	r1, [pc, #104]	@ (8001170 <MX_ADC1_Init+0x1b0>)
 8001108:	4816      	ldr	r0, [pc, #88]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 800110a:	f7ff fd14 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_7);
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <MX_ADC1_Init+0x1b4>)
 8001110:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001116:	f7ff fcd9 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800111a:	2202      	movs	r2, #2
 800111c:	4915      	ldr	r1, [pc, #84]	@ (8001174 <MX_ADC1_Init+0x1b4>)
 800111e:	4811      	ldr	r0, [pc, #68]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001120:	f7ff fd09 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_8);
 8001124:	4a14      	ldr	r2, [pc, #80]	@ (8001178 <MX_ADC1_Init+0x1b8>)
 8001126:	f240 2119 	movw	r1, #537	@ 0x219
 800112a:	480e      	ldr	r0, [pc, #56]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 800112c:	f7ff fcce 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001130:	2202      	movs	r2, #2
 8001132:	4911      	ldr	r1, [pc, #68]	@ (8001178 <MX_ADC1_Init+0x1b8>)
 8001134:	480b      	ldr	r0, [pc, #44]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001136:	f7ff fcfe 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_9);
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <MX_ADC1_Init+0x1bc>)
 800113c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001140:	4808      	ldr	r0, [pc, #32]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 8001142:	f7ff fcc3 	bl	8000acc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001146:	2202      	movs	r2, #2
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <MX_ADC1_Init+0x1bc>)
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <MX_ADC1_Init+0x1a4>)
 800114c:	f7ff fcf3 	bl	8000b36 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3730      	adds	r7, #48	@ 0x30
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010800 	.word	0x40010800
 800115c:	40010c00 	.word	0x40010c00
 8001160:	40020000 	.word	0x40020000
 8001164:	40012400 	.word	0x40012400
 8001168:	02300001 	.word	0x02300001
 800116c:	02600002 	.word	0x02600002
 8001170:	03200006 	.word	0x03200006
 8001174:	03500007 	.word	0x03500007
 8001178:	03800008 	.word	0x03800008
 800117c:	03b00009 	.word	0x03b00009

08001180 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_DAC_Init+0x60>)
 8001190:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <MX_DAC_Init+0x64>)
 8001192:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001194:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <MX_DAC_Init+0x60>)
 8001196:	f000 fd70 	bl	8001c7a <HAL_DAC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011a0:	f000 f95c 	bl	800145c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <MX_DAC_Init+0x60>)
 80011b4:	f000 fe02 	bl	8001dbc <HAL_DAC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011be:	f000 f94d 	bl	800145c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	2210      	movs	r2, #16
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_DAC_Init+0x60>)
 80011ca:	f000 fdf7 	bl	8001dbc <HAL_DAC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80011d4:	f000 f942 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000058 	.word	0x20000058
 80011e4:	40007400 	.word	0x40007400

080011e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_I2C1_Init+0x50>)
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <MX_I2C1_Init+0x54>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_I2C1_Init+0x50>)
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_I2C1_Init+0x58>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_I2C1_Init+0x50>)
 8001206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_I2C1_Init+0x50>)
 8001226:	f000 fff9 	bl	800221c <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001230:	f000 f914 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000006c 	.word	0x2000006c
 800123c:	40005400 	.word	0x40005400
 8001240:	000186a0 	.word	0x000186a0

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_USART1_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_USART1_UART_Init+0x4c>)
 800127c:	f001 fdbc 	bl	8002df8 <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f8e9 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000c0 	.word	0x200000c0
 8001294:	40013800 	.word	0x40013800

08001298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fd85 	bl	8000dac <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012a2:	f7ff fb8d 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fbdb 	bl	8000a68 <NVIC_EncodePriority>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4619      	mov	r1, r3
 80012b6:	200b      	movs	r0, #11
 80012b8:	f7ff fbac 	bl	8000a14 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012bc:	200b      	movs	r0, #11
 80012be:	f7ff fb8d 	bl	80009dc <__NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <MX_GPIO_Init+0x17c>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a58      	ldr	r2, [pc, #352]	@ (8001444 <MX_GPIO_Init+0x17c>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b56      	ldr	r3, [pc, #344]	@ (8001444 <MX_GPIO_Init+0x17c>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <MX_GPIO_Init+0x17c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a52      	ldr	r2, [pc, #328]	@ (8001444 <MX_GPIO_Init+0x17c>)
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <MX_GPIO_Init+0x17c>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b4d      	ldr	r3, [pc, #308]	@ (8001444 <MX_GPIO_Init+0x17c>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <MX_GPIO_Init+0x17c>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <MX_GPIO_Init+0x17c>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <MX_GPIO_Init+0x17c>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a46      	ldr	r2, [pc, #280]	@ (8001444 <MX_GPIO_Init+0x17c>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <MX_GPIO_Init+0x17c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001342:	4841      	ldr	r0, [pc, #260]	@ (8001448 <MX_GPIO_Init+0x180>)
 8001344:	f000 ff16 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2108      	movs	r1, #8
 800134c:	483f      	ldr	r0, [pc, #252]	@ (800144c <MX_GPIO_Init+0x184>)
 800134e:	f000 ff11 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f248 0138 	movw	r1, #32824	@ 0x8038
 8001358:	483d      	ldr	r0, [pc, #244]	@ (8001450 <MX_GPIO_Init+0x188>)
 800135a:	f000 ff0b 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8001364:	4839      	ldr	r0, [pc, #228]	@ (800144c <MX_GPIO_Init+0x184>)
 8001366:	f000 ff05 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SHUTDOWN1_Pin SHUTDOWN2_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 800136a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4831      	ldr	r0, [pc, #196]	@ (8001448 <MX_GPIO_Init+0x180>)
 8001384:	f000 fd72 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_D2_Pin LCD_D3_Pin LCD_D1_Pin
                           LCD_D0_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 8001388:	f641 6308 	movw	r3, #7688	@ 0x1e08
 800138c:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	482a      	ldr	r0, [pc, #168]	@ (800144c <MX_GPIO_Init+0x184>)
 80013a2:	f000 fd63 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_Pin B5_Pin B4_Pin B1_Pin
                           B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 80013a6:	f647 4304 	movw	r3, #31748	@ 0x7c04
 80013aa:	617b      	str	r3, [r7, #20]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_GPIO_Init+0x18c>)
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4825      	ldr	r0, [pc, #148]	@ (8001450 <MX_GPIO_Init+0x188>)
 80013bc:	f000 fd56 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RS_Pin LCD_E_Pin RTS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 80013c0:	f248 0338 	movw	r3, #32824	@ 0x8038
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	481d      	ldr	r0, [pc, #116]	@ (8001450 <MX_GPIO_Init+0x188>)
 80013da:	f000 fd47 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80013de:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4816      	ldr	r0, [pc, #88]	@ (800144c <MX_GPIO_Init+0x184>)
 80013f4:	f000 fd3a 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_GPIO_Init+0x190>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <MX_GPIO_Init+0x190>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	210f      	movs	r1, #15
 8001420:	2008      	movs	r0, #8
 8001422:	f000 fbf4 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001426:	2008      	movs	r0, #8
 8001428:	f000 fc0d 	bl	8001c46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	210f      	movs	r1, #15
 8001430:	2028      	movs	r0, #40	@ 0x28
 8001432:	f000 fbec 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f000 fc05 	bl	8001c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	@ 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	40011000 	.word	0x40011000
 800144c:	40010800 	.word	0x40010800
 8001450:	40010c00 	.word	0x40010c00
 8001454:	10110000 	.word	0x10110000
 8001458:	40010000 	.word	0x40010000

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <Error_Handler+0x8>

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_MspInit+0x6c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a18      	ldr	r2, [pc, #96]	@ (80014d4 <HAL_MspInit+0x6c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_MspInit+0x6c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_MspInit+0x6c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <HAL_MspInit+0x6c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_MspInit+0x6c>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2005      	movs	r0, #5
 80014a4:	f000 fbb3 	bl	8001c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80014a8:	2005      	movs	r0, #5
 80014aa:	f000 fbcc 	bl	8001c46 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_MspInit+0x70>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4a04      	ldr	r2, [pc, #16]	@ (80014d8 <HAL_MspInit+0x70>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000

080014dc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <HAL_DAC_MspInit+0x6c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d121      	bne.n	8001540 <HAL_DAC_MspInit+0x64>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <HAL_DAC_MspInit+0x70>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a12      	ldr	r2, [pc, #72]	@ (800154c <HAL_DAC_MspInit+0x70>)
 8001502:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_DAC_MspInit+0x70>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_DAC_MspInit+0x70>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <HAL_DAC_MspInit+0x70>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_DAC_MspInit+0x70>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800152c:	2330      	movs	r3, #48	@ 0x30
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001530:	2303      	movs	r3, #3
 8001532:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <HAL_DAC_MspInit+0x74>)
 800153c:	f000 fc96 	bl	8001e6c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001540:	bf00      	nop
 8001542:	3720      	adds	r7, #32
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40007400 	.word	0x40007400
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800

08001554 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_I2C_MspInit+0x90>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d132      	bne.n	80015da <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4812      	ldr	r0, [pc, #72]	@ (80015ec <HAL_I2C_MspInit+0x98>)
 80015a2:	f000 fc63 	bl	8001e6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_I2C_MspInit+0x9c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80015bc:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <HAL_I2C_MspInit+0x9c>)
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_I2C_MspInit+0x94>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40005400 	.word	0x40005400
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40010000 	.word	0x40010000

080015f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <HAL_UART_MspInit+0xa4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d13d      	bne.n	8001690 <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_UART_MspInit+0xa8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a20      	ldr	r2, [pc, #128]	@ (800169c <HAL_UART_MspInit+0xa8>)
 800161a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <HAL_UART_MspInit+0xa8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_UART_MspInit+0xa8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_UART_MspInit+0xa8>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_UART_MspInit+0xa8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001644:	2340      	movs	r3, #64	@ 0x40
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4812      	ldr	r0, [pc, #72]	@ (80016a0 <HAL_UART_MspInit+0xac>)
 8001658:	f000 fc08 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <HAL_UART_MspInit+0xac>)
 8001670:	f000 fbfc 	bl	8001e6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_UART_MspInit+0xb0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
 800168a:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_UART_MspInit+0xb0>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40013800 	.word	0x40013800
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40010000 	.word	0x40010000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80016ac:	f001 fac6 	bl	8002c3c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x8>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 f970 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8001716:	2004      	movs	r0, #4
 8001718:	f000 fd5e 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 800171c:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <EXTI2_IRQHandler+0xb8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	607b      	str	r3, [r7, #4]
    uint8_t s = (uint8_t)(
        ((!!(idr & B1_Pin)) << BUT1) |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	b25a      	sxtb	r2, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
        ((!!(idr & B1_Pin)) << BUT1) |
 8001744:	b25b      	sxtb	r3, r3
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	b25b      	sxtb	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b25a      	sxtb	r2, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 800175e:	b25b      	sxtb	r3, r3
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	b25b      	sxtb	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b25a      	sxtb	r2, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8001778:	b25b      	sxtb	r3, r3
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b25a      	sxtb	r2, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8001792:	b25b      	sxtb	r3, r3
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	b25b      	sxtb	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b25a      	sxtb	r2, r3
        ((!!(idr & B6_Pin)) << BUT6)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b25b      	sxtb	r3, r3
    uint8_t s = (uint8_t)(
 80017b6:	70fb      	strb	r3, [r7, #3]
    );
    buttonState = s;
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <EXTI2_IRQHandler+0xbc>)
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	7013      	strb	r3, [r2, #0]
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	20000056 	.word	0x20000056

080017d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t adcChannelCounter = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]

	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 80017da:	e013      	b.n	8001804 <DMA1_Channel1_IRQHandler+0x34>
	{
		adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter] - 0) * adcGain[adcChannelCounter]) >> 15);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <DMA1_Channel1_IRQHandler+0x50>)
 80017e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017e4:	4619      	mov	r1, r3
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <DMA1_Channel1_IRQHandler+0x54>)
 80017ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	13da      	asrs	r2, r3, #15
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	b211      	sxth	r1, r2
 80017f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <DMA1_Channel1_IRQHandler+0x58>)
 80017fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adcChannelCounter++;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	3301      	adds	r3, #1
 8001802:	71fb      	strb	r3, [r7, #7]
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b06      	cmp	r3, #6
 8001808:	d9e8      	bls.n	80017dc <DMA1_Channel1_IRQHandler+0xc>
	}
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <DMA1_Channel1_IRQHandler+0x5c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a07      	ldr	r2, [pc, #28]	@ (800182c <DMA1_Channel1_IRQHandler+0x5c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000028 	.word	0x20000028
 8001824:	20000048 	.word	0x20000048
 8001828:	20000038 	.word	0x20000038
 800182c:	40020000 	.word	0x40020000

08001830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8001836:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800183a:	f000 fccd 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 800183e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001842:	f000 fcc9 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001846:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800184a:	f000 fcc5 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800184e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001852:	f000 fcc1 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001856:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800185a:	f000 fcbd 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <EXTI15_10_IRQHandler+0xd8>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	607b      	str	r3, [r7, #4]
    uint8_t s = (uint8_t)(
        ((!!(idr & B1_Pin)) << BUT1) |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf14      	ite	ne
 800186e:	2301      	movne	r3, #1
 8001870:	2300      	moveq	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	b25a      	sxtb	r2, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf14      	ite	ne
 8001880:	2301      	movne	r3, #1
 8001882:	2300      	moveq	r3, #0
 8001884:	b2db      	uxtb	r3, r3
        ((!!(idr & B1_Pin)) << BUT1) |
 8001886:	b25b      	sxtb	r3, r3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	b25b      	sxtb	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b25a      	sxtb	r2, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b25a      	sxtb	r2, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	b25a      	sxtb	r2, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b25a      	sxtb	r2, r3
        ((!!(idr & B6_Pin)) << BUT6)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	015b      	lsls	r3, r3, #5
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b25b      	sxtb	r3, r3
    uint8_t s = (uint8_t)(
 80018f8:	70fb      	strb	r3, [r7, #3]
    );
    buttonState = s;
 80018fa:	4a04      	ldr	r2, [pc, #16]	@ (800190c <EXTI15_10_IRQHandler+0xdc>)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	7013      	strb	r3, [r2, #0]
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010c00 	.word	0x40010c00
 800190c:	20000056 	.word	0x20000056

08001910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff fff8 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480b      	ldr	r0, [pc, #44]	@ (8001950 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001922:	490c      	ldr	r1, [pc, #48]	@ (8001954 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001924:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001938:	4c09      	ldr	r4, [pc, #36]	@ (8001960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001946:	f001 fd43 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194a:	f7ff fa5f 	bl	8000e0c <main>
  bx lr
 800194e:	4770      	bx	lr
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001958:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 800195c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001960:	2000010c 	.word	0x2000010c

08001964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_IRQHandler>

08001966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f944 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001970:	200f      	movs	r0, #15
 8001972:	f000 f805 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001976:	f7ff fd77 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f95f 	bl	8001c62 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f927 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x1c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	@ (8001a00 <HAL_IncTick+0x20>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a03      	ldr	r2, [pc, #12]	@ (8001a00 <HAL_IncTick+0x20>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000108 	.word	0x20000108

08001a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b02      	ldr	r3, [pc, #8]	@ (8001a14 <HAL_GetTick+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000108 	.word	0x20000108

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff fff0 	bl	8001a04 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffe0 	bl	8001a04 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008

08001a60 <__NVIC_SetPriorityGrouping>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4906      	ldr	r1, [pc, #24]	@ (8001af8 <__NVIC_EnableIRQ+0x34>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	@ (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff90 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff2d 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff42 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff90 	bl	8001b50 <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5f 	bl	8001afc <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff35 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffa2 	bl	8001bb4 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e014      	b.n	8001cb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fc1d 	bl	80014dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e046      	b.n	8001d60 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	795b      	ldrb	r3, [r3, #5]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_DAC_Start+0x20>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e040      	b.n	8001d60 <HAL_DAC_Start+0xa2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10f      	bne.n	8001d28 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001d12:	2b3c      	cmp	r3, #60	@ 0x3c
 8001d14:	d11d      	bne.n	8001d52 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	e014      	b.n	8001d52 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	213c      	movs	r1, #60	@ 0x3c
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d107      	bne.n	8001d52 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0202 	orr.w	r2, r2, #2
 8001d50:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e015      	b.n	8001db2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	3308      	adds	r3, #8
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e004      	b.n	8001da8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3314      	adds	r3, #20
 8001da6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	461a      	mov	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_DAC_ConfigChannel+0x1c>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e042      	b.n	8001e62 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	795b      	ldrb	r3, [r3, #5]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_DAC_ConfigChannel+0x2c>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e03c      	b.n	8001e62 <HAL_DAC_ConfigChannel+0xa6>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2202      	movs	r2, #2
 8001df2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	22c0      	movs	r2, #192	@ 0xc0
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b08b      	sub	sp, #44	@ 0x2c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7e:	e169      	b.n	8002154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e80:	2201      	movs	r2, #1
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8158 	bne.w	800214e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a9a      	ldr	r2, [pc, #616]	@ (800210c <HAL_GPIO_Init+0x2a0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d05e      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a98      	ldr	r2, [pc, #608]	@ (800210c <HAL_GPIO_Init+0x2a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d875      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eae:	4a98      	ldr	r2, [pc, #608]	@ (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d058      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a96      	ldr	r2, [pc, #600]	@ (8002110 <HAL_GPIO_Init+0x2a4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d86f      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001eba:	4a96      	ldr	r2, [pc, #600]	@ (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d052      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ec0:	4a94      	ldr	r2, [pc, #592]	@ (8002114 <HAL_GPIO_Init+0x2a8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d869      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ec6:	4a94      	ldr	r2, [pc, #592]	@ (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d04c      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ecc:	4a92      	ldr	r2, [pc, #584]	@ (8002118 <HAL_GPIO_Init+0x2ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d863      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ed2:	4a92      	ldr	r2, [pc, #584]	@ (800211c <HAL_GPIO_Init+0x2b0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d046      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a90      	ldr	r2, [pc, #576]	@ (800211c <HAL_GPIO_Init+0x2b0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d85d      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ede:	2b12      	cmp	r3, #18
 8001ee0:	d82a      	bhi.n	8001f38 <HAL_GPIO_Init+0xcc>
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d859      	bhi.n	8001f9a <HAL_GPIO_Init+0x12e>
 8001ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <HAL_GPIO_Init+0x80>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f41 	.word	0x08001f41
 8001ef4:	08001f53 	.word	0x08001f53
 8001ef8:	08001f95 	.word	0x08001f95
 8001efc:	08001f9b 	.word	0x08001f9b
 8001f00:	08001f9b 	.word	0x08001f9b
 8001f04:	08001f9b 	.word	0x08001f9b
 8001f08:	08001f9b 	.word	0x08001f9b
 8001f0c:	08001f9b 	.word	0x08001f9b
 8001f10:	08001f9b 	.word	0x08001f9b
 8001f14:	08001f9b 	.word	0x08001f9b
 8001f18:	08001f9b 	.word	0x08001f9b
 8001f1c:	08001f9b 	.word	0x08001f9b
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f9b 	.word	0x08001f9b
 8001f28:	08001f9b 	.word	0x08001f9b
 8001f2c:	08001f9b 	.word	0x08001f9b
 8001f30:	08001f49 	.word	0x08001f49
 8001f34:	08001f5d 	.word	0x08001f5d
 8001f38:	4a79      	ldr	r2, [pc, #484]	@ (8002120 <HAL_GPIO_Init+0x2b4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f3e:	e02c      	b.n	8001f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e029      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e024      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	3308      	adds	r3, #8
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e01f      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	330c      	adds	r3, #12
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e01a      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e013      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	611a      	str	r2, [r3, #16]
          break;
 8001f86:	e009      	b.n	8001f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f88:	2308      	movs	r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	615a      	str	r2, [r3, #20]
          break;
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e000      	b.n	8001f9c <HAL_GPIO_Init+0x130>
          break;
 8001f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	@ 0xff
 8001fa0:	d801      	bhi.n	8001fa6 <HAL_GPIO_Init+0x13a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	e001      	b.n	8001faa <HAL_GPIO_Init+0x13e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d802      	bhi.n	8001fb8 <HAL_GPIO_Init+0x14c>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x152>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	3b08      	subs	r3, #8
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	401a      	ands	r2, r3
 8001fd0:	6a39      	ldr	r1, [r7, #32]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80b1 	beq.w	800214e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fec:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_GPIO_Init+0x2b8>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002004:	4a48      	ldr	r2, [pc, #288]	@ (8002128 <HAL_GPIO_Init+0x2bc>)
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a40      	ldr	r2, [pc, #256]	@ (800212c <HAL_GPIO_Init+0x2c0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_Init+0x1ec>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3f      	ldr	r2, [pc, #252]	@ (8002130 <HAL_GPIO_Init+0x2c4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1e8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3e      	ldr	r2, [pc, #248]	@ (8002134 <HAL_GPIO_Init+0x2c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1e4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3d      	ldr	r2, [pc, #244]	@ (8002138 <HAL_GPIO_Init+0x2cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1e0>
 8002048:	2303      	movs	r3, #3
 800204a:	e006      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 800204c:	2304      	movs	r3, #4
 800204e:	e004      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002050:	2302      	movs	r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_GPIO_Init+0x1ee>
 8002058:	2300      	movs	r3, #0
 800205a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206a:	492f      	ldr	r1, [pc, #188]	@ (8002128 <HAL_GPIO_Init+0x2bc>)
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	492c      	ldr	r1, [pc, #176]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4928      	ldr	r1, [pc, #160]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020ac:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	4922      	ldr	r1, [pc, #136]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	491e      	ldr	r1, [pc, #120]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4918      	ldr	r1, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
 80020e0:	e006      	b.n	80020f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4914      	ldr	r1, [pc, #80]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d021      	beq.n	8002140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020fc:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	490e      	ldr	r1, [pc, #56]	@ (800213c <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	e021      	b.n	800214e <HAL_GPIO_Init+0x2e2>
 800210a:	bf00      	nop
 800210c:	10320000 	.word	0x10320000
 8002110:	10310000 	.word	0x10310000
 8002114:	10220000 	.word	0x10220000
 8002118:	10210000 	.word	0x10210000
 800211c:	10120000 	.word	0x10120000
 8002120:	10110000 	.word	0x10110000
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	40010800 	.word	0x40010800
 8002130:	40010c00 	.word	0x40010c00
 8002134:	40011000 	.word	0x40011000
 8002138:	40011400 	.word	0x40011400
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <HAL_GPIO_Init+0x304>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae8e 	bne.w	8001e80 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	@ 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43d9      	mvns	r1, r3
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	400b      	ands	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f806 	bl	8002208 <HAL_GPIO_EXTI_Callback>
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e12b      	b.n	8002486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff f986 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800227e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002280:	f000 fcb4 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a81      	ldr	r2, [pc, #516]	@ (8002490 <HAL_I2C_Init+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d807      	bhi.n	80022a0 <HAL_I2C_Init+0x84>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a80      	ldr	r2, [pc, #512]	@ (8002494 <HAL_I2C_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_I2C_Init+0x92>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002498 <HAL_I2C_Init+0x27c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e7      	b.n	8002486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a78      	ldr	r2, [pc, #480]	@ (800249c <HAL_I2C_Init+0x280>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002490 <HAL_I2C_Init+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d802      	bhi.n	80022f0 <HAL_I2C_Init+0xd4>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e009      	b.n	8002304 <HAL_I2C_Init+0xe8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a69      	ldr	r2, [pc, #420]	@ (80024a0 <HAL_I2C_Init+0x284>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	495c      	ldr	r1, [pc, #368]	@ (8002490 <HAL_I2C_Init+0x274>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d819      	bhi.n	8002358 <HAL_I2C_Init+0x13c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e59      	subs	r1, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002338:	400b      	ands	r3, r1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_I2C_Init+0x138>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e59      	subs	r1, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	e051      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002354:	2304      	movs	r3, #4
 8002356:	e04f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_I2C_Init+0x168>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e012      	b.n	80023aa <HAL_I2C_Init+0x18e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Init+0x196>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e022      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_I2C_Init+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e58      	subs	r0, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6911      	ldr	r1, [r2, #16]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	000186a0 	.word	0x000186a0
 8002494:	001e847f 	.word	0x001e847f
 8002498:	003d08ff 	.word	0x003d08ff
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e272      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8087 	beq.w	80025d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c4:	4b92      	ldr	r3, [pc, #584]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d00c      	beq.n	80024ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d112      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
 80024dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b89      	ldr	r3, [pc, #548]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d06c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x12c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d168      	bne.n	80025d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e24c      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x76>
 800250c:	4b80      	ldr	r3, [pc, #512]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a7f      	ldr	r2, [pc, #508]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e02e      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b7b      	ldr	r3, [pc, #492]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7a      	ldr	r2, [pc, #488]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b78      	ldr	r3, [pc, #480]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a77      	ldr	r2, [pc, #476]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0xbc>
 8002546:	4b72      	ldr	r3, [pc, #456]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a71      	ldr	r2, [pc, #452]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6f      	ldr	r3, [pc, #444]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6e      	ldr	r2, [pc, #440]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xd4>
 8002560:	4b6b      	ldr	r3, [pc, #428]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b68      	ldr	r3, [pc, #416]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a67      	ldr	r2, [pc, #412]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fa40 	bl	8001a04 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fa3c 	bl	8001a04 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e200      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xe4>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fa2c 	bl	8001a04 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7ff fa28 	bl	8001a04 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	@ 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1ec      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x10c>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025de:	4b4c      	ldr	r3, [pc, #304]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x18c>
 80025f6:	4b46      	ldr	r3, [pc, #280]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b43      	ldr	r3, [pc, #268]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x176>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1c0      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4939      	ldr	r1, [pc, #228]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	@ (8002714 <HAL_RCC_OscConfig+0x270>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7ff f9e1 	bl	8001a04 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002646:	f7ff f9dd 	bl	8001a04 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1a1      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4927      	ldr	r1, [pc, #156]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <HAL_RCC_OscConfig+0x270>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f9c0 	bl	8001a04 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7ff f9bc 	bl	8001a04 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e180      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d03a      	beq.n	8002728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7ff f9a0 	bl	8001a04 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f99c 	bl	8001a04 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e160      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f000 fabc 	bl	8002c64 <RCC_Delay>
 80026ec:	e01c      	b.n	8002728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RCC_OscConfig+0x274>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7ff f986 	bl	8001a04 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fa:	e00f      	b.n	800271c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fc:	f7ff f982 	bl	8001a04 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d908      	bls.n	800271c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e146      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	42420000 	.word	0x42420000
 8002718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b92      	ldr	r3, [pc, #584]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e9      	bne.n	80026fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80a6 	beq.w	8002882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b8b      	ldr	r3, [pc, #556]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10d      	bne.n	8002762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b88      	ldr	r3, [pc, #544]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a87      	ldr	r2, [pc, #540]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]
 8002752:	4b85      	ldr	r3, [pc, #532]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b82      	ldr	r3, [pc, #520]	@ (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276e:	4b7f      	ldr	r3, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277a:	f7ff f943 	bl	8001a04 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002782:	f7ff f93f 	bl	8001a04 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	@ 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e103      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b75      	ldr	r3, [pc, #468]	@ (800296c <HAL_RCC_OscConfig+0x4c8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x312>
 80027a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	e02d      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027be:	4b6a      	ldr	r3, [pc, #424]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a69      	ldr	r2, [pc, #420]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	4b67      	ldr	r3, [pc, #412]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a66      	ldr	r2, [pc, #408]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6213      	str	r3, [r2, #32]
 80027d6:	e01c      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d10c      	bne.n	80027fa <HAL_RCC_OscConfig+0x356>
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a60      	ldr	r2, [pc, #384]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0304 	orr.w	r3, r3, #4
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e00b      	b.n	8002812 <HAL_RCC_OscConfig+0x36e>
 80027fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6213      	str	r3, [r2, #32]
 8002806:	4b58      	ldr	r3, [pc, #352]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	4a57      	ldr	r2, [pc, #348]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d015      	beq.n	8002846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff f8f3 	bl	8001a04 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7ff f8ef 	bl	8001a04 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0b1      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	4b4b      	ldr	r3, [pc, #300]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <HAL_RCC_OscConfig+0x37e>
 8002844:	e014      	b.n	8002870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff f8dd 	bl	8001a04 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7ff f8d9 	bl	8001a04 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e09b      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ee      	bne.n	800284e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002876:	4b3c      	ldr	r3, [pc, #240]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8087 	beq.w	800299a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800288c:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b08      	cmp	r3, #8
 8002896:	d061      	beq.n	800295c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d146      	bne.n	800292e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <HAL_RCC_OscConfig+0x4cc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff f8ad 	bl	8001a04 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ae:	f7ff f8a9 	bl	8001a04 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e06d      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c0:	4b29      	ldr	r3, [pc, #164]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d4:	d108      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f023 020f 	bic.w	r2, r3, #15
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4921      	ldr	r1, [pc, #132]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a19      	ldr	r1, [r3, #32]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	430b      	orrs	r3, r1
 80028fa:	491b      	ldr	r1, [pc, #108]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7ff f87d 	bl	8001a04 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290e:	f7ff f879 	bl	8001a04 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e03d      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x46a>
 800292c:	e035      	b.n	800299a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_OscConfig+0x4cc>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f866 	bl	8001a04 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7ff f862 	bl	8001a04 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e026      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x498>
 800295a:	e01e      	b.n	800299a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e019      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
 8002968:	40021000 	.word	0x40021000
 800296c:	40007000 	.word	0x40007000
 8002970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_OscConfig+0x500>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a0      	b.n	8002afe <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b46      	ldr	r3, [pc, #280]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a45      	ldr	r2, [pc, #276]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 80029f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b43      	ldr	r3, [pc, #268]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4940      	ldr	r1, [pc, #256]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d040      	beq.n	8002a98 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e067      	b.n	8002afe <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a36:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e05b      	b.n	8002afe <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	4b30      	ldr	r3, [pc, #192]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e053      	b.n	8002afe <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a56:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 0203 	bic.w	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4929      	ldr	r1, [pc, #164]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a68:	f7fe ffcc 	bl	8001a04 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	e00a      	b.n	8002a86 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a70:	f7fe ffc8 	bl	8001a04 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03b      	b.n	8002afe <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 020c 	and.w	r2, r3, #12
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d1eb      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4915      	ldr	r1, [pc, #84]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ac2:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490d      	ldr	r1, [pc, #52]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad6:	f000 f82b 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_RCC_ClockConfig+0x160>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4909      	ldr	r1, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x164>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <HAL_RCC_ClockConfig+0x168>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <HAL_RCC_ClockConfig+0x16c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe ff42 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08003460 	.word	0x08003460
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_EnableCSS+0x14>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	4242004c 	.word	0x4242004c

08002b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x30>
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x36>
 8002b5e:	e026      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b60:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b62:	613b      	str	r3, [r7, #16]
      break;
 8002b64:	e026      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	0c9b      	lsrs	r3, r3, #18
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a16      	ldr	r2, [pc, #88]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00f      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x90>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	fb03 f202 	mul.w	r2, r3, r2
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e004      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	613b      	str	r3, [r7, #16]
      break;
 8002bac:	e002      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bb0:	613b      	str	r3, [r7, #16]
      break;
 8002bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb4:	693b      	ldr	r3, [r7, #16]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	016e3600 	.word	0x016e3600
 8002bc8:	08003478 	.word	0x08003478
 8002bcc:	08003488 	.word	0x08003488
 8002bd0:	003d0900 	.word	0x003d0900
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b02      	ldr	r3, [pc, #8]	@ (8002be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	f7ff fff2 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	@ (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08003470 	.word	0x08003470

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c18:	f7ff ffde 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0adb      	lsrs	r3, r3, #11
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	@ (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08003470 	.word	0x08003470

08002c3c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d104      	bne.n	8002c56 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c4c:	f000 f828 	bl	8002ca0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c50:	4b03      	ldr	r3, [pc, #12]	@ (8002c60 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	701a      	strb	r2, [r3, #0]
  }
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	4002100a 	.word	0x4002100a

08002c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <RCC_Delay+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <RCC_Delay+0x38>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c80:	bf00      	nop
  }
  while (Delay --);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	60fa      	str	r2, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <RCC_Delay+0x1c>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d07d      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ccc:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	4b44      	ldr	r3, [pc, #272]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	4a43      	ldr	r2, [pc, #268]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	61d3      	str	r3, [r2, #28]
 8002ce4:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d118      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a3a      	ldr	r2, [pc, #232]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fe7a 	bl	8001a04 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fe fe76 	bl	8001a04 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e05e      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d26:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d32:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d027      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d50:	4b26      	ldr	r3, [pc, #152]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d60:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d66:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fe45 	bl	8001a04 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fe41 	bl	8001a04 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e027      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	490f      	ldr	r1, [pc, #60]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4903      	ldr	r1, [pc, #12]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42420440 	.word	0x42420440

08002df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e042      	b.n	8002e90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe fbe8 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	@ 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f82b 	bl	8002e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002ed8:	f023 030c 	bic.w	r3, r3, #12
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a55      	ldr	r2, [pc, #340]	@ (8003058 <UART_SetConfig+0x1c0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d103      	bne.n	8002f0e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f06:	f7ff fe85 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	e002      	b.n	8002f14 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f0e:	f7ff fe6d 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8002f12:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f1c:	d14c      	bne.n	8002fb8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a49      	ldr	r2, [pc, #292]	@ (800305c <UART_SetConfig+0x1c4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	0119      	lsls	r1, r3, #4
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	4b41      	ldr	r3, [pc, #260]	@ (800305c <UART_SetConfig+0x1c4>)
 8002f56:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2064      	movs	r0, #100	@ 0x64
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	3332      	adds	r3, #50	@ 0x32
 8002f68:	4a3c      	ldr	r2, [pc, #240]	@ (800305c <UART_SetConfig+0x1c4>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f76:	4419      	add	r1, r3
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009a      	lsls	r2, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8e:	4b33      	ldr	r3, [pc, #204]	@ (800305c <UART_SetConfig+0x1c4>)
 8002f90:	fba3 0302 	umull	r0, r3, r3, r2
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	2064      	movs	r0, #100	@ 0x64
 8002f98:	fb00 f303 	mul.w	r3, r0, r3
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	3332      	adds	r3, #50	@ 0x32
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800305c <UART_SetConfig+0x1c4>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	f003 0207 	and.w	r2, r3, #7
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	440a      	add	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8002fb6:	e04a      	b.n	800304e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009a      	lsls	r2, r3, #2
 8002fc2:	441a      	add	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <UART_SetConfig+0x1c4>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	0119      	lsls	r1, r3, #4
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	009a      	lsls	r2, r3, #2
 8002fe2:	441a      	add	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fee:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <UART_SetConfig+0x1c4>)
 8002ff0:	fba3 0302 	umull	r0, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	2064      	movs	r0, #100	@ 0x64
 8002ff8:	fb00 f303 	mul.w	r3, r0, r3
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	3332      	adds	r3, #50	@ 0x32
 8003002:	4a16      	ldr	r2, [pc, #88]	@ (800305c <UART_SetConfig+0x1c4>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800300e:	4419      	add	r1, r3
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fbb2 f2f3 	udiv	r2, r2, r3
 8003026:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <UART_SetConfig+0x1c4>)
 8003028:	fba3 0302 	umull	r0, r3, r3, r2
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	2064      	movs	r0, #100	@ 0x64
 8003030:	fb00 f303 	mul.w	r3, r0, r3
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	3332      	adds	r3, #50	@ 0x32
 800303a:	4a08      	ldr	r2, [pc, #32]	@ (800305c <UART_SetConfig+0x1c4>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	440a      	add	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40013800 	.word	0x40013800
 800305c:	51eb851f 	.word	0x51eb851f

08003060 <LL_ADC_REG_SetSequencerLength>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <LL_ADC_IsEnabled>:
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffe4 	bl	8003084 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d112      	bne.n	80030e8 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	e001      	b.n	80030ec <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffbd 	bl	8003084 <LL_ADC_IsEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d131      	bne.n	8003174 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	430b      	orrs	r3, r1
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	e008      	b.n	8003144 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 800314c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	6811      	ldr	r1, [r2, #0]
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	68d2      	ldr	r2, [r2, #12]
 8003158:	4311      	orrs	r1, r2
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	430a      	orrs	r2, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff77 	bl	8003060 <LL_ADC_REG_SetSequencerLength>
 8003172:	e001      	b.n	8003178 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003182:	b490      	push	{r4, r7}
 8003184:	b088      	sub	sp, #32
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0e1b      	lsrs	r3, r3, #24
 8003196:	4413      	add	r3, r2
 8003198:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	613b      	str	r3, [r7, #16]
  return result;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	210f      	movs	r1, #15
 80031b4:	fa01 f303 	lsl.w	r3, r1, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	401a      	ands	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	61bb      	str	r3, [r7, #24]
  return result;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	4313      	orrs	r3, r2
 80031da:	6023      	str	r3, [r4, #0]
}
 80031dc:	bf00      	nop
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc90      	pop	{r4, r7}
 80031e4:	4770      	bx	lr

080031e6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80031e6:	b490      	push	{r4, r7}
 80031e8:	b088      	sub	sp, #32
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	4413      	add	r3, r2
 80031fc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	613b      	str	r3, [r7, #16]
  return result;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	2103      	movs	r1, #3
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	61bb      	str	r3, [r7, #24]
  return result;
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8003240:	bf00      	nop
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bc90      	pop	{r4, r7}
 8003248:	4770      	bx	lr

0800324a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 800324a:	b490      	push	{r4, r7}
 800324c:	b088      	sub	sp, #32
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	461a      	mov	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	4413      	add	r3, r2
 8003260:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	613b      	str	r3, [r7, #16]
  return result;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	2104      	movs	r1, #4
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	61bb      	str	r3, [r7, #24]
  return result;
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80032a4:	bf00      	nop
 80032a6:	3720      	adds	r7, #32
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc90      	pop	{r4, r7}
 80032ac:	4770      	bx	lr

080032ae <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	43db      	mvns	r3, r3
 80032c4:	401a      	ands	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	613b      	str	r3, [r7, #16]
  return result;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	408b      	lsls	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	60fb      	str	r3, [r7, #12]
  return result;
 8003312:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800331c:	e044      	b.n	80033a8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800331e:	2201      	movs	r2, #1
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	409a      	lsls	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d03a      	beq.n	80033a2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b07      	cmp	r3, #7
 8003330:	d806      	bhi.n	8003340 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003332:	f240 1201 	movw	r2, #257	@ 0x101
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e008      	b.n	8003352 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3b08      	subs	r3, #8
 8003344:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003350:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d106      	bne.n	8003368 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	461a      	mov	r2, r3
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ffa3 	bl	80032ae <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	461a      	mov	r2, r3
 800336e:	69b9      	ldr	r1, [r7, #24]
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff06 	bl	8003182 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <LL_GPIO_Init+0x94>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b09      	cmp	r3, #9
 8003384:	d10d      	bne.n	80033a2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	461a      	mov	r2, r3
 800338c:	69b9      	ldr	r1, [r7, #24]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff29 	bl	80031e6 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	461a      	mov	r2, r3
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff54 	bl	800324a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1b4      	bne.n	800331e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <memset>:
 80033be:	4603      	mov	r3, r0
 80033c0:	4402      	add	r2, r0
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d100      	bne.n	80033c8 <memset+0xa>
 80033c6:	4770      	bx	lr
 80033c8:	f803 1b01 	strb.w	r1, [r3], #1
 80033cc:	e7f9      	b.n	80033c2 <memset+0x4>
	...

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2600      	movs	r6, #0
 80033d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	@ (800340c <__libc_init_array+0x3c>)
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	f000 f81a 	bl	8003418 <_init>
 80033e4:	2600      	movs	r6, #0
 80033e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003414 <__libc_init_array+0x44>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08003498 	.word	0x08003498
 800340c:	08003498 	.word	0x08003498
 8003410:	08003498 	.word	0x08003498
 8003414:	0800349c 	.word	0x0800349c

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
