
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d34  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08005f08  08005f08  00006f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e8  080065e8  00008114  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080065e8  080065e8  00008114  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080065e8  080065e8  00008114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  080065f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000118  08006704  00008118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08006704  0000883c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc14  00000000  00000000  0000813d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003493  00000000  00000000  00023d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e6ae  00000000  00000000  000271e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed9  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152af  00000000  00000000  00037711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e612  00000000  00000000  0004c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bb68  00000000  00000000  0006afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e6b3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ec8  00000000  00000000  000e6b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000e9a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005eec 	.word	0x08005eec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	08005eec 	.word	0x08005eec

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <adc_init>:
uint8_t temp;

int16_t adcGain[ADC1_CHANNEL_COUNT + 3];

void adc_init(void)
{
 8000b28:	b082      	sub	sp, #8
	adcGain[listVAC]   = 9100;
 8000b2a:	f240 1334 	movw	r3, #308	@ 0x134
 8000b2e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b32:	f242 328c 	movw	r2, #9100	@ 0x238c
 8000b36:	801a      	strh	r2, [r3, #0]
	adcGain[listTEMP]  = Q15(1);
 8000b38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b3c:	805a      	strh	r2, [r3, #2]
	adcGain[listIDC]   = 2500;
 8000b3e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b42:	8099      	strh	r1, [r3, #4]
	adcGain[listVBAT1] = 2500;
 8000b44:	80d9      	strh	r1, [r3, #6]
	adcGain[listVDC1]  = Q15(1);
 8000b46:	811a      	strh	r2, [r3, #8]
	adcGain[listVDC2]  = Q15(1);
 8000b48:	815a      	strh	r2, [r3, #10]
	adcGain[listIDC2]  = 15000;
 8000b4a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000b4e:	819a      	strh	r2, [r3, #12]
	adcGain[listIDC2 + 1]  = 4000;
 8000b50:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000b54:	81da      	strh	r2, [r3, #14]
	adcGain[listIDC2 + 2]  = 3300;
 8000b56:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000b5a:	821a      	strh	r2, [r3, #16]
	adcGain[listIDC2 + 3]  = 2575;
 8000b5c:	f640 220f 	movw	r2, #2575	@ 0xa0f
 8000b60:	825a      	strh	r2, [r3, #18]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b62:	2300      	movs	r3, #0
 8000b64:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	609a      	str	r2, [r3, #8]
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000b70:	f242 424c 	movw	r2, #9292	@ 0x244c
 8000b74:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8000b78:	611a      	str	r2, [r3, #16]

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
    LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)adc1Buffer);
 8000b7a:	f240 5264 	movw	r2, #1380	@ 0x564
 8000b7e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000b82:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	f36f 020f 	bfc	r2, #0, #16
 8000b8a:	f042 0207 	orr.w	r2, r2, #7
 8000b8e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b96:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b9e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000baa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bb6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000bc6:	f022 0210 	bic.w	r2, r2, #16
 8000bca:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	f042 0202 	orr.w	r2, r2, #2
 8000bd2:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000bdc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000be0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	609a      	str	r2, [r3, #8]
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1); // opsiyonel: NVIC enable da yap
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);

    LL_ADC_Enable(ADC1);
    for (volatile int i = 0; i < 1000; i++) { __asm volatile("nop"); } // kısa gecikme
 8000bec:	2300      	movs	r3, #0
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bf6:	da07      	bge.n	8000c08 <adc_init+0xe0>
 8000bf8:	bf00      	nop
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c06:	dbf7      	blt.n	8000bf8 <adc_init+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c08:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000c0c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c16:	609a      	str	r2, [r3, #8]

    LL_ADC_REG_StartConversionSWStart(ADC1);
}
 8000c18:	b002      	add	sp, #8
 8000c1a:	4770      	bx	lr

08000c1c <calculationTemp>:

void calculationTemp(uint16_t adcValue)
{
	if (adcValue < 3124)
 8000c1c:	f640 4333 	movw	r3, #3123	@ 0xc33
 8000c20:	4298      	cmp	r0, r3
 8000c22:	d80c      	bhi.n	8000c3e <calculationTemp+0x22>
	{
		temp = ((adcValue * M1) >>15) + C1;
 8000c24:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000c28:	fb03 f000 	mul.w	r0, r3, r0
 8000c2c:	13c0      	asrs	r0, r0, #15
 8000c2e:	385e      	subs	r0, #94	@ 0x5e
 8000c30:	b2c0      	uxtb	r0, r0
 8000c32:	f240 1348 	movw	r3, #328	@ 0x148
 8000c36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000c3a:	7018      	strb	r0, [r3, #0]
	}
	else
	{
		temp = ((adcValue * M5) >>15) + C5;
	}
}
 8000c3c:	4770      	bx	lr
	else if ( adcValue < 3289)
 8000c3e:	f640 43d8 	movw	r3, #3288	@ 0xcd8
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d807      	bhi.n	8000c56 <calculationTemp+0x3a>
		temp = ((adcValue * M2) >>15) + C2;
 8000c46:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8000c4a:	fb03 f000 	mul.w	r0, r3, r0
 8000c4e:	13c0      	asrs	r0, r0, #15
 8000c50:	381f      	subs	r0, #31
 8000c52:	b2c0      	uxtb	r0, r0
 8000c54:	e7ed      	b.n	8000c32 <calculationTemp+0x16>
	else if (adcValue < 3545)
 8000c56:	f640 53d8 	movw	r3, #3544	@ 0xdd8
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d806      	bhi.n	8000c6c <calculationTemp+0x50>
		temp = ((adcValue * M3) >>15) + C3;
 8000c5e:	f240 6366 	movw	r3, #1638	@ 0x666
 8000c62:	fb03 f000 	mul.w	r0, r3, r0
 8000c66:	f3c0 30c7 	ubfx	r0, r0, #15, #8
 8000c6a:	e7e2      	b.n	8000c32 <calculationTemp+0x16>
	else if (adcValue < 3786)
 8000c6c:	f640 63c9 	movw	r3, #3785	@ 0xec9
 8000c70:	4298      	cmp	r0, r3
 8000c72:	d807      	bhi.n	8000c84 <calculationTemp+0x68>
		temp = ((adcValue * M4) >>15) + C4;
 8000c74:	f240 531e 	movw	r3, #1310	@ 0x51e
 8000c78:	fb03 f000 	mul.w	r0, r3, r0
 8000c7c:	13c0      	asrs	r0, r0, #15
 8000c7e:	384b      	subs	r0, #75	@ 0x4b
 8000c80:	b2c0      	uxtb	r0, r0
 8000c82:	e7d6      	b.n	8000c32 <calculationTemp+0x16>
		temp = ((adcValue * M5) >>15) + C5;
 8000c84:	f240 33d7 	movw	r3, #983	@ 0x3d7
 8000c88:	fb03 f000 	mul.w	r0, r3, r0
 8000c8c:	13c0      	asrs	r0, r0, #15
 8000c8e:	3819      	subs	r0, #25
 8000c90:	b2c0      	uxtb	r0, r0
 8000c92:	e7ce      	b.n	8000c32 <calculationTemp+0x16>

08000c94 <lcd_delay_us>:
/**
 * @brief Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK
 * @details This is approximate; HD44780 is tolerant. For safety we overshoot.
 * @param micros Number of microseconds to delay
 */
static void lcd_delay_us(uint16_t micros) {
 8000c94:	b530      	push	{r4, r5, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	4604      	mov	r4, r0
    if (micros >= 1000u) {
 8000c9a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000c9e:	d20f      	bcs.n	8000cc0 <lcd_delay_us+0x2c>
        HAL_Delay(micros / 1000u);
        micros = (uint16_t)(micros % 1000u);
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 8000ca0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000ca4:	00e4      	lsls	r4, r4, #3
 8000ca6:	9401      	str	r4, [sp, #4]
    while (count--) {
 8000ca8:	9b01      	ldr	r3, [sp, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	9201      	str	r2, [sp, #4]
 8000cae:	b12b      	cbz	r3, 8000cbc <lcd_delay_us+0x28>
        __asm volatile ("nop");
 8000cb0:	bf00      	nop
    while (count--) {
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	9201      	str	r2, [sp, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f9      	bne.n	8000cb0 <lcd_delay_us+0x1c>
    }
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd30      	pop	{r4, r5, pc}
        HAL_Delay(micros / 1000u);
 8000cc0:	f644 50d3 	movw	r0, #19923	@ 0x4dd3
 8000cc4:	f2c1 0062 	movt	r0, #4194	@ 0x1062
 8000cc8:	fba0 3004 	umull	r3, r0, r0, r4
 8000ccc:	0985      	lsrs	r5, r0, #6
 8000cce:	4628      	mov	r0, r5
 8000cd0:	f003 fbc1 	bl	8004456 <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd8:	fb03 4415 	mls	r4, r3, r5, r4
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	e7df      	b.n	8000ca0 <lcd_delay_us+0xc>

08000ce0 <lcd_write4>:

/**
 * @brief Write 4-bit nibble to LCD data pins
 * @param nibble 4-bit value to write (lower 4 bits used)
 */
static void lcd_write4(uint8_t nibble) {
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4604      	mov	r4, r0
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ce4:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8000ce8:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000cec:	f000 0201 	and.w	r2, r0, #1
 8000cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f003 fe0d 	bl	8004914 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cfa:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8000cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d02:	4628      	mov	r0, r5
 8000d04:	f003 fe06 	bl	8004914 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d08:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8000d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d10:	4628      	mov	r0, r5
 8000d12:	f003 fdff 	bl	8004914 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d16:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8000d1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f003 fdf8 	bl	8004914 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d24:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d28:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	4620      	mov	r0, r4
 8000d32:	f003 fdef 	bl	8004914 <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff ffac 	bl	8000c94 <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4620      	mov	r0, r4
 8000d42:	f003 fde7 	bl	8004914 <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 8000d46:	2032      	movs	r0, #50	@ 0x32
 8000d48:	f7ff ffa4 	bl	8000c94 <lcd_delay_us>
    lcd_pulse_enable();
}
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}

08000d4e <lcd_send>:
/**
 * @brief Send 8-bit value to LCD (command or data)
 * @param value 8-bit value to send
 * @param is_data 1 for data, 0 for command
 */
static void lcd_send(uint8_t value, uint8_t is_data) {
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d52:	1e0a      	subs	r2, r1, #0
 8000d54:	bf18      	it	ne
 8000d56:	2201      	movne	r2, #1
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000d5e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d62:	f003 fdd7 	bl	8004914 <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 8000d66:	0920      	lsrs	r0, r4, #4
 8000d68:	f7ff ffba 	bl	8000ce0 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 8000d6c:	f004 000f 	and.w	r0, r4, #15
 8000d70:	f7ff ffb6 	bl	8000ce0 <lcd_write4>
}
 8000d74:	bd10      	pop	{r4, pc}

08000d76 <LCD_Backlight>:

/**
 * @brief Control LCD backlight
 * @param on 1 to turn on, 0 to turn off
 */
void LCD_Backlight(uint8_t on) {
 8000d76:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d78:	1e02      	subs	r2, r0, #0
 8000d7a:	bf18      	it	ne
 8000d7c:	2201      	movne	r2, #1
 8000d7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d82:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000d86:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d8a:	f003 fdc3 	bl	8004914 <HAL_GPIO_WritePin>
}
 8000d8e:	bd08      	pop	{r3, pc}

08000d90 <LCD_Init>:

/**
 * @brief Initialize the LCD display
 * @details Performs 4-bit initialization sequence per HD44780 datasheet
 */
void LCD_Init(void) {
 8000d90:	b510      	push	{r4, lr}
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d92:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d96:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f003 fdb8 	bl	8004914 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	4620      	mov	r0, r4
 8000daa:	f003 fdb3 	bl	8004914 <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 8000dae:	2028      	movs	r0, #40	@ 0x28
 8000db0:	f003 fb51 	bl	8004456 <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f7ff ff93 	bl	8000ce0 <lcd_write4>
    HAL_Delay(5);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f003 fb4b 	bl	8004456 <HAL_Delay>
    lcd_write4(0x03);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff ff8d 	bl	8000ce0 <lcd_write4>
    lcd_delay_us(150);
 8000dc6:	2096      	movs	r0, #150	@ 0x96
 8000dc8:	f7ff ff64 	bl	8000c94 <lcd_delay_us>
    lcd_write4(0x03);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f7ff ff87 	bl	8000ce0 <lcd_write4>
    lcd_delay_us(150);
 8000dd2:	2096      	movs	r0, #150	@ 0x96
 8000dd4:	f7ff ff5e 	bl	8000c94 <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff ff81 	bl	8000ce0 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2028      	movs	r0, #40	@ 0x28
 8000de2:	f7ff ffb4 	bl	8000d4e <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2008      	movs	r0, #8
 8000dea:	f7ff ffb0 	bl	8000d4e <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ffac 	bl	8000d4e <lcd_send>
    HAL_Delay(2);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f003 fb2d 	bl	8004456 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f7ff ffa5 	bl	8000d4e <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	200c      	movs	r0, #12
 8000e08:	f7ff ffa1 	bl	8000d4e <lcd_send>
}
 8000e0c:	bd10      	pop	{r4, pc}

08000e0e <LCD_Clear>:

/**
 * @brief Clear the entire LCD display
 */
void LCD_Clear(void) {
 8000e0e:	b508      	push	{r3, lr}
    lcd_send(0x01, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff9b 	bl	8000d4e <lcd_send>
    HAL_Delay(2);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f003 fb1c 	bl	8004456 <HAL_Delay>
}
 8000e1e:	bd08      	pop	{r3, pc}

08000e20 <LCD_SetCursor>:
/**
 * @brief Set cursor position
 * @param col Column position (0-19 for 20x4 display)
 * @param row Row position (0-3 for 20x4 display)
 */
void LCD_SetCursor(uint8_t col, uint8_t row) {
 8000e20:	b508      	push	{r3, lr}
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 8000e22:	f645 732c 	movw	r3, #24364	@ 0x5f2c
 8000e26:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000e2a:	2903      	cmp	r1, #3
 8000e2c:	bf28      	it	cs
 8000e2e:	2103      	movcs	r1, #3
 8000e30:	5c5b      	ldrb	r3, [r3, r1]
 8000e32:	4418      	add	r0, r3
 8000e34:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8000e38:	2100      	movs	r1, #0
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	f7ff ff87 	bl	8000d4e <lcd_send>
}
 8000e40:	bd08      	pop	{r3, pc}

08000e42 <LCD_WriteChar>:

/**
 * @brief Write a single character
 * @param c Character to write
 */
void LCD_WriteChar(char c) {
 8000e42:	b508      	push	{r3, lr}
    lcd_send((uint8_t)c, 1);
 8000e44:	2101      	movs	r1, #1
 8000e46:	f7ff ff82 	bl	8000d4e <lcd_send>
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <LCD_Print>:
/**
 * @brief Print a null-terminated string
 * @param str String to print (NULL-safe)
 */
void LCD_Print(const char *str) {
    if (str == NULL) return;
 8000e4c:	b150      	cbz	r0, 8000e64 <LCD_Print+0x18>
void LCD_Print(const char *str) {
 8000e4e:	b510      	push	{r4, lr}
 8000e50:	4604      	mov	r4, r0
    while (*str) {
 8000e52:	7800      	ldrb	r0, [r0, #0]
 8000e54:	b128      	cbz	r0, 8000e62 <LCD_Print+0x16>
        LCD_WriteChar(*str++);
 8000e56:	f7ff fff4 	bl	8000e42 <LCD_WriteChar>
    while (*str) {
 8000e5a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d1f9      	bne.n	8000e56 <LCD_Print+0xa>
    }
}
 8000e62:	bd10      	pop	{r4, pc}
 8000e64:	4770      	bx	lr

08000e66 <LCD_PrintUInt16>:

/**
 * @brief Print a 16-bit unsigned integer
 * @param value Value to print (0-65535)
 */
void LCD_PrintUInt16(uint16_t value) {
 8000e66:	b500      	push	{lr}
 8000e68:	b083      	sub	sp, #12
    char buf[6]; /* max 65535 */
    int idx = 0;
    
    /* Handle thousands */
    if (value >= 10000) {
 8000e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d963      	bls.n	8000f3a <LCD_PrintUInt16+0xd4>
        buf[idx++] = (char)('0' + (value / 10000));
 8000e72:	f241 7359 	movw	r3, #5977	@ 0x1759
 8000e76:	f2cd 13b7 	movt	r3, #53687	@ 0xd1b7
 8000e7a:	fba3 2300 	umull	r2, r3, r3, r0
 8000e7e:	0b5b      	lsrs	r3, r3, #13
 8000e80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000e84:	f88d 2000 	strb.w	r2, [sp]
        value = (uint16_t)(value % 10000);
 8000e88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e8c:	fb02 0313 	mls	r3, r2, r3, r0
 8000e90:	b298      	uxth	r0, r3
        buf[idx++] = (char)('0' + (value / 10000));
 8000e92:	2301      	movs	r3, #1
    }
    if (value >= 1000) {
 8000e94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e98:	d314      	bcc.n	8000ec4 <LCD_PrintUInt16+0x5e>
        buf[idx++] = (char)('0' + (value / 1000));
 8000e9a:	f103 0208 	add.w	r2, r3, #8
 8000e9e:	eb0d 0102 	add.w	r1, sp, r2
 8000ea2:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8000ea6:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8000eaa:	fba2 c200 	umull	ip, r2, r2, r0
 8000eae:	0992      	lsrs	r2, r2, #6
 8000eb0:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000eb4:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 1000);
 8000eb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ebc:	fb01 0212 	mls	r2, r1, r2, r0
 8000ec0:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 1000));
 8000ec2:	3301      	adds	r3, #1
    }
    if (value >= 100) {
 8000ec4:	2863      	cmp	r0, #99	@ 0x63
 8000ec6:	d913      	bls.n	8000ef0 <LCD_PrintUInt16+0x8a>
        buf[idx++] = (char)('0' + (value / 100));
 8000ec8:	f103 0208 	add.w	r2, r3, #8
 8000ecc:	eb0d 0102 	add.w	r1, sp, r2
 8000ed0:	f248 521f 	movw	r2, #34079	@ 0x851f
 8000ed4:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8000ed8:	fba2 c200 	umull	ip, r2, r2, r0
 8000edc:	0952      	lsrs	r2, r2, #5
 8000ede:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000ee2:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 100);
 8000ee6:	2164      	movs	r1, #100	@ 0x64
 8000ee8:	fb01 0212 	mls	r2, r1, r2, r0
 8000eec:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 100));
 8000eee:	3301      	adds	r3, #1
    }
    if (value >= 10) {
 8000ef0:	2809      	cmp	r0, #9
 8000ef2:	d914      	bls.n	8000f1e <LCD_PrintUInt16+0xb8>
        buf[idx++] = (char)('0' + (value / 10));
 8000ef4:	f103 0208 	add.w	r2, r3, #8
 8000ef8:	eb0d 0102 	add.w	r1, sp, r2
 8000efc:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8000f00:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8000f04:	fba2 c200 	umull	ip, r2, r2, r0
 8000f08:	08d2      	lsrs	r2, r2, #3
 8000f0a:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000f0e:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 10);
 8000f12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f16:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8000f1a:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 10));
 8000f1c:	3301      	adds	r3, #1
    }
    buf[idx++] = (char)('0' + value);
 8000f1e:	3308      	adds	r3, #8
 8000f20:	446b      	add	r3, sp
 8000f22:	3030      	adds	r0, #48	@ 0x30
 8000f24:	f803 0c08 	strb.w	r0, [r3, #-8]
    buf[idx] = '\0';
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f803 2c07 	strb.w	r2, [r3, #-7]
    LCD_Print(buf);
 8000f2e:	4668      	mov	r0, sp
 8000f30:	f7ff ff8c 	bl	8000e4c <LCD_Print>
}
 8000f34:	b003      	add	sp, #12
 8000f36:	f85d fb04 	ldr.w	pc, [sp], #4
    int idx = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e7aa      	b.n	8000e94 <LCD_PrintUInt16+0x2e>

08000f3e <LCD_PrintUInt16_1dp>:
/**
 * @brief Print a 16-bit value with 1 decimal place
 * @details Input value is multiplied by 10, output shows 1 decimal place
 * @param value_times_10 Value multiplied by 10 (e.g., 194 for 19.4)
 */
void LCD_PrintUInt16_1dp(uint16_t value_times_10) {
 8000f3e:	b538      	push	{r3, r4, r5, lr}
 8000f40:	4604      	mov	r4, r0
    uint16_t integer = value_times_10 / 10u;
 8000f42:	f64c 40cd 	movw	r0, #52429	@ 0xcccd
 8000f46:	f6cc 40cc 	movt	r0, #52428	@ 0xcccc
 8000f4a:	fba0 3004 	umull	r3, r0, r0, r4
 8000f4e:	08c5      	lsrs	r5, r0, #3
    uint16_t frac = value_times_10 % 10u;
    /* Pad to fixed width 4: " 9.0" or "19.4" */

    LCD_PrintUInt16(integer);
 8000f50:	4628      	mov	r0, r5
 8000f52:	f7ff ff88 	bl	8000e66 <LCD_PrintUInt16>
    LCD_WriteChar('.');
 8000f56:	202e      	movs	r0, #46	@ 0x2e
 8000f58:	f7ff ff73 	bl	8000e42 <LCD_WriteChar>
    uint16_t frac = value_times_10 % 10u;
 8000f5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f60:	eba4 0045 	sub.w	r0, r4, r5, lsl #1
    LCD_WriteChar((char)('0' + frac));
 8000f64:	3030      	adds	r0, #48	@ 0x30
 8000f66:	b2c0      	uxtb	r0, r0
 8000f68:	f7ff ff6b 	bl	8000e42 <LCD_WriteChar>
}
 8000f6c:	bd38      	pop	{r3, r4, r5, pc}

08000f6e <ui_assign_language>:
{
    return UI_STR_TABLE[lcdLangId][id];
}

static void ui_assign_language(void)
{
 8000f6e:	b530      	push	{r4, r5, lr}
    const char * const * T = UI_STR_TABLE[lcdLangId];
 8000f70:	f240 031d 	movw	r3, #29
 8000f74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	f246 421c 	movw	r2, #25628	@ 0x641c
 8000f7e:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    STR_BATV     = T[UI_LBL_BATV];
 8000f86:	f240 518c 	movw	r1, #1420	@ 0x58c
 8000f8a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000f8e:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8000f90:	6008      	str	r0, [r1, #0]
    STR_CAPACITY = T[UI_LBL_CAPACITY];
 8000f92:	f240 5188 	movw	r1, #1416	@ 0x588
 8000f96:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000f9a:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 8000f9c:	6008      	str	r0, [r1, #0]
    STR_COUNT    = T[UI_LBL_COUNT];
 8000f9e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
    if (lcdLangId == 0) {
 8000fa0:	f246 526c 	movw	r2, #25964	@ 0x656c
 8000fa4:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000fa8:	f246 515c 	movw	r1, #25948	@ 0x655c
 8000fac:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf08      	it	eq
 8000fb4:	4611      	moveq	r1, r2
 8000fb6:	f645 7230 	movw	r2, #24368	@ 0x5f30
 8000fba:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000fbe:	f645 7038 	movw	r0, #24376	@ 0x5f38
 8000fc2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf18      	it	ne
 8000fca:	4602      	movne	r2, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf0b      	itete	eq
 8000fd0:	2449      	moveq	r4, #73	@ 0x49
 8000fd2:	2441      	movne	r4, #65	@ 0x41
 8000fd4:	f04f 0e0f 	moveq.w	lr, #15
 8000fd8:	f04f 0e0e 	movne.w	lr, #14
 8000fdc:	bf0c      	ite	eq
 8000fde:	f04f 0c0b 	moveq.w	ip, #11
 8000fe2:	f04f 0c0c 	movne.w	ip, #12
    STR_COUNT    = T[UI_LBL_COUNT];
 8000fe6:	f240 5384 	movw	r3, #1412	@ 0x584
 8000fea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fee:	601d      	str	r5, [r3, #0]
        STR_LOAD_BORDER_TOP    = strEN_LOADING_LINE0;
 8000ff0:	f240 5080 	movw	r0, #1408	@ 0x580
 8000ff4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000ff8:	f645 733c 	movw	r3, #24380	@ 0x5f3c
 8000ffc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001000:	6003      	str	r3, [r0, #0]
        STR_LOAD_BORDER_BOTTOM = strEN_LOADING_LINE3;
 8001002:	f240 507c 	movw	r0, #1404	@ 0x57c
 8001006:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800100a:	6003      	str	r3, [r0, #0]
        STR_LABELS_SHORT       = LABELS_EN_SHORT;
 800100c:	f240 5378 	movw	r3, #1400	@ 0x578
 8001010:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001014:	6019      	str	r1, [r3, #0]
        STR_MENU_ITEMS         = MENU_ITEMS_EN;
        STR_LANG_VAL           = "EN";
 8001016:	f240 5374 	movw	r3, #1396	@ 0x574
 800101a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800101e:	601a      	str	r2, [r3, #0]
        CH_CURR                = 'I';
 8001020:	f240 0302 	movw	r3, #2
 8001024:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001028:	701c      	strb	r4, [r3, #0]
        STATUS_COL             = 15u;
 800102a:	f240 0301 	movw	r3, #1
 800102e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001032:	f883 e000 	strb.w	lr, [r3]
        TEMP_COL               = 11u;
 8001036:	f240 0300 	movw	r3, #0
 800103a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800103e:	f883 c000 	strb.w	ip, [r3]
        STR_LANG_VAL           = "TR";
        CH_CURR                = 'A';
        STATUS_COL             = 14u;
        TEMP_COL               = 12u;
    }
}
 8001042:	bd30      	pop	{r4, r5, pc}

08001044 <lcd_menu_set_language>:

/**
 * @brief Set the display language
 * @param lang_id Language ID (0: English, 1: Turkish)
 */
void lcd_menu_set_language(uint8_t lang_id) {
 8001044:	b508      	push	{r3, lr}
    if (lang_id != 0u)
 8001046:	f240 031d 	movw	r3, #29
 800104a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800104e:	3800      	subs	r0, #0
 8001050:	bf18      	it	ne
 8001052:	2001      	movne	r0, #1
 8001054:	7018      	strb	r0, [r3, #0]
    }
    else
    {
        lcdLangId = 0u;
    }
    ui_assign_language();
 8001056:	f7ff ff8a 	bl	8000f6e <ui_assign_language>
    LCD_Clear();
 800105a:	f7ff fed8 	bl	8000e0e <LCD_Clear>
}
 800105e:	bd08      	pop	{r3, pc}

08001060 <lcd_handle>:
/**
 * @brief Handle LCD display rendering
 * @details Renders the current page based on pageID and language
 */
void lcd_handle(void)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b08b      	sub	sp, #44	@ 0x2c
    /* Clear once when page changes or explicitly requested */
    if (pageID != prevPageID || uiNeedsClear)
 8001064:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 8001068:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800106c:	f240 031c 	movw	r3, #28
 8001070:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d105      	bne.n	8001088 <lcd_handle+0x28>
 800107c:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 8001080:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b18b      	cbz	r3, 80010ac <lcd_handle+0x4c>
    {
        LCD_Clear();
 8001088:	f7ff fec1 	bl	8000e0e <LCD_Clear>
        prevPageID = pageID;
 800108c:	f240 031c 	movw	r3, #28
 8001090:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001094:	f240 52b5 	movw	r2, #1461	@ 0x5b5
 8001098:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
        uiNeedsClear = 0;
 80010a0:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 80010a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    }

    /* Ensure language strings are assigned even if init wasn't called */
    if (STR_BATV == 0 || STR_CAPACITY == 0 || STR_COUNT == 0)
 80010ac:	f240 538c 	movw	r3, #1420	@ 0x58c
 80010b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	b15b      	cbz	r3, 80010d0 <lcd_handle+0x70>
 80010b8:	f240 5388 	movw	r3, #1416	@ 0x588
 80010bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	b12b      	cbz	r3, 80010d0 <lcd_handle+0x70>
 80010c4:	f240 5384 	movw	r3, #1412	@ 0x584
 80010c8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b90b      	cbnz	r3, 80010d4 <lcd_handle+0x74>
    {
        ui_assign_language();
 80010d0:	f7ff ff4d 	bl	8000f6e <ui_assign_language>
    }

    /* Edit mode is entered with Right press in button_handle; no long-press */

    switch(pageID)
 80010d4:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80010d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b09      	cmp	r3, #9
 80010e0:	f200 81ee 	bhi.w	80014c0 <lcd_handle+0x460>
 80010e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80010e8:	00c0000a 	.word	0x00c0000a
 80010ec:	02a10233 	.word	0x02a10233
 80010f0:	04790422 	.word	0x04790422
 80010f4:	06310518 	.word	0x06310518
 80010f8:	077d06ed 	.word	0x077d06ed
    {
    case PAGE_LOADING:
    {
        /* Dynamic line 2 content per operating mode */
        LCD_SetCursor(0, 0); 
 80010fc:	2100      	movs	r1, #0
 80010fe:	4608      	mov	r0, r1
 8001100:	f7ff fe8e 	bl	8000e20 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_TOP);
 8001104:	f240 5380 	movw	r3, #1408	@ 0x580
 8001108:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f7ff fe9d 	bl	8000e4c <LCD_Print>
        /* Center company name */
        LCD_SetCursor(0, 1);
 8001112:	2101      	movs	r1, #1
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe83 	bl	8000e20 <LCD_SetCursor>
        {
            char line[21];
            const char *name = companyName;
 800111a:	f240 0318 	movw	r3, #24
 800111e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001122:	6819      	ldr	r1, [r3, #0]
            int len = 0; while (name[len] && len < 20) len++;
 8001124:	780b      	ldrb	r3, [r1, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d05c      	beq.n	80011e4 <lcd_handle+0x184>
 800112a:	460b      	mov	r3, r1
 800112c:	2200      	movs	r2, #0
 800112e:	3201      	adds	r2, #1
 8001130:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001134:	b118      	cbz	r0, 800113e <lcd_handle+0xde>
 8001136:	2a14      	cmp	r2, #20
 8001138:	d1f9      	bne.n	800112e <lcd_handle+0xce>
            int pad = (20 - len) / 2;
 800113a:	2300      	movs	r3, #0
 800113c:	e010      	b.n	8001160 <lcd_handle+0x100>
 800113e:	f1c2 0014 	rsb	r0, r2, #20
 8001142:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 8001146:	105b      	asrs	r3, r3, #1
            for (int i=0;i<pad;i++) line[i] = ' ';
 8001148:	2801      	cmp	r0, #1
 800114a:	dd09      	ble.n	8001160 <lcd_handle+0x100>
 800114c:	ac01      	add	r4, sp, #4
 800114e:	2000      	movs	r0, #0
 8001150:	2520      	movs	r5, #32
 8001152:	f804 5b01 	strb.w	r5, [r4], #1
 8001156:	3001      	adds	r0, #1
 8001158:	4298      	cmp	r0, r3
 800115a:	dbfa      	blt.n	8001152 <lcd_handle+0xf2>
            for (int i=0;i<len;i++) line[pad+i] = name[i];
 800115c:	2a00      	cmp	r2, #0
 800115e:	dd0b      	ble.n	8001178 <lcd_handle+0x118>
 8001160:	3901      	subs	r1, #1
 8001162:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001166:	4468      	add	r0, sp
 8001168:	3825      	subs	r0, #37	@ 0x25
 800116a:	188d      	adds	r5, r1, r2
 800116c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001170:	f800 4f01 	strb.w	r4, [r0, #1]!
 8001174:	42a9      	cmp	r1, r5
 8001176:	d1f9      	bne.n	800116c <lcd_handle+0x10c>
            for (int i=pad+len;i<20;i++) line[i] = ' ';
 8001178:	4413      	add	r3, r2
 800117a:	2b13      	cmp	r3, #19
 800117c:	dc09      	bgt.n	8001192 <lcd_handle+0x132>
 800117e:	3328      	adds	r3, #40	@ 0x28
 8001180:	446b      	add	r3, sp
 8001182:	3b25      	subs	r3, #37	@ 0x25
 8001184:	f10d 0117 	add.w	r1, sp, #23
 8001188:	2220      	movs	r2, #32
 800118a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800118e:	4299      	cmp	r1, r3
 8001190:	d1fb      	bne.n	800118a <lcd_handle+0x12a>
            line[20] = '\0';
 8001192:	2400      	movs	r4, #0
 8001194:	f88d 4018 	strb.w	r4, [sp, #24]
            LCD_Print(line);
 8001198:	a801      	add	r0, sp, #4
 800119a:	f7ff fe57 	bl	8000e4c <LCD_Print>
        }
        LCD_SetCursor(0, 2);
 800119e:	2102      	movs	r1, #2
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fe3d 	bl	8000e20 <LCD_SetCursor>
        {
            const char *dev = DEVICE_NAMES_LANG[lcdLangId][operatingMode];
 80011a6:	f240 030c 	movw	r3, #12
 80011aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80011ae:	f240 021d 	movw	r2, #29
 80011b2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80011b6:	7811      	ldrb	r1, [r2, #0]
 80011b8:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 80011bc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            char buf[21];
            int len=0; while (dev[len] && len<20) len++;
 80011ca:	780b      	ldrb	r3, [r1, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d048      	beq.n	8001262 <lcd_handle+0x202>
 80011d0:	460b      	mov	r3, r1
 80011d2:	4622      	mov	r2, r4
 80011d4:	3201      	adds	r2, #1
 80011d6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80011da:	b130      	cbz	r0, 80011ea <lcd_handle+0x18a>
 80011dc:	2a14      	cmp	r2, #20
 80011de:	d1f9      	bne.n	80011d4 <lcd_handle+0x174>
            int pad = (20 - len) / 2;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e013      	b.n	800120c <lcd_handle+0x1ac>
            int len = 0; while (name[len] && len < 20) len++;
 80011e4:	2200      	movs	r2, #0
            int pad = (20 - len) / 2;
 80011e6:	230a      	movs	r3, #10
 80011e8:	e7b0      	b.n	800114c <lcd_handle+0xec>
            int pad = (20 - len) / 2;
 80011ea:	f1c2 0014 	rsb	r0, r2, #20
 80011ee:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80011f2:	105b      	asrs	r3, r3, #1
            for (int i=0;i<pad;i++) buf[i]=' ';
 80011f4:	2801      	cmp	r0, #1
 80011f6:	dd09      	ble.n	800120c <lcd_handle+0x1ac>
 80011f8:	ac01      	add	r4, sp, #4
 80011fa:	2000      	movs	r0, #0
 80011fc:	2520      	movs	r5, #32
 80011fe:	f804 5b01 	strb.w	r5, [r4], #1
 8001202:	3001      	adds	r0, #1
 8001204:	4283      	cmp	r3, r0
 8001206:	dcfa      	bgt.n	80011fe <lcd_handle+0x19e>
            for (int i=0;i<len;i++) buf[pad+i]=dev[i];
 8001208:	2a00      	cmp	r2, #0
 800120a:	dd0b      	ble.n	8001224 <lcd_handle+0x1c4>
 800120c:	3901      	subs	r1, #1
 800120e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001212:	4468      	add	r0, sp
 8001214:	3825      	subs	r0, #37	@ 0x25
 8001216:	188d      	adds	r5, r1, r2
 8001218:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800121c:	f800 4f01 	strb.w	r4, [r0, #1]!
 8001220:	428d      	cmp	r5, r1
 8001222:	d1f9      	bne.n	8001218 <lcd_handle+0x1b8>
            for (int i=pad+len;i<20;i++) buf[i]=' ';
 8001224:	4413      	add	r3, r2
 8001226:	2b13      	cmp	r3, #19
 8001228:	dc09      	bgt.n	800123e <lcd_handle+0x1de>
 800122a:	3328      	adds	r3, #40	@ 0x28
 800122c:	446b      	add	r3, sp
 800122e:	3b25      	subs	r3, #37	@ 0x25
 8001230:	f10d 0117 	add.w	r1, sp, #23
 8001234:	2220      	movs	r2, #32
 8001236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800123a:	428b      	cmp	r3, r1
 800123c:	d1fb      	bne.n	8001236 <lcd_handle+0x1d6>
            buf[20]='\0';
 800123e:	2400      	movs	r4, #0
 8001240:	f88d 4018 	strb.w	r4, [sp, #24]
            LCD_Print(buf);
 8001244:	a801      	add	r0, sp, #4
 8001246:	f7ff fe01 	bl	8000e4c <LCD_Print>
        }
        LCD_SetCursor(0, 3); 
 800124a:	2103      	movs	r1, #3
 800124c:	4620      	mov	r0, r4
 800124e:	f7ff fde7 	bl	8000e20 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_BOTTOM);
 8001252:	f240 537c 	movw	r3, #1404	@ 0x57c
 8001256:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f7ff fdf6 	bl	8000e4c <LCD_Print>
    }
        break;
 8001260:	e12e      	b.n	80014c0 <lcd_handle+0x460>
            int len=0; while (dev[len] && len<20) len++;
 8001262:	2200      	movs	r2, #0
            int pad = (20 - len) / 2;
 8001264:	230a      	movs	r3, #10
 8001266:	e7c7      	b.n	80011f8 <lcd_handle+0x198>

    case PAGE_MAIN: {
        const char * titleShort = TITLE_NAMES_LANG[lcdLangId][operatingMode];
 8001268:	f240 0304 	movw	r3, #4
 800126c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001270:	f240 021d 	movw	r2, #29
 8001274:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001278:	7811      	ldrb	r1, [r2, #0]
 800127a:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 800127e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001288:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        const char * const * labelsShort = STR_LABELS_SHORT;
 800128c:	f240 5378 	movw	r3, #1400	@ 0x578
 8001290:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001294:	681c      	ldr	r4, [r3, #0]

        /* Title (row 0) */
		LCD_SetCursor(0, 0);
 8001296:	2100      	movs	r1, #0
 8001298:	4608      	mov	r0, r1
 800129a:	f7ff fdc1 	bl	8000e20 <LCD_SetCursor>
        /* Compose: COMPANY + space + titleShort (ensure <=20) */
        {
            char line[21];
            int idx = 0;
            const char *a = companyName;
 800129e:	f240 0318 	movw	r3, #24
 80012a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012a6:	6819      	ldr	r1, [r3, #0]
            while (*a && idx < 20) line[idx++] = *a++;
 80012a8:	780a      	ldrb	r2, [r1, #0]
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	f000 8129 	beq.w	8001502 <lcd_handle+0x4a2>
 80012b0:	a801      	add	r0, sp, #4
            int idx = 0;
 80012b2:	2300      	movs	r3, #0
            while (*a && idx < 20) line[idx++] = *a++;
 80012b4:	3301      	adds	r3, #1
 80012b6:	f800 2b01 	strb.w	r2, [r0], #1
 80012ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80012be:	2a00      	cmp	r2, #0
 80012c0:	f000 8100 	beq.w	80014c4 <lcd_handle+0x464>
 80012c4:	2b14      	cmp	r3, #20
 80012c6:	d1f5      	bne.n	80012b4 <lcd_handle+0x254>
            if (idx < 20) line[idx++] = ' ';
            const char *b = titleShort;
            while (*b && idx < 20) line[idx++] = *b++;
 80012c8:	782a      	ldrb	r2, [r5, #0]
 80012ca:	b95a      	cbnz	r2, 80012e4 <lcd_handle+0x284>
            while (idx < 20) line[idx++] = ' ';
 80012cc:	2b13      	cmp	r3, #19
 80012ce:	dc09      	bgt.n	80012e4 <lcd_handle+0x284>
 80012d0:	3328      	adds	r3, #40	@ 0x28
 80012d2:	446b      	add	r3, sp
 80012d4:	3b25      	subs	r3, #37	@ 0x25
 80012d6:	f10d 0117 	add.w	r1, sp, #23
 80012da:	2220      	movs	r2, #32
 80012dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d1fb      	bne.n	80012dc <lcd_handle+0x27c>
            line[20] = '\0';
 80012e4:	2500      	movs	r5, #0
 80012e6:	f88d 5018 	strb.w	r5, [sp, #24]
            LCD_Print(line);
 80012ea:	a801      	add	r0, sp, #4
 80012ec:	f7ff fdae 	bl	8000e4c <LCD_Print>
        }

        /* Row 1 (index 1): Iout / Cikis I */
		LCD_SetCursor(0, 1);
 80012f0:	2101      	movs	r1, #1
 80012f2:	4628      	mov	r0, r5
 80012f4:	f7ff fd94 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(labelsShort[0]);
 80012f8:	6820      	ldr	r0, [r4, #0]
 80012fa:	f7ff fda7 	bl	8000e4c <LCD_Print>
        {
            /* Clear previous numeric+unit area (handle shrinking values) */
            const char *ls0 = labelsShort[0];
 80012fe:	6822      	ldr	r2, [r4, #0]
            uint8_t n0 = 0; while (ls0[n0] && n0 < 20) n0++;
 8001300:	7815      	ldrb	r5, [r2, #0]
 8001302:	b13d      	cbz	r5, 8001314 <lcd_handle+0x2b4>
 8001304:	2301      	movs	r3, #1
 8001306:	b2dd      	uxtb	r5, r3
 8001308:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800130c:	b111      	cbz	r1, 8001314 <lcd_handle+0x2b4>
 800130e:	3301      	adds	r3, #1
 8001310:	2b15      	cmp	r3, #21
 8001312:	d1f8      	bne.n	8001306 <lcd_handle+0x2a6>
            LCD_SetCursor(n0, 1);
 8001314:	2101      	movs	r1, #1
 8001316:	4628      	mov	r0, r5
 8001318:	f7ff fd82 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("       "); /* 7 spaces */
 800131c:	f645 7054 	movw	r0, #24404	@ 0x5f54
 8001320:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001324:	f7ff fd92 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(n0, 1);
 8001328:	2101      	movs	r1, #1
 800132a:	4628      	mov	r0, r5
 800132c:	f7ff fd78 	bl	8000e20 <LCD_SetCursor>
        }
        LCD_PrintUInt16_1dp(adcIDC2);
 8001330:	f240 134a 	movw	r3, #330	@ 0x14a
 8001334:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001338:	8818      	ldrh	r0, [r3, #0]
 800133a:	f7ff fe00 	bl	8000f3e <LCD_PrintUInt16_1dp>
        LCD_WriteChar(CH_CURR);
 800133e:	f240 0302 	movw	r3, #2
 8001342:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001346:	7818      	ldrb	r0, [r3, #0]
 8001348:	f7ff fd7b 	bl	8000e42 <LCD_WriteChar>

        /* Row 2 (index 2): Vout / Cikis V */
		LCD_SetCursor(0, 2);
 800134c:	2102      	movs	r1, #2
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fd66 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(labelsShort[1]);
 8001354:	6860      	ldr	r0, [r4, #4]
 8001356:	f7ff fd79 	bl	8000e4c <LCD_Print>
        {
            /* Clear previous numeric+unit area to avoid artifacts like double 'V' */
            const char *ls1 = labelsShort[1];
 800135a:	6862      	ldr	r2, [r4, #4]
            uint8_t n1 = 0; while (ls1[n1] && n1 < 20) n1++;
 800135c:	7815      	ldrb	r5, [r2, #0]
 800135e:	b13d      	cbz	r5, 8001370 <lcd_handle+0x310>
 8001360:	2301      	movs	r3, #1
 8001362:	b2dd      	uxtb	r5, r3
 8001364:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001368:	b111      	cbz	r1, 8001370 <lcd_handle+0x310>
 800136a:	3301      	adds	r3, #1
 800136c:	2b15      	cmp	r3, #21
 800136e:	d1f8      	bne.n	8001362 <lcd_handle+0x302>
            LCD_SetCursor(n1, 2);
 8001370:	2102      	movs	r1, #2
 8001372:	4628      	mov	r0, r5
 8001374:	f7ff fd54 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("       "); /* 7 spaces */
 8001378:	f645 7054 	movw	r0, #24404	@ 0x5f54
 800137c:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001380:	f7ff fd64 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(n1, 2);
 8001384:	2102      	movs	r1, #2
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fd4a 	bl	8000e20 <LCD_SetCursor>
        }
        LCD_PrintUInt16_1dp(adcVBAT1);
 800138c:	f240 1352 	movw	r3, #338	@ 0x152
 8001390:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001394:	8818      	ldrh	r0, [r3, #0]
 8001396:	f7ff fdd2 	bl	8000f3e <LCD_PrintUInt16_1dp>
        LCD_WriteChar('V');
 800139a:	2056      	movs	r0, #86	@ 0x56
 800139c:	f7ff fd51 	bl	8000e42 <LCD_WriteChar>

        /* Status moved one row down: right side of row 1 */
        {
            LCD_SetCursor(STATUS_COL, 1);
 80013a0:	f240 0301 	movw	r3, #1
 80013a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013a8:	2101      	movs	r1, #1
 80013aa:	7818      	ldrb	r0, [r3, #0]
 80013ac:	f7ff fd38 	bl	8000e20 <LCD_SetCursor>
            if (HAL_GPIO_ReadPin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin) == GPIO_PIN_SET)
 80013b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80013b8:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80013bc:	f003 faa4 	bl	8004908 <HAL_GPIO_ReadPin>
 80013c0:	2801      	cmp	r0, #1
    return UI_STR_TABLE[lcdLangId][id];
 80013c2:	f246 431c 	movw	r3, #25628	@ 0x641c
 80013c6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80013ca:	f240 021d 	movw	r2, #29
 80013ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            {
                LCD_Print(ui_get(UI_STR_OPEN));
 80013d8:	bf0c      	ite	eq
 80013da:	6c58      	ldreq	r0, [r3, #68]	@ 0x44
            }
            else
            {
                LCD_Print(ui_get(UI_STR_CLOSE));
 80013dc:	6c98      	ldrne	r0, [r3, #72]	@ 0x48
 80013de:	f7ff fd35 	bl	8000e4c <LCD_Print>
            }
        }

        /* If charger and output is on, show charge state under the status */
        {
            LCD_SetCursor(STATUS_COL, 2);
 80013e2:	f240 0301 	movw	r3, #1
 80013e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013ea:	2102      	movs	r1, #2
 80013ec:	7818      	ldrb	r0, [r3, #0]
 80013ee:	f7ff fd17 	bl	8000e20 <LCD_SetCursor>
            if (operatingMode == MODE_CHARGER && HAL_GPIO_ReadPin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin) == GPIO_PIN_SET)
 80013f2:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80013f6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b94b      	cbnz	r3, 8001412 <lcd_handle+0x3b2>
 80013fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001402:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001406:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800140a:	f003 fa7d 	bl	8004908 <HAL_GPIO_ReadPin>
 800140e:	2801      	cmp	r0, #1
 8001410:	d079      	beq.n	8001506 <lcd_handle+0x4a6>
                LCD_Print(STAGE_NAMES_LANG[lcdLangId][batInfo.chargeState]);
            }
            else
            {
                /* clear area under status when not applicable */
                LCD_Print("       ");
 8001412:	f645 7054 	movw	r0, #24404	@ 0x5f54
 8001416:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800141a:	f7ff fd17 	bl	8000e4c <LCD_Print>
            }
        }

        /* Row 3: Mains/Sebeke and Temp/Sic split across the line */
		LCD_SetCursor(0, 3);
 800141e:	2103      	movs	r1, #3
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fcfd 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(labelsShort[2]); /* Sebeke/Mains */
 8001426:	68a0      	ldr	r0, [r4, #8]
 8001428:	f7ff fd10 	bl	8000e4c <LCD_Print>
        {
            const char *ls2 = labelsShort[2];
 800142c:	68a2      	ldr	r2, [r4, #8]
            uint8_t n2 = 0; while (ls2[n2] && n2 < 20) n2++;
 800142e:	7815      	ldrb	r5, [r2, #0]
 8001430:	b13d      	cbz	r5, 8001442 <lcd_handle+0x3e2>
 8001432:	2301      	movs	r3, #1
 8001434:	b2dd      	uxtb	r5, r3
 8001436:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800143a:	b111      	cbz	r1, 8001442 <lcd_handle+0x3e2>
 800143c:	3301      	adds	r3, #1
 800143e:	2b15      	cmp	r3, #21
 8001440:	d1f8      	bne.n	8001434 <lcd_handle+0x3d4>
            LCD_SetCursor(n2, 3);
 8001442:	2103      	movs	r1, #3
 8001444:	4628      	mov	r0, r5
 8001446:	f7ff fceb 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("       ");
 800144a:	f645 7054 	movw	r0, #24404	@ 0x5f54
 800144e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001452:	f7ff fcfb 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(n2, 3);
 8001456:	2103      	movs	r1, #3
 8001458:	4628      	mov	r0, r5
 800145a:	f7ff fce1 	bl	8000e20 <LCD_SetCursor>
        }
        LCD_PrintUInt16(adcVAC);
 800145e:	f240 1358 	movw	r3, #344	@ 0x158
 8001462:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001466:	8818      	ldrh	r0, [r3, #0]
 8001468:	f7ff fcfd 	bl	8000e66 <LCD_PrintUInt16>
        LCD_WriteChar('V');
 800146c:	2056      	movs	r0, #86	@ 0x56
 800146e:	f7ff fce8 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(TEMP_COL, 3);
 8001472:	f240 0500 	movw	r5, #0
 8001476:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800147a:	2103      	movs	r1, #3
 800147c:	7828      	ldrb	r0, [r5, #0]
 800147e:	f7ff fccf 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(labelsShort[3]); /* Temp/Sic */
 8001482:	68e0      	ldr	r0, [r4, #12]
 8001484:	f7ff fce2 	bl	8000e4c <LCD_Print>
        {
            /* Clear area before temp number */
            uint8_t n3 = (uint8_t)(TEMP_COL + 5u);
            LCD_SetCursor(TEMP_COL + 5u, 3); /* rough clear width */
 8001488:	7828      	ldrb	r0, [r5, #0]
 800148a:	3005      	adds	r0, #5
 800148c:	2103      	movs	r1, #3
 800148e:	b2c0      	uxtb	r0, r0
 8001490:	f7ff fcc6 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("     ");
 8001494:	f645 705c 	movw	r0, #24412	@ 0x5f5c
 8001498:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800149c:	f7ff fcd6 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(TEMP_COL + 5u, 3);
 80014a0:	7828      	ldrb	r0, [r5, #0]
 80014a2:	3005      	adds	r0, #5
 80014a4:	2103      	movs	r1, #3
 80014a6:	b2c0      	uxtb	r0, r0
 80014a8:	f7ff fcba 	bl	8000e20 <LCD_SetCursor>
        }
        LCD_PrintUInt16(temp);
 80014ac:	f240 1348 	movw	r3, #328	@ 0x148
 80014b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014b4:	7818      	ldrb	r0, [r3, #0]
 80014b6:	f7ff fcd6 	bl	8000e66 <LCD_PrintUInt16>
        LCD_WriteChar('C');
 80014ba:	2043      	movs	r0, #67	@ 0x43
 80014bc:	f7ff fcc1 	bl	8000e42 <LCD_WriteChar>
    /* duplicate blocks removed */

    default:
        break;
    }
}
 80014c0:	b00b      	add	sp, #44	@ 0x2c
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (idx < 20) line[idx++] = ' ';
 80014c4:	2b13      	cmp	r3, #19
 80014c6:	f73f aeff 	bgt.w	80012c8 <lcd_handle+0x268>
 80014ca:	4619      	mov	r1, r3
 80014cc:	1c4b      	adds	r3, r1, #1
 80014ce:	2020      	movs	r0, #32
 80014d0:	f101 0228 	add.w	r2, r1, #40	@ 0x28
 80014d4:	446a      	add	r2, sp
 80014d6:	f802 0c24 	strb.w	r0, [r2, #-36]
            while (*b && idx < 20) line[idx++] = *b++;
 80014da:	782a      	ldrb	r2, [r5, #0]
 80014dc:	2a00      	cmp	r2, #0
 80014de:	f43f aef5 	beq.w	80012cc <lcd_handle+0x26c>
 80014e2:	2b13      	cmp	r3, #19
 80014e4:	f73f aefe 	bgt.w	80012e4 <lcd_handle+0x284>
 80014e8:	a801      	add	r0, sp, #4
 80014ea:	4401      	add	r1, r0
 80014ec:	3301      	adds	r3, #1
 80014ee:	f801 2f01 	strb.w	r2, [r1, #1]!
 80014f2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	f43f aee8 	beq.w	80012cc <lcd_handle+0x26c>
 80014fc:	2b14      	cmp	r3, #20
 80014fe:	d1f5      	bne.n	80014ec <lcd_handle+0x48c>
 8001500:	e6f0      	b.n	80012e4 <lcd_handle+0x284>
            int idx = 0;
 8001502:	2100      	movs	r1, #0
 8001504:	e7e2      	b.n	80014cc <lcd_handle+0x46c>
                LCD_Print("       ");
 8001506:	f645 7054 	movw	r0, #24404	@ 0x5f54
 800150a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800150e:	f7ff fc9d 	bl	8000e4c <LCD_Print>
                LCD_SetCursor(STATUS_COL, 2);
 8001512:	f240 0301 	movw	r3, #1
 8001516:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800151a:	2102      	movs	r1, #2
 800151c:	7818      	ldrb	r0, [r3, #0]
 800151e:	f7ff fc7f 	bl	8000e20 <LCD_SetCursor>
                LCD_Print(STAGE_NAMES_LANG[lcdLangId][batInfo.chargeState]);
 8001522:	f246 531c 	movw	r3, #25884	@ 0x651c
 8001526:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800152a:	f240 021d 	movw	r2, #29
 800152e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001532:	7811      	ldrb	r1, [r2, #0]
 8001534:	f240 0220 	movw	r2, #32
 8001538:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800153c:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8001540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001544:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001548:	f7ff fc80 	bl	8000e4c <LCD_Print>
 800154c:	e767      	b.n	800141e <lcd_handle+0x3be>
    return UI_STR_TABLE[lcdLangId][id];
 800154e:	f240 031d 	movw	r3, #29
 8001552:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	f246 431c 	movw	r3, #25628	@ 0x641c
 800155c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001564:	681c      	ldr	r4, [r3, #0]
        const char * const * items = MENU_ITEMS_LANG_MODE[lcdLangId][operatingMode];
 8001566:	f246 33dc 	movw	r3, #25564	@ 0x63dc
 800156a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800156e:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 8001572:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800157c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        LCD_SetCursor(1, 0);
 8001580:	2100      	movs	r1, #0
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fc4c 	bl	8000e20 <LCD_SetCursor>
            while (*t)
 8001588:	7820      	ldrb	r0, [r4, #0]
 800158a:	b160      	cbz	r0, 80015a6 <lcd_handle+0x546>
                if (c >= 'a' && c <= 'z')
 800158c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001594:	bf9c      	itt	ls
 8001596:	3820      	subls	r0, #32
 8001598:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 800159a:	f7ff fc52 	bl	8000e42 <LCD_WriteChar>
            while (*t)
 800159e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d1f2      	bne.n	800158c <lcd_handle+0x52c>
        uint8_t sel = (uint8_t)(menuIndex % total);
 80015a6:	f240 53b2 	movw	r3, #1458	@ 0x5b2
 80015aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015ae:	781c      	ldrb	r4, [r3, #0]
 80015b0:	f004 0403 	and.w	r4, r4, #3
        uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 80015b4:	1ce7      	adds	r7, r4, #3
 80015b6:	f007 0703 	and.w	r7, r7, #3
        uint8_t next = (uint8_t)((sel + 1u) % total);
 80015ba:	1c66      	adds	r6, r4, #1
 80015bc:	f006 0603 	and.w	r6, r6, #3
        LCD_SetCursor(1, 1);
 80015c0:	2101      	movs	r1, #1
 80015c2:	4608      	mov	r0, r1
 80015c4:	f7ff fc2c 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + prev));
 80015c8:	f107 0031 	add.w	r0, r7, #49	@ 0x31
 80015cc:	f7ff fc39 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 80015d0:	202e      	movs	r0, #46	@ 0x2e
 80015d2:	f7ff fc36 	bl	8000e42 <LCD_WriteChar>
        LCD_Print(items[prev]);
 80015d6:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 80015da:	f7ff fc37 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0, 2);
 80015de:	2102      	movs	r1, #2
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fc1d 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar('>');
 80015e6:	203e      	movs	r0, #62	@ 0x3e
 80015e8:	f7ff fc2b 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1, 2);
 80015ec:	2102      	movs	r1, #2
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fc16 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + sel));
 80015f4:	f104 0031 	add.w	r0, r4, #49	@ 0x31
 80015f8:	f7ff fc23 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 80015fc:	202e      	movs	r0, #46	@ 0x2e
 80015fe:	f7ff fc20 	bl	8000e42 <LCD_WriteChar>
        LCD_Print(items[sel]);
 8001602:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8001606:	f7ff fc21 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(1, 3);
 800160a:	2103      	movs	r1, #3
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fc07 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + next));
 8001612:	f106 0031 	add.w	r0, r6, #49	@ 0x31
 8001616:	f7ff fc14 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 800161a:	202e      	movs	r0, #46	@ 0x2e
 800161c:	f7ff fc11 	bl	8000e42 <LCD_WriteChar>
        LCD_Print(items[next]);
 8001620:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8001624:	f7ff fc12 	bl	8000e4c <LCD_Print>
        break;
 8001628:	e74a      	b.n	80014c0 <lcd_handle+0x460>
        LCD_SetCursor(1, 0);
 800162a:	2100      	movs	r1, #0
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fbf7 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001632:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001636:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800163a:	f240 021d 	movw	r2, #29
 800163e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	685c      	ldr	r4, [r3, #4]
            while (*t) 
 800164a:	7820      	ldrb	r0, [r4, #0]
 800164c:	b160      	cbz	r0, 8001668 <lcd_handle+0x608>
                if (c >= 'a' && c <= 'z') 
 800164e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001656:	bf9c      	itt	ls
 8001658:	3820      	subls	r0, #32
 800165a:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 800165c:	f7ff fbf1 	bl	8000e42 <LCD_WriteChar>
            while (*t) 
 8001660:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001664:	2800      	cmp	r0, #0
 8001666:	d1f2      	bne.n	800164e <lcd_handle+0x5ee>
        if (operatingMode == MODE_CHARGER) {
 8001668:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 800166c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 80a7 	bne.w	80017c6 <lcd_handle+0x766>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001678:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 800167c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001680:	781c      	ldrb	r4, [r3, #0]
 8001682:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 8001686:	2101      	movs	r1, #1
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fbc9 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 800168e:	2c00      	cmp	r4, #0
 8001690:	d142      	bne.n	8001718 <lcd_handle+0x6b8>
                LCD_Print("                    ");
 8001692:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8001696:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800169a:	f7ff fbd7 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 800169e:	2102      	movs	r1, #2
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fbbd 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 80016a6:	203e      	movs	r0, #62	@ 0x3e
 80016a8:	f7ff fbcb 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80016ac:	2102      	movs	r1, #2
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fbb6 	bl	8000e20 <LCD_SetCursor>
                LCD_Print(STR_BATV);
 80016b4:	f240 538c 	movw	r3, #1420	@ 0x58c
 80016b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f7ff fbc5 	bl	8000e4c <LCD_Print>
                    if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; }
 80016c2:	f240 0320 	movw	r3, #32
 80016c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b18      	cmp	r3, #24
                    LCD_PrintUInt16(batv);
 80016ce:	bf34      	ite	cc
 80016d0:	200c      	movcc	r0, #12
 80016d2:	2018      	movcs	r0, #24
 80016d4:	f7ff fbc7 	bl	8000e66 <LCD_PrintUInt16>
                    LCD_WriteChar('V');
 80016d8:	2056      	movs	r0, #86	@ 0x56
 80016da:	f7ff fbb2 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 80016de:	2103      	movs	r1, #3
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fb9d 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 80016e6:	2103      	movs	r1, #3
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fb99 	bl	8000e20 <LCD_SetCursor>
                    LCD_Print(STR_CAPACITY);
 80016ee:	f240 5388 	movw	r3, #1416	@ 0x588
 80016f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	f7ff fba8 	bl	8000e4c <LCD_Print>
                    LCD_PrintUInt16_1dp(batInfo.batteryCap);
 80016fc:	f240 0320 	movw	r3, #32
 8001700:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001704:	8898      	ldrh	r0, [r3, #4]
 8001706:	f7ff fc1a 	bl	8000f3e <LCD_PrintUInt16_1dp>
                    LCD_Print("Ah"); 
 800170a:	f645 707c 	movw	r0, #24444	@ 0x5f7c
 800170e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001712:	f7ff fb9b 	bl	8000e4c <LCD_Print>
 8001716:	e6d3      	b.n	80014c0 <lcd_handle+0x460>
                LCD_SetCursor(1,1);
 8001718:	2101      	movs	r1, #1
 800171a:	4608      	mov	r0, r1
 800171c:	f7ff fb80 	bl	8000e20 <LCD_SetCursor>
                    LCD_Print(STR_BATV);
 8001720:	f240 538c 	movw	r3, #1420	@ 0x58c
 8001724:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	f7ff fb8f 	bl	8000e4c <LCD_Print>
                        if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; }
 800172e:	f240 0320 	movw	r3, #32
 8001732:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b18      	cmp	r3, #24
                        LCD_PrintUInt16(batv);
 800173a:	bf34      	ite	cc
 800173c:	200c      	movcc	r0, #12
 800173e:	2018      	movcs	r0, #24
 8001740:	f7ff fb91 	bl	8000e66 <LCD_PrintUInt16>
                        LCD_WriteChar('V');
 8001744:	2056      	movs	r0, #86	@ 0x56
 8001746:	f7ff fb7c 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,2);
 800174a:	2102      	movs	r1, #2
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fb67 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001752:	203e      	movs	r0, #62	@ 0x3e
 8001754:	f7ff fb75 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001758:	2102      	movs	r1, #2
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff fb60 	bl	8000e20 <LCD_SetCursor>
                LCD_Print(STR_CAPACITY);
 8001760:	f240 5388 	movw	r3, #1416	@ 0x588
 8001764:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	f7ff fb6f 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 800176e:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8001772:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b9eb      	cbnz	r3, 80017b6 <lcd_handle+0x756>
                LCD_PrintUInt16_1dp(batInfo.batteryCap);
 800177a:	f240 0320 	movw	r3, #32
 800177e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001782:	8898      	ldrh	r0, [r3, #4]
 8001784:	f7ff fbdb 	bl	8000f3e <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 8001788:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 800178c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b9a3      	cbnz	r3, 80017be <lcd_handle+0x75e>
                LCD_Print("Ah");
 8001794:	f645 707c 	movw	r0, #24444	@ 0x5f7c
 8001798:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800179c:	f7ff fb56 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 80017a0:	2103      	movs	r1, #3
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fb3c 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 80017a8:	f645 7064 	movw	r0, #24420	@ 0x5f64
 80017ac:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80017b0:	f7ff fb4c 	bl	8000e4c <LCD_Print>
 80017b4:	e684      	b.n	80014c0 <lcd_handle+0x460>
                if (isEditing) LCD_WriteChar('[');
 80017b6:	205b      	movs	r0, #91	@ 0x5b
 80017b8:	f7ff fb43 	bl	8000e42 <LCD_WriteChar>
 80017bc:	e7dd      	b.n	800177a <lcd_handle+0x71a>
                if (isEditing) LCD_WriteChar(']');
 80017be:	205d      	movs	r0, #93	@ 0x5d
 80017c0:	f7ff fb3f 	bl	8000e42 <LCD_WriteChar>
 80017c4:	e7e6      	b.n	8001794 <lcd_handle+0x734>
            uint8_t sel = (uint8_t)(subIndex % total);
 80017c6:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80017ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017ce:	781c      	ldrb	r4, [r3, #0]
 80017d0:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 80017d4:	2101      	movs	r1, #1
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fb22 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d14b      	bne.n	8001878 <lcd_handle+0x818>
                LCD_Print("                    ");
 80017e0:	f645 7064 	movw	r0, #24420	@ 0x5f64
 80017e4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80017e8:	f7ff fb30 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 80017ec:	2102      	movs	r1, #2
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff fb16 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 80017f4:	203e      	movs	r0, #62	@ 0x3e
 80017f6:	f7ff fb24 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80017fa:	2102      	movs	r1, #2
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff fb0f 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("V set:");
 8001802:	f645 7080 	movw	r0, #24448	@ 0x5f80
 8001806:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800180a:	f7ff fb1f 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 800180e:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8001812:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d177      	bne.n	800190c <lcd_handle+0x8ac>
                LCD_PrintUInt16_1dp(outputVSet_dV);
 800181c:	f240 03b2 	movw	r3, #178	@ 0xb2
 8001820:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001824:	8818      	ldrh	r0, [r3, #0]
 8001826:	f7ff fb8a 	bl	8000f3e <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 800182a:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 800182e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d16d      	bne.n	8001914 <lcd_handle+0x8b4>
                LCD_WriteChar('V');
 8001838:	2056      	movs	r0, #86	@ 0x56
 800183a:	f7ff fb02 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 800183e:	2103      	movs	r1, #3
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff faed 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001846:	2103      	movs	r1, #3
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fae9 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("I max:");
 800184e:	f645 7088 	movw	r0, #24456	@ 0x5f88
 8001852:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001856:	f7ff faf9 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(outputIMax_dA);
 800185a:	f240 03b0 	movw	r3, #176	@ 0xb0
 800185e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001862:	8818      	ldrh	r0, [r3, #0]
 8001864:	f7ff fb6b 	bl	8000f3e <LCD_PrintUInt16_1dp>
                LCD_WriteChar(CH_CURR);
 8001868:	f240 0302 	movw	r3, #2
 800186c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001870:	7818      	ldrb	r0, [r3, #0]
 8001872:	f7ff fae6 	bl	8000e42 <LCD_WriteChar>
 8001876:	e623      	b.n	80014c0 <lcd_handle+0x460>
                LCD_SetCursor(1,1);
 8001878:	2101      	movs	r1, #1
 800187a:	4608      	mov	r0, r1
 800187c:	f7ff fad0 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("V set:");
 8001880:	f645 7080 	movw	r0, #24448	@ 0x5f80
 8001884:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001888:	f7ff fae0 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(outputVSet_dV);
 800188c:	f240 03b2 	movw	r3, #178	@ 0xb2
 8001890:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001894:	8818      	ldrh	r0, [r3, #0]
 8001896:	f7ff fb52 	bl	8000f3e <LCD_PrintUInt16_1dp>
                LCD_WriteChar('V');
 800189a:	2056      	movs	r0, #86	@ 0x56
 800189c:	f7ff fad1 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,2);
 80018a0:	2102      	movs	r1, #2
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fabc 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 80018a8:	203e      	movs	r0, #62	@ 0x3e
 80018aa:	f7ff faca 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80018ae:	2102      	movs	r1, #2
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff fab5 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("I max:");
 80018b6:	f645 7088 	movw	r0, #24456	@ 0x5f88
 80018ba:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80018be:	f7ff fac5 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 80018c2:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80018c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	bb33      	cbnz	r3, 800191c <lcd_handle+0x8bc>
                LCD_PrintUInt16_1dp(outputIMax_dA);
 80018ce:	f240 03b0 	movw	r3, #176	@ 0xb0
 80018d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018d6:	8818      	ldrh	r0, [r3, #0]
 80018d8:	f7ff fb31 	bl	8000f3e <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 80018dc:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80018e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b9eb      	cbnz	r3, 8001924 <lcd_handle+0x8c4>
                LCD_WriteChar(CH_CURR);
 80018e8:	f240 0302 	movw	r3, #2
 80018ec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018f0:	7818      	ldrb	r0, [r3, #0]
 80018f2:	f7ff faa6 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 80018f6:	2103      	movs	r1, #3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fa91 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 80018fe:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8001902:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001906:	f7ff faa1 	bl	8000e4c <LCD_Print>
 800190a:	e5d9      	b.n	80014c0 <lcd_handle+0x460>
                if (isEditing) LCD_WriteChar('[');
 800190c:	205b      	movs	r0, #91	@ 0x5b
 800190e:	f7ff fa98 	bl	8000e42 <LCD_WriteChar>
 8001912:	e783      	b.n	800181c <lcd_handle+0x7bc>
                if (isEditing) LCD_WriteChar(']');
 8001914:	205d      	movs	r0, #93	@ 0x5d
 8001916:	f7ff fa94 	bl	8000e42 <LCD_WriteChar>
 800191a:	e78d      	b.n	8001838 <lcd_handle+0x7d8>
                if (isEditing) LCD_WriteChar('[');
 800191c:	205b      	movs	r0, #91	@ 0x5b
 800191e:	f7ff fa90 	bl	8000e42 <LCD_WriteChar>
 8001922:	e7d4      	b.n	80018ce <lcd_handle+0x86e>
                if (isEditing) LCD_WriteChar(']');
 8001924:	205d      	movs	r0, #93	@ 0x5d
 8001926:	f7ff fa8c 	bl	8000e42 <LCD_WriteChar>
 800192a:	e7dd      	b.n	80018e8 <lcd_handle+0x888>
        LCD_SetCursor(1,0);
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fa76 	bl	8000e20 <LCD_SetCursor>
            const char *t = OUTCTL_TITLE_LANG[lcdLangId][operatingMode];
 8001934:	f246 33c4 	movw	r3, #25540	@ 0x63c4
 8001938:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800193c:	f240 021d 	movw	r2, #29
 8001940:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001944:	7811      	ldrb	r1, [r2, #0]
 8001946:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 800194a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800194e:	7812      	ldrb	r2, [r2, #0]
 8001950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001954:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
            while (*t) { char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8001958:	7820      	ldrb	r0, [r4, #0]
 800195a:	b160      	cbz	r0, 8001976 <lcd_handle+0x916>
 800195c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b19      	cmp	r3, #25
 8001964:	bf9c      	itt	ls
 8001966:	3820      	subls	r0, #32
 8001968:	b2c0      	uxtbls	r0, r0
 800196a:	f7ff fa6a 	bl	8000e42 <LCD_WriteChar>
 800196e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001972:	2800      	cmp	r0, #0
 8001974:	d1f2      	bne.n	800195c <lcd_handle+0x8fc>
        LCD_SetCursor(0,1);
 8001976:	2101      	movs	r1, #1
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fa51 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("                    ");
 800197e:	f645 7464 	movw	r4, #24420	@ 0x5f64
 8001982:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff fa60 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0,2);
 800198c:	2102      	movs	r1, #2
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fa46 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar('>');
 8001994:	203e      	movs	r0, #62	@ 0x3e
 8001996:	f7ff fa54 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1,2);
 800199a:	2102      	movs	r1, #2
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fa3f 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(OUTCTL_ITEM_LANG[lcdLangId][operatingMode]);
 80019a2:	f246 33ac 	movw	r3, #25516	@ 0x63ac
 80019a6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80019aa:	f240 021d 	movw	r2, #29
 80019ae:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80019b2:	7811      	ldrb	r1, [r2, #0]
 80019b4:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 80019b8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80019c6:	f7ff fa41 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0,3);
 80019ca:	2103      	movs	r1, #3
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fa27 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("                    ");
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fa3a 	bl	8000e4c <LCD_Print>
        break;
 80019d8:	e572      	b.n	80014c0 <lcd_handle+0x460>
        LCD_SetCursor(1,0);
 80019da:	2100      	movs	r1, #0
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff fa1f 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80019e2:	f246 431c 	movw	r3, #25628	@ 0x641c
 80019e6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80019ea:	f240 021d 	movw	r2, #29
 80019ee:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80019f2:	7812      	ldrb	r2, [r2, #0]
 80019f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f8:	68dc      	ldr	r4, [r3, #12]
            while (*t)
 80019fa:	7820      	ldrb	r0, [r4, #0]
 80019fc:	b160      	cbz	r0, 8001a18 <lcd_handle+0x9b8>
                if (c >= 'a' && c <= 'z')
 80019fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001a06:	bf9c      	itt	ls
 8001a08:	3820      	subls	r0, #32
 8001a0a:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001a0c:	f7ff fa19 	bl	8000e42 <LCD_WriteChar>
            while (*t)
 8001a10:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d1f2      	bne.n	80019fe <lcd_handle+0x99e>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001a18:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8001a1c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a20:	781c      	ldrb	r4, [r3, #0]
 8001a22:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 8001a26:	2101      	movs	r1, #1
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff f9f9 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001a2e:	bbcc      	cbnz	r4, 8001aa4 <lcd_handle+0xa44>
                LCD_Print("                    ");
 8001a30:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8001a34:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001a38:	f7ff fa08 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff f9ee 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001a44:	203e      	movs	r0, #62	@ 0x3e
 8001a46:	f7ff f9fc 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff f9e7 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001a52:	2031      	movs	r0, #49	@ 0x31
 8001a54:	f7ff f9f5 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001a58:	202e      	movs	r0, #46	@ 0x2e
 8001a5a:	f7ff f9f2 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001a5e:	f246 441c 	movw	r4, #25628	@ 0x641c
 8001a62:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001a66:	f240 051d 	movw	r5, #29
 8001a6a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001a6e:	782b      	ldrb	r3, [r5, #0]
 8001a70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME)); 
 8001a74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001a76:	f7ff f9e9 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff f9cf 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001a82:	2103      	movs	r1, #3
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7ff f9cb 	bl	8000e20 <LCD_SetCursor>
                LCD_WriteChar('2');
 8001a8a:	2032      	movs	r0, #50	@ 0x32
 8001a8c:	f7ff f9d9 	bl	8000e42 <LCD_WriteChar>
                LCD_WriteChar('.');
 8001a90:	202e      	movs	r0, #46	@ 0x2e
 8001a92:	f7ff f9d6 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001a96:	782b      	ldrb	r3, [r5, #0]
 8001a98:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_SUPPLY_NAME));
 8001a9c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001a9e:	f7ff f9d5 	bl	8000e4c <LCD_Print>
 8001aa2:	e50d      	b.n	80014c0 <lcd_handle+0x460>
                LCD_SetCursor(1,1); 
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	f7ff f9ba 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001aac:	2031      	movs	r0, #49	@ 0x31
 8001aae:	f7ff f9c8 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001ab2:	202e      	movs	r0, #46	@ 0x2e
 8001ab4:	f7ff f9c5 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001ab8:	f246 441c 	movw	r4, #25628	@ 0x641c
 8001abc:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001ac0:	f240 051d 	movw	r5, #29
 8001ac4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001ac8:	782b      	ldrb	r3, [r5, #0]
 8001aca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME));
 8001ace:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001ad0:	f7ff f9bc 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff f9a2 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001adc:	203e      	movs	r0, #62	@ 0x3e
 8001ade:	f7ff f9b0 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff f99b 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('2'); 
 8001aea:	2032      	movs	r0, #50	@ 0x32
 8001aec:	f7ff f9a9 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001af0:	202e      	movs	r0, #46	@ 0x2e
 8001af2:	f7ff f9a6 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001af6:	782b      	ldrb	r3, [r5, #0]
 8001af8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_SUPPLY_NAME)); 
 8001afc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001afe:	f7ff f9a5 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 8001b02:	2103      	movs	r1, #3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff f98b 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 8001b0a:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8001b0e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001b12:	f7ff f99b 	bl	8000e4c <LCD_Print>
 8001b16:	e4d3      	b.n	80014c0 <lcd_handle+0x460>
        LCD_SetCursor(1,0);
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff f980 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001b20:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001b24:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001b28:	f240 021d 	movw	r2, #29
 8001b2c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	691c      	ldr	r4, [r3, #16]
            while (*t) { char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8001b38:	7820      	ldrb	r0, [r4, #0]
 8001b3a:	b160      	cbz	r0, 8001b56 <lcd_handle+0xaf6>
 8001b3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b19      	cmp	r3, #25
 8001b44:	bf9c      	itt	ls
 8001b46:	3820      	subls	r0, #32
 8001b48:	b2c0      	uxtbls	r0, r0
 8001b4a:	f7ff f97a 	bl	8000e42 <LCD_WriteChar>
 8001b4e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1f2      	bne.n	8001b3c <lcd_handle+0xadc>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001b56:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8001b5a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001b5e:	781d      	ldrb	r5, [r3, #0]
 8001b60:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8001b64:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8001b68:	fba2 3105 	umull	r3, r1, r2, r5
 8001b6c:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8001b70:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8001b74:	1aed      	subs	r5, r5, r3
 8001b76:	b2ed      	uxtb	r5, r5
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8001b78:	1cab      	adds	r3, r5, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	fba2 1203 	umull	r1, r2, r2, r3
 8001b80:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8001b84:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4608      	mov	r0, r1
 8001b90:	f7ff f946 	bl	8000e20 <LCD_SetCursor>
            if (prev == 0) {
 8001b94:	2c00      	cmp	r4, #0
 8001b96:	d03e      	beq.n	8001c16 <lcd_handle+0xbb6>
            else if (prev == 1) {
 8001b98:	2c01      	cmp	r4, #1
 8001b9a:	d052      	beq.n	8001c42 <lcd_handle+0xbe2>
    return UI_STR_TABLE[lcdLangId][id];
 8001b9c:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001ba0:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001ba4:	f240 021d 	movw	r2, #29
 8001ba8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001bb2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001bb4:	f7ff f94a 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f7ff f930 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001bc0:	203e      	movs	r0, #62	@ 0x3e
 8001bc2:	f7ff f93e 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff f929 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001bce:	2d00      	cmp	r5, #0
 8001bd0:	d050      	beq.n	8001c74 <lcd_handle+0xc14>
            } else if (sel == 1) {
 8001bd2:	2d01      	cmp	r5, #1
 8001bd4:	d079      	beq.n	8001cca <lcd_handle+0xc6a>
    return UI_STR_TABLE[lcdLangId][id];
 8001bd6:	f246 441c 	movw	r4, #25628	@ 0x641c
 8001bda:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001bde:	f240 051d 	movw	r5, #29
 8001be2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001be6:	782b      	ldrb	r3, [r5, #0]
 8001be8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001bec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001bee:	f7ff f92d 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff f913 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001bfa:	782b      	ldrb	r3, [r5, #0]
 8001bfc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001c00:	6a18      	ldr	r0, [r3, #32]
 8001c02:	f7ff f923 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001c06:	f240 5374 	movw	r3, #1396	@ 0x574
 8001c0a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f7ff f91c 	bl	8000e4c <LCD_Print>
 8001c14:	e454      	b.n	80014c0 <lcd_handle+0x460>
    return UI_STR_TABLE[lcdLangId][id];
 8001c16:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001c1a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001c1e:	f240 021d 	movw	r2, #29
 8001c22:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001c2c:	6a18      	ldr	r0, [r3, #32]
 8001c2e:	f7ff f90d 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001c32:	f240 5374 	movw	r3, #1396	@ 0x574
 8001c36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f7ff f906 	bl	8000e4c <LCD_Print>
 8001c40:	e7ba      	b.n	8001bb8 <lcd_handle+0xb58>
    return UI_STR_TABLE[lcdLangId][id];
 8001c42:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001c46:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001c4a:	f240 021d 	movw	r2, #29
 8001c4e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001c52:	7812      	ldrb	r2, [r2, #0]
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001c58:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001c5a:	f7ff f8f7 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(brightness);
 8001c5e:	f240 0314 	movw	r3, #20
 8001c62:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c66:	7818      	ldrb	r0, [r3, #0]
 8001c68:	f7ff f8fd 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8001c6c:	2025      	movs	r0, #37	@ 0x25
 8001c6e:	f7ff f8e8 	bl	8000e42 <LCD_WriteChar>
 8001c72:	e7a1      	b.n	8001bb8 <lcd_handle+0xb58>
    return UI_STR_TABLE[lcdLangId][id];
 8001c74:	f246 441c 	movw	r4, #25628	@ 0x641c
 8001c78:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001c7c:	f240 051d 	movw	r5, #29
 8001c80:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001c84:	782b      	ldrb	r3, [r5, #0]
 8001c86:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001c8a:	6a18      	ldr	r0, [r3, #32]
 8001c8c:	f7ff f8de 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001c90:	f240 5374 	movw	r3, #1396	@ 0x574
 8001c94:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	f7ff f8d7 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 8001c9e:	2103      	movs	r1, #3
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff f8bd 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001ca6:	782b      	ldrb	r3, [r5, #0]
 8001ca8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001cac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001cae:	f7ff f8cd 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(brightness);
 8001cb2:	f240 0314 	movw	r3, #20
 8001cb6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001cba:	7818      	ldrb	r0, [r3, #0]
 8001cbc:	f7ff f8d3 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8001cc0:	2025      	movs	r0, #37	@ 0x25
 8001cc2:	f7ff f8be 	bl	8000e42 <LCD_WriteChar>
 8001cc6:	f7ff bbfb 	b.w	80014c0 <lcd_handle+0x460>
    return UI_STR_TABLE[lcdLangId][id];
 8001cca:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001cce:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001cd2:	f240 021d 	movw	r2, #29
 8001cd6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001ce0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001ce2:	f7ff f8b3 	bl	8000e4c <LCD_Print>
                if (isEditing)
 8001ce6:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8001cea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	bb1b      	cbnz	r3, 8001d3a <lcd_handle+0xcda>
                LCD_PrintUInt16(brightness);
 8001cf2:	f240 0314 	movw	r3, #20
 8001cf6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001cfa:	7818      	ldrb	r0, [r3, #0]
 8001cfc:	f7ff f8b3 	bl	8000e66 <LCD_PrintUInt16>
                if (isEditing)
 8001d00:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8001d04:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b9d3      	cbnz	r3, 8001d42 <lcd_handle+0xce2>
                LCD_WriteChar('%');
 8001d0c:	2025      	movs	r0, #37	@ 0x25
 8001d0e:	f7ff f898 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,3);
 8001d12:	2103      	movs	r1, #3
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f883 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001d1a:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001d1e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d22:	f240 021d 	movw	r2, #29
 8001d26:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001d30:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001d32:	f7ff f88b 	bl	8000e4c <LCD_Print>
 8001d36:	f7ff bbc3 	b.w	80014c0 <lcd_handle+0x460>
                    LCD_WriteChar('[');
 8001d3a:	205b      	movs	r0, #91	@ 0x5b
 8001d3c:	f7ff f881 	bl	8000e42 <LCD_WriteChar>
 8001d40:	e7d7      	b.n	8001cf2 <lcd_handle+0xc92>
                    LCD_WriteChar(']');
 8001d42:	205d      	movs	r0, #93	@ 0x5d
 8001d44:	f7ff f87d 	bl	8000e42 <LCD_WriteChar>
 8001d48:	e7e0      	b.n	8001d0c <lcd_handle+0xcac>
    return UI_STR_TABLE[lcdLangId][id];
 8001d4a:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001d4e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d52:	f240 021d 	movw	r2, #29
 8001d56:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
            while (src[n] && n < 20) 
 8001d62:	780b      	ldrb	r3, [r1, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8091 	beq.w	8001e8c <lcd_handle+0xe2c>
 8001d6a:	ac01      	add	r4, sp, #4
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	e000      	b.n	8001d72 <lcd_handle+0xd12>
 8001d70:	4610      	mov	r0, r2
                if (c >= 'a' && c <= 'z') 
 8001d72:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	2a19      	cmp	r2, #25
                    c = (char)(c - 'a' + 'A');
 8001d7a:	bf9c      	itt	ls
 8001d7c:	3b20      	subls	r3, #32
 8001d7e:	b2db      	uxtbls	r3, r3
                up[n] = c; 
 8001d80:	f804 3b01 	strb.w	r3, [r4], #1
                n++; 
 8001d84:	b2c5      	uxtb	r5, r0
            while (src[n] && n < 20) 
 8001d86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001d8a:	b113      	cbz	r3, 8001d92 <lcd_handle+0xd32>
 8001d8c:	1c42      	adds	r2, r0, #1
 8001d8e:	2814      	cmp	r0, #20
 8001d90:	d1ee      	bne.n	8001d70 <lcd_handle+0xd10>
            up[n]='\0';
 8001d92:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 8001d96:	eb0d 0503 	add.w	r5, sp, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f805 1c24 	strb.w	r1, [r5, #-36]
            uint8_t col = (uint8_t)((20u - n) / 2u);
 8001da0:	f1c0 0014 	rsb	r0, r0, #20
            LCD_SetCursor(col, 0);
 8001da4:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8001da8:	f7ff f83a 	bl	8000e20 <LCD_SetCursor>
            LCD_Print(up);
 8001dac:	a801      	add	r0, sp, #4
 8001dae:	f7ff f84d 	bl	8000e4c <LCD_Print>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8001db2:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8001db6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d168      	bne.n	8001e92 <lcd_handle+0xe32>
                mfgPinError = 0; msg = ui_get(UI_STR_ENTER_PIN);
 8001dc0:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8001dc4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    return UI_STR_TABLE[lcdLangId][id];
 8001dcc:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001dd0:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001dd4:	f240 021d 	movw	r2, #29
 8001dd8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
            uint8_t len=0; while (msg[len] && len<20) len++;
 8001de4:	782b      	ldrb	r3, [r5, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d069      	beq.n	8001ebe <lcd_handle+0xe5e>
 8001dea:	f105 0014 	add.w	r0, r5, #20
 8001dee:	462b      	mov	r3, r5
 8001df0:	f1c5 0101 	rsb	r1, r5, #1
 8001df4:	18cc      	adds	r4, r1, r3
 8001df6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001dfa:	b10a      	cbz	r2, 8001e00 <lcd_handle+0xda0>
 8001dfc:	4283      	cmp	r3, r0
 8001dfe:	d1f9      	bne.n	8001df4 <lcd_handle+0xd94>
            LCD_SetCursor(0, 1); LCD_Print("                    "); /* clear line */
 8001e00:	2101      	movs	r1, #1
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f80c 	bl	8000e20 <LCD_SetCursor>
 8001e08:	f645 7664 	movw	r6, #24420	@ 0x5f64
 8001e0c:	f6c0 0600 	movt	r6, #2048	@ 0x800
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff f81b 	bl	8000e4c <LCD_Print>
            uint8_t col = (uint8_t)((20u - len) / 2u);
 8001e16:	f1c4 0014 	rsb	r0, r4, #20
            LCD_SetCursor(col, 1); LCD_Print(msg);
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8001e20:	f7fe fffe 	bl	8000e20 <LCD_SetCursor>
 8001e24:	4628      	mov	r0, r5
 8001e26:	f7ff f811 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0, 2);
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe fff7 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("                    ");
 8001e32:	4630      	mov	r0, r6
 8001e34:	f7ff f80a 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(start, 2);
 8001e38:	2102      	movs	r1, #2
 8001e3a:	2008      	movs	r0, #8
 8001e3c:	f7fe fff0 	bl	8000e20 <LCD_SetCursor>
            for (uint8_t i = 0; i < 4; i++)
 8001e40:	f240 5494 	movw	r4, #1428	@ 0x594
 8001e44:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8001e48:	1d25      	adds	r5, r4, #4
                LCD_WriteChar((char)('0' + mfgPinInput[i]));
 8001e4a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e4e:	3030      	adds	r0, #48	@ 0x30
 8001e50:	b2c0      	uxtb	r0, r0
 8001e52:	f7fe fff6 	bl	8000e42 <LCD_WriteChar>
            for (uint8_t i = 0; i < 4; i++)
 8001e56:	42ac      	cmp	r4, r5
 8001e58:	d1f7      	bne.n	8001e4a <lcd_handle+0xdea>
            LCD_SetCursor(0, 3);
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe ffdf 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("                    ");
 8001e62:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8001e66:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001e6a:	f7fe ffef 	bl	8000e4c <LCD_Print>
            LCD_SetCursor((uint8_t)(start + mfgPinPos), 3);
 8001e6e:	f240 5390 	movw	r3, #1424	@ 0x590
 8001e72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001e76:	7818      	ldrb	r0, [r3, #0]
 8001e78:	3008      	adds	r0, #8
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	b2c0      	uxtb	r0, r0
 8001e7e:	f7fe ffcf 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('^');
 8001e82:	205e      	movs	r0, #94	@ 0x5e
 8001e84:	f7fe ffdd 	bl	8000e42 <LCD_WriteChar>
        break;
 8001e88:	f7ff bb1a 	b.w	80014c0 <lcd_handle+0x460>
            uint8_t n = 0; 
 8001e8c:	461d      	mov	r5, r3
            while (src[n] && n < 20) 
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e77f      	b.n	8001d92 <lcd_handle+0xd32>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8001e92:	f002 fada 	bl	800444a <HAL_GetTick>
 8001e96:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 8001e9a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4298      	cmp	r0, r3
 8001ea2:	d28d      	bcs.n	8001dc0 <lcd_handle+0xd60>
    return UI_STR_TABLE[lcdLangId][id];
 8001ea4:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001ea8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001eac:	f240 021d 	movw	r2, #29
 8001eb0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
                msg = ui_get(UI_STR_WRONG_PIN);
 8001ebc:	e792      	b.n	8001de4 <lcd_handle+0xd84>
            uint8_t len=0; while (msg[len] && len<20) len++;
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	e79e      	b.n	8001e00 <lcd_handle+0xda0>
        LCD_SetCursor(1,0);
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7fe ffab 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001eca:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001ece:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001ed2:	f240 021d 	movw	r2, #29
 8001ed6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001eda:	7812      	ldrb	r2, [r2, #0]
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
            while(*t)
 8001ee2:	7820      	ldrb	r0, [r4, #0]
 8001ee4:	b160      	cbz	r0, 8001f00 <lcd_handle+0xea0>
                if (c >= 'a' && c <= 'z') 
 8001ee6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001eee:	bf9c      	itt	ls
 8001ef0:	3820      	subls	r0, #32
 8001ef2:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001ef4:	f7fe ffa5 	bl	8000e42 <LCD_WriteChar>
            while(*t)
 8001ef8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d1f2      	bne.n	8001ee6 <lcd_handle+0xe86>
            UiStrId ids[5] = { UI_STR_MFG_COMPANY, UI_STR_MFG_GAIN, UI_STR_MFG_OFFSET, UI_STR_MFG_LIMITS, UI_STR_MFG_MODE };
 8001f00:	231a      	movs	r3, #26
 8001f02:	f88d 3004 	strb.w	r3, [sp, #4]
 8001f06:	231b      	movs	r3, #27
 8001f08:	f88d 3005 	strb.w	r3, [sp, #5]
 8001f0c:	231c      	movs	r3, #28
 8001f0e:	f88d 3006 	strb.w	r3, [sp, #6]
 8001f12:	231d      	movs	r3, #29
 8001f14:	f88d 3007 	strb.w	r3, [sp, #7]
 8001f18:	231e      	movs	r3, #30
 8001f1a:	f88d 3008 	strb.w	r3, [sp, #8]
            uint8_t sel = (uint8_t)(subIndex % total);
 8001f1e:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8001f22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f26:	781c      	ldrb	r4, [r3, #0]
 8001f28:	f64c 46cd 	movw	r6, #52429	@ 0xcccd
 8001f2c:	f6cc 46cc 	movt	r6, #52428	@ 0xcccc
 8001f30:	fba6 3204 	umull	r3, r2, r6, r4
 8001f34:	f002 03fc 	and.w	r3, r2, #252	@ 0xfc
 8001f38:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8001f3c:	1ae4      	subs	r4, r4, r3
 8001f3e:	b2e4      	uxtb	r4, r4
            LCD_SetCursor(1,1);
 8001f40:	2101      	movs	r1, #1
 8001f42:	4608      	mov	r0, r1
 8001f44:	f7fe ff6c 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001f48:	f246 451c 	movw	r5, #25628	@ 0x641c
 8001f4c:	f6c0 0500 	movt	r5, #2048	@ 0x800
 8001f50:	f240 071d 	movw	r7, #29
 8001f54:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8001f58:	7838      	ldrb	r0, [r7, #0]
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8001f5a:	1d23      	adds	r3, r4, #4
 8001f5c:	fba6 2103 	umull	r2, r1, r6, r3
 8001f60:	f401 72fe 	and.w	r2, r1, #508	@ 0x1fc
 8001f64:	eb02 0291 	add.w	r2, r2, r1, lsr #2
 8001f68:	1a9b      	subs	r3, r3, r2
            LCD_Print(ui_get(ids[prev]));
 8001f6a:	3328      	adds	r3, #40	@ 0x28
 8001f6c:	446b      	add	r3, sp
    return UI_STR_TABLE[lcdLangId][id];
 8001f6e:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001f72:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            LCD_Print(ui_get(ids[prev]));
 8001f76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f7a:	f7fe ff67 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001f7e:	2102      	movs	r1, #2
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7fe ff4d 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001f86:	203e      	movs	r0, #62	@ 0x3e
 8001f88:	f7fe ff5b 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7fe ff46 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001f94:	783b      	ldrb	r3, [r7, #0]
            LCD_Print(ui_get(ids[sel]));
 8001f96:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8001f9a:	446a      	add	r2, sp
    return UI_STR_TABLE[lcdLangId][id];
 8001f9c:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8001fa0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
            LCD_Print(ui_get(ids[sel]));
 8001fa4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fa8:	f7fe ff50 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 8001fac:	2103      	movs	r1, #3
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7fe ff36 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001fb4:	7839      	ldrb	r1, [r7, #0]
            uint8_t next = (uint8_t)((sel + 1u) % total);
 8001fb6:	3401      	adds	r4, #1
 8001fb8:	fba6 2304 	umull	r2, r3, r6, r4
 8001fbc:	f403 72fe 	and.w	r2, r3, #508	@ 0x1fc
 8001fc0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8001fc4:	1ae4      	subs	r4, r4, r3
            LCD_Print(ui_get(ids[next]));
 8001fc6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001fca:	eb0d 0403 	add.w	r4, sp, r3
    return UI_STR_TABLE[lcdLangId][id];
 8001fce:	f814 2c24 	ldrb.w	r2, [r4, #-36]
 8001fd2:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
            LCD_Print(ui_get(ids[next]));
 8001fd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fda:	f7fe ff37 	bl	8000e4c <LCD_Print>
        break;
 8001fde:	f7ff ba6f 	b.w	80014c0 <lcd_handle+0x460>
        LCD_SetCursor(1,0);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe ff1b 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001fea:	f246 431c 	movw	r3, #25628	@ 0x641c
 8001fee:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001ff2:	f240 021d 	movw	r2, #29
 8001ff6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8002002:	7820      	ldrb	r0, [r4, #0]
 8002004:	b160      	cbz	r0, 8002020 <lcd_handle+0xfc0>
 8002006:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b19      	cmp	r3, #25
 800200e:	bf9c      	itt	ls
 8002010:	3820      	subls	r0, #32
 8002012:	b2c0      	uxtbls	r0, r0
 8002014:	f7fe ff15 	bl	8000e42 <LCD_WriteChar>
 8002018:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800201c:	2800      	cmp	r0, #0
 800201e:	d1f2      	bne.n	8002006 <lcd_handle+0xfa6>
        const char *names[9] = { "VAC", "TEMP", "IDC", "VBAT1", "VDC1", "VDC2", "IDC2_1", "IDC2_2", "IDC2_3" };
 8002020:	ad01      	add	r5, sp, #4
 8002022:	f645 7408 	movw	r4, #24328	@ 0x5f08
 8002026:	f6c0 0400 	movt	r4, #2048	@ 0x800
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	602b      	str	r3, [r5, #0]
        uint8_t sel = (uint8_t)(subIndex % total);
 8002036:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 800203a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800203e:	781d      	ldrb	r5, [r3, #0]
 8002040:	f648 6439 	movw	r4, #36409	@ 0x8e39
 8002044:	f6c3 04e3 	movt	r4, #14563	@ 0x38e3
 8002048:	fba4 2305 	umull	r2, r3, r4, r5
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002052:	1aed      	subs	r5, r5, r3
 8002054:	b2ed      	uxtb	r5, r5
        LCD_SetCursor(1,1);
 8002056:	2101      	movs	r1, #1
 8002058:	4608      	mov	r0, r1
 800205a:	f7fe fee1 	bl	8000e20 <LCD_SetCursor>
        uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 800205e:	f105 0308 	add.w	r3, r5, #8
 8002062:	fba4 2403 	umull	r2, r4, r4, r3
 8002066:	0864      	lsrs	r4, r4, #1
 8002068:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800206c:	1b1c      	subs	r4, r3, r4
        LCD_Print(names[prev]);
 800206e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002070:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002074:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8002078:	f7fe fee8 	bl	8000e4c <LCD_Print>
        LCD_Print(": ");
 800207c:	f645 7790 	movw	r7, #24464	@ 0x5f90
 8002080:	f6c0 0700 	movt	r7, #2048	@ 0x800
 8002084:	4638      	mov	r0, r7
 8002086:	f7fe fee1 	bl	8000e4c <LCD_Print>
        LCD_PrintUInt16(adcGain[prev]);
 800208a:	f240 1334 	movw	r3, #308	@ 0x134
 800208e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002092:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002096:	f7fe fee6 	bl	8000e66 <LCD_PrintUInt16>
        LCD_SetCursor(0,2); LCD_WriteChar('>');
 800209a:	2102      	movs	r1, #2
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe febf 	bl	8000e20 <LCD_SetCursor>
 80020a2:	203e      	movs	r0, #62	@ 0x3e
 80020a4:	f7fe fecd 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1,2);
 80020a8:	2102      	movs	r1, #2
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7fe feb8 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(names[sel]);
 80020b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80020b2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80020b6:	f853 6c24 	ldr.w	r6, [r3, #-36]
 80020ba:	4630      	mov	r0, r6
 80020bc:	f7fe fec6 	bl	8000e4c <LCD_Print>
        LCD_Print(": ");
 80020c0:	4638      	mov	r0, r7
 80020c2:	f7fe fec3 	bl	8000e4c <LCD_Print>
        if (isEditing) {
 80020c6:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80020ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d04e      	beq.n	8002172 <lcd_handle+0x1112>
 80020d4:	f240 549c 	movw	r4, #1436	@ 0x59c
 80020d8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80020dc:	1d67      	adds	r7, r4, #5
            for (uint8_t i=0;i<5;i++){ LCD_WriteChar((char)('0'+gainEditDigits[i])); }
 80020de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80020e2:	3030      	adds	r0, #48	@ 0x30
 80020e4:	b2c0      	uxtb	r0, r0
 80020e6:	f7fe feac 	bl	8000e42 <LCD_WriteChar>
 80020ea:	42bc      	cmp	r4, r7
 80020ec:	d1f7      	bne.n	80020de <lcd_handle+0x107e>
                uint8_t nameLen = 0; while (names[sel][nameLen] && nameLen < 20) nameLen++;
 80020ee:	7830      	ldrb	r0, [r6, #0]
 80020f0:	b140      	cbz	r0, 8002104 <lcd_handle+0x10a4>
 80020f2:	4632      	mov	r2, r6
 80020f4:	2301      	movs	r3, #1
 80020f6:	b2d8      	uxtb	r0, r3
 80020f8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80020fc:	b111      	cbz	r1, 8002104 <lcd_handle+0x10a4>
 80020fe:	3301      	adds	r3, #1
 8002100:	2b15      	cmp	r3, #21
 8002102:	d1f8      	bne.n	80020f6 <lcd_handle+0x1096>
                LCD_SetCursor((uint8_t)(1u + nameLen + 2u + gainEditPos), 3); /* caret on row3 same col */
 8002104:	f240 539a 	movw	r3, #1434	@ 0x59a
 8002108:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	3303      	adds	r3, #3
 8002110:	4418      	add	r0, r3
 8002112:	2103      	movs	r1, #3
 8002114:	b2c0      	uxtb	r0, r0
 8002116:	f7fe fe83 	bl	8000e20 <LCD_SetCursor>
        if (!isEditing) {
 800211a:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 800211e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	bb73      	cbnz	r3, 8002184 <lcd_handle+0x1124>
            LCD_SetCursor(1,3);
 8002126:	2103      	movs	r1, #3
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe fe79 	bl	8000e20 <LCD_SetCursor>
        uint8_t next = (uint8_t)((sel + 1u) % total);
 800212e:	3501      	adds	r5, #1
 8002130:	f648 6439 	movw	r4, #36409	@ 0x8e39
 8002134:	f6c3 04e3 	movt	r4, #14563	@ 0x38e3
 8002138:	fba4 3405 	umull	r3, r4, r4, r5
 800213c:	0864      	lsrs	r4, r4, #1
 800213e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8002142:	1b2c      	subs	r4, r5, r4
            LCD_Print(names[next]);
 8002144:	ab0a      	add	r3, sp, #40	@ 0x28
 8002146:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800214a:	f853 0c24 	ldr.w	r0, [r3, #-36]
 800214e:	f7fe fe7d 	bl	8000e4c <LCD_Print>
            LCD_Print(": ");
 8002152:	f645 7090 	movw	r0, #24464	@ 0x5f90
 8002156:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800215a:	f7fe fe77 	bl	8000e4c <LCD_Print>
            LCD_PrintUInt16(adcGain[next]);
 800215e:	f240 1334 	movw	r3, #308	@ 0x134
 8002162:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002166:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800216a:	f7fe fe7c 	bl	8000e66 <LCD_PrintUInt16>
 800216e:	f7ff b9a7 	b.w	80014c0 <lcd_handle+0x460>
            LCD_PrintUInt16(adcGain[sel]);
 8002172:	f240 1334 	movw	r3, #308	@ 0x134
 8002176:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800217a:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 800217e:	f7fe fe72 	bl	8000e66 <LCD_PrintUInt16>
 8002182:	e7ca      	b.n	800211a <lcd_handle+0x10ba>
            LCD_SetCursor(0,3);
 8002184:	2103      	movs	r1, #3
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fe4a 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("                    ");
 800218c:	f645 7064 	movw	r0, #24420	@ 0x5f64
 8002190:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002194:	f7fe fe5a 	bl	8000e4c <LCD_Print>
                uint8_t nameLen = 0; while (names[sel][nameLen] && nameLen < 20) nameLen++;
 8002198:	7831      	ldrb	r1, [r6, #0]
 800219a:	b141      	cbz	r1, 80021ae <lcd_handle+0x114e>
 800219c:	4630      	mov	r0, r6
 800219e:	2301      	movs	r3, #1
 80021a0:	b2d9      	uxtb	r1, r3
 80021a2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80021a6:	b112      	cbz	r2, 80021ae <lcd_handle+0x114e>
 80021a8:	3301      	adds	r3, #1
 80021aa:	2b15      	cmp	r3, #21
 80021ac:	d1f8      	bne.n	80021a0 <lcd_handle+0x1140>
                LCD_SetCursor((uint8_t)(1u + nameLen + 2u + gainEditPos), 3);
 80021ae:	f240 539a 	movw	r3, #1434	@ 0x59a
 80021b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	3303      	adds	r3, #3
 80021ba:	18c8      	adds	r0, r1, r3
 80021bc:	2103      	movs	r1, #3
 80021be:	b2c0      	uxtb	r0, r0
 80021c0:	f7fe fe2e 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('^');
 80021c4:	205e      	movs	r0, #94	@ 0x5e
 80021c6:	f7fe fe3c 	bl	8000e42 <LCD_WriteChar>
}
 80021ca:	f7ff b979 	b.w	80014c0 <lcd_handle+0x460>
	...

080021d0 <button_handle>:
 * - Down: No action
 * - Right: Next page
 * - Off: Set SHUTDOWN2 = 0
 */
void button_handle(void) {
    if (buttonState == 0) 
 80021d0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80021d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f001 8080 	beq.w	80032e0 <button_handle+0x1110>
void button_handle(void) {
 80021e0:	b500      	push	{lr}
 80021e2:	b083      	sub	sp, #12
        return;
    }

    /* Button order: Left, On, Up, Down, Right, Off */
    /* Structure by page for clarity (switch-case style) */
    if (buttonState & BUT_LEFT_M) 
 80021e4:	f013 0f01 	tst.w	r3, #1
 80021e8:	f000 80cb 	beq.w	8002382 <button_handle+0x1b2>
    {
        if (isEditing) 
 80021ec:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80021f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b993      	cbnz	r3, 800221e <button_handle+0x4e>
            isEditing = 0u; 
            uiNeedsClear = 1u; 
            buttonState = 0; 
            return;
        }
        if (pageID == PAGE_MFG_PIN) 
 80021f8:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80021fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3b02      	subs	r3, #2
 8002204:	2b07      	cmp	r3, #7
 8002206:	f200 80bc 	bhi.w	8002382 <button_handle+0x1b2>
 800220a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800220e:	00e6      	.short	0x00e6
 8002210:	00ef00ef 	.word	0x00ef00ef
 8002214:	00ef00ef 	.word	0x00ef00ef
 8002218:	00ba00b2 	.word	0x00ba00b2
 800221c:	00dd      	.short	0x00dd
            if (pageID == PAGE_ENTER_DATA) {
 800221e:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8002222:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	3b03      	subs	r3, #3
 800222a:	2b06      	cmp	r3, #6
 800222c:	f200 808e 	bhi.w	800234c <button_handle+0x17c>
 8002230:	e8df f003 	tbb	[pc, r3]
 8002234:	5f8c3a04 	.word	0x5f8c3a04
 8002238:	8c8c      	.short	0x8c8c
 800223a:	71          	.byte	0x71
 800223b:	00          	.byte	0x00
                if (operatingMode == MODE_CHARGER) {
 800223c:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 8002240:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b98b      	cbnz	r3, 800226c <button_handle+0x9c>
                    if (subIndex==1) batInfo.batteryCap = (uint16_t)editBackupValue;
 8002248:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 800224c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d17a      	bne.n	800234c <button_handle+0x17c>
 8002256:	f240 0320 	movw	r3, #32
 800225a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800225e:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 8002262:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e06f      	b.n	800234c <button_handle+0x17c>
                    if (subIndex==0) outputVSet_dV = editBackupValue;
 800226c:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002270:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b953      	cbnz	r3, 800228e <button_handle+0xbe>
 8002278:	f240 03b2 	movw	r3, #178	@ 0xb2
 800227c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002280:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 8002284:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	e05e      	b.n	800234c <button_handle+0x17c>
                    else if (subIndex==1) outputIMax_dA = editBackupValue;
 800228e:	2b01      	cmp	r3, #1
 8002290:	d15c      	bne.n	800234c <button_handle+0x17c>
 8002292:	f240 03b0 	movw	r3, #176	@ 0xb0
 8002296:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800229a:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 800229e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	e051      	b.n	800234c <button_handle+0x17c>
                if (operatingMode == MODE_CHARGER) {
 80022a8:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80022ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d14a      	bne.n	800234c <button_handle+0x17c>
                    if (subIndex==0) testVoltage_dV = editBackupValue;
 80022b6:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80022ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b953      	cbnz	r3, 80022d8 <button_handle+0x108>
 80022c2:	f240 03b6 	movw	r3, #182	@ 0xb6
 80022c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022ca:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 80022ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	e039      	b.n	800234c <button_handle+0x17c>
                    else if (subIndex==1) testCurrent_dA = editBackupValue;
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d137      	bne.n	800234c <button_handle+0x17c>
 80022dc:	f240 03b4 	movw	r3, #180	@ 0xb4
 80022e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022e4:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 80022e8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	801a      	strh	r2, [r3, #0]
 80022f0:	e02c      	b.n	800234c <button_handle+0x17c>
                if (subIndex==1) brightness = (uint8_t)editBackupValue;
 80022f2:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80022f6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d125      	bne.n	800234c <button_handle+0x17c>
 8002300:	f240 0314 	movw	r3, #20
 8002304:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002308:	f240 52a2 	movw	r2, #1442	@ 0x5a2
 800230c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e01a      	b.n	800234c <button_handle+0x17c>
                adcGain[sel] = (int16_t)editBackupValue;
 8002316:	f240 1134 	movw	r1, #308	@ 0x134
 800231a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
                uint8_t sel = (uint8_t)(subIndex % 9u);
 800231e:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002322:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	f648 6339 	movw	r3, #36409	@ 0x8e39
 800232c:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 8002330:	fba3 0302 	umull	r0, r3, r3, r2
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800233a:	1ad2      	subs	r2, r2, r3
                adcGain[sel] = (int16_t)editBackupValue;
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 8002342:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            isEditing = 0u; 
 800234c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002350:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
            uiNeedsClear = 1u; 
 8002358:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 800235c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002360:	2101      	movs	r1, #1
 8002362:	7019      	strb	r1, [r3, #0]
            buttonState = 0; 
 8002364:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002368:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800236c:	701a      	strb	r2, [r3, #0]
            return;
 800236e:	f000 be84 	b.w	800307a <button_handle+0xeaa>
    pageID = page;
 8002372:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8002376:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800237a:	2206      	movs	r2, #6
 800237c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800237e:	f7fe fd46 	bl	8000e0e <LCD_Clear>
        {
            /* other pages: no action unless specified later */
        }
    }
    /* On: set SHUTDOWN2 = 1 (same on all pages) */
    if (buttonState & BUT_ON_M) {
 8002382:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002386:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	d135      	bne.n	80023fe <button_handle+0x22e>
        deviceOn = 1;
        batInfo.chargeState = STATE_BULK;
    }
    /* Off: set SHUTDOWN2 = 0 (same on all pages) 
	*/
    if (buttonState & BUT_OFF_M) {
 8002392:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002396:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f013 0f20 	tst.w	r3, #32
 80023a0:	d144      	bne.n	800242c <button_handle+0x25c>
        dacValueI = 0;
        dacValueV = 1050;
    }

    /* Up/Down behavior depends on page */
    switch (pageID) {
 80023a2:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80023a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3b02      	subs	r3, #2
 80023ae:	2b07      	cmp	r3, #7
 80023b0:	f200 84e9 	bhi.w	8002d86 <button_handle+0xbb6>
 80023b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80023b8:	008b0056 	.word	0x008b0056
 80023bc:	026b01c2 	.word	0x026b01c2
 80023c0:	048a02c5 	.word	0x048a02c5
 80023c4:	038405ca 	.word	0x038405ca
    pageID = page;
 80023c8:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80023cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023d0:	2208      	movs	r2, #8
 80023d2:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80023d4:	f7fe fd1b 	bl	8000e0e <LCD_Clear>
}
 80023d8:	e7d3      	b.n	8002382 <button_handle+0x1b2>
    pageID = page;
 80023da:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80023de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80023e6:	f7fe fd12 	bl	8000e0e <LCD_Clear>
}
 80023ea:	e7ca      	b.n	8002382 <button_handle+0x1b2>
    pageID = page;
 80023ec:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80023f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023f4:	2202      	movs	r2, #2
 80023f6:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80023f8:	f7fe fd09 	bl	8000e0e <LCD_Clear>
}
 80023fc:	e7c1      	b.n	8002382 <button_handle+0x1b2>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002404:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002408:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800240c:	f002 fa82 	bl	8004914 <HAL_GPIO_WritePin>
        deviceOn = 1;
 8002410:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8002414:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
        batInfo.chargeState = STATE_BULK;
 800241c:	f240 0320 	movw	r3, #32
 8002420:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002424:	2200      	movs	r2, #0
 8002426:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 800242a:	e7b2      	b.n	8002392 <button_handle+0x1c2>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002432:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002436:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800243a:	f002 fa6b 	bl	8004914 <HAL_GPIO_WritePin>
        deviceOn = 0;
 800243e:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8002442:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
        dacValueI = 0;
 800244a:	f240 53b8 	movw	r3, #1464	@ 0x5b8
 800244e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002452:	801a      	strh	r2, [r3, #0]
        dacValueV = 1050;
 8002454:	f240 031e 	movw	r3, #30
 8002458:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800245c:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	e79e      	b.n	80023a2 <button_handle+0x1d2>
    case PAGE_MENU:
        if (buttonState & BUT_UP_M) {
 8002464:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002468:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f013 0f04 	tst.w	r3, #4
 8002472:	d008      	beq.n	8002486 <button_handle+0x2b6>
            menuIndex = (uint8_t)((menuIndex + 4u - 1u) % 4u);
 8002474:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8002478:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800247c:	780a      	ldrb	r2, [r1, #0]
 800247e:	3203      	adds	r2, #3
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	700a      	strb	r2, [r1, #0]
        }
        if (buttonState & BUT_DOWN_M) {
 8002486:	f013 0f08 	tst.w	r3, #8
 800248a:	d008      	beq.n	800249e <button_handle+0x2ce>
            menuIndex = (uint8_t)((menuIndex + 1u) % 4u);
 800248c:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8002490:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002494:	780a      	ldrb	r2, [r1, #0]
 8002496:	3201      	adds	r2, #1
 8002498:	f002 0203 	and.w	r2, r2, #3
 800249c:	700a      	strb	r2, [r1, #0]
    default:
        break;
    }

    /* Right: navigate/enter/edit */
    if (buttonState & BUT_RIGHT_M) {
 800249e:	f013 0f10 	tst.w	r3, #16
 80024a2:	f000 85de 	beq.w	8003062 <button_handle+0xe92>
            lcd_menu_set_page(PAGE_MENU);
        } else if (pageID == PAGE_LOADING) {
            lcd_menu_set_page(PAGE_MAIN);
        } else if (pageID == PAGE_MENU) {
            /* Enter selected subpage */
            subIndex = 0;
 80024a6:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80024aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
            switch (menuIndex) {
 80024b2:	f240 53b2 	movw	r3, #1458	@ 0x5b2
 80024b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	f200 85d0 	bhi.w	8003062 <button_handle+0xe92>
 80024c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80024c6:	05e6      	.short	0x05e6
 80024c8:	05f805ef 	.word	0x05f805ef
 80024cc:	0601      	.short	0x0601
        if (isEditing) {
 80024ce:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80024d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80f1 	beq.w	80026c0 <button_handle+0x4f0>
            if (operatingMode == MODE_CHARGER) {
 80024de:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80024e2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 8083 	bne.w	80025f4 <button_handle+0x424>
                if (buttonState & BUT_UP_M) {
 80024ee:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80024f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f013 0f04 	tst.w	r3, #4
 80024fc:	d048      	beq.n	8002590 <button_handle+0x3c0>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 80024fe:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 8002502:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002506:	7812      	ldrb	r2, [r2, #0]
 8002508:	2a00      	cmp	r2, #0
 800250a:	d13f      	bne.n	800258c <button_handle+0x3bc>
 800250c:	f240 0220 	movw	r2, #32
 8002510:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	2a18      	cmp	r2, #24
 8002518:	bf34      	ite	cc
 800251a:	2118      	movcc	r1, #24
 800251c:	210c      	movcs	r1, #12
 800251e:	f240 0220 	movw	r2, #32
 8002522:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002526:	6011      	str	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002528:	f013 0f08 	tst.w	r3, #8
 800252c:	d00d      	beq.n	800254a <button_handle+0x37a>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 800252e:	f240 0320 	movw	r3, #32
 8002532:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b18      	cmp	r3, #24
 800253a:	bf34      	ite	cc
 800253c:	2218      	movcc	r2, #24
 800253e:	220c      	movcs	r2, #12
 8002540:	f240 0320 	movw	r3, #32
 8002544:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002548:	601a      	str	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 800254a:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800254e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f013 0f10 	tst.w	r3, #16
 8002558:	f000 8583 	beq.w	8003062 <button_handle+0xe92>
            default:
                break;
            }
        } else if (pageID == PAGE_ENTER_DATA) {
            /* Immediate toggle for selection fields; edit for numeric */
            if (operatingMode == MODE_CHARGER && subIndex == 0u) {
 800255c:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002560:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8692 	bne.w	8003290 <button_handle+0x10c0>
                /* Bat V immediate toggle */
                batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u;
 800256c:	f240 0320 	movw	r3, #32
 8002570:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b18      	cmp	r3, #24
 8002578:	bf34      	ite	cc
 800257a:	2218      	movcc	r2, #24
 800257c:	220c      	movcs	r2, #12
 800257e:	f240 0320 	movw	r3, #32
 8002582:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f000 bd6b 	b.w	8003062 <button_handle+0xe92>
                    else if (subIndex == 1 && batInfo.batteryCap < 990) { batInfo.batteryCap += 10; }
 800258c:	2a01      	cmp	r2, #1
 800258e:	d013      	beq.n	80025b8 <button_handle+0x3e8>
                if (buttonState & BUT_DOWN_M) {
 8002590:	f013 0f08 	tst.w	r3, #8
 8002594:	d0d9      	beq.n	800254a <button_handle+0x37a>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002596:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 800259a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0c4      	beq.n	800252e <button_handle+0x35e>
                    else if (subIndex == 1 && batInfo.batteryCap > 9) { batInfo.batteryCap -= 10; }
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d1d0      	bne.n	800254a <button_handle+0x37a>
 80025a8:	f240 0320 	movw	r3, #32
 80025ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	d9c9      	bls.n	800254a <button_handle+0x37a>
 80025b6:	e016      	b.n	80025e6 <button_handle+0x416>
                    else if (subIndex == 1 && batInfo.batteryCap < 990) { batInfo.batteryCap += 10; }
 80025b8:	f240 0220 	movw	r2, #32
 80025bc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025c0:	6852      	ldr	r2, [r2, #4]
 80025c2:	f240 31dd 	movw	r1, #989	@ 0x3dd
 80025c6:	428a      	cmp	r2, r1
 80025c8:	d805      	bhi.n	80025d6 <button_handle+0x406>
 80025ca:	f240 0120 	movw	r1, #32
 80025ce:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80025d2:	320a      	adds	r2, #10
 80025d4:	604a      	str	r2, [r1, #4]
                if (buttonState & BUT_DOWN_M) {
 80025d6:	f013 0f08 	tst.w	r3, #8
 80025da:	d0b6      	beq.n	800254a <button_handle+0x37a>
                    else if (subIndex == 1 && batInfo.batteryCap > 9) { batInfo.batteryCap -= 10; }
 80025dc:	f240 0320 	movw	r3, #32
 80025e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f240 0220 	movw	r2, #32
 80025ea:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025ee:	3b0a      	subs	r3, #10
 80025f0:	6053      	str	r3, [r2, #4]
 80025f2:	e7aa      	b.n	800254a <button_handle+0x37a>
                if (buttonState & BUT_UP_M) {
 80025f4:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80025f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f013 0f04 	tst.w	r3, #4
 8002602:	d045      	beq.n	8002690 <button_handle+0x4c0>
                    if (subIndex == 0 && outputVSet_dV < 240) { outputVSet_dV++; }
 8002604:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 8002608:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	b9f2      	cbnz	r2, 800264e <button_handle+0x47e>
 8002610:	f240 02b2 	movw	r2, #178	@ 0xb2
 8002614:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	2aef      	cmp	r2, #239	@ 0xef
 800261c:	f200 864a 	bhi.w	80032b4 <button_handle+0x10e4>
 8002620:	f240 01b2 	movw	r1, #178	@ 0xb2
 8002624:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002628:	3201      	adds	r2, #1
 800262a:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 800262c:	f013 0f08 	tst.w	r3, #8
 8002630:	f000 864b 	beq.w	80032ca <button_handle+0x10fa>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002634:	f240 03b2 	movw	r3, #178	@ 0xb2
 8002638:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f240 02b2 	movw	r2, #178	@ 0xb2
 8002642:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002646:	3b01      	subs	r3, #1
 8002648:	8013      	strh	r3, [r2, #0]
 800264a:	f000 be3e 	b.w	80032ca <button_handle+0x10fa>
                    else if (subIndex == 1 && outputIMax_dA < 400) { outputIMax_dA++; }
 800264e:	2a01      	cmp	r2, #1
 8002650:	d11e      	bne.n	8002690 <button_handle+0x4c0>
 8002652:	f240 02b0 	movw	r2, #176	@ 0xb0
 8002656:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 8002660:	d205      	bcs.n	800266e <button_handle+0x49e>
 8002662:	f240 01b0 	movw	r1, #176	@ 0xb0
 8002666:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800266a:	3201      	adds	r2, #1
 800266c:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 800266e:	f013 0f08 	tst.w	r3, #8
 8002672:	f000 862a 	beq.w	80032ca <button_handle+0x10fa>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 8002676:	f240 03b0 	movw	r3, #176	@ 0xb0
 800267a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	f240 02b0 	movw	r2, #176	@ 0xb0
 8002684:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002688:	3b01      	subs	r3, #1
 800268a:	8013      	strh	r3, [r2, #0]
 800268c:	f000 be1d 	b.w	80032ca <button_handle+0x10fa>
                if (buttonState & BUT_DOWN_M) {
 8002690:	f013 0f08 	tst.w	r3, #8
 8002694:	f000 8619 	beq.w	80032ca <button_handle+0x10fa>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002698:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 800269c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8609 	beq.w	80032ba <button_handle+0x10ea>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f040 860e 	bne.w	80032ca <button_handle+0x10fa>
 80026ae:	f240 03b0 	movw	r3, #176	@ 0xb0
 80026b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8606 	beq.w	80032ca <button_handle+0x10fa>
 80026be:	e7df      	b.n	8002680 <button_handle+0x4b0>
            if (buttonState & BUT_UP_M) 
 80026c0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80026c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f013 0f04 	tst.w	r3, #4
 80026ce:	d008      	beq.n	80026e2 <button_handle+0x512>
                subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 80026d0:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 80026d4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80026d8:	780a      	ldrb	r2, [r1, #0]
 80026da:	3201      	adds	r2, #1
 80026dc:	f002 0201 	and.w	r2, r2, #1
 80026e0:	700a      	strb	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) 
 80026e2:	f013 0f08 	tst.w	r3, #8
 80026e6:	d008      	beq.n	80026fa <button_handle+0x52a>
                subIndex = (uint8_t)((subIndex + 1u) % total); 
 80026e8:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 80026ec:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026f0:	7813      	ldrb	r3, [r2, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	7013      	strb	r3, [r2, #0]
    if (buttonState & BUT_RIGHT_M) {
 80026fa:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80026fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f013 0f10 	tst.w	r3, #16
 8002708:	f000 84ab 	beq.w	8003062 <button_handle+0xe92>
            if (operatingMode == MODE_CHARGER && subIndex == 0u) {
 800270c:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 8002710:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f43f af20 	beq.w	800255c <button_handle+0x38c>
            } else {
                if (!isEditing) {
 800271c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002720:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 84e2 	beq.w	80030f0 <button_handle+0xf20>
                        }
                    }
                    isEditing = 1u;
                } else {
                    /* second Right: save and exit edit mode */
                    isEditing = 0u;
 800272c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002730:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	f000 bc93 	b.w	8003062 <button_handle+0xe92>
        if (isEditing) {
 800273c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002740:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d07a      	beq.n	8002840 <button_handle+0x670>
            if (operatingMode == MODE_CHARGER) {
 800274a:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 800274e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d155      	bne.n	8002804 <button_handle+0x634>
                if (buttonState & BUT_UP_M) {
 8002758:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800275c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f013 0f04 	tst.w	r3, #4
 8002766:	d02f      	beq.n	80027c8 <button_handle+0x5f8>
                    if (subIndex == 0) { testVoltage_dV++; }
 8002768:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 800276c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	b9d2      	cbnz	r2, 80027aa <button_handle+0x5da>
 8002774:	f240 02b6 	movw	r2, #182	@ 0xb6
 8002778:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800277c:	8811      	ldrh	r1, [r2, #0]
 800277e:	3101      	adds	r1, #1
 8002780:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002782:	f013 0f08 	tst.w	r3, #8
 8002786:	f000 846c 	beq.w	8003062 <button_handle+0xe92>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 800278a:	f240 03b6 	movw	r3, #182	@ 0xb6
 800278e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8464 	beq.w	8003062 <button_handle+0xe92>
 800279a:	f240 02b6 	movw	r2, #182	@ 0xb6
 800279e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80027a2:	3b01      	subs	r3, #1
 80027a4:	8013      	strh	r3, [r2, #0]
 80027a6:	f000 bc5c 	b.w	8003062 <button_handle+0xe92>
                    else if (subIndex == 1) { testCurrent_dA++; }
 80027aa:	2a01      	cmp	r2, #1
 80027ac:	f040 8459 	bne.w	8003062 <button_handle+0xe92>
 80027b0:	f240 02b4 	movw	r2, #180	@ 0xb4
 80027b4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80027b8:	8811      	ldrh	r1, [r2, #0]
 80027ba:	3101      	adds	r1, #1
 80027bc:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 80027be:	f013 0f08 	tst.w	r3, #8
 80027c2:	d10f      	bne.n	80027e4 <button_handle+0x614>
 80027c4:	f000 bc4d 	b.w	8003062 <button_handle+0xe92>
 80027c8:	f013 0f08 	tst.w	r3, #8
 80027cc:	f000 8449 	beq.w	8003062 <button_handle+0xe92>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 80027d0:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80027d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0d5      	beq.n	800278a <button_handle+0x5ba>
                    else if (subIndex == 1 && testCurrent_dA > 0) { testCurrent_dA--; }
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 843f 	bne.w	8003062 <button_handle+0xe92>
 80027e4:	f240 03b4 	movw	r3, #180	@ 0xb4
 80027e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8437 	beq.w	8003062 <button_handle+0xe92>
 80027f4:	f240 02b4 	movw	r2, #180	@ 0xb4
 80027f8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80027fc:	3b01      	subs	r3, #1
 80027fe:	8013      	strh	r3, [r2, #0]
 8002800:	f000 bc2f 	b.w	8003062 <button_handle+0xe92>
                if (buttonState & BUT_UP_M) { shortCircuitTest ^= 1u; }
 8002804:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002808:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f013 0f04 	tst.w	r3, #4
 8002812:	d007      	beq.n	8002824 <button_handle+0x654>
 8002814:	f240 62fd 	movw	r2, #1789	@ 0x6fd
 8002818:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800281c:	7811      	ldrb	r1, [r2, #0]
 800281e:	f081 0101 	eor.w	r1, r1, #1
 8002822:	7011      	strb	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) { shortCircuitTest ^= 1u; }
 8002824:	f013 0f08 	tst.w	r3, #8
 8002828:	f000 841b 	beq.w	8003062 <button_handle+0xe92>
 800282c:	f240 63fd 	movw	r3, #1789	@ 0x6fd
 8002830:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	f082 0201 	eor.w	r2, r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	f000 bc11 	b.w	8003062 <button_handle+0xe92>
            if (operatingMode == MODE_CHARGER) {
 8002840:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 8002844:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 8409 	bne.w	8003062 <button_handle+0xe92>
                if (buttonState & BUT_UP_M) 
 8002850:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002854:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f013 0f04 	tst.w	r3, #4
 800285e:	d008      	beq.n	8002872 <button_handle+0x6a2>
                    subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 8002860:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8002864:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002868:	780a      	ldrb	r2, [r1, #0]
 800286a:	3201      	adds	r2, #1
 800286c:	f002 0201 	and.w	r2, r2, #1
 8002870:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 8002872:	f013 0f08 	tst.w	r3, #8
 8002876:	f000 83f4 	beq.w	8003062 <button_handle+0xe92>
                    subIndex = (uint8_t)((subIndex + 1u) % total); 
 800287a:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 800287e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002882:	7813      	ldrb	r3, [r2, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	7013      	strb	r3, [r2, #0]
 800288c:	e3e9      	b.n	8003062 <button_handle+0xe92>
        if (isEditing) {
 800288e:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002892:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b3ab      	cbz	r3, 8002906 <button_handle+0x736>
            if (buttonState & BUT_UP_M) { operatingMode = MODE_CHARGER; }
 800289a:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800289e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f013 0f04 	tst.w	r3, #4
 80028a8:	d005      	beq.n	80028b6 <button_handle+0x6e6>
 80028aa:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 80028ae:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028b2:	2100      	movs	r1, #0
 80028b4:	7011      	strb	r1, [r2, #0]
            if (buttonState & BUT_DOWN_M) { operatingMode = MODE_SUPPLY; }
 80028b6:	f013 0f08 	tst.w	r3, #8
 80028ba:	d005      	beq.n	80028c8 <button_handle+0x6f8>
 80028bc:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80028c0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 80028c8:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80028cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f013 0f10 	tst.w	r3, #16
 80028d6:	f000 83c4 	beq.w	8003062 <button_handle+0xe92>
                mfgPinError = 0;
                lcd_menu_set_page(PAGE_MFG_PIN);
            }
        } else if (pageID == PAGE_OPERATING_MODE) {
            /* Sağ: seçili öğeye göre modu ATA ve ana sayfaya dön */
            if (subIndex == 0u) 
 80028da:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 80028de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028e2:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 80028e6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	3a00      	subs	r2, #0
 80028ee:	bf18      	it	ne
 80028f0:	2201      	movne	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
    pageID = page;
 80028f4:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80028f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002900:	f7fe fa85 	bl	8000e0e <LCD_Clear>
}
 8002904:	e3ad      	b.n	8003062 <button_handle+0xe92>
            if (buttonState & BUT_UP_M) 
 8002906:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800290a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f013 0f04 	tst.w	r3, #4
 8002914:	d008      	beq.n	8002928 <button_handle+0x758>
                subIndex = (uint8_t)((subIndex + 2u - 1u) % 2u); 
 8002916:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 800291a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800291e:	780a      	ldrb	r2, [r1, #0]
 8002920:	3201      	adds	r2, #1
 8002922:	f002 0201 	and.w	r2, r2, #1
 8002926:	700a      	strb	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) 
 8002928:	f013 0f08 	tst.w	r3, #8
 800292c:	d0cc      	beq.n	80028c8 <button_handle+0x6f8>
                subIndex = (uint8_t)((subIndex + 1u) % 2u); 
 800292e:	f240 52b1 	movw	r2, #1457	@ 0x5b1
 8002932:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002936:	7813      	ldrb	r3, [r2, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	7013      	strb	r3, [r2, #0]
 8002940:	e7c2      	b.n	80028c8 <button_handle+0x6f8>
        if (isEditing) {
 8002942:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002946:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8086 	beq.w	8002a5e <button_handle+0x88e>
            if (subIndex == 1) {
 8002952:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002956:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d02e      	beq.n	80029be <button_handle+0x7ee>
    if (buttonState & BUT_RIGHT_M) {
 8002960:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002964:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f013 0f10 	tst.w	r3, #16
 800296e:	f000 8378 	beq.w	8003062 <button_handle+0xe92>
            if (subIndex == 0u) {
 8002972:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002976:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 83d3 	beq.w	8003128 <button_handle+0xf58>
            } else if (subIndex == 1u) {
 8002982:	2b01      	cmp	r3, #1
 8002984:	d052      	beq.n	8002a2c <button_handle+0x85c>
                mfgPinPos = 0; 
 8002986:	f240 5290 	movw	r2, #1424	@ 0x590
 800298a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800298e:	2300      	movs	r3, #0
 8002990:	7013      	strb	r3, [r2, #0]
                mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 8002992:	f240 5294 	movw	r2, #1428	@ 0x594
 8002996:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800299a:	70d3      	strb	r3, [r2, #3]
 800299c:	7093      	strb	r3, [r2, #2]
 800299e:	7053      	strb	r3, [r2, #1]
 80029a0:	7013      	strb	r3, [r2, #0]
                mfgPinError = 0;
 80029a2:	f240 52a8 	movw	r2, #1448	@ 0x5a8
 80029a6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80029aa:	7013      	strb	r3, [r2, #0]
    pageID = page;
 80029ac:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80029b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029b4:	2207      	movs	r2, #7
 80029b6:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80029b8:	f7fe fa29 	bl	8000e0e <LCD_Clear>
}
 80029bc:	e351      	b.n	8003062 <button_handle+0xe92>
                if (buttonState & BUT_UP_M) 
 80029be:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80029c2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f013 0f04 	tst.w	r3, #4
 80029cc:	d01b      	beq.n	8002a06 <button_handle+0x836>
                    if (brightness < 100) 
 80029ce:	f240 0214 	movw	r2, #20
 80029d2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	2a63      	cmp	r2, #99	@ 0x63
 80029da:	d805      	bhi.n	80029e8 <button_handle+0x818>
                        brightness++; 
 80029dc:	f240 0114 	movw	r1, #20
 80029e0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80029e4:	3201      	adds	r2, #1
 80029e6:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 80029e8:	f013 0f08 	tst.w	r3, #8
 80029ec:	d015      	beq.n	8002a1a <button_handle+0x84a>
                    if (brightness > 0) 
 80029ee:	f240 0314 	movw	r3, #20
 80029f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029f6:	781b      	ldrb	r3, [r3, #0]
                        brightness--; 
 80029f8:	f240 0214 	movw	r2, #20
 80029fc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002a00:	3b01      	subs	r3, #1
 8002a02:	7013      	strb	r3, [r2, #0]
 8002a04:	e009      	b.n	8002a1a <button_handle+0x84a>
                if (buttonState & BUT_DOWN_M) 
 8002a06:	f013 0f08 	tst.w	r3, #8
 8002a0a:	d006      	beq.n	8002a1a <button_handle+0x84a>
                    if (brightness > 0) 
 8002a0c:	f240 0314 	movw	r3, #20
 8002a10:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ee      	bne.n	80029f8 <button_handle+0x828>
    if (buttonState & BUT_RIGHT_M) {
 8002a1a:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002a1e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f013 0f10 	tst.w	r3, #16
 8002a28:	f000 831b 	beq.w	8003062 <button_handle+0xe92>
                if (!isEditing) 
 8002a2c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002a30:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8380 	bne.w	800313c <button_handle+0xf6c>
                    editBackupValue = brightness; 
 8002a3c:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 8002a40:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a44:	f240 0214 	movw	r2, #20
 8002a48:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	801a      	strh	r2, [r3, #0]
                    isEditing = 1u; 
 8002a50:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002a54:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e301      	b.n	8003062 <button_handle+0xe92>
            if (buttonState & BUT_UP_M) 
 8002a5e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002a62:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	f012 0f04 	tst.w	r2, #4
 8002a6c:	d011      	beq.n	8002a92 <button_handle+0x8c2>
                subIndex = (uint8_t)((subIndex + 3u - 1u) % 3u); 
 8002a6e:	f240 50b1 	movw	r0, #1457	@ 0x5b1
 8002a72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002a76:	7803      	ldrb	r3, [r0, #0]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 8002a7e:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 8002a82:	fba1 c103 	umull	ip, r1, r1, r3
 8002a86:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 8002a8a:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 8002a8e:	1a5b      	subs	r3, r3, r1
 8002a90:	7003      	strb	r3, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 8002a92:	f012 0f08 	tst.w	r2, #8
 8002a96:	f43f af63 	beq.w	8002960 <button_handle+0x790>
                subIndex = (uint8_t)((subIndex + 1u) % 3u); 
 8002a9a:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8002a9e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002aa2:	780b      	ldrb	r3, [r1, #0]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8002aaa:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8002aae:	fba2 0203 	umull	r0, r2, r2, r3
 8002ab2:	f402 70ff 	and.w	r0, r2, #510	@ 0x1fe
 8002ab6:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	700b      	strb	r3, [r1, #0]
 8002abe:	e74f      	b.n	8002960 <button_handle+0x790>
        if (isEditing) {
 8002ac0:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002ac4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d05f      	beq.n	8002b8e <button_handle+0x9be>
            if (buttonState & BUT_UP_M) {
 8002ace:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002ad2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	f013 0f04 	tst.w	r3, #4
 8002adc:	d047      	beq.n	8002b6e <button_handle+0x99e>
                if (gainEditDigits[gainEditPos] < 9) { gainEditDigits[gainEditPos]++; }
 8002ade:	f240 529a 	movw	r2, #1434	@ 0x59a
 8002ae2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	f240 519c 	movw	r1, #1436	@ 0x59c
 8002aec:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002af0:	5c89      	ldrb	r1, [r1, r2]
 8002af2:	2908      	cmp	r1, #8
 8002af4:	d805      	bhi.n	8002b02 <button_handle+0x932>
 8002af6:	f240 509c 	movw	r0, #1436	@ 0x59c
 8002afa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002afe:	3101      	adds	r1, #1
 8002b00:	5481      	strb	r1, [r0, r2]
            if (buttonState & BUT_DOWN_M) {
 8002b02:	f013 0f08 	tst.w	r3, #8
 8002b06:	d00a      	beq.n	8002b1e <button_handle+0x94e>
                if (gainEditDigits[gainEditPos] > 0) { gainEditDigits[gainEditPos]--; }
 8002b08:	f240 539c 	movw	r3, #1436	@ 0x59c
 8002b0c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b10:	5c9b      	ldrb	r3, [r3, r2]
 8002b12:	f240 519c 	movw	r1, #1436	@ 0x59c
 8002b16:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	548b      	strb	r3, [r1, r2]
    if (buttonState & BUT_RIGHT_M) {
 8002b1e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002b22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f013 0f10 	tst.w	r3, #16
 8002b2c:	f000 8299 	beq.w	8003062 <button_handle+0xe92>
                    mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
                }
            }
        } else if (pageID == PAGE_MFG_GAIN) {
            /* Right: enter edit or advance digit / confirm */
            uint8_t sel = (uint8_t)(subIndex % 9u);
 8002b30:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002b34:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	f648 6339 	movw	r3, #36409	@ 0x8e39
 8002b3e:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 8002b42:	fba3 1302 	umull	r1, r3, r3, r2
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	b2db      	uxtb	r3, r3
                gainEditDigits[2] = (uint8_t)((val / 100u) % 10u);
                gainEditDigits[3] = (uint8_t)((val / 10u) % 10u);
                gainEditDigits[4] = (uint8_t)(val % 10u);
                gainEditPos = 0; isEditing = 1u;
            } else {
                if (gainEditPos < 4u) {
 8002b50:	f240 529a 	movw	r2, #1434	@ 0x59a
 8002b54:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b58:	7812      	ldrb	r2, [r2, #0]
 8002b5a:	2a03      	cmp	r2, #3
 8002b5c:	f200 8365 	bhi.w	800322a <button_handle+0x105a>
                    gainEditPos++;
 8002b60:	f240 539a 	movw	r3, #1434	@ 0x59a
 8002b64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b68:	3201      	adds	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e279      	b.n	8003062 <button_handle+0xe92>
            if (buttonState & BUT_DOWN_M) {
 8002b6e:	f013 0f08 	tst.w	r3, #8
 8002b72:	d0d4      	beq.n	8002b1e <button_handle+0x94e>
                if (gainEditDigits[gainEditPos] > 0) { gainEditDigits[gainEditPos]--; }
 8002b74:	f240 539a 	movw	r3, #1434	@ 0x59a
 8002b78:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	f240 539c 	movw	r3, #1436	@ 0x59c
 8002b82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0c8      	beq.n	8002b1e <button_handle+0x94e>
 8002b8c:	e7c1      	b.n	8002b12 <button_handle+0x942>
            if (buttonState & BUT_UP_M) { subIndex = (uint8_t)((subIndex + 9u - 1u) % 9u); }
 8002b8e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002b92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b96:	7819      	ldrb	r1, [r3, #0]
 8002b98:	f011 0f04 	tst.w	r1, #4
 8002b9c:	d010      	beq.n	8002bc0 <button_handle+0x9f0>
 8002b9e:	f240 50b1 	movw	r0, #1457	@ 0x5b1
 8002ba2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002ba6:	7802      	ldrb	r2, [r0, #0]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	f648 6339 	movw	r3, #36409	@ 0x8e39
 8002bae:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 8002bb2:	fba3 c302 	umull	ip, r3, r3, r2
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002bbc:	1ad2      	subs	r2, r2, r3
 8002bbe:	7002      	strb	r2, [r0, #0]
            if (buttonState & BUT_DOWN_M) { subIndex = (uint8_t)((subIndex + 1u) % 9u); }
 8002bc0:	f011 0f08 	tst.w	r1, #8
 8002bc4:	d010      	beq.n	8002be8 <button_handle+0xa18>
 8002bc6:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8002bca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002bce:	780a      	ldrb	r2, [r1, #0]
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	f648 6339 	movw	r3, #36409	@ 0x8e39
 8002bd6:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 8002bda:	fba3 0302 	umull	r0, r3, r3, r2
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002be4:	1ad2      	subs	r2, r2, r3
 8002be6:	700a      	strb	r2, [r1, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002be8:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002bec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f013 0f10 	tst.w	r3, #16
 8002bf6:	f000 8234 	beq.w	8003062 <button_handle+0xe92>
            uint8_t sel = (uint8_t)(subIndex % 9u);
 8002bfa:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002bfe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	f648 6339 	movw	r3, #36409	@ 0x8e39
 8002c08:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 8002c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b2db      	uxtb	r3, r3
                uint16_t val = (uint16_t)adcGain[sel];
 8002c1a:	f240 1234 	movw	r2, #308	@ 0x134
 8002c1e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c22:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
                editBackupValue = val;
 8002c26:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 8002c2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c2e:	8019      	strh	r1, [r3, #0]
                gainEditDigits[0] = (uint8_t)((val / 10000u) % 10u);
 8002c30:	f240 509c 	movw	r0, #1436	@ 0x59c
 8002c34:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002c38:	f241 7359 	movw	r3, #5977	@ 0x1759
 8002c3c:	f2cd 13b7 	movt	r3, #53687	@ 0xd1b7
 8002c40:	fba3 3201 	umull	r3, r2, r3, r1
 8002c44:	f64c 43cd 	movw	r3, #52429	@ 0xcccd
 8002c48:	f6cc 43cc 	movt	r3, #52428	@ 0xcccc
 8002c4c:	0b52      	lsrs	r2, r2, #13
 8002c4e:	7002      	strb	r2, [r0, #0]
                gainEditDigits[1] = (uint8_t)((val / 1000u) % 10u);
 8002c50:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8002c54:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8002c58:	fba2 c201 	umull	ip, r2, r2, r1
 8002c5c:	0992      	lsrs	r2, r2, #6
 8002c5e:	fba3 ec02 	umull	lr, ip, r3, r2
 8002c62:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8002c66:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002c6a:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
 8002c6e:	7042      	strb	r2, [r0, #1]
                gainEditDigits[2] = (uint8_t)((val / 100u) % 10u);
 8002c70:	f248 521f 	movw	r2, #34079	@ 0x851f
 8002c74:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8002c78:	fba2 c201 	umull	ip, r2, r2, r1
 8002c7c:	0952      	lsrs	r2, r2, #5
 8002c7e:	fba3 ec02 	umull	lr, ip, r3, r2
 8002c82:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8002c86:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002c8a:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
 8002c8e:	7082      	strb	r2, [r0, #2]
                gainEditDigits[3] = (uint8_t)((val / 10u) % 10u);
 8002c90:	fba3 c201 	umull	ip, r2, r3, r1
 8002c94:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8002c98:	fba3 e30c 	umull	lr, r3, r3, ip
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ca2:	ebac 0243 	sub.w	r2, ip, r3, lsl #1
 8002ca6:	70c2      	strb	r2, [r0, #3]
                gainEditDigits[4] = (uint8_t)(val % 10u);
 8002ca8:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002cac:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8002cb0:	7101      	strb	r1, [r0, #4]
                gainEditPos = 0; isEditing = 1u;
 8002cb2:	f240 539a 	movw	r3, #1434	@ 0x59a
 8002cb6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8002cc2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e1ca      	b.n	8003062 <button_handle+0xe92>
        if (buttonState & BUT_UP_M) 
 8002ccc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002cd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	f013 0f04 	tst.w	r3, #4
 8002cda:	d020      	beq.n	8002d1e <button_handle+0xb4e>
            if (mfgPinInput[mfgPinPos] < 9) 
 8002cdc:	f240 5290 	movw	r2, #1424	@ 0x590
 8002ce0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	f240 5194 	movw	r1, #1428	@ 0x594
 8002cea:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002cee:	5c89      	ldrb	r1, [r1, r2]
 8002cf0:	2908      	cmp	r1, #8
 8002cf2:	d805      	bhi.n	8002d00 <button_handle+0xb30>
                mfgPinInput[mfgPinPos]++;
 8002cf4:	f240 5094 	movw	r0, #1428	@ 0x594
 8002cf8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002cfc:	3101      	adds	r1, #1
 8002cfe:	5481      	strb	r1, [r0, r2]
        if (buttonState & BUT_DOWN_M) 
 8002d00:	f013 0f08 	tst.w	r3, #8
 8002d04:	d01a      	beq.n	8002d3c <button_handle+0xb6c>
            if (mfgPinInput[mfgPinPos] > 0) 
 8002d06:	f240 5194 	movw	r1, #1428	@ 0x594
 8002d0a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002d0e:	5c89      	ldrb	r1, [r1, r2]
                mfgPinInput[mfgPinPos]--;
 8002d10:	f240 5094 	movw	r0, #1428	@ 0x594
 8002d14:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002d18:	3901      	subs	r1, #1
 8002d1a:	5481      	strb	r1, [r0, r2]
 8002d1c:	e00e      	b.n	8002d3c <button_handle+0xb6c>
        if (buttonState & BUT_DOWN_M) 
 8002d1e:	f013 0f08 	tst.w	r3, #8
 8002d22:	d00b      	beq.n	8002d3c <button_handle+0xb6c>
            if (mfgPinInput[mfgPinPos] > 0) 
 8002d24:	f240 5290 	movw	r2, #1424	@ 0x590
 8002d28:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	f240 5194 	movw	r1, #1428	@ 0x594
 8002d32:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002d36:	5c89      	ldrb	r1, [r1, r2]
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d1e9      	bne.n	8002d10 <button_handle+0xb40>
        if (buttonState & BUT_LEFT_M) 
 8002d3c:	f013 0f01 	tst.w	r3, #1
 8002d40:	d00c      	beq.n	8002d5c <button_handle+0xb8c>
            if (mfgPinPos < 3u)
 8002d42:	f240 5390 	movw	r3, #1424	@ 0x590
 8002d46:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d843      	bhi.n	8002dd8 <button_handle+0xc08>
                mfgPinPos++;
 8002d50:	f240 5290 	movw	r2, #1424	@ 0x590
 8002d54:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002d58:	3301      	adds	r3, #1
 8002d5a:	7013      	strb	r3, [r2, #0]
            GPIO_PinState rightNow = HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin);
 8002d5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d60:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002d64:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002d68:	f001 fdce 	bl	8004908 <HAL_GPIO_ReadPin>
            if (rightNow == GPIO_PIN_SET) {
 8002d6c:	2801      	cmp	r0, #1
 8002d6e:	d072      	beq.n	8002e56 <button_handle+0xc86>
                rightPressStartMs = 0u;
 8002d70:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8002d74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
                rightPressTriggered = 0u;
 8002d7c:	f240 5372 	movw	r3, #1394	@ 0x572
 8002d80:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d84:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002d86:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002d8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f013 0f10 	tst.w	r3, #16
 8002d94:	f000 8165 	beq.w	8003062 <button_handle+0xe92>
        if (pageID == PAGE_MAIN) {
 8002d98:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8002d9c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b09      	cmp	r3, #9
 8002da4:	f200 815d 	bhi.w	8003062 <button_handle+0xe92>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <button_handle+0xbe0>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08003081 	.word	0x08003081
 8002db4:	08003053 	.word	0x08003053
 8002db8:	080024a7 	.word	0x080024a7
 8002dbc:	0800270d 	.word	0x0800270d
 8002dc0:	08003063 	.word	0x08003063
 8002dc4:	080028db 	.word	0x080028db
 8002dc8:	08002973 	.word	0x08002973
 8002dcc:	0800314b 	.word	0x0800314b
 8002dd0:	08003063 	.word	0x08003063
 8002dd4:	08003201 	.word	0x08003201
                if (entered == mfgPinCode) {
 8002dd8:	f240 5098 	movw	r0, #1432	@ 0x598
 8002ddc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 8002de0:	f240 5194 	movw	r1, #1428	@ 0x594
 8002de4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002de8:	780b      	ldrb	r3, [r1, #0]
 8002dea:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8002dee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002df2:	784b      	ldrb	r3, [r1, #1]
 8002df4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e02:	78ca      	ldrb	r2, [r1, #3]
 8002e04:	4413      	add	r3, r2
 8002e06:	788a      	ldrb	r2, [r1, #2]
 8002e08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e0c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                if (entered == mfgPinCode) {
 8002e10:	8802      	ldrh	r2, [r0, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d00f      	beq.n	8002e38 <button_handle+0xc68>
                    mfgPinError = 1; 
 8002e18:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8002e1c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
                    mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 8002e24:	f001 fb11 	bl	800444a <HAL_GetTick>
 8002e28:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 8002e2c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e30:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8002e34:	6018      	str	r0, [r3, #0]
 8002e36:	e791      	b.n	8002d5c <button_handle+0xb8c>
                    mfgPinError = 0; 
 8002e38:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8002e3c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8002e44:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8002e48:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e50:	f7fd ffdd 	bl	8000e0e <LCD_Clear>
}
 8002e54:	e782      	b.n	8002d5c <button_handle+0xb8c>
                if (rightPressStartMs == 0u) { rightPressStartMs = HAL_GetTick(); rightPressTriggered = 0u; }
 8002e56:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8002e5a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d056      	beq.n	8002f12 <button_handle+0xd42>
                else if (!rightPressTriggered && (HAL_GetTick() - rightPressStartMs) >= 1000u) {
 8002e64:	f240 5372 	movw	r3, #1394	@ 0x572
 8002e68:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d189      	bne.n	8002d86 <button_handle+0xbb6>
 8002e72:	f001 faea 	bl	800444a <HAL_GetTick>
 8002e76:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8002e7a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	1ac3      	subs	r3, r0, r3
 8002e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e86:	f4ff af7e 	bcc.w	8002d86 <button_handle+0xbb6>
                    if (entered == mfgPinCode) {
 8002e8a:	f240 5098 	movw	r0, #1432	@ 0x598
 8002e8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                    uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 8002e92:	f240 5194 	movw	r1, #1428	@ 0x594
 8002e96:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002e9a:	780b      	ldrb	r3, [r1, #0]
 8002e9c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8002ea0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002ea4:	784b      	ldrb	r3, [r1, #1]
 8002ea6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002eaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eb4:	78ca      	ldrb	r2, [r1, #3]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	788a      	ldrb	r2, [r1, #2]
 8002eba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ebe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    if (entered == mfgPinCode) {
 8002ec2:	8802      	ldrh	r2, [r0, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d031      	beq.n	8002f2e <button_handle+0xd5e>
                        mfgPinError = 1; 
 8002eca:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8002ece:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
                        mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 8002ed6:	f001 fab8 	bl	800444a <HAL_GetTick>
 8002eda:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 8002ede:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ee2:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8002ee6:	6018      	str	r0, [r3, #0]
                        mfgPinPos = 0;
 8002ee8:	f240 5390 	movw	r3, #1424	@ 0x590
 8002eec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
                        mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 8002ef4:	f240 5394 	movw	r3, #1428	@ 0x594
 8002ef8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002efc:	70da      	strb	r2, [r3, #3]
 8002efe:	709a      	strb	r2, [r3, #2]
 8002f00:	705a      	strb	r2, [r3, #1]
 8002f02:	701a      	strb	r2, [r3, #0]
                    rightPressTriggered = 1u; /* prevent retrigger until release */
 8002f04:	f240 5372 	movw	r3, #1394	@ 0x572
 8002f08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e739      	b.n	8002d86 <button_handle+0xbb6>
                if (rightPressStartMs == 0u) { rightPressStartMs = HAL_GetTick(); rightPressTriggered = 0u; }
 8002f12:	f001 fa9a 	bl	800444a <HAL_GetTick>
 8002f16:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8002f1a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f1e:	6018      	str	r0, [r3, #0]
 8002f20:	f240 5372 	movw	r3, #1394	@ 0x572
 8002f24:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e72b      	b.n	8002d86 <button_handle+0xbb6>
                        mfgPinError = 0; 
 8002f2e:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8002f32:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8002f3a:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8002f3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f42:	2208      	movs	r2, #8
 8002f44:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002f46:	f7fd ff62 	bl	8000e0e <LCD_Clear>
}
 8002f4a:	e7db      	b.n	8002f04 <button_handle+0xd34>
        if (buttonState & BUT_LEFT_M) 
 8002f4c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002f50:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f013 0f01 	tst.w	r3, #1
 8002f5a:	d171      	bne.n	8003040 <button_handle+0xe70>
        if (buttonState & BUT_UP_M) 
 8002f5c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8002f60:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f013 0f04 	tst.w	r3, #4
 8002f6a:	d011      	beq.n	8002f90 <button_handle+0xdc0>
            subIndex = (uint8_t)((subIndex + 5u - 1u) % 5u);
 8002f6c:	f240 50b1 	movw	r0, #1457	@ 0x5b1
 8002f70:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002f74:	7802      	ldrb	r2, [r0, #0]
 8002f76:	3204      	adds	r2, #4
 8002f78:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8002f7c:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8002f80:	fba1 c102 	umull	ip, r1, r1, r2
 8002f84:	f401 7cfe 	and.w	ip, r1, #508	@ 0x1fc
 8002f88:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 8002f8c:	1a52      	subs	r2, r2, r1
 8002f8e:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_DOWN_M) 
 8002f90:	f013 0f08 	tst.w	r3, #8
 8002f94:	d011      	beq.n	8002fba <button_handle+0xdea>
            subIndex = (uint8_t)((subIndex + 1u) % 5u);
 8002f96:	f240 50b1 	movw	r0, #1457	@ 0x5b1
 8002f9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002f9e:	7802      	ldrb	r2, [r0, #0]
 8002fa0:	3201      	adds	r2, #1
 8002fa2:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8002fa6:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8002faa:	fba1 c102 	umull	ip, r1, r1, r2
 8002fae:	f401 7cfe 	and.w	ip, r1, #508	@ 0x1fc
 8002fb2:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 8002fb6:	1a52      	subs	r2, r2, r1
 8002fb8:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_RIGHT_M)
 8002fba:	f013 0f10 	tst.w	r3, #16
 8002fbe:	d050      	beq.n	8003062 <button_handle+0xe92>
            UiStrId ids[5] = { UI_STR_MFG_COMPANY, UI_STR_MFG_GAIN, UI_STR_MFG_OFFSET, UI_STR_MFG_LIMITS, UI_STR_MFG_MODE };
 8002fc0:	231a      	movs	r3, #26
 8002fc2:	f88d 3000 	strb.w	r3, [sp]
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	f88d 3001 	strb.w	r3, [sp, #1]
 8002fcc:	231c      	movs	r3, #28
 8002fce:	f88d 3002 	strb.w	r3, [sp, #2]
 8002fd2:	231d      	movs	r3, #29
 8002fd4:	f88d 3003 	strb.w	r3, [sp, #3]
 8002fd8:	231e      	movs	r3, #30
 8002fda:	f88d 3004 	strb.w	r3, [sp, #4]
            uint8_t sel = (uint8_t)(subIndex % 5u);
 8002fde:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8002fe2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8002fec:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8002ff0:	fba2 1203 	umull	r1, r2, r2, r3
 8002ff4:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 8002ff8:	eb01 0292 	add.w	r2, r1, r2, lsr #2
 8002ffc:	1a9b      	subs	r3, r3, r2
            if (ids[sel] == UI_STR_MFG_GAIN) {
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3308      	adds	r3, #8
 8003002:	446b      	add	r3, sp
 8003004:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003008:	2b1b      	cmp	r3, #27
 800300a:	f47f aebc 	bne.w	8002d86 <button_handle+0xbb6>
                subIndex = 0; /* start from first channel */
 800300e:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8003012:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
                isEditing = 0; gainEditPos = 0; /* reset edit state */
 800301a:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 800301e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	f240 539a 	movw	r3, #1434	@ 0x59a
 8003028:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800302c:	701a      	strb	r2, [r3, #0]
    pageID = page;
 800302e:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8003032:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003036:	2209      	movs	r2, #9
 8003038:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800303a:	f7fd fee8 	bl	8000e0e <LCD_Clear>
}
 800303e:	e6a2      	b.n	8002d86 <button_handle+0xbb6>
    pageID = page;
 8003040:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8003044:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003048:	2206      	movs	r2, #6
 800304a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800304c:	f7fd fedf 	bl	8000e0e <LCD_Clear>
}
 8003050:	e784      	b.n	8002f5c <button_handle+0xd8c>
    pageID = page;
 8003052:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8003056:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800305e:	f7fd fed6 	bl	8000e0e <LCD_Clear>
                }
            }
        }
    }

    uiNeedsClear = 1; /* clear-once after any button handling */
 8003062:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 8003066:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
    buttonState = 0;
 800306e:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8003072:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
}
 800307a:	b003      	add	sp, #12
 800307c:	f85d fb04 	ldr.w	pc, [sp], #4
    pageID = page;
 8003080:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8003084:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800308c:	f7fd febf 	bl	8000e0e <LCD_Clear>
}
 8003090:	e7e7      	b.n	8003062 <button_handle+0xe92>
    pageID = page;
 8003092:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 8003096:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800309a:	2203      	movs	r2, #3
 800309c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800309e:	f7fd feb6 	bl	8000e0e <LCD_Clear>
}
 80030a2:	e7de      	b.n	8003062 <button_handle+0xe92>
    pageID = page;
 80030a4:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80030a8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030ac:	2204      	movs	r2, #4
 80030ae:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80030b0:	f7fd fead 	bl	8000e0e <LCD_Clear>
}
 80030b4:	e7d5      	b.n	8003062 <button_handle+0xe92>
    pageID = page;
 80030b6:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80030ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030be:	2205      	movs	r2, #5
 80030c0:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80030c2:	f7fd fea4 	bl	8000e0e <LCD_Clear>
}
 80030c6:	e7cc      	b.n	8003062 <button_handle+0xe92>
    pageID = page;
 80030c8:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80030cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030d0:	2206      	movs	r2, #6
 80030d2:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80030d4:	f7fd fe9b 	bl	8000e0e <LCD_Clear>
}
 80030d8:	e7c3      	b.n	8003062 <button_handle+0xe92>
                            editBackupValue = (uint16_t)batInfo.batteryCap; 
 80030da:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 80030de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030e2:	f240 0220 	movw	r2, #32
 80030e6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80030ea:	6852      	ldr	r2, [r2, #4]
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	e0da      	b.n	80032a6 <button_handle+0x10d6>
                        if (subIndex == 0u) 
 80030f0:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 80030f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b953      	cbnz	r3, 8003112 <button_handle+0xf42>
                            editBackupValue = outputVSet_dV; 
 80030fc:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 8003100:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003104:	f240 02b2 	movw	r2, #178	@ 0xb2
 8003108:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800310c:	8812      	ldrh	r2, [r2, #0]
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	e0c9      	b.n	80032a6 <button_handle+0x10d6>
                            editBackupValue = outputIMax_dA; 
 8003112:	f240 53a2 	movw	r3, #1442	@ 0x5a2
 8003116:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800311a:	f240 02b0 	movw	r2, #176	@ 0xb0
 800311e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	e0be      	b.n	80032a6 <button_handle+0x10d6>
                lcd_menu_set_language((uint8_t)(lcdLangId ^ 1u));
 8003128:	f240 031d 	movw	r3, #29
 800312c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003130:	7818      	ldrb	r0, [r3, #0]
 8003132:	f080 0001 	eor.w	r0, r0, #1
 8003136:	f7fd ff85 	bl	8001044 <lcd_menu_set_language>
 800313a:	e792      	b.n	8003062 <button_handle+0xe92>
                    isEditing = 0u; 
 800313c:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8003140:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e78b      	b.n	8003062 <button_handle+0xe92>
            if (mfgPinPos < 3u)
 800314a:	f240 5390 	movw	r3, #1424	@ 0x590
 800314e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d806      	bhi.n	8003166 <button_handle+0xf96>
                mfgPinPos++;
 8003158:	f240 5290 	movw	r2, #1424	@ 0x590
 800315c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003160:	3301      	adds	r3, #1
 8003162:	7013      	strb	r3, [r2, #0]
 8003164:	e77d      	b.n	8003062 <button_handle+0xe92>
                if (entered == mfgPinCode) {
 8003166:	f240 5098 	movw	r0, #1432	@ 0x598
 800316a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 800316e:	f240 5194 	movw	r1, #1428	@ 0x594
 8003172:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003176:	780b      	ldrb	r3, [r1, #0]
 8003178:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800317c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003180:	784b      	ldrb	r3, [r1, #1]
 8003182:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003186:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003190:	78ca      	ldrb	r2, [r1, #3]
 8003192:	4413      	add	r3, r2
 8003194:	788a      	ldrb	r2, [r1, #2]
 8003196:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800319a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                if (entered == mfgPinCode) {
 800319e:	8802      	ldrh	r2, [r0, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d01d      	beq.n	80031e2 <button_handle+0x1012>
                    mfgPinError = 1; 
 80031a6:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 80031aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
                    mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 80031b2:	f001 f94a 	bl	800444a <HAL_GetTick>
 80031b6:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 80031ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031be:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 80031c2:	6018      	str	r0, [r3, #0]
                    mfgPinPos = 0;
 80031c4:	f240 5390 	movw	r3, #1424	@ 0x590
 80031c8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
                    mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 80031d0:	f240 5394 	movw	r3, #1428	@ 0x594
 80031d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031d8:	70da      	strb	r2, [r3, #3]
 80031da:	709a      	strb	r2, [r3, #2]
 80031dc:	705a      	strb	r2, [r3, #1]
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e73f      	b.n	8003062 <button_handle+0xe92>
                    mfgPinError = 0; 
 80031e2:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 80031e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    pageID = page;
 80031ee:	f240 53b5 	movw	r3, #1461	@ 0x5b5
 80031f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031f6:	2208      	movs	r2, #8
 80031f8:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80031fa:	f7fd fe08 	bl	8000e0e <LCD_Clear>
}
 80031fe:	e730      	b.n	8003062 <button_handle+0xe92>
            uint8_t sel = (uint8_t)(subIndex % 9u);
 8003200:	f240 53b1 	movw	r3, #1457	@ 0x5b1
 8003204:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	2309      	movs	r3, #9
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	b2db      	uxtb	r3, r3
            if (!isEditing) {
 8003218:	f240 52b0 	movw	r2, #1456	@ 0x5b0
 800321c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	2a00      	cmp	r2, #0
 8003224:	f47f ac94 	bne.w	8002b50 <button_handle+0x980>
 8003228:	e4f7      	b.n	8002c1a <button_handle+0xa4a>
                    adcGain[sel] = (int16_t)newVal;
 800322a:	f240 1034 	movw	r0, #308	@ 0x134
 800322e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                    uint16_t newVal = (uint16_t)(gainEditDigits[0]*10000u + gainEditDigits[1]*1000u + gainEditDigits[2]*100u + gainEditDigits[3]*10u + gainEditDigits[4]);
 8003232:	f240 5c9c 	movw	ip, #1436	@ 0x59c
 8003236:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800323a:	f89c 2000 	ldrb.w	r2, [ip]
 800323e:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
 8003242:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003246:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800324a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800324e:	ebc2 1e42 	rsb	lr, r2, r2, lsl #5
 8003252:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8003256:	00d2      	lsls	r2, r2, #3
 8003258:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800325c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8003260:	440a      	add	r2, r1
 8003262:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8003266:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800326a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800326e:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8003272:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003276:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800327a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
                    adcGain[sel] = (int16_t)newVal;
 800327e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
                    isEditing = 0u;
 8003282:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8003286:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e6e8      	b.n	8003062 <button_handle+0xe92>
                if (!isEditing) {
 8003290:	f240 52b0 	movw	r2, #1456	@ 0x5b0
 8003294:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003298:	7812      	ldrb	r2, [r2, #0]
 800329a:	2a00      	cmp	r2, #0
 800329c:	f47f aa46 	bne.w	800272c <button_handle+0x55c>
                        if (subIndex == 1u) 
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	f43f af1a 	beq.w	80030da <button_handle+0xf0a>
                    isEditing = 1u;
 80032a6:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80032aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e6d6      	b.n	8003062 <button_handle+0xe92>
                if (buttonState & BUT_DOWN_M) {
 80032b4:	f013 0f08 	tst.w	r3, #8
 80032b8:	d007      	beq.n	80032ca <button_handle+0x10fa>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 80032ba:	f240 03b2 	movw	r3, #178	@ 0xb2
 80032be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f a9ba 	bne.w	800263e <button_handle+0x46e>
    if (buttonState & BUT_RIGHT_M) {
 80032ca:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80032ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f013 0f10 	tst.w	r3, #16
 80032d8:	f43f aec3 	beq.w	8003062 <button_handle+0xe92>
 80032dc:	f7ff ba1e 	b.w	800271c <button_handle+0x54c>
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop

080032e4 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	f1c0 0c07 	rsb	ip, r0, #7
 80032ec:	f1bc 0f04 	cmp.w	ip, #4
 80032f0:	bf28      	it	cs
 80032f2:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	1d03      	adds	r3, r0, #4
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	bf8c      	ite	hi
 80032fc:	1ec3      	subhi	r3, r0, #3
 80032fe:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	fa00 fc0c 	lsl.w	ip, r0, ip
 8003308:	ea21 010c 	bic.w	r1, r1, ip
 800330c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330e:	4098      	lsls	r0, r3
 8003310:	ea22 0000 	bic.w	r0, r2, r0
         );
}
 8003314:	4308      	orrs	r0, r1
 8003316:	4770      	bx	lr

08003318 <LL_ADC_SetChannelSamplingTime>:
{
 8003318:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800331e:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	f001 7e00 	and.w	lr, r1, #33554432	@ 0x2000000
 800332a:	fa2e fe03 	lsr.w	lr, lr, r3
 800332e:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 8003330:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003334:	f001 71f8 	and.w	r1, r1, #32505856	@ 0x1f00000
 8003338:	f04f 73f8 	mov.w	r3, #32505856	@ 0x1f00000
 800333c:	fa93 fca3 	rbit	ip, r3
 8003340:	fabc fc8c 	clz	ip, ip
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003350:	2507      	movs	r5, #7
 8003352:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003356:	ea24 0c0c 	bic.w	ip, r4, ip
 800335a:	40d9      	lsrs	r1, r3
 800335c:	408a      	lsls	r2, r1
 800335e:	ea4c 0202 	orr.w	r2, ip, r2
 8003362:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
}
 8003366:	bd30      	pop	{r4, r5, pc}

08003368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003368:	b500      	push	{lr}
 800336a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800336c:	2300      	movs	r3, #0
 800336e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003370:	930c      	str	r3, [sp, #48]	@ 0x30
 8003372:	930d      	str	r3, [sp, #52]	@ 0x34
 8003374:	930e      	str	r3, [sp, #56]	@ 0x38
 8003376:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003378:	9303      	str	r3, [sp, #12]
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	9305      	str	r3, [sp, #20]
 800337e:	9306      	str	r3, [sp, #24]
 8003380:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003388:	2201      	movs	r2, #1
 800338a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800338c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003390:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003392:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003394:	2202      	movs	r2, #2
 8003396:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003398:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800339a:	a808      	add	r0, sp, #32
 800339c:	f001 fba0 	bl	8004ae0 <HAL_RCC_OscConfig>
 80033a0:	b9c0      	cbnz	r0, 80033d4 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033a2:	230f      	movs	r3, #15
 80033a4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a6:	2302      	movs	r3, #2
 80033a8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033aa:	2100      	movs	r1, #0
 80033ac:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033ae:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033b0:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80033b2:	a803      	add	r0, sp, #12
 80033b4:	f001 fe60 	bl	8005078 <HAL_RCC_ClockConfig>
 80033b8:	b970      	cbnz	r0, 80033d8 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033ba:	2302      	movs	r3, #2
 80033bc:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80033be:	2300      	movs	r3, #0
 80033c0:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033c2:	4668      	mov	r0, sp
 80033c4:	f001 ff3f 	bl	8005246 <HAL_RCCEx_PeriphCLKConfig>
 80033c8:	b940      	cbnz	r0, 80033dc <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80033ca:	f001 fe14 	bl	8004ff6 <HAL_RCC_EnableCSS>
}
 80033ce:	b013      	add	sp, #76	@ 0x4c
 80033d0:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <SystemClock_Config+0x6e>
 80033d8:	b672      	cpsid	i
 80033da:	e7fe      	b.n	80033da <SystemClock_Config+0x72>
 80033dc:	b672      	cpsid	i
 80033de:	e7fe      	b.n	80033de <SystemClock_Config+0x76>

080033e0 <main>:
{
 80033e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80033e4:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 80033e6:	f001 f818 	bl	800441a <HAL_Init>
  SystemClock_Config();
 80033ea:	f7ff ffbd 	bl	8003368 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ee:	2400      	movs	r4, #0
 80033f0:	940f      	str	r4, [sp, #60]	@ 0x3c
 80033f2:	9410      	str	r4, [sp, #64]	@ 0x40
 80033f4:	9411      	str	r4, [sp, #68]	@ 0x44
 80033f6:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80033fc:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8003400:	69ab      	ldr	r3, [r5, #24]
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	61ab      	str	r3, [r5, #24]
 8003408:	69ab      	ldr	r3, [r5, #24]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	69ab      	ldr	r3, [r5, #24]
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	61ab      	str	r3, [r5, #24]
 800341a:	69ab      	ldr	r3, [r5, #24]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	9305      	str	r3, [sp, #20]
 8003422:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	69ab      	ldr	r3, [r5, #24]
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	61ab      	str	r3, [r5, #24]
 800342c:	69ab      	ldr	r3, [r5, #24]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	9306      	str	r3, [sp, #24]
 8003434:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003436:	69ab      	ldr	r3, [r5, #24]
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	61ab      	str	r3, [r5, #24]
 800343e:	69ab      	ldr	r3, [r5, #24]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	9307      	str	r3, [sp, #28]
 8003446:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003448:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
 800344c:	f2c4 0b01 	movt	fp, #16385	@ 0x4001
 8003450:	4622      	mov	r2, r4
 8003452:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003456:	4658      	mov	r0, fp
 8003458:	f001 fa5c 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800345c:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8003460:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 8003464:	2201      	movs	r2, #1
 8003466:	2108      	movs	r1, #8
 8003468:	4640      	mov	r0, r8
 800346a:	f001 fa53 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 800346e:	f44f 6940 	mov.w	r9, #3072	@ 0xc00
 8003472:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 8003476:	4622      	mov	r2, r4
 8003478:	f248 0138 	movw	r1, #32824	@ 0x8038
 800347c:	4648      	mov	r0, r9
 800347e:	f001 fa49 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 8003482:	4622      	mov	r2, r4
 8003484:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8003488:	4640      	mov	r0, r8
 800348a:	f001 fa43 	bl	8004914 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 800348e:	f44f 4760 	mov.w	r7, #57344	@ 0xe000
 8003492:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003494:	f04f 0a01 	mov.w	sl, #1
 8003498:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349e:	2602      	movs	r6, #2
 80034a0:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a2:	a90f      	add	r1, sp, #60	@ 0x3c
 80034a4:	4658      	mov	r0, fp
 80034a6:	f001 f8eb 	bl	8004680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 80034aa:	f641 6308 	movw	r3, #7688	@ 0x1e08
 80034ae:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	a90f      	add	r1, sp, #60	@ 0x3c
 80034ba:	4640      	mov	r0, r8
 80034bc:	f001 f8e0 	bl	8004680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 80034c0:	f647 4304 	movw	r3, #31748	@ 0x7c04
 80034c4:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034c6:	4623      	mov	r3, r4
 80034c8:	f2c1 0311 	movt	r3, #4113	@ 0x1011
 80034cc:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	a90f      	add	r1, sp, #60	@ 0x3c
 80034d2:	4648      	mov	r0, r9
 80034d4:	f001 f8d4 	bl	8004680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 80034d8:	f248 0338 	movw	r3, #32824	@ 0x8038
 80034dc:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034de:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e6:	a90f      	add	r1, sp, #60	@ 0x3c
 80034e8:	4648      	mov	r0, r9
 80034ea:	f001 f8c9 	bl	8004680 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80034ee:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80034f2:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f8:	a90f      	add	r1, sp, #60	@ 0x3c
 80034fa:	4640      	mov	r0, r8
 80034fc:	f001 f8c0 	bl	8004680 <HAL_GPIO_Init>
  __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003500:	4622      	mov	r2, r4
 8003502:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003506:	6853      	ldr	r3, [r2, #4]
 8003508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003514:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8003516:	4622      	mov	r2, r4
 8003518:	210f      	movs	r1, #15
 800351a:	2008      	movs	r0, #8
 800351c:	f000 ffc2 	bl	80044a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003520:	2008      	movs	r0, #8
 8003522:	f000 fff8 	bl	8004516 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8003526:	4622      	mov	r2, r4
 8003528:	210f      	movs	r1, #15
 800352a:	2028      	movs	r0, #40	@ 0x28
 800352c:	f000 ffba 	bl	80044a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003530:	2028      	movs	r0, #40	@ 0x28
 8003532:	f000 fff0 	bl	8004516 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003536:	696b      	ldr	r3, [r5, #20]
 8003538:	ea43 030a 	orr.w	r3, r3, sl
 800353c:	616b      	str	r3, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800353e:	696b      	ldr	r3, [r5, #20]
 8003540:	ea03 030a 	and.w	r3, r3, sl
 8003544:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003546:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003548:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800354c:	f367 431f 	bfi	r3, r7, #16, #16
 8003550:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003552:	4622      	mov	r2, r4
 8003554:	4621      	mov	r1, r4
 8003556:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800355a:	f7ff fec3 	bl	80032e4 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	0103      	lsls	r3, r0, #4
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003566:	f367 421f 	bfi	r2, r7, #16, #16
 800356a:	f882 330b 	strb.w	r3, [r2, #779]	@ 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8003572:	f367 431f 	bfi	r3, r7, #16, #16
 8003576:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800357a:	601a      	str	r2, [r3, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800357c:	9408      	str	r4, [sp, #32]
 800357e:	9409      	str	r4, [sp, #36]	@ 0x24
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003580:	940a      	str	r4, [sp, #40]	@ 0x28
 8003582:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003584:	940c      	str	r4, [sp, #48]	@ 0x30
 8003586:	940d      	str	r4, [sp, #52]	@ 0x34
 8003588:	940e      	str	r4, [sp, #56]	@ 0x38
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	9410      	str	r4, [sp, #64]	@ 0x40
 800358c:	9411      	str	r4, [sp, #68]	@ 0x44
 800358e:	9412      	str	r4, [sp, #72]	@ 0x48
 8003590:	9413      	str	r4, [sp, #76]	@ 0x4c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003592:	69ab      	ldr	r3, [r5, #24]
 8003594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003598:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800359a:	69ab      	ldr	r3, [r5, #24]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80035a2:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->APB2ENR, Periphs);
 80035a4:	69ab      	ldr	r3, [r5, #24]
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80035ac:	69ab      	ldr	r3, [r5, #24]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80035b4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80035b6:	69ab      	ldr	r3, [r5, #24]
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80035be:	69ab      	ldr	r3, [r5, #24]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80035c6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_6
 80035c8:	f24c 73c7 	movw	r3, #51143	@ 0xc7c7
 80035cc:	930f      	str	r3, [sp, #60]	@ 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ce:	a90f      	add	r1, sp, #60	@ 0x3c
 80035d0:	4640      	mov	r0, r8
 80035d2:	f002 fad7 	bl	8005b84 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80035d6:	f240 3303 	movw	r3, #771	@ 0x303
 80035da:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80035dc:	9410      	str	r4, [sp, #64]	@ 0x40
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	a90f      	add	r1, sp, #60	@ 0x3c
 80035e0:	4648      	mov	r0, r9
 80035e2:	f002 facf 	bl	8005b84 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80035e6:	4623      	mov	r3, r4
 80035e8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035f2:	f022 0210 	bic.w	r2, r2, #16
 80035f6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 80035fe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800360e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003616:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800361e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003622:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800362a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800362e:	609a      	str	r2, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8003634:	f367 431f 	bfi	r3, r7, #16, #16
 8003638:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(ADC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800363a:	4622      	mov	r2, r4
 800363c:	4621      	mov	r1, r4
 800363e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003642:	f7ff fe4f 	bl	80032e4 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003646:	0103      	lsls	r3, r0, #4
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800364e:	f367 421f 	bfi	r2, r7, #16, #16
 8003652:	f882 3312 	strb.w	r3, [r2, #786]	@ 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003656:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800365a:	f367 431f 	bfi	r3, r7, #16, #16
 800365e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003662:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003664:	9408      	str	r4, [sp, #32]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003666:	f44f 7880 	mov.w	r8, #256	@ 0x100
 800366a:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800366e:	f44f 5710 	mov.w	r7, #9216	@ 0x2400
 8003672:	f2c4 0701 	movt	r7, #16385	@ 0x4001
 8003676:	a908      	add	r1, sp, #32
 8003678:	4638      	mov	r0, r7
 800367a:	f002 fa47 	bl	8005b0c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 800367e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003682:	930a      	str	r3, [sp, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 8003684:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8003688:	930b      	str	r3, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800368a:	940c      	str	r4, [sp, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800368c:	940d      	str	r4, [sp, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800368e:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003692:	a90a      	add	r1, sp, #40	@ 0x28
 8003694:	4638      	mov	r0, r7
 8003696:	f002 fa4d 	bl	8005b34 <LL_ADC_REG_Init>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f44f 7940 	mov.w	r9, #768	@ 0x300
 800369e:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 80036aa:	fa2a f303 	lsr.w	r3, sl, r3
 80036ae:	f242 452c 	movw	r5, #9260	@ 0x242c
 80036b2:	f2c4 0501 	movt	r5, #16385	@ 0x4001
  MODIFY_REG(*preg,
 80036b6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80036ba:	f022 021f 	bic.w	r2, r2, #31
 80036be:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80036c2:	4632      	mov	r2, r6
 80036c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff fe25 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 80036ce:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 80036da:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80036de:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80036ea:	4632      	mov	r2, r6
 80036ec:	2101      	movs	r1, #1
 80036ee:	f2c0 2130 	movt	r1, #560	@ 0x230
 80036f2:	4638      	mov	r0, r7
 80036f4:	f7ff fe10 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 80036f8:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8003704:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8003708:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800370c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003710:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8003714:	4632      	mov	r2, r6
 8003716:	4631      	mov	r1, r6
 8003718:	f2c0 2160 	movt	r1, #608	@ 0x260
 800371c:	4638      	mov	r0, r7
 800371e:	f7ff fdfb 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 8003722:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 800372e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8003732:	f422 2278 	bic.w	r2, r2, #1015808	@ 0xf8000
 8003736:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800373a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800373e:	4632      	mov	r2, r6
 8003740:	2106      	movs	r1, #6
 8003742:	f2c0 3120 	movt	r1, #800	@ 0x320
 8003746:	4638      	mov	r0, r7
 8003748:	f7ff fde6 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 800374c:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8003758:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800375c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8003760:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 8003764:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8003768:	4632      	mov	r2, r6
 800376a:	2107      	movs	r1, #7
 800376c:	f2c0 3150 	movt	r1, #848	@ 0x350
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff fdd1 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 8003776:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8003782:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8003786:	f022 5278 	bic.w	r2, r2, #1040187392	@ 0x3e000000
 800378a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800378e:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8003792:	4632      	mov	r2, r6
 8003794:	2108      	movs	r1, #8
 8003796:	f2c0 3180 	movt	r1, #896	@ 0x380
 800379a:	4638      	mov	r0, r7
 800379c:	f7ff fdbc 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
 80037a0:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	fa28 f803 	lsr.w	r8, r8, r3
  MODIFY_REG(*preg,
 80037ac:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80037b0:	f023 031f 	bic.w	r3, r3, #31
 80037b4:	f043 0309 	orr.w	r3, r3, #9
 80037b8:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80037bc:	4632      	mov	r2, r6
 80037be:	2109      	movs	r1, #9
 80037c0:	f2c0 31b0 	movt	r1, #944	@ 0x3b0
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7ff fda7 	bl	8003318 <LL_ADC_SetChannelSamplingTime>
  DAC_ChannelConfTypeDef sConfig = {0};
 80037ca:	940f      	str	r4, [sp, #60]	@ 0x3c
 80037cc:	9410      	str	r4, [sp, #64]	@ 0x40
  hdac.Instance = DAC;
 80037ce:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 80037d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80037d6:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 80037da:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80037de:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80037e0:	f000 febc 	bl	800455c <HAL_DAC_Init>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f040 8115 	bne.w	8003a14 <main+0x634>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80037ea:	2200      	movs	r2, #0
 80037ec:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80037ee:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80037f0:	a90f      	add	r1, sp, #60	@ 0x3c
 80037f2:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 80037f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80037fa:	f000 ff10 	bl	800461e <HAL_DAC_ConfigChannel>
 80037fe:	2800      	cmp	r0, #0
 8003800:	f040 810a 	bne.w	8003a18 <main+0x638>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003804:	2210      	movs	r2, #16
 8003806:	a90f      	add	r1, sp, #60	@ 0x3c
 8003808:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 800380c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003810:	f000 ff05 	bl	800461e <HAL_DAC_ConfigChannel>
 8003814:	2800      	cmp	r0, #0
 8003816:	f040 8101 	bne.w	8003a1c <main+0x63c>
  hi2c1.Instance = I2C1;
 800381a:	f240 6094 	movw	r0, #1684	@ 0x694
 800381e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003822:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8003826:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800382a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800382c:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8003830:	f2c0 0301 	movt	r3, #1
 8003834:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003836:	2300      	movs	r3, #0
 8003838:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800383a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800383c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003840:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003842:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003844:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003846:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003848:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800384a:	f001 f87b 	bl	8004944 <HAL_I2C_Init>
 800384e:	2800      	cmp	r0, #0
 8003850:	f040 80e6 	bne.w	8003a20 <main+0x640>
  huart1.Instance = USART1;
 8003854:	f240 50bc 	movw	r0, #1468	@ 0x5bc
 8003858:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800385c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003860:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003864:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003866:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800386a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800386c:	2300      	movs	r3, #0
 800386e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003870:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003872:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003874:	220c      	movs	r2, #12
 8003876:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003878:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800387a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800387c:	f002 f916 	bl	8005aac <HAL_UART_Init>
 8003880:	2800      	cmp	r0, #0
 8003882:	f040 80cf 	bne.w	8003a24 <main+0x644>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003886:	2300      	movs	r3, #0
 8003888:	930f      	str	r3, [sp, #60]	@ 0x3c
 800388a:	9310      	str	r3, [sp, #64]	@ 0x40
 800388c:	9311      	str	r3, [sp, #68]	@ 0x44
 800388e:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003890:	930a      	str	r3, [sp, #40]	@ 0x28
 8003892:	930b      	str	r3, [sp, #44]	@ 0x2c
  htim3.Instance = TIM3;
 8003894:	f240 604c 	movw	r0, #1612	@ 0x64c
 8003898:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800389c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a0:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80038a4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 80038a6:	2217      	movs	r2, #23
 80038a8:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038aa:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 80038ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038b0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038b6:	f001 ff5f 	bl	8005778 <HAL_TIM_Base_Init>
 80038ba:	2800      	cmp	r0, #0
 80038bc:	f040 80b4 	bne.w	8003a28 <main+0x648>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038c4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038c6:	a90f      	add	r1, sp, #60	@ 0x3c
 80038c8:	f240 604c 	movw	r0, #1612	@ 0x64c
 80038cc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038d0:	f001 ff8a 	bl	80057e8 <HAL_TIM_ConfigClockSource>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f040 80a9 	bne.w	8003a2c <main+0x64c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038da:	2320      	movs	r3, #32
 80038dc:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038e2:	a90a      	add	r1, sp, #40	@ 0x28
 80038e4:	f240 604c 	movw	r0, #1612	@ 0x64c
 80038e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038ec:	f002 f831 	bl	8005952 <HAL_TIMEx_MasterConfigSynchronization>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f040 809d 	bne.w	8003a30 <main+0x650>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f6:	2300      	movs	r3, #0
 80038f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80038fa:	9310      	str	r3, [sp, #64]	@ 0x40
  htim7.Instance = TIM7;
 80038fc:	f240 6004 	movw	r0, #1540	@ 0x604
 8003900:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003904:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8003908:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800390c:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 239;
 800390e:	22ef      	movs	r2, #239	@ 0xef
 8003910:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003912:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 9999;
 8003914:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003918:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800391c:	f001 ff2c 	bl	8005778 <HAL_TIM_Base_Init>
 8003920:	2800      	cmp	r0, #0
 8003922:	f040 8087 	bne.w	8003a34 <main+0x654>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003926:	2320      	movs	r3, #32
 8003928:	930f      	str	r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800392e:	a90f      	add	r1, sp, #60	@ 0x3c
 8003930:	f240 6004 	movw	r0, #1540	@ 0x604
 8003934:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003938:	f002 f80b 	bl	8005952 <HAL_TIMEx_MasterConfigSynchronization>
 800393c:	4680      	mov	r8, r0
 800393e:	2800      	cmp	r0, #0
 8003940:	d17a      	bne.n	8003a38 <main+0x658>
  adc_init();
 8003942:	f7fd f8f1 	bl	8000b28 <adc_init>
  HAL_TIM_Base_Start(&htim3);
 8003946:	f240 604c 	movw	r0, #1612	@ 0x64c
 800394a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800394e:	f001 fd1a 	bl	8005386 <HAL_TIM_Base_Start>
  LCD_Backlight(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f7fd fa0f 	bl	8000d76 <LCD_Backlight>
  LCD_Init();
 8003958:	f7fd fa1a 	bl	8000d90 <LCD_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800395c:	f240 64e8 	movw	r4, #1768	@ 0x6e8
 8003960:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8003964:	2100      	movs	r1, #0
 8003966:	4620      	mov	r0, r4
 8003968:	f000 fe0a 	bl	8004580 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800396c:	2110      	movs	r1, #16
 800396e:	4620      	mov	r0, r4
 8003970:	f000 fe06 	bl	8004580 <HAL_DAC_Start>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800397a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800397e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003982:	f000 ffc7 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 8003986:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800398a:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 800398e:	2200      	movs	r2, #0
 8003990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003994:	4628      	mov	r0, r5
 8003996:	f000 ffbd 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039a0:	4628      	mov	r0, r5
 80039a2:	f000 ffb7 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80039a6:	2300      	movs	r3, #0
 80039a8:	461a      	mov	r2, r3
 80039aa:	2110      	movs	r1, #16
 80039ac:	4620      	mov	r0, r4
 80039ae:	f000 fe1d 	bl	80045ec <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 80039b2:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80039b6:	2200      	movs	r2, #0
 80039b8:	4611      	mov	r1, r2
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 fe16 	bl	80045ec <HAL_DAC_SetValue>
  pageID = 0;
 80039c0:	f240 54b5 	movw	r4, #1461	@ 0x5b5
 80039c4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80039c8:	2600      	movs	r6, #0
 80039ca:	7026      	strb	r6, [r4, #0]
  lcd_handle();
 80039cc:	f7fd fb48 	bl	8001060 <lcd_handle>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 ff9c 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80039dc:	20fa      	movs	r0, #250	@ 0xfa
 80039de:	f000 fd3a 	bl	8004456 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80039e2:	4632      	mov	r2, r6
 80039e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 ff93 	bl	8004914 <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 80039ee:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80039f2:	f000 fd30 	bl	8004456 <HAL_Delay>
  pageID = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	7023      	strb	r3, [r4, #0]
	  switch(mainCounter)
 80039fa:	f240 54b6 	movw	r4, #1462	@ 0x5b6
 80039fe:	f2c2 0400 	movt	r4, #8192	@ 0x2000
		  calculationTemp(adcTEMP);
 8003a02:	f240 1656 	movw	r6, #342	@ 0x156
 8003a06:	f2c2 0600 	movt	r6, #8192	@ 0x2000
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8003a0a:	f648 6539 	movw	r5, #36409	@ 0x8e39
 8003a0e:	f6c3 05e3 	movt	r5, #14563	@ 0x38e3
 8003a12:	e0df      	b.n	8003bd4 <main+0x7f4>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <main+0x636>
 8003a18:	b672      	cpsid	i
 8003a1a:	e7fe      	b.n	8003a1a <main+0x63a>
 8003a1c:	b672      	cpsid	i
 8003a1e:	e7fe      	b.n	8003a1e <main+0x63e>
 8003a20:	b672      	cpsid	i
 8003a22:	e7fe      	b.n	8003a22 <main+0x642>
 8003a24:	b672      	cpsid	i
 8003a26:	e7fe      	b.n	8003a26 <main+0x646>
 8003a28:	b672      	cpsid	i
 8003a2a:	e7fe      	b.n	8003a2a <main+0x64a>
 8003a2c:	b672      	cpsid	i
 8003a2e:	e7fe      	b.n	8003a2e <main+0x64e>
 8003a30:	b672      	cpsid	i
 8003a32:	e7fe      	b.n	8003a32 <main+0x652>
 8003a34:	b672      	cpsid	i
 8003a36:	e7fe      	b.n	8003a36 <main+0x656>
 8003a38:	b672      	cpsid	i
 8003a3a:	e7fe      	b.n	8003a3a <main+0x65a>
	  switch(mainCounter)
 8003a3c:	4643      	mov	r3, r8
 8003a3e:	e0c8      	b.n	8003bd2 <main+0x7f2>
		  adcTEMP = adcMeanSum[listTEMP - 1] >> SAMPLE_2N ;
 8003a40:	f240 13bc 	movw	r3, #444	@ 0x1bc
 8003a44:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	119b      	asrs	r3, r3, #6
 8003a4c:	8033      	strh	r3, [r6, #0]
		  break;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0bf      	b.n	8003bd2 <main+0x7f2>
		  adcIDC = adcMeanSum[listIDC - 1] >> SAMPLE_2N ;
 8003a52:	f240 1354 	movw	r3, #340	@ 0x154
 8003a56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a5a:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8003a5e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a62:	6852      	ldr	r2, [r2, #4]
 8003a64:	1192      	asrs	r2, r2, #6
 8003a66:	801a      	strh	r2, [r3, #0]
		  break;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e0b2      	b.n	8003bd2 <main+0x7f2>
		  adcVBAT1 = adcMeanSum[listVBAT1 - 1] >> SAMPLE_2N ;
 8003a6c:	f240 1352 	movw	r3, #338	@ 0x152
 8003a70:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a74:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8003a78:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	1192      	asrs	r2, r2, #6
 8003a80:	801a      	strh	r2, [r3, #0]
		  break;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0a5      	b.n	8003bd2 <main+0x7f2>
		  adcVDC1 = adcMeanSum[listVDC1 - 1] >> SAMPLE_2N ;
 8003a86:	f240 1350 	movw	r3, #336	@ 0x150
 8003a8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a8e:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8003a92:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a96:	68d2      	ldr	r2, [r2, #12]
 8003a98:	1192      	asrs	r2, r2, #6
 8003a9a:	801a      	strh	r2, [r3, #0]
		  break;
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e098      	b.n	8003bd2 <main+0x7f2>
		  adcVDC2 = adcMeanSum[listVDC2 - 1] >> SAMPLE_2N ;
 8003aa0:	f240 134e 	movw	r3, #334	@ 0x14e
 8003aa4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003aa8:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8003aac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ab0:	6912      	ldr	r2, [r2, #16]
 8003ab2:	1192      	asrs	r2, r2, #6
 8003ab4:	801a      	strh	r2, [r3, #0]
		  break;
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e08b      	b.n	8003bd2 <main+0x7f2>
		  adcIDC2NoGain = adcMeanSum[listIDC2 - 1] >> SAMPLE_2N ;
 8003aba:	f240 13bc 	movw	r3, #444	@ 0x1bc
 8003abe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	1199      	asrs	r1, r3, #6
 8003ac6:	f3c3 138f 	ubfx	r3, r3, #6, #16
 8003aca:	f240 124c 	movw	r2, #332	@ 0x14c
 8003ace:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ad2:	8013      	strh	r3, [r2, #0]
		  if(adcIDC2NoGain <= 50)
 8003ad4:	2b32      	cmp	r3, #50	@ 0x32
 8003ad6:	d811      	bhi.n	8003afc <main+0x71c>
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2]) >> 15);
 8003ad8:	f240 1334 	movw	r3, #308	@ 0x134
 8003adc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ae0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ae4:	b289      	uxth	r1, r1
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8003aee:	f240 124a 	movw	r2, #330	@ 0x14a
 8003af2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003af6:	8013      	strh	r3, [r2, #0]
		  break;
 8003af8:	2306      	movs	r3, #6
 8003afa:	e06a      	b.n	8003bd2 <main+0x7f2>
		  else if(adcIDC2NoGain <= 150)
 8003afc:	2b96      	cmp	r3, #150	@ 0x96
 8003afe:	d80b      	bhi.n	8003b18 <main+0x738>
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 1]) >> 15);
 8003b00:	f240 1334 	movw	r3, #308	@ 0x134
 8003b04:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b08:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003b0c:	b289      	uxth	r1, r1
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8003b16:	e7ea      	b.n	8003aee <main+0x70e>
		  else if(adcIDC2NoGain <= 350)
 8003b18:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 2]) >> 15);
 8003b1c:	f240 1334 	movw	r3, #308	@ 0x134
 8003b20:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b24:	bf94      	ite	ls
 8003b26:	f9b3 3010 	ldrshls.w	r3, [r3, #16]
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 3]) >> 15);
 8003b2a:	f9b3 3012 	ldrshhi.w	r3, [r3, #18]
 8003b2e:	b289      	uxth	r1, r1
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8003b38:	e7d9      	b.n	8003aee <main+0x70e>
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8003b3a:	f240 1360 	movw	r3, #352	@ 0x160
 8003b3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8003b4a:	f022 4340 	bic.w	r3, r2, #3221225472	@ 0xc0000000
 8003b4e:	0f90      	lsrs	r0, r2, #30
 8003b50:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8003b54:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 8003b58:	4403      	add	r3, r0
 8003b5a:	eb03 7311 	add.w	r3, r3, r1, lsr #28
 8003b5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8003b62:	fba5 7003 	umull	r7, r0, r5, r3
 8003b66:	0840      	lsrs	r0, r0, #1
 8003b68:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003b6c:	1a1b      	subs	r3, r3, r0
 8003b6e:	f02c 0c07 	bic.w	ip, ip, #7
 8003b72:	4463      	add	r3, ip
 8003b74:	1ad2      	subs	r2, r2, r3
 8003b76:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 8003b7a:	f24e 338e 	movw	r3, #58254	@ 0xe38e
 8003b7e:	f6c8 6338 	movt	r3, #36408	@ 0x8e38
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	fb05 3301 	mla	r3, r5, r1, r3
 8003b8a:	fba2 2105 	umull	r2, r1, r2, r5
 8003b8e:	4419      	add	r1, r3
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	1880      	adds	r0, r0, r2
 8003b94:	f141 0100 	adc.w	r1, r1, #0
 8003b98:	0840      	lsrs	r0, r0, #1
 8003b9a:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8003b9e:	1049      	asrs	r1, r1, #1
 8003ba0:	f7fc fcc4 	bl	800052c <__aeabi_l2d>
 8003ba4:	f002 f8ac 	bl	8005d00 <sqrt>
 8003ba8:	f240 1758 	movw	r7, #344	@ 0x158
 8003bac:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8003bb0:	f7fc ff9a 	bl	8000ae8 <__aeabi_d2uiz>
 8003bb4:	8038      	strh	r0, [r7, #0]
		  break;
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	e00b      	b.n	8003bd2 <main+0x7f2>
		  if(deviceOn == 1)
 8003bba:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8003bbe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d023      	beq.n	8003c10 <main+0x830>
		  lcd_handle();
 8003bc8:	f7fd fa4a 	bl	8001060 <lcd_handle>
		  mainCounter++;
 8003bcc:	7823      	ldrb	r3, [r4, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
		  mainCounter++;
 8003bd2:	7023      	strb	r3, [r4, #0]
	  switch(mainCounter)
 8003bd4:	7823      	ldrb	r3, [r4, #0]
 8003bd6:	2b0a      	cmp	r3, #10
 8003bd8:	f63f af30 	bhi.w	8003a3c <main+0x65c>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <main+0x804>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003a41 	.word	0x08003a41
 8003be8:	08003a53 	.word	0x08003a53
 8003bec:	08003a6d 	.word	0x08003a6d
 8003bf0:	08003a87 	.word	0x08003a87
 8003bf4:	08003aa1 	.word	0x08003aa1
 8003bf8:	08003abb 	.word	0x08003abb
 8003bfc:	08003b3b 	.word	0x08003b3b
 8003c00:	08003bbb 	.word	0x08003bbb
 8003c04:	08003bc9 	.word	0x08003bc9
 8003c08:	08003c17 	.word	0x08003c17
 8003c0c:	08003c23 	.word	0x08003c23
			  outCalculation();
 8003c10:	f000 f841 	bl	8003c96 <outCalculation>
 8003c14:	e7d8      	b.n	8003bc8 <main+0x7e8>
		  button_handle();
 8003c16:	f7fe fadb 	bl	80021d0 <button_handle>
		  mainCounter++;
 8003c1a:	7823      	ldrb	r3, [r4, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
		  break;
 8003c20:	e7d7      	b.n	8003bd2 <main+0x7f2>
		  calculationTemp(adcTEMP);
 8003c22:	8830      	ldrh	r0, [r6, #0]
 8003c24:	f7fc fffa 	bl	8000c1c <calculationTemp>
		  mainCounter++;
 8003c28:	7823      	ldrb	r3, [r4, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
		  break;
 8003c2e:	e7d0      	b.n	8003bd2 <main+0x7f2>

08003c30 <PID_Compute>:
    .chargeDay                  = 0,
    .chargeWeek                 = 0,
};

int PID_Compute(PIDController *pid, unsigned long setpoint, unsigned long measured)
{
 8003c30:	b410      	push	{r4}
    pid->setpoint = setpoint;
 8003c32:	60c1      	str	r1, [r0, #12]
    pid->measured = measured;
 8003c34:	6102      	str	r2, [r0, #16]

    pid->error = pid->setpoint - pid->measured ;
 8003c36:	1a89      	subs	r1, r1, r2
 8003c38:	6141      	str	r1, [r0, #20]

    pid->integral += pid->error;
 8003c3a:	69c3      	ldr	r3, [r0, #28]
 8003c3c:	440b      	add	r3, r1
 8003c3e:	61c3      	str	r3, [r0, #28]
    pid->derivative = pid->error - pid->prevError;
 8003c40:	6982      	ldr	r2, [r0, #24]
 8003c42:	1a8a      	subs	r2, r1, r2
 8003c44:	6202      	str	r2, [r0, #32]
    pid->prevError = pid->error;
 8003c46:	6181      	str	r1, [r0, #24]


    if (pid->integral > PID_VOUT_INT_MAX)
 8003c48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003c4c:	dd15      	ble.n	8003c7a <PID_Compute+0x4a>
        pid->integral = PID_VOUT_INT_MAX;
 8003c4e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003c52:	61c3      	str	r3, [r0, #28]
    else if (pid->integral < PID_VOUT_INT_MIN)
        pid->integral = PID_VOUT_INT_MIN;


    pid->output = pid->Kp * pid->error +
                  pid->Ki * pid->integral +
 8003c54:	6843      	ldr	r3, [r0, #4]
    pid->output = pid->Kp * pid->error +
 8003c56:	6804      	ldr	r4, [r0, #0]
 8003c58:	fb04 f101 	mul.w	r1, r4, r1
 8003c5c:	69c4      	ldr	r4, [r0, #28]
 8003c5e:	fb04 1103 	mla	r1, r4, r3, r1
                  pid->Kd * pid->derivative;
 8003c62:	6883      	ldr	r3, [r0, #8]
                  pid->Ki * pid->integral +
 8003c64:	fb03 1102 	mla	r1, r3, r2, r1

    pid->output = pid->output >> 12;
 8003c68:	1309      	asrs	r1, r1, #12
 8003c6a:	6241      	str	r1, [r0, #36]	@ 0x24

    if (pid->output > pid->outputMax)
 8003c6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	dd0c      	ble.n	8003c8c <PID_Compute+0x5c>
        pid->output = pid->outputMax;
 8003c72:	6243      	str	r3, [r0, #36]	@ 0x24
    else if (pid->output < pid->outputMin)
        pid->output = pid->outputMin;

    return pid->output;
}
 8003c74:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003c76:	bc10      	pop	{r4}
 8003c78:	4770      	bx	lr
    else if (pid->integral < PID_VOUT_INT_MIN)
 8003c7a:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8003c7e:	dae9      	bge.n	8003c54 <PID_Compute+0x24>
        pid->integral = PID_VOUT_INT_MIN;
 8003c80:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8003c84:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8003c88:	61c3      	str	r3, [r0, #28]
 8003c8a:	e7e3      	b.n	8003c54 <PID_Compute+0x24>
    else if (pid->output < pid->outputMin)
 8003c8c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003c8e:	4299      	cmp	r1, r3
        pid->output = pid->outputMin;
 8003c90:	bfb8      	it	lt
 8003c92:	6243      	strlt	r3, [r0, #36]	@ 0x24
 8003c94:	e7ee      	b.n	8003c74 <PID_Compute+0x44>

08003c96 <outCalculation>:

void outCalculation()
{
 8003c96:	b510      	push	{r4, lr}
	if(operatingMode == MODE_SUPPLY)
 8003c98:	f240 63fe 	movw	r3, #1790	@ 0x6fe
 8003c9c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d02d      	beq.n	8003d02 <outCalculation+0x6c>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
	}

	else
	{
		switch(batInfo.chargeState)
 8003ca6:	f240 0320 	movw	r3, #32
 8003caa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cae:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d070      	beq.n	8003d98 <outCalculation+0x102>
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d122      	bne.n	8003d00 <outCalculation+0x6a>
				   batInfo.chargeState = STATE_ABSORPTION;
			   }
			break;

		case STATE_ABSORPTION:
			  dacValueV +=PID_Compute(&pidVout, batInfo.absorptionVoltage, adcBuffer[listVBAT1]);
 8003cba:	f240 5254 	movw	r2, #1364	@ 0x554
 8003cbe:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003cc2:	f240 0320 	movw	r3, #32
 8003cc6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cca:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003cce:	6959      	ldr	r1, [r3, #20]
 8003cd0:	f240 0080 	movw	r0, #128	@ 0x80
 8003cd4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003cd8:	f7ff ffaa 	bl	8003c30 <PID_Compute>
			  if(dacValueV > 4095)
			  {
				  dacValueV = 4095;
 8003cdc:	f240 021e 	movw	r2, #30
 8003ce0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
			  dacValueV +=PID_Compute(&pidVout, batInfo.absorptionVoltage, adcBuffer[listVBAT1]);
 8003ce4:	8813      	ldrh	r3, [r2, #0]
 8003ce6:	4403      	add	r3, r0
			  }
			  else if (dacValueV < 0)
 8003ce8:	b21b      	sxth	r3, r3
				  dacValueV = 4095;
 8003cea:	f383 030c 	usat	r3, #12, r3
 8003cee:	8013      	strh	r3, [r2, #0]
			  {
				  dacValueV = 0;
			  }
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 8003cf8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003cfc:	f000 fc76 	bl	80045ec <HAL_DAC_SetValue>
				//  batInfo.chargeState = STATE_FLOAT;
			  }
			  break;
		}
	}
}
 8003d00:	bd10      	pop	{r4, pc}
		  dacValueV +=PID_Compute(&pidVout, outputVSet_dV, adcBuffer[listVBAT1]);
 8003d02:	f240 5254 	movw	r2, #1364	@ 0x554
 8003d06:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003d0a:	f240 03b2 	movw	r3, #178	@ 0xb2
 8003d0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d12:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003d16:	8819      	ldrh	r1, [r3, #0]
 8003d18:	f240 0080 	movw	r0, #128	@ 0x80
 8003d1c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003d20:	f7ff ff86 	bl	8003c30 <PID_Compute>
			  dacValueV = 4095;
 8003d24:	f240 021e 	movw	r2, #30
 8003d28:	f2c2 0200 	movt	r2, #8192	@ 0x2000
		  dacValueV +=PID_Compute(&pidVout, outputVSet_dV, adcBuffer[listVBAT1]);
 8003d2c:	8813      	ldrh	r3, [r2, #0]
 8003d2e:	4403      	add	r3, r0
		  else if (dacValueV < 0)
 8003d30:	b21b      	sxth	r3, r3
			  dacValueV = 4095;
 8003d32:	f383 030c 	usat	r3, #12, r3
 8003d36:	8013      	strh	r3, [r2, #0]
		  if (adcIDC2 > outputIMax_dA)
 8003d38:	f240 124a 	movw	r2, #330	@ 0x14a
 8003d3c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003d40:	f240 03b0 	movw	r3, #176	@ 0xb0
 8003d44:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d48:	8812      	ldrh	r2, [r2, #0]
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d80e      	bhi.n	8003d6e <outCalculation+0xd8>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 8003d50:	f240 031e 	movw	r3, #30
 8003d54:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2110      	movs	r1, #16
 8003d60:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 8003d64:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003d68:	f000 fc40 	bl	80045ec <HAL_DAC_SetValue>
 8003d6c:	e7c8      	b.n	8003d00 <outCalculation+0x6a>
			  dacValueV = 0;
 8003d6e:	f240 031e 	movw	r3, #30
 8003d72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d76:	2400      	movs	r4, #0
 8003d78:	801c      	strh	r4, [r3, #0]
			  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003d80:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d84:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003d88:	f000 fdc4 	bl	8004914 <HAL_GPIO_WritePin>
			  deviceOn = 0;
 8003d8c:	f240 63fc 	movw	r3, #1788	@ 0x6fc
 8003d90:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d94:	701c      	strb	r4, [r3, #0]
 8003d96:	e7db      	b.n	8003d50 <outCalculation+0xba>
			   dacValueV += PID_Compute(&pidIout, batInfo.bulkCurrent / 10, adcIDC2);
 8003d98:	f240 134a 	movw	r3, #330	@ 0x14a
 8003d9c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003da0:	f240 0420 	movw	r4, #32
 8003da4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8003da8:	68e1      	ldr	r1, [r4, #12]
 8003daa:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8003dae:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8003db2:	fba2 2101 	umull	r2, r1, r2, r1
 8003db6:	881a      	ldrh	r2, [r3, #0]
 8003db8:	08c9      	lsrs	r1, r1, #3
 8003dba:	f240 0050 	movw	r0, #80	@ 0x50
 8003dbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003dc2:	f7ff ff35 	bl	8003c30 <PID_Compute>
				   dacValueV = 4095;
 8003dc6:	f240 021e 	movw	r2, #30
 8003dca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
			   dacValueV += PID_Compute(&pidIout, batInfo.bulkCurrent / 10, adcIDC2);
 8003dce:	8813      	ldrh	r3, [r2, #0]
 8003dd0:	4403      	add	r3, r0
			   else if (dacValueV < 0)
 8003dd2:	b21b      	sxth	r3, r3
				   dacValueV = 4095;
 8003dd4:	f383 030c 	usat	r3, #12, r3
 8003dd8:	8013      	strh	r3, [r2, #0]
			   HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2110      	movs	r1, #16
 8003dde:	f240 60e8 	movw	r0, #1768	@ 0x6e8
 8003de2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003de6:	f000 fc01 	bl	80045ec <HAL_DAC_SetValue>
			   if(adcVBAT1 >= batInfo.absorptionVoltage)
 8003dea:	f240 1352 	movw	r3, #338	@ 0x152
 8003dee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	6963      	ldr	r3, [r4, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d382      	bcc.n	8003d00 <outCalculation+0x6a>
				   batInfo.chargeState = STATE_ABSORPTION;
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f884 202b 	strb.w	r2, [r4, #43]	@ 0x2b
 8003e00:	e77e      	b.n	8003d00 <outCalculation+0x6a>

08003e02 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e02:	b500      	push	{lr}
 8003e04:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e0a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	619a      	str	r2, [r3, #24]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	f002 0201 	and.w	r2, r2, #1
 8003e1c:	9200      	str	r2, [sp, #0]
 8003e1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e26:	61da      	str	r2, [r3, #28]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	4611      	mov	r1, r2
 8003e36:	2005      	movs	r0, #5
 8003e38:	f000 fb34 	bl	80044a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003e3c:	2005      	movs	r0, #5
 8003e3e:	f000 fb6a 	bl	8004516 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e42:	2200      	movs	r2, #0
 8003e44:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003e48:	6853      	ldr	r3, [r2, #4]
 8003e4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e52:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e54:	b003      	add	sp, #12
 8003e56:	f85d fb04 	ldr.w	pc, [sp], #4

08003e5a <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e5a:	b500      	push	{lr}
 8003e5c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9302      	str	r3, [sp, #8]
 8003e62:	9303      	str	r3, [sp, #12]
 8003e64:	9304      	str	r3, [sp, #16]
 8003e66:	9305      	str	r3, [sp, #20]
  if(hdac->Instance==DAC)
 8003e68:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 8003e6c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d002      	beq.n	8003e7c <HAL_DAC_MspInit+0x22>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8003e76:	b007      	add	sp, #28
 8003e78:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e80:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8003e92:	9200      	str	r2, [sp, #0]
 8003e94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	f042 0204 	orr.w	r2, r2, #4
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ea8:	2330      	movs	r3, #48	@ 0x30
 8003eaa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eac:	2303      	movs	r3, #3
 8003eae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	a902      	add	r1, sp, #8
 8003eb2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003eb6:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003eba:	f000 fbe1 	bl	8004680 <HAL_GPIO_Init>
}
 8003ebe:	e7da      	b.n	8003e76 <HAL_DAC_MspInit+0x1c>

08003ec0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	9303      	str	r3, [sp, #12]
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8003ece:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8003ed2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003ed6:	6802      	ldr	r2, [r0, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_MspInit+0x20>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003edc:	b006      	add	sp, #24
 8003ede:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee0:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003ee4:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 8003ee8:	69a3      	ldr	r3, [r4, #24]
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	61a3      	str	r3, [r4, #24]
 8003ef0:	69a3      	ldr	r3, [r4, #24]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003efe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f00:	2312      	movs	r3, #18
 8003f02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f04:	2303      	movs	r3, #3
 8003f06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f08:	a902      	add	r1, sp, #8
 8003f0a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003f0e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003f12:	f000 fbb5 	bl	8004680 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003f16:	2200      	movs	r2, #0
 8003f18:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003f1c:	6853      	ldr	r3, [r2, #4]
 8003f1e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f28:	69e3      	ldr	r3, [r4, #28]
 8003f2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f2e:	61e3      	str	r3, [r4, #28]
 8003f30:	69e3      	ldr	r3, [r4, #28]
 8003f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	9b01      	ldr	r3, [sp, #4]
}
 8003f3a:	e7cf      	b.n	8003edc <HAL_I2C_MspInit+0x1c>

08003f3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f3c:	b500      	push	{lr}
 8003f3e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8003f40:	6802      	ldr	r2, [r0, #0]
 8003f42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f46:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d008      	beq.n	8003f60 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003f4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f52:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d018      	beq.n	8003f8c <HAL_TIM_Base_MspInit+0x50>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003f5a:	b003      	add	sp, #12
 8003f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f64:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	f042 0202 	orr.w	r2, r2, #2
 8003f6e:	61da      	str	r2, [r3, #28]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	201d      	movs	r0, #29
 8003f80:	f000 fa90 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f84:	201d      	movs	r0, #29
 8003f86:	f000 fac6 	bl	8004516 <HAL_NVIC_EnableIRQ>
 8003f8a:	e7e6      	b.n	8003f5a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f90:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	f042 0220 	orr.w	r2, r2, #32
 8003f9a:	61da      	str	r2, [r3, #28]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2037      	movs	r0, #55	@ 0x37
 8003fac:	f000 fa7a 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003fb0:	2037      	movs	r0, #55	@ 0x37
 8003fb2:	f000 fab0 	bl	8004516 <HAL_NVIC_EnableIRQ>
}
 8003fb6:	e7d0      	b.n	8003f5a <HAL_TIM_Base_MspInit+0x1e>

08003fb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9302      	str	r3, [sp, #8]
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8003fc6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003fca:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003fce:	6802      	ldr	r2, [r0, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_UART_MspInit+0x20>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003fd4:	b006      	add	sp, #24
 8003fd6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fdc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe6:	619a      	str	r2, [r3, #24]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003fee:	9200      	str	r2, [sp, #0]
 8003ff0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	f042 0208 	orr.w	r2, r2, #8
 8003ff8:	619a      	str	r2, [r3, #24]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	9301      	str	r3, [sp, #4]
 8004002:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004004:	2340      	movs	r3, #64	@ 0x40
 8004006:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004010:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8004014:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8004018:	a902      	add	r1, sp, #8
 800401a:	4620      	mov	r0, r4
 800401c:	f000 fb30 	bl	8004680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004024:	2300      	movs	r3, #0
 8004026:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800402a:	a902      	add	r1, sp, #8
 800402c:	4620      	mov	r0, r4
 800402e:	f000 fb27 	bl	8004680 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004032:	2200      	movs	r2, #0
 8004034:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004038:	6853      	ldr	r3, [r2, #4]
 800403a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800403e:	f043 0304 	orr.w	r3, r3, #4
 8004042:	6053      	str	r3, [r2, #4]
}
 8004044:	e7c6      	b.n	8003fd4 <HAL_UART_MspInit+0x1c>

08004046 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004046:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004048:	f001 f8ea 	bl	8005220 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800404c:	e7fe      	b.n	800404c <NMI_Handler+0x6>

0800404e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800404e:	e7fe      	b.n	800404e <HardFault_Handler>

08004050 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004050:	e7fe      	b.n	8004050 <MemManage_Handler>

08004052 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <BusFault_Handler>

08004054 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004054:	e7fe      	b.n	8004054 <UsageFault_Handler>

08004056 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004056:	4770      	bx	lr

08004058 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004058:	4770      	bx	lr

0800405a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800405a:	4770      	bx	lr

0800405c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800405c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800405e:	f000 f9e7 	bl	8004430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004062:	bd08      	pop	{r3, pc}

08004064 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004064:	4770      	bx	lr

08004066 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004066:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8004068:	2004      	movs	r0, #4
 800406a:	f000 fc5a 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 800406e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004072:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004076:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8004078:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800407c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004080:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004084:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 800408e:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004092:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004094:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004098:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 800409c:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 80040a0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 80040a4:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 80040a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 80040ac:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 80040ae:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 80040b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80040b6:	2401      	movs	r4, #1
 80040b8:	701c      	strb	r4, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 80040ba:	f240 6004 	movw	r0, #1540	@ 0x604
 80040be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80040c2:	f001 f999 	bl	80053f8 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80040c6:	4622      	mov	r2, r4
 80040c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80040d0:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80040d4:	f000 fc1e 	bl	8004914 <HAL_GPIO_WritePin>
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 80040d8:	bd10      	pop	{r4, pc}

080040da <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040da:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint16_t dcOffset = 1985;

	/* VAC */
	adcBuffer[listVAC] = (q15_t)(((int32_t)(adc1Buffer[listVAC] - dcOffset) * adcGain[listVAC]) >> 15);
 80040dc:	f240 5364 	movw	r3, #1380	@ 0x564
 80040e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80040e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e8:	f2a3 73c1 	subw	r3, r3, #1985	@ 0x7c1
 80040ec:	f240 1234 	movw	r2, #308	@ 0x134
 80040f0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80040f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	f343 33cf 	sbfx	r3, r3, #15, #16
 8004100:	f240 5254 	movw	r2, #1364	@ 0x554
 8004104:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004108:	8013      	strh	r3, [r2, #0]
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 800410a:	f240 125a 	movw	r2, #346	@ 0x15a
 800410e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004112:	7815      	ldrb	r5, [r2, #0]
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8004114:	fb03 f303 	mul.w	r3, r3, r3
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8004118:	f240 1160 	movw	r1, #352	@ 0x160
 800411c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004120:	f240 1268 	movw	r2, #360	@ 0x168
 8004124:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004128:	f852 4025 	ldr.w	r4, [r2, r5, lsl #2]
 800412c:	680a      	ldr	r2, [r1, #0]
 800412e:	6848      	ldr	r0, [r1, #4]
 8004130:	1b12      	subs	r2, r2, r4
 8004132:	eb60 70e4 	sbc.w	r0, r0, r4, asr #31
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8004136:	18d2      	adds	r2, r2, r3
 8004138:	eb40 70e3 	adc.w	r0, r0, r3, asr #31
	adcRmsBufferPo++;
 800413c:	1c69      	adds	r1, r5, #1
 800413e:	b2c9      	uxtb	r1, r1
	if (adcRmsBufferPo >= ADC_RMS_BUFFER_SIZE)
 8004140:	2914      	cmp	r1, #20
 8004142:	bf28      	it	cs
 8004144:	2100      	movcs	r1, #0
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8004146:	f240 1468 	movw	r4, #360	@ 0x168
 800414a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800414e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8004152:	f240 1360 	movw	r3, #352	@ 0x160
 8004156:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	6058      	str	r0, [r3, #4]
	adcRmsBufferPo++;
 800415e:	f240 135a 	movw	r3, #346	@ 0x15a
 8004162:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004166:	7019      	strb	r1, [r3, #0]
	{
		adcRmsBufferPo = 0;
	}

	/* TEMP */
	adcBuffer[listTEMP] = (q15_t)(((int32_t)(adc1Buffer[listTEMP]) * adcGain[listTEMP]) >> 15);
 8004168:	f240 5e64 	movw	lr, #1380	@ 0x564
 800416c:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8004170:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8004174:	f240 1434 	movw	r4, #308	@ 0x134
 8004178:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800417c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004180:	fb03 f000 	mul.w	r0, r3, r0
 8004184:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004188:	f240 5c54 	movw	ip, #1364	@ 0x554
 800418c:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8004190:	f8ac 0002 	strh.w	r0, [ip, #2]
	adcMeanSum[listTEMP - 1] = adcMeanSum[listTEMP - 1] - adcMeanBuffer[listTEMP - 1][adcMeanBufferPo];
 8004194:	f240 13b8 	movw	r3, #440	@ 0x1b8
 8004198:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800419c:	7819      	ldrb	r1, [r3, #0]
 800419e:	f240 13bc 	movw	r3, #444	@ 0x1bc
 80041a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80041a6:	f240 12d4 	movw	r2, #468	@ 0x1d4
 80041aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80041ae:	f932 6011 	ldrsh.w	r6, [r2, r1, lsl #1]
 80041b2:	681d      	ldr	r5, [r3, #0]
 80041b4:	1bad      	subs	r5, r5, r6
	adcMeanBuffer[listTEMP - 1][adcMeanBufferPo] = adcBuffer[listTEMP];
 80041b6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
	adcMeanSum[listTEMP - 1] = adcMeanSum[listTEMP - 1] + adcMeanBuffer[listTEMP - 1][adcMeanBufferPo];
 80041ba:	4428      	add	r0, r5
 80041bc:	6018      	str	r0, [r3, #0]

	/* IDC */
	adcBuffer[listIDC] = (q15_t)(((int32_t)(adc1Buffer[listIDC]) * adcGain[listIDC]) >> 15);
 80041be:	f9be 0004 	ldrsh.w	r0, [lr, #4]
 80041c2:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 80041c6:	fb05 f000 	mul.w	r0, r5, r0
 80041ca:	f340 30cf 	sbfx	r0, r0, #15, #16
 80041ce:	f8ac 0004 	strh.w	r0, [ip, #4]
	adcMeanSum[listIDC - 1] = adcMeanSum[listIDC - 1] - adcMeanBuffer[listIDC - 1][adcMeanBufferPo];
 80041d2:	f101 0640 	add.w	r6, r1, #64	@ 0x40
 80041d6:	f932 7016 	ldrsh.w	r7, [r2, r6, lsl #1]
 80041da:	685d      	ldr	r5, [r3, #4]
 80041dc:	1bed      	subs	r5, r5, r7
	adcMeanBuffer[listIDC - 1][adcMeanBufferPo] = adcBuffer[listIDC];
 80041de:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listIDC - 1] = adcMeanSum[listIDC - 1] + adcMeanBuffer[listIDC - 1][adcMeanBufferPo];
 80041e2:	4428      	add	r0, r5
 80041e4:	6058      	str	r0, [r3, #4]

	/* VBAT */
	adcBuffer[listVBAT1] = (q15_t)(((int32_t)(adc1Buffer[listVBAT1]) * adcGain[listVBAT1]) >> 15);
 80041e6:	f9be 0006 	ldrsh.w	r0, [lr, #6]
 80041ea:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 80041ee:	fb05 f000 	mul.w	r0, r5, r0
 80041f2:	f340 30cf 	sbfx	r0, r0, #15, #16
 80041f6:	f8ac 0006 	strh.w	r0, [ip, #6]
	adcMeanSum[listVBAT1 - 1] = adcMeanSum[listVBAT1 - 1] - adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo];
 80041fa:	f101 0680 	add.w	r6, r1, #128	@ 0x80
 80041fe:	f932 7016 	ldrsh.w	r7, [r2, r6, lsl #1]
 8004202:	689d      	ldr	r5, [r3, #8]
 8004204:	1bed      	subs	r5, r5, r7
	adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo] = adcBuffer[listVBAT1];
 8004206:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listVBAT1 - 1] = adcMeanSum[listVBAT1 - 1] + adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo];
 800420a:	4428      	add	r0, r5
 800420c:	6098      	str	r0, [r3, #8]

	/* VDC1 */
	adcBuffer[listVDC1] = (q15_t)(((int32_t)(adc1Buffer[listVDC1]) * adcGain[listVDC1]) >> 15);
 800420e:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 8004212:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8004216:	fb05 f000 	mul.w	r0, r5, r0
 800421a:	f340 30cf 	sbfx	r0, r0, #15, #16
 800421e:	f8ac 0008 	strh.w	r0, [ip, #8]
	adcMeanSum[listVDC1 - 1] = adcMeanSum[listVDC1 - 1] - adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo];
 8004222:	f101 06c0 	add.w	r6, r1, #192	@ 0xc0
 8004226:	f932 5016 	ldrsh.w	r5, [r2, r6, lsl #1]
 800422a:	68df      	ldr	r7, [r3, #12]
 800422c:	1b7d      	subs	r5, r7, r5
	adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo] = adcBuffer[listVDC1];
 800422e:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listVDC1 - 1] = adcMeanSum[listVDC1 - 1] + adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo];
 8004232:	4428      	add	r0, r5
 8004234:	60d8      	str	r0, [r3, #12]

	/* VDC2 */
	adcBuffer[listVDC2] = (q15_t)(((int32_t)(adc1Buffer[listVDC2]) * adcGain[listVDC2]) >> 15);
 8004236:	f9be 000a 	ldrsh.w	r0, [lr, #10]
 800423a:	f9b4 400a 	ldrsh.w	r4, [r4, #10]
 800423e:	fb04 f000 	mul.w	r0, r4, r0
 8004242:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004246:	f8ac 000a 	strh.w	r0, [ip, #10]
	adcMeanSum[listVDC2 - 1] = adcMeanSum[listVDC2 - 1] - adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo];
 800424a:	f501 7580 	add.w	r5, r1, #256	@ 0x100
 800424e:	f932 6015 	ldrsh.w	r6, [r2, r5, lsl #1]
 8004252:	691c      	ldr	r4, [r3, #16]
 8004254:	1ba4      	subs	r4, r4, r6
	adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo] = adcBuffer[listVDC2];
 8004256:	f822 0015 	strh.w	r0, [r2, r5, lsl #1]
	adcMeanSum[listVDC2 - 1] = adcMeanSum[listVDC2 - 1] + adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo];
 800425a:	4420      	add	r0, r4
 800425c:	6118      	str	r0, [r3, #16]

	/* IDC2 */
	// adcBuffer[listIDC2] = (q15_t)(((int32_t)(adc1Buffer[listIDC2]) * adcGain[listIDC2]) >> 15);
	adcBuffer[listIDC2] = (q15_t)(int32_t)(adc1Buffer[listIDC2]);
 800425e:	f9be 400c 	ldrsh.w	r4, [lr, #12]
 8004262:	f8ac 400c 	strh.w	r4, [ip, #12]
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] - adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 8004266:	f501 70a0 	add.w	r0, r1, #320	@ 0x140
 800426a:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	1a12      	subs	r2, r2, r0
	adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo] = adcBuffer[listIDC2];
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] + adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 8004272:	4422      	add	r2, r4

	adcMeanBufferPo++;
 8004274:	1c4b      	adds	r3, r1, #1
 8004276:	b2db      	uxtb	r3, r3

	if (adcMeanBufferPo >= ADC_MEAN_BUFFER_SIZE)
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	bf28      	it	cs
 800427c:	2300      	movcs	r3, #0
	adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo] = adcBuffer[listIDC2];
 800427e:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8004282:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004286:	f501 71a0 	add.w	r1, r1, #320	@ 0x140
 800428a:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] + adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 800428e:	f240 11bc 	movw	r1, #444	@ 0x1bc
 8004292:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004296:	614a      	str	r2, [r1, #20]
	adcMeanBufferPo++;
 8004298:	f240 12b8 	movw	r2, #440	@ 0x1b8
 800429c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80042a0:	7013      	strb	r3, [r2, #0]
		adcMeanBufferPo = 0;
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042b2 <ADC1_IRQHandler>:

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80042b2:	4770      	bx	lr

080042b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80042b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042b6:	f240 604c 	movw	r0, #1612	@ 0x64c
 80042ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80042be:	f001 f8de 	bl	800547e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042c2:	bd08      	pop	{r3, pc}

080042c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 80042c6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80042ca:	f000 fb2a 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 80042ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042d2:	f000 fb26 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80042d6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80042da:	f000 fb22 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80042de:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80042e2:	f000 fb1e 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80042e6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80042ea:	f000 fb1a 	bl	8004922 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    uint32_t idr = GPIOB->IDR;
 80042ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042f2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80042f6:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 80042f8:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 80042fc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004300:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004304:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 800430e:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004312:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004314:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004318:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 800431c:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004320:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8004324:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8004328:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 800432c:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 800432e:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 8004332:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004336:	2401      	movs	r4, #1
 8004338:	701c      	strb	r4, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 800433a:	f240 6004 	movw	r0, #1540	@ 0x604
 800433e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004342:	f001 f859 	bl	80053f8 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8004346:	4622      	mov	r2, r4
 8004348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800434c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004350:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004354:	f000 fade 	bl	8004914 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004358:	bd10      	pop	{r4, pc}

0800435a <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800435a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004362:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004366:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800436a:	f000 fad3 	bl	8004914 <HAL_GPIO_WritePin>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800436e:	f240 6004 	movw	r0, #1540	@ 0x604
 8004372:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004376:	f001 f882 	bl	800547e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800437a:	bd08      	pop	{r3, pc}

0800437c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800437c:	4770      	bx	lr
	...

08004380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004380:	f7ff fffc 	bl	800437c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004384:	480b      	ldr	r0, [pc, #44]	@ (80043b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004386:	490c      	ldr	r1, [pc, #48]	@ (80043b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004388:	4a0c      	ldr	r2, [pc, #48]	@ (80043bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800438c:	e002      	b.n	8004394 <LoopCopyDataInit>

0800438e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800438e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004392:	3304      	adds	r3, #4

08004394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004398:	d3f9      	bcc.n	800438e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800439c:	4c09      	ldr	r4, [pc, #36]	@ (80043c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800439e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a0:	e001      	b.n	80043a6 <LoopFillZerobss>

080043a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a4:	3204      	adds	r2, #4

080043a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a8:	d3fb      	bcc.n	80043a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043aa:	f001 fc85 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043ae:	f7ff f817 	bl	80033e0 <main>
  bx lr
 80043b2:	4770      	bx	lr
  ldr r0, =_sdata
 80043b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80043bc:	080065f0 	.word	0x080065f0
  ldr r2, =_sbss
 80043c0:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80043c4:	2000083c 	.word	0x2000083c

080043c8 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043c8:	e7fe      	b.n	80043c8 <CEC_IRQHandler>

080043ca <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043ca:	b510      	push	{r4, lr}
 80043cc:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ce:	f240 02b8 	movw	r2, #184	@ 0xb8
 80043d2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80043d6:	f240 03bc 	movw	r3, #188	@ 0xbc
 80043da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80043de:	7819      	ldrb	r1, [r3, #0]
 80043e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e8:	6810      	ldr	r0, [r2, #0]
 80043ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80043ee:	f000 f8a0 	bl	8004532 <HAL_SYSTICK_Config>
 80043f2:	b980      	cbnz	r0, 8004416 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f4:	2c0f      	cmp	r4, #15
 80043f6:	d901      	bls.n	80043fc <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80043f8:	2001      	movs	r0, #1
 80043fa:	e00d      	b.n	8004418 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043fc:	2200      	movs	r2, #0
 80043fe:	4621      	mov	r1, r4
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f000 f84e 	bl	80044a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004408:	f240 03c0 	movw	r3, #192	@ 0xc0
 800440c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004410:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004412:	2000      	movs	r0, #0
 8004414:	e000      	b.n	8004418 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8004416:	2001      	movs	r0, #1
}
 8004418:	bd10      	pop	{r4, pc}

0800441a <HAL_Init>:
{
 800441a:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800441c:	2003      	movs	r0, #3
 800441e:	f000 f82e 	bl	800447e <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004422:	200f      	movs	r0, #15
 8004424:	f7ff ffd1 	bl	80043ca <HAL_InitTick>
  HAL_MspInit();
 8004428:	f7ff fceb 	bl	8003e02 <HAL_MspInit>
}
 800442c:	2000      	movs	r0, #0
 800442e:	bd08      	pop	{r3, pc}

08004430 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004430:	f240 7300 	movw	r3, #1792	@ 0x700
 8004434:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	f240 02bc 	movw	r2, #188	@ 0xbc
 800443e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	440a      	add	r2, r1
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	4770      	bx	lr

0800444a <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800444a:	f240 7300 	movw	r3, #1792	@ 0x700
 800444e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004452:	6818      	ldr	r0, [r3, #0]
}
 8004454:	4770      	bx	lr

08004456 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004456:	b538      	push	{r3, r4, r5, lr}
 8004458:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7ff fff6 	bl	800444a <HAL_GetTick>
 800445e:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004460:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004464:	d005      	beq.n	8004472 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8004466:	f240 03bc 	movw	r3, #188	@ 0xbc
 800446a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004472:	f7ff ffea 	bl	800444a <HAL_GetTick>
 8004476:	1b40      	subs	r0, r0, r5
 8004478:	42a0      	cmp	r0, r4
 800447a:	d3fa      	bcc.n	8004472 <HAL_Delay+0x1c>
  {
  }
}
 800447c:	bd38      	pop	{r3, r4, r5, pc}

0800447e <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800447e:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8004482:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8004486:	68d1      	ldr	r1, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004488:	0203      	lsls	r3, r0, #8
 800448a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448e:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004492:	0409      	lsls	r1, r1, #16
 8004494:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004496:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80044a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044a2:	4770      	bx	lr

080044a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a4:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a6:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80044aa:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044b4:	f1c3 0c07 	rsb	ip, r3, #7
 80044b8:	f1bc 0f04 	cmp.w	ip, #4
 80044bc:	bf28      	it	cs
 80044be:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c2:	f103 0e04 	add.w	lr, r3, #4
 80044c6:	f1be 0f06 	cmp.w	lr, #6
 80044ca:	bf8c      	ite	hi
 80044cc:	3b03      	subhi	r3, #3
 80044ce:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d0:	f04f 3eff 	mov.w	lr, #4294967295
 80044d4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80044d8:	ea21 010c 	bic.w	r1, r1, ip
 80044dc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044de:	fa0e fe03 	lsl.w	lr, lr, r3
 80044e2:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e6:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80044e8:	2800      	cmp	r0, #0
 80044ea:	db09      	blt.n	8004500 <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ec:	0109      	lsls	r1, r1, #4
 80044ee:	b2c9      	uxtb	r1, r1
 80044f0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80044f4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80044f8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044fc:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004500:	f000 000f 	and.w	r0, r0, #15
 8004504:	0109      	lsls	r1, r1, #4
 8004506:	b2c9      	uxtb	r1, r1
 8004508:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 800450c:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8004510:	4403      	add	r3, r0
 8004512:	7619      	strb	r1, [r3, #24]
 8004514:	e7f2      	b.n	80044fc <HAL_NVIC_SetPriority+0x58>

08004516 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004516:	2800      	cmp	r0, #0
 8004518:	db0a      	blt.n	8004530 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	0941      	lsrs	r1, r0, #5
 800451c:	f000 001f 	and.w	r0, r0, #31
 8004520:	2301      	movs	r3, #1
 8004522:	4083      	lsls	r3, r0
 8004524:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004528:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 800452c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004530:	4770      	bx	lr

08004532 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004532:	3801      	subs	r0, #1
 8004534:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004538:	d20e      	bcs.n	8004558 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800453a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800453e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8004544:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8004548:	21f0      	movs	r1, #240	@ 0xf0
 800454a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800454e:	2000      	movs	r0, #0
 8004550:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004552:	2207      	movs	r2, #7
 8004554:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004556:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004558:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800455a:	4770      	bx	lr

0800455c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800455c:	b170      	cbz	r0, 800457c <HAL_DAC_Init+0x20>
{
 800455e:	b510      	push	{r4, lr}
 8004560:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004562:	7903      	ldrb	r3, [r0, #4]
 8004564:	b133      	cbz	r3, 8004574 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800456a:	2000      	movs	r0, #0
 800456c:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800456e:	2301      	movs	r3, #1
 8004570:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8004572:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004574:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004576:	f7ff fc70 	bl	8003e5a <HAL_DAC_MspInit>
 800457a:	e7f4      	b.n	8004566 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 800457c:	2001      	movs	r0, #1
}
 800457e:	4770      	bx	lr

08004580 <HAL_DAC_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004580:	b380      	cbz	r0, 80045e4 <HAL_DAC_Start+0x64>
 8004582:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004584:	7942      	ldrb	r2, [r0, #5]
 8004586:	2a01      	cmp	r2, #1
 8004588:	d02e      	beq.n	80045e8 <HAL_DAC_Start+0x68>
{
 800458a:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 800458c:	2201      	movs	r2, #1
 800458e:	7142      	strb	r2, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004590:	2002      	movs	r0, #2
 8004592:	7118      	strb	r0, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	6804      	ldr	r4, [r0, #0]
 8004598:	f001 0c10 	and.w	ip, r1, #16
 800459c:	fa02 f20c 	lsl.w	r2, r2, ip
 80045a0:	4322      	orrs	r2, r4
 80045a2:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80045a4:	b981      	cbnz	r1, 80045c8 <HAL_DAC_Start+0x48>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	680a      	ldr	r2, [r1, #0]
 80045aa:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80045ae:	2a3c      	cmp	r2, #60	@ 0x3c
 80045b0:	d005      	beq.n	80045be <HAL_DAC_Start+0x3e>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045b2:	2201      	movs	r2, #1
 80045b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045b6:	2000      	movs	r0, #0
 80045b8:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 80045ba:	bc10      	pop	{r4}
 80045bc:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80045be:	684a      	ldr	r2, [r1, #4]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	604a      	str	r2, [r1, #4]
 80045c6:	e7f4      	b.n	80045b2 <HAL_DAC_Start+0x32>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	6801      	ldr	r1, [r0, #0]
 80045cc:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 80045d0:	223c      	movs	r2, #60	@ 0x3c
 80045d2:	fa02 f20c 	lsl.w	r2, r2, ip
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d1eb      	bne.n	80045b2 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80045da:	6842      	ldr	r2, [r0, #4]
 80045dc:	f042 0202 	orr.w	r2, r2, #2
 80045e0:	6042      	str	r2, [r0, #4]
 80045e2:	e7e6      	b.n	80045b2 <HAL_DAC_Start+0x32>
    return HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
 80045e6:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80045e8:	2002      	movs	r0, #2
}
 80045ea:	4770      	bx	lr

080045ec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80045ec:	b410      	push	{r4}
 80045ee:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 80045f0:	2400      	movs	r4, #0
 80045f2:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80045f4:	b188      	cbz	r0, 800461a <HAL_DAC_SetValue+0x2e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80045f6:	6800      	ldr	r0, [r0, #0]
 80045f8:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80045fa:	b949      	cbnz	r1, 8004610 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80045fc:	9901      	ldr	r1, [sp, #4]
 80045fe:	3108      	adds	r1, #8
 8004600:	440a      	add	r2, r1
 8004602:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004604:	9a01      	ldr	r2, [sp, #4]
 8004606:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004608:	2000      	movs	r0, #0
}
 800460a:	b003      	add	sp, #12
 800460c:	bc10      	pop	{r4}
 800460e:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004610:	9901      	ldr	r1, [sp, #4]
 8004612:	3114      	adds	r1, #20
 8004614:	440a      	add	r2, r1
 8004616:	9201      	str	r2, [sp, #4]
 8004618:	e7f4      	b.n	8004604 <HAL_DAC_SetValue+0x18>
    return HAL_ERROR;
 800461a:	2001      	movs	r0, #1
 800461c:	e7f5      	b.n	800460a <HAL_DAC_SetValue+0x1e>

0800461e <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800461e:	b348      	cbz	r0, 8004674 <HAL_DAC_ConfigChannel+0x56>
 8004620:	4684      	mov	ip, r0
 8004622:	b349      	cbz	r1, 8004678 <HAL_DAC_ConfigChannel+0x5a>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004624:	7943      	ldrb	r3, [r0, #5]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d028      	beq.n	800467c <HAL_DAC_ConfigChannel+0x5e>
{
 800462a:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 800462c:	f04f 0e01 	mov.w	lr, #1
 8004630:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	7103      	strb	r3, [r0, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004638:	6804      	ldr	r4, [r0, #0]
 800463a:	6820      	ldr	r0, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800463c:	f002 0210 	and.w	r2, r2, #16
 8004640:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8004644:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004646:	ea20 0003 	bic.w	r0, r0, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800464a:	680b      	ldr	r3, [r1, #0]
 800464c:	6849      	ldr	r1, [r1, #4]
 800464e:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004650:	4093      	lsls	r3, r2
 8004652:	4303      	orrs	r3, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004654:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004656:	f8dc 0000 	ldr.w	r0, [ip]
 800465a:	6803      	ldr	r3, [r0, #0]
 800465c:	21c0      	movs	r1, #192	@ 0xc0
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	ea23 0302 	bic.w	r3, r3, r2
 8004666:	6003      	str	r3, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004668:	f88c e004 	strb.w	lr, [ip, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800466c:	2000      	movs	r0, #0
 800466e:	f88c 0005 	strb.w	r0, [ip, #5]

  /* Return function status */
  return status;
}
 8004672:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004674:	2001      	movs	r0, #1
 8004676:	4770      	bx	lr
 8004678:	2001      	movs	r0, #1
 800467a:	4770      	bx	lr
  __HAL_LOCK(hdac);
 800467c:	2002      	movs	r0, #2
}
 800467e:	4770      	bx	lr

08004680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004686:	f8d1 9000 	ldr.w	r9, [r1]
 800468a:	f1b9 0f00 	cmp.w	r9, #0
 800468e:	f000 8137 	beq.w	8004900 <HAL_GPIO_Init+0x280>
 8004692:	4606      	mov	r6, r0
 8004694:	2200      	movs	r2, #0
  uint32_t config = 0x00u;
 8004696:	4617      	mov	r7, r2
  uint32_t position = 0x00u;
 8004698:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800469a:	f04f 0c01 	mov.w	ip, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800469e:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 80046a2:	f2c4 0e02 	movt	lr, #16386	@ 0x4002
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046a6:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80046aa:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80046ae:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 80046b2:	f2c4 0501 	movt	r5, #16385	@ 0x4001
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046b6:	3004      	adds	r0, #4
 80046b8:	9001      	str	r0, [sp, #4]
 80046ba:	46a8      	mov	r8, r5
 80046bc:	464d      	mov	r5, r9
 80046be:	e0d1      	b.n	8004864 <HAL_GPIO_Init+0x1e4>
      switch (GPIO_Init->Mode)
 80046c0:	f04f 0a00 	mov.w	sl, #0
 80046c4:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 80046c8:	4555      	cmp	r5, sl
 80046ca:	d024      	beq.n	8004716 <HAL_GPIO_Init+0x96>
 80046cc:	f04f 0a00 	mov.w	sl, #0
 80046d0:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 80046d4:	4555      	cmp	r5, sl
 80046d6:	d812      	bhi.n	80046fe <HAL_GPIO_Init+0x7e>
 80046d8:	f04f 0a00 	mov.w	sl, #0
 80046dc:	f2c1 0a12 	movt	sl, #4114	@ 0x1012
 80046e0:	4555      	cmp	r5, sl
 80046e2:	d018      	beq.n	8004716 <HAL_GPIO_Init+0x96>
 80046e4:	f04f 0a00 	mov.w	sl, #0
 80046e8:	f2c1 0a21 	movt	sl, #4129	@ 0x1021
 80046ec:	4555      	cmp	r5, sl
 80046ee:	d012      	beq.n	8004716 <HAL_GPIO_Init+0x96>
 80046f0:	f04f 0a00 	mov.w	sl, #0
 80046f4:	f2c1 0a11 	movt	sl, #4113	@ 0x1011
 80046f8:	4555      	cmp	r5, sl
 80046fa:	d119      	bne.n	8004730 <HAL_GPIO_Init+0xb0>
 80046fc:	e00b      	b.n	8004716 <HAL_GPIO_Init+0x96>
 80046fe:	f04f 0a00 	mov.w	sl, #0
 8004702:	f2c1 0a31 	movt	sl, #4145	@ 0x1031
 8004706:	4555      	cmp	r5, sl
 8004708:	d005      	beq.n	8004716 <HAL_GPIO_Init+0x96>
 800470a:	f04f 0a00 	mov.w	sl, #0
 800470e:	f2c1 0a32 	movt	sl, #4146	@ 0x1032
 8004712:	4555      	cmp	r5, sl
 8004714:	d10c      	bne.n	8004730 <HAL_GPIO_Init+0xb0>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004716:	688d      	ldr	r5, [r1, #8]
 8004718:	2d00      	cmp	r5, #0
 800471a:	f000 80e6 	beq.w	80048ea <HAL_GPIO_Init+0x26a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800471e:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8004720:	bf0c      	ite	eq
 8004722:	f8c6 9010 	streq.w	r9, [r6, #16]
            GPIOx->BRR = ioposition;
 8004726:	f8c6 9014 	strne.w	r9, [r6, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800472a:	2708      	movs	r7, #8
 800472c:	e000      	b.n	8004730 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800472e:	68cf      	ldr	r7, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004730:	28ff      	cmp	r0, #255	@ 0xff
 8004732:	bf99      	ittee	ls
 8004734:	46b1      	movls	r9, r6
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004736:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004738:	f8dd 9004 	ldrhi.w	r9, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800473c:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004740:	f8d9 5000 	ldr.w	r5, [r9]
 8004744:	f04f 0b0f 	mov.w	fp, #15
 8004748:	fa0b fb0a 	lsl.w	fp, fp, sl
 800474c:	ea25 050b 	bic.w	r5, r5, fp
 8004750:	fa07 fa0a 	lsl.w	sl, r7, sl
 8004754:	ea45 050a 	orr.w	r5, r5, sl
 8004758:	f8c9 5000 	str.w	r5, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800475c:	684d      	ldr	r5, [r1, #4]
 800475e:	f015 5f80 	tst.w	r5, #268435456	@ 0x10000000
 8004762:	d079      	beq.n	8004858 <HAL_GPIO_Init+0x1d8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004764:	f8de 5018 	ldr.w	r5, [lr, #24]
 8004768:	f045 0501 	orr.w	r5, r5, #1
 800476c:	f8ce 5018 	str.w	r5, [lr, #24]
 8004770:	f8de 5018 	ldr.w	r5, [lr, #24]
 8004774:	f005 0501 	and.w	r5, r5, #1
 8004778:	9503      	str	r5, [sp, #12]
 800477a:	9d03      	ldr	r5, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 800477c:	f023 0503 	bic.w	r5, r3, #3
 8004780:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8004784:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8004788:	f8d5 a008 	ldr.w	sl, [r5, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800478c:	f003 0b03 	and.w	fp, r3, #3
 8004790:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004794:	f04f 090f 	mov.w	r9, #15
 8004798:	fa09 f90b 	lsl.w	r9, r9, fp
 800479c:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047a0:	42a6      	cmp	r6, r4
 80047a2:	f000 80a4 	beq.w	80048ee <HAL_GPIO_Init+0x26e>
 80047a6:	4546      	cmp	r6, r8
 80047a8:	f000 80a4 	beq.w	80048f4 <HAL_GPIO_Init+0x274>
 80047ac:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 80047b0:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 80047b4:	454e      	cmp	r6, r9
 80047b6:	f000 80a0 	beq.w	80048fa <HAL_GPIO_Init+0x27a>
 80047ba:	f44f 59a0 	mov.w	r9, #5120	@ 0x1400
 80047be:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 80047c2:	454e      	cmp	r6, r9
 80047c4:	bf14      	ite	ne
 80047c6:	f04f 0904 	movne.w	r9, #4
 80047ca:	f04f 0903 	moveq.w	r9, #3
 80047ce:	fa09 f90b 	lsl.w	r9, r9, fp
 80047d2:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80047d6:	f8c5 9008 	str.w	r9, [r5, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047da:	684d      	ldr	r5, [r1, #4]
 80047dc:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047e0:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80047e4:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80047e8:	f8d5 9008 	ldr.w	r9, [r5, #8]
 80047ec:	bf14      	ite	ne
 80047ee:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047f2:	ea29 0900 	biceq.w	r9, r9, r0
 80047f6:	f8c5 9008 	str.w	r9, [r5, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047fa:	684d      	ldr	r5, [r1, #4]
 80047fc:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004800:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8004804:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004808:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800480c:	bf14      	ite	ne
 800480e:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004812:	ea29 0900 	biceq.w	r9, r9, r0
 8004816:	f8c5 900c 	str.w	r9, [r5, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800481a:	684d      	ldr	r5, [r1, #4]
 800481c:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004820:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8004824:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004828:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800482c:	bf14      	ite	ne
 800482e:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004832:	ea29 0900 	biceq.w	r9, r9, r0
 8004836:	f8c5 9004 	str.w	r9, [r5, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800483a:	684d      	ldr	r5, [r1, #4]
 800483c:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004840:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8004844:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004848:	f8d5 9000 	ldr.w	r9, [r5]
 800484c:	bf14      	ite	ne
 800484e:	ea49 0000 	orrne.w	r0, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004852:	ea29 0000 	biceq.w	r0, r9, r0
 8004856:	6028      	str	r0, [r5, #0]
        }
      }
    }

	position++;
 8004858:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800485a:	680d      	ldr	r5, [r1, #0]
 800485c:	3204      	adds	r2, #4
 800485e:	fa35 f003 	lsrs.w	r0, r5, r3
 8004862:	d04d      	beq.n	8004900 <HAL_GPIO_Init+0x280>
    ioposition = (0x01uL << position);
 8004864:	fa0c f903 	lsl.w	r9, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004868:	ea09 0005 	and.w	r0, r9, r5
    if (iocurrent == ioposition)
 800486c:	ea39 0505 	bics.w	r5, r9, r5
 8004870:	d1f2      	bne.n	8004858 <HAL_GPIO_Init+0x1d8>
      switch (GPIO_Init->Mode)
 8004872:	684d      	ldr	r5, [r1, #4]
 8004874:	2d12      	cmp	r5, #18
 8004876:	f63f af23 	bhi.w	80046c0 <HAL_GPIO_Init+0x40>
 800487a:	2d12      	cmp	r5, #18
 800487c:	f63f af58 	bhi.w	8004730 <HAL_GPIO_Init+0xb0>
 8004880:	f20f 0a04 	addw	sl, pc, #4
 8004884:	f85a f025 	ldr.w	pc, [sl, r5, lsl #2]
 8004888:	08004717 	.word	0x08004717
 800488c:	0800472f 	.word	0x0800472f
 8004890:	080048db 	.word	0x080048db
 8004894:	080048e7 	.word	0x080048e7
 8004898:	08004731 	.word	0x08004731
 800489c:	08004731 	.word	0x08004731
 80048a0:	08004731 	.word	0x08004731
 80048a4:	08004731 	.word	0x08004731
 80048a8:	08004731 	.word	0x08004731
 80048ac:	08004731 	.word	0x08004731
 80048b0:	08004731 	.word	0x08004731
 80048b4:	08004731 	.word	0x08004731
 80048b8:	08004731 	.word	0x08004731
 80048bc:	08004731 	.word	0x08004731
 80048c0:	08004731 	.word	0x08004731
 80048c4:	08004731 	.word	0x08004731
 80048c8:	08004731 	.word	0x08004731
 80048cc:	080048d5 	.word	0x080048d5
 80048d0:	080048e1 	.word	0x080048e1
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048d4:	68cf      	ldr	r7, [r1, #12]
 80048d6:	3704      	adds	r7, #4
          break;
 80048d8:	e72a      	b.n	8004730 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048da:	68cf      	ldr	r7, [r1, #12]
 80048dc:	3708      	adds	r7, #8
          break;
 80048de:	e727      	b.n	8004730 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80048e0:	68cf      	ldr	r7, [r1, #12]
 80048e2:	370c      	adds	r7, #12
          break;
 80048e4:	e724      	b.n	8004730 <HAL_GPIO_Init+0xb0>
      switch (GPIO_Init->Mode)
 80048e6:	2700      	movs	r7, #0
 80048e8:	e722      	b.n	8004730 <HAL_GPIO_Init+0xb0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80048ea:	2704      	movs	r7, #4
 80048ec:	e720      	b.n	8004730 <HAL_GPIO_Init+0xb0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	e76c      	b.n	80047ce <HAL_GPIO_Init+0x14e>
 80048f4:	f04f 0901 	mov.w	r9, #1
 80048f8:	e769      	b.n	80047ce <HAL_GPIO_Init+0x14e>
 80048fa:	f04f 0902 	mov.w	r9, #2
 80048fe:	e766      	b.n	80047ce <HAL_GPIO_Init+0x14e>
  }
}
 8004900:	b005      	add	sp, #20
 8004902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004906:	bf00      	nop

08004908 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004908:	6883      	ldr	r3, [r0, #8]
 800490a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800490c:	bf14      	ite	ne
 800490e:	2001      	movne	r0, #1
 8004910:	2000      	moveq	r0, #0
 8004912:	4770      	bx	lr

08004914 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004914:	b10a      	cbz	r2, 800491a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004916:	6101      	str	r1, [r0, #16]
 8004918:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800491a:	0409      	lsls	r1, r1, #16
 800491c:	6101      	str	r1, [r0, #16]
  }
}
 800491e:	4770      	bx	lr

08004920 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004920:	4770      	bx	lr

08004922 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004922:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004928:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4203      	tst	r3, r0
 8004930:	d100      	bne.n	8004934 <HAL_GPIO_EXTI_IRQHandler+0x12>
}
 8004932:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004938:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800493c:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800493e:	f7ff ffef 	bl	8004920 <HAL_GPIO_EXTI_Callback>
}
 8004942:	e7f6      	b.n	8004932 <HAL_GPIO_EXTI_IRQHandler+0x10>

08004944 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004944:	2800      	cmp	r0, #0
 8004946:	f000 80c7 	beq.w	8004ad8 <HAL_I2C_Init+0x194>
{
 800494a:	b538      	push	{r3, r4, r5, lr}
 800494c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800494e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8084 	beq.w	8004a60 <HAL_I2C_Init+0x11c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004958:	2324      	movs	r3, #36	@ 0x24
 800495a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	6813      	ldr	r3, [r2, #0]
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004970:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800497a:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800497c:	f000 fc29 	bl	80051d2 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004980:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8004984:	f2c0 0301 	movt	r3, #1
 8004988:	6862      	ldr	r2, [r4, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d86d      	bhi.n	8004a6a <HAL_I2C_Init+0x126>
 800498e:	f248 437f 	movw	r3, #33919	@ 0x847f
 8004992:	f2c0 031e 	movt	r3, #30
 8004996:	4298      	cmp	r0, r3
 8004998:	f240 80a0 	bls.w	8004adc <HAL_I2C_Init+0x198>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800499c:	f64d 6183 	movw	r1, #56963	@ 0xde83
 80049a0:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 80049a4:	fba1 3100 	umull	r3, r1, r1, r0
 80049a8:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	686a      	ldr	r2, [r5, #4]
 80049ae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80049b2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80049b6:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	6a0a      	ldr	r2, [r1, #32]
 80049bc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80049c0:	f248 65a0 	movw	r5, #34464	@ 0x86a0
 80049c4:	f2c0 0501 	movt	r5, #1
 80049c8:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80049cc:	45ac      	cmp	ip, r5
 80049ce:	d854      	bhi.n	8004a7a <HAL_I2C_Init+0x136>
 80049d0:	3301      	adds	r3, #1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d6:	6821      	ldr	r1, [r4, #0]
 80049d8:	69ca      	ldr	r2, [r1, #28]
 80049da:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80049de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049e2:	6865      	ldr	r5, [r4, #4]
 80049e4:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 80049e8:	f2c0 0301 	movt	r3, #1
 80049ec:	429d      	cmp	r5, r3
 80049ee:	d851      	bhi.n	8004a94 <HAL_I2C_Init+0x150>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	006d      	lsls	r5, r5, #1
 80049f4:	fbb3 f3f5 	udiv	r3, r3, r5
 80049f8:	3301      	adds	r3, #1
 80049fa:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80049fe:	4203      	tst	r3, r0
 8004a00:	d064      	beq.n	8004acc <HAL_I2C_Init+0x188>
 8004a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a06:	431a      	orrs	r2, r3
 8004a08:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	680a      	ldr	r2, [r1, #0]
 8004a0e:	69e3      	ldr	r3, [r4, #28]
 8004a10:	6a20      	ldr	r0, [r4, #32]
 8004a12:	4303      	orrs	r3, r0
 8004a14:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a1c:	6821      	ldr	r1, [r4, #0]
 8004a1e:	688a      	ldr	r2, [r1, #8]
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	68e0      	ldr	r0, [r4, #12]
 8004a24:	4303      	orrs	r3, r0
 8004a26:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8004a2a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a32:	6821      	ldr	r1, [r4, #0]
 8004a34:	68ca      	ldr	r2, [r1, #12]
 8004a36:	6963      	ldr	r3, [r4, #20]
 8004a38:	69a0      	ldr	r0, [r4, #24]
 8004a3a:	4303      	orrs	r3, r0
 8004a3c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a44:	6822      	ldr	r2, [r4, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a4e:	2000      	movs	r0, #0
 8004a50:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	2320      	movs	r3, #32
 8004a54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a58:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004a60:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004a64:	f7ff fa2c 	bl	8003ec0 <HAL_I2C_MspInit>
 8004a68:	e776      	b.n	8004958 <HAL_I2C_Init+0x14>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a6a:	f640 03ff 	movw	r3, #2303	@ 0x8ff
 8004a6e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8004a72:	4298      	cmp	r0, r3
 8004a74:	d892      	bhi.n	800499c <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 8004a76:	2001      	movs	r0, #1
 8004a78:	e7f1      	b.n	8004a5e <HAL_I2C_Init+0x11a>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7a:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004a7e:	fb05 f303 	mul.w	r3, r5, r3
 8004a82:	f644 55d3 	movw	r5, #19923	@ 0x4dd3
 8004a86:	f2c1 0562 	movt	r5, #4194	@ 0x1062
 8004a8a:	fba5 5303 	umull	r5, r3, r5, r3
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	3301      	adds	r3, #1
 8004a92:	e79e      	b.n	80049d2 <HAL_I2C_Init+0x8e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a94:	68a3      	ldr	r3, [r4, #8]
 8004a96:	b95b      	cbnz	r3, 8004ab0 <HAL_I2C_Init+0x16c>
 8004a98:	1e43      	subs	r3, r0, #1
 8004a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	b193      	cbz	r3, 8004ad0 <HAL_I2C_Init+0x18c>
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aae:	e7aa      	b.n	8004a06 <HAL_I2C_Init+0xc2>
 8004ab0:	1e43      	subs	r3, r0, #1
 8004ab2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004ab6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004aba:	fbb3 f3f5 	udiv	r3, r3, r5
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	b133      	cbz	r3, 8004ad4 <HAL_I2C_Init+0x190>
 8004ac6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aca:	e79c      	b.n	8004a06 <HAL_I2C_Init+0xc2>
 8004acc:	2304      	movs	r3, #4
 8004ace:	e79a      	b.n	8004a06 <HAL_I2C_Init+0xc2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e798      	b.n	8004a06 <HAL_I2C_Init+0xc2>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e796      	b.n	8004a06 <HAL_I2C_Init+0xc2>
    return HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
}
 8004ada:	4770      	bx	lr
    return HAL_ERROR;
 8004adc:	2001      	movs	r0, #1
 8004ade:	e7be      	b.n	8004a5e <HAL_I2C_Init+0x11a>

08004ae0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	f000 827a 	beq.w	8004fda <HAL_RCC_OscConfig+0x4fa>
{
 8004ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aee:	6803      	ldr	r3, [r0, #0]
 8004af0:	f013 0f01 	tst.w	r3, #1
 8004af4:	d038      	beq.n	8004b68 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004afa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 030c 	and.w	r3, r3, #12
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d023      	beq.n	8004b50 <HAL_RCC_OscConfig+0x70>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b0c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d012      	beq.n	8004b40 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b20:	d054      	beq.n	8004bcc <HAL_RCC_OscConfig+0xec>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d16e      	bne.n	8004c04 <HAL_RCC_OscConfig+0x124>
 8004b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b2a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e04d      	b.n	8004bdc <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b44:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004b4e:	d0e4      	beq.n	8004b1a <HAL_RCC_OscConfig+0x3a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b54:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCC_OscConfig+0x88>
 8004b60:	6863      	ldr	r3, [r4, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 823b 	beq.w	8004fde <HAL_RCC_OscConfig+0x4fe>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f013 0f02 	tst.w	r3, #2
 8004b6e:	f000 8097 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b76:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f013 0f0c 	tst.w	r3, #12
 8004b80:	d077      	beq.n	8004c72 <HAL_RCC_OscConfig+0x192>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b86:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d066      	beq.n	8004c62 <HAL_RCC_OscConfig+0x182>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80ae 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x218>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7ff fc50 	bl	800444a <HAL_GetTick>
 8004baa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bac:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004bb0:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004bb4:	6833      	ldr	r3, [r6, #0]
 8004bb6:	f013 0f02 	tst.w	r3, #2
 8004bba:	f040 8091 	bne.w	8004ce0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7ff fc44 	bl	800444a <HAL_GetTick>
 8004bc2:	1b40      	subs	r0, r0, r5
 8004bc4:	2802      	cmp	r0, #2
 8004bc6:	d9f5      	bls.n	8004bb4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8004bc8:	2003      	movs	r0, #3
 8004bca:	e20d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bd0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bda:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	b373      	cbz	r3, 8004c3e <HAL_RCC_OscConfig+0x15e>
        tickstart = HAL_GetTick();
 8004be0:	f7ff fc33 	bl	800444a <HAL_GetTick>
 8004be4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004bea:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004bee:	6833      	ldr	r3, [r6, #0]
 8004bf0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004bf4:	d1b8      	bne.n	8004b68 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf6:	f7ff fc28 	bl	800444a <HAL_GetTick>
 8004bfa:	1b40      	subs	r0, r0, r5
 8004bfc:	2864      	cmp	r0, #100	@ 0x64
 8004bfe:	d9f6      	bls.n	8004bee <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8004c00:	2003      	movs	r0, #3
 8004c02:	e1f1      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c08:	d00c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x144>
 8004c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e7db      	b.n	8004bdc <HAL_RCC_OscConfig+0xfc>
 8004c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c28:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e7ce      	b.n	8004bdc <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8004c3e:	f7ff fc04 	bl	800444a <HAL_GetTick>
 8004c42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c44:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004c48:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004c4c:	6833      	ldr	r3, [r6, #0]
 8004c4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004c52:	d089      	beq.n	8004b68 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7ff fbf9 	bl	800444a <HAL_GetTick>
 8004c58:	1b40      	subs	r0, r0, r5
 8004c5a:	2864      	cmp	r0, #100	@ 0x64
 8004c5c:	d9f6      	bls.n	8004c4c <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 8004c5e:	2003      	movs	r0, #3
 8004c60:	e1c2      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c66:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004c70:	d190      	bne.n	8004b94 <HAL_RCC_OscConfig+0xb4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c76:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f013 0f02 	tst.w	r3, #2
 8004c80:	d003      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1aa>
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 81ac 	bne.w	8004fe2 <HAL_RCC_OscConfig+0x502>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c8e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	6961      	ldr	r1, [r4, #20]
 8004c96:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c9e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f013 0f08 	tst.w	r3, #8
 8004ca6:	d051      	beq.n	8004d4c <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ca8:	69a3      	ldr	r3, [r4, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8083 	beq.w	8004db6 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbc:	f7ff fbc5 	bl	800444a <HAL_GetTick>
 8004cc0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004cc6:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004cca:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004ccc:	f013 0f02 	tst.w	r3, #2
 8004cd0:	d129      	bne.n	8004d26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7ff fbba 	bl	800444a <HAL_GetTick>
 8004cd6:	1b40      	subs	r0, r0, r5
 8004cd8:	2802      	cmp	r0, #2
 8004cda:	d9f6      	bls.n	8004cca <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8004cdc:	2003      	movs	r0, #3
 8004cde:	e183      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ce4:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	6961      	ldr	r1, [r4, #20]
 8004cec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004cf0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e7d3      	b.n	8004ca0 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d02:	f7ff fba2 	bl	800444a <HAL_GetTick>
 8004d06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d08:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004d0c:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004d10:	6833      	ldr	r3, [r6, #0]
 8004d12:	f013 0f02 	tst.w	r3, #2
 8004d16:	d0c3      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7ff fb97 	bl	800444a <HAL_GetTick>
 8004d1c:	1b40      	subs	r0, r0, r5
 8004d1e:	2802      	cmp	r0, #2
 8004d20:	d9f6      	bls.n	8004d10 <HAL_RCC_OscConfig+0x230>
            return HAL_TIMEOUT;
 8004d22:	2003      	movs	r0, #3
 8004d24:	e160      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d26:	f240 03b8 	movw	r3, #184	@ 0xb8
 8004d2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8004d34:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004d40:	bf00      	nop
  }
  while (Delay --);
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	9201      	str	r2, [sp, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f9      	bne.n	8004d40 <HAL_RCC_OscConfig+0x260>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	f013 0f04 	tst.w	r3, #4
 8004d52:	f000 80b3 	beq.w	8004ebc <HAL_RCC_OscConfig+0x3dc>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d5a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004d64:	d13f      	bne.n	8004de6 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d6a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004d80:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d82:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004d86:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d90:	d02b      	beq.n	8004dea <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d042      	beq.n	8004e1e <HAL_RCC_OscConfig+0x33e>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d15e      	bne.n	8004e5a <HAL_RCC_OscConfig+0x37a>
 8004d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004da0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	621a      	str	r2, [r3, #32]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	621a      	str	r2, [r3, #32]
 8004db4:	e03b      	b.n	8004e2e <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_LSI_DISABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004dc2:	f7ff fb42 	bl	800444a <HAL_GetTick>
 8004dc6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004dcc:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004dd0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004dd2:	f013 0f02 	tst.w	r3, #2
 8004dd6:	d0b9      	beq.n	8004d4c <HAL_RCC_OscConfig+0x26c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd8:	f7ff fb37 	bl	800444a <HAL_GetTick>
 8004ddc:	1b40      	subs	r0, r0, r5
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d9f6      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x2f0>
          return HAL_TIMEOUT;
 8004de2:	2003      	movs	r0, #3
 8004de4:	e100      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
    FlagStatus       pwrclkchanged = RESET;
 8004de6:	2500      	movs	r5, #0
 8004de8:	e7cb      	b.n	8004d82 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004dee:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004dfa:	f7ff fb26 	bl	800444a <HAL_GetTick>
 8004dfe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8004e04:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004e0e:	d1c0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x2b2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e10:	f7ff fb1b 	bl	800444a <HAL_GetTick>
 8004e14:	1b80      	subs	r0, r0, r6
 8004e16:	2864      	cmp	r0, #100	@ 0x64
 8004e18:	d9f6      	bls.n	8004e08 <HAL_RCC_OscConfig+0x328>
          return HAL_TIMEOUT;
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	e0e4      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e22:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e2e:	68e3      	ldr	r3, [r4, #12]
 8004e30:	b37b      	cbz	r3, 8004e92 <HAL_RCC_OscConfig+0x3b2>
      tickstart = HAL_GetTick();
 8004e32:	f7ff fb0a 	bl	800444a <HAL_GetTick>
 8004e36:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8004e3c:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	f013 0f02 	tst.w	r3, #2
 8004e4a:	d136      	bne.n	8004eba <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4c:	f7ff fafd 	bl	800444a <HAL_GetTick>
 8004e50:	1b80      	subs	r0, r0, r6
 8004e52:	4540      	cmp	r0, r8
 8004e54:	d9f6      	bls.n	8004e44 <HAL_RCC_OscConfig+0x364>
          return HAL_TIMEOUT;
 8004e56:	2003      	movs	r0, #3
 8004e58:	e0c6      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d00c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x398>
 8004e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e62:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	621a      	str	r2, [r3, #32]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	f022 0204 	bic.w	r2, r2, #4
 8004e74:	621a      	str	r2, [r3, #32]
 8004e76:	e7da      	b.n	8004e2e <HAL_RCC_OscConfig+0x34e>
 8004e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e7c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	f042 0204 	orr.w	r2, r2, #4
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	e7cd      	b.n	8004e2e <HAL_RCC_OscConfig+0x34e>
      tickstart = HAL_GetTick();
 8004e92:	f7ff fada 	bl	800444a <HAL_GetTick>
 8004e96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e98:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8004e9c:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	f013 0f02 	tst.w	r3, #2
 8004eaa:	d006      	beq.n	8004eba <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eac:	f7ff facd 	bl	800444a <HAL_GetTick>
 8004eb0:	1b80      	subs	r0, r0, r6
 8004eb2:	4540      	cmp	r0, r8
 8004eb4:	d9f6      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8004eb6:	2003      	movs	r0, #3
 8004eb8:	e096      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
    if (pwrclkchanged == SET)
 8004eba:	bb2d      	cbnz	r5, 8004f08 <HAL_RCC_OscConfig+0x428>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ebc:	69e3      	ldr	r3, [r4, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8091 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x506>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ec8:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004ecc:	6852      	ldr	r2, [r2, #4]
 8004ece:	f002 020c 	and.w	r2, r2, #12
 8004ed2:	2a08      	cmp	r2, #8
 8004ed4:	d06e      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x4d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d01f      	beq.n	8004f1a <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004ee4:	f7ff fab1 	bl	800444a <HAL_GetTick>
 8004ee8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eea:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004eee:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004ef8:	d05a      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efa:	f7ff faa6 	bl	800444a <HAL_GetTick>
 8004efe:	1b00      	subs	r0, r0, r4
 8004f00:	2802      	cmp	r0, #2
 8004f02:	d9f6      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8004f04:	2003      	movs	r0, #3
 8004f06:	e06f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f0c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004f16:	61da      	str	r2, [r3, #28]
 8004f18:	e7d0      	b.n	8004ebc <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004f20:	2200      	movs	r2, #0
 8004f22:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004f24:	f7ff fa91 	bl	800444a <HAL_GetTick>
 8004f28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004f2e:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004f32:	6833      	ldr	r3, [r6, #0]
 8004f34:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004f38:	d006      	beq.n	8004f48 <HAL_RCC_OscConfig+0x468>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7ff fa86 	bl	800444a <HAL_GetTick>
 8004f3e:	1b40      	subs	r0, r0, r5
 8004f40:	2802      	cmp	r0, #2
 8004f42:	d9f6      	bls.n	8004f32 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8004f44:	2003      	movs	r0, #3
 8004f46:	e04f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f48:	6a23      	ldr	r3, [r4, #32]
 8004f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4e:	d022      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f54:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004f58:	6851      	ldr	r1, [r2, #4]
 8004f5a:	6a23      	ldr	r3, [r4, #32]
 8004f5c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004f5e:	4303      	orrs	r3, r0
 8004f60:	f421 1174 	bic.w	r1, r1, #3997696	@ 0x3d0000
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004f6e:	2201      	movs	r2, #1
 8004f70:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004f72:	f7ff fa6a 	bl	800444a <HAL_GetTick>
 8004f76:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f78:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004f7c:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004f86:	d111      	bne.n	8004fac <HAL_RCC_OscConfig+0x4cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7ff fa5f 	bl	800444a <HAL_GetTick>
 8004f8c:	1b00      	subs	r0, r0, r4
 8004f8e:	2802      	cmp	r0, #2
 8004f90:	d9f6      	bls.n	8004f80 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8004f92:	2003      	movs	r0, #3
 8004f94:	e028      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f9a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004f9e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004fa0:	f023 030f 	bic.w	r3, r3, #15
 8004fa4:	68a1      	ldr	r1, [r4, #8]
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004faa:	e7d1      	b.n	8004f50 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8004fac:	2000      	movs	r0, #0
 8004fae:	e01b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e019      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d01a      	beq.n	8004fee <HAL_RCC_OscConfig+0x50e>
        pll_config = RCC->CFGR;
 8004fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fbc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004fc0:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004fc6:	6a22      	ldr	r2, [r4, #32]
 8004fc8:	4291      	cmp	r1, r2
 8004fca:	d112      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x512>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004fcc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004fd2:	1a18      	subs	r0, r3, r0
 8004fd4:	bf18      	it	ne
 8004fd6:	2001      	movne	r0, #1
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
    return HAL_ERROR;
 8004fda:	2001      	movs	r0, #1
}
 8004fdc:	4770      	bx	lr
        return HAL_ERROR;
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
        return HAL_ERROR;
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
  return HAL_OK;
 8004fe6:	2000      	movs	r0, #0
}
 8004fe8:	b002      	add	sp, #8
 8004fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004fee:	2001      	movs	r0, #1
 8004ff0:	e7fa      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>
          return HAL_ERROR;
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	e7f8      	b.n	8004fe8 <HAL_RCC_OscConfig+0x508>

08004ff6 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005000:	4770      	bx	lr

08005002 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005006:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800500a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800500c:	f003 020c 	and.w	r2, r3, #12
 8005010:	2a04      	cmp	r2, #4
 8005012:	d027      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x62>
 8005014:	2a08      	cmp	r2, #8
 8005016:	d12a      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0x6c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005018:	f246 52c4 	movw	r2, #26052	@ 0x65c4
 800501c:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8005020:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8005024:	5c50      	ldrb	r0, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005026:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800502a:	d014      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x54>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800502c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005030:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005036:	f44f 5258 	mov.w	r2, #13824	@ 0x3600
 800503a:	f2c0 126e 	movt	r2, #366	@ 0x16e
 800503e:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005042:	f246 52b4 	movw	r2, #26036	@ 0x65b4
 8005046:	f6c0 0200 	movt	r2, #2048	@ 0x800
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005050:	fbb0 f0f3 	udiv	r0, r0, r3
 8005054:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005056:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800505a:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800505e:	fb03 f000 	mul.w	r0, r3, r0
 8005062:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005064:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8005068:	f2c0 106e 	movt	r0, #366	@ 0x16e
 800506c:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 800506e:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8005072:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8005076:	4770      	bx	lr

08005078 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005078:	2800      	cmp	r0, #0
 800507a:	f000 80a6 	beq.w	80051ca <HAL_RCC_ClockConfig+0x152>
{
 800507e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005080:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005082:	6803      	ldr	r3, [r0, #0]
 8005084:	f013 0f02 	tst.w	r3, #2
 8005088:	d020      	beq.n	80050cc <HAL_RCC_ClockConfig+0x54>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508a:	f013 0f04 	tst.w	r3, #4
 800508e:	d007      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005094:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800509e:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f013 0f08 	tst.w	r3, #8
 80050a6:	d007      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050ac:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 80050b6:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050bc:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80050c0:	6853      	ldr	r3, [r2, #4]
 80050c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050c6:	68a1      	ldr	r1, [r4, #8]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	f013 0f01 	tst.w	r3, #1
 80050d2:	d040      	beq.n	8005156 <HAL_RCC_ClockConfig+0xde>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d4:	6862      	ldr	r2, [r4, #4]
 80050d6:	2a01      	cmp	r2, #1
 80050d8:	d029      	beq.n	800512e <HAL_RCC_ClockConfig+0xb6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	2a02      	cmp	r2, #2
 80050dc:	d031      	beq.n	8005142 <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050e2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f013 0f02 	tst.w	r3, #2
 80050ec:	d06f      	beq.n	80051ce <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050f2:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 80050f6:	684b      	ldr	r3, [r1, #4]
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005100:	f7ff f9a3 	bl	800444a <HAL_GetTick>
 8005104:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800510a:	f2c4 0602 	movt	r6, #16386	@ 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f241 3788 	movw	r7, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	6873      	ldr	r3, [r6, #4]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	6862      	ldr	r2, [r4, #4]
 800511a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800511e:	d01a      	beq.n	8005156 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7ff f993 	bl	800444a <HAL_GetTick>
 8005124:	1b40      	subs	r0, r0, r5
 8005126:	42b8      	cmp	r0, r7
 8005128:	d9f3      	bls.n	8005112 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800512a:	2003      	movs	r0, #3
 800512c:	e04c      	b.n	80051c8 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005132:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800513c:	d1d7      	bne.n	80050ee <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 800513e:	2001      	movs	r0, #1
 8005140:	e042      	b.n	80051c8 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005146:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005150:	d1cd      	bne.n	80050ee <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8005152:	2001      	movs	r0, #1
 8005154:	e038      	b.n	80051c8 <HAL_RCC_ClockConfig+0x150>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f013 0f04 	tst.w	r3, #4
 800515c:	d009      	beq.n	8005172 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005162:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005166:	6853      	ldr	r3, [r2, #4]
 8005168:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800516c:	68e1      	ldr	r1, [r4, #12]
 800516e:	430b      	orrs	r3, r1
 8005170:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	f013 0f08 	tst.w	r3, #8
 8005178:	d00a      	beq.n	8005190 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800517e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005182:	6853      	ldr	r3, [r2, #4]
 8005184:	6921      	ldr	r1, [r4, #16]
 8005186:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800518a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800518e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005190:	f7ff ff37 	bl	8005002 <HAL_RCC_GetSysClockFreq>
 8005194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005198:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	f240 03b8 	movw	r3, #184	@ 0xb8
 80051a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80051a6:	f246 51a4 	movw	r1, #26020	@ 0x65a4
 80051aa:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80051ae:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80051b2:	5c8a      	ldrb	r2, [r1, r2]
 80051b4:	40d0      	lsrs	r0, r2
 80051b6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80051b8:	f240 03c0 	movw	r3, #192	@ 0xc0
 80051bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	f7ff f902 	bl	80043ca <HAL_InitTick>
  return HAL_OK;
 80051c6:	2000      	movs	r0, #0
}
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80051ca:	2001      	movs	r0, #1
}
 80051cc:	4770      	bx	lr
        return HAL_ERROR;
 80051ce:	2001      	movs	r0, #1
 80051d0:	e7fa      	b.n	80051c8 <HAL_RCC_ClockConfig+0x150>

080051d2 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051d6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80051da:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 80051dc:	f240 03b8 	movw	r3, #184	@ 0xb8
 80051e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e4:	f246 519c 	movw	r1, #26012	@ 0x659c
 80051e8:	f6c0 0100 	movt	r1, #2048	@ 0x800
 80051ec:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80051f0:	5c8a      	ldrb	r2, [r1, r2]
 80051f2:	6818      	ldr	r0, [r3, #0]
}
 80051f4:	40d0      	lsrs	r0, r2
 80051f6:	4770      	bx	lr

080051f8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051fc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005200:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8005202:	f240 03b8 	movw	r3, #184	@ 0xb8
 8005206:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800520a:	f246 519c 	movw	r1, #26012	@ 0x659c
 800520e:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8005212:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8005216:	5c8a      	ldrb	r2, [r1, r2]
 8005218:	6818      	ldr	r0, [r3, #0]
}
 800521a:	40d0      	lsrs	r0, r2
 800521c:	4770      	bx	lr

0800521e <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800521e:	4770      	bx	lr

08005220 <HAL_RCC_NMI_IRQHandler>:
{
 8005220:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005226:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005230:	d100      	bne.n	8005234 <HAL_RCC_NMI_IRQHandler+0x14>
}
 8005232:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8005234:	f7ff fff3 	bl	800521e <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800523c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	729a      	strb	r2, [r3, #10]
}
 8005244:	e7f5      	b.n	8005232 <HAL_RCC_NMI_IRQHandler+0x12>

08005246 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800524e:	6803      	ldr	r3, [r0, #0]
 8005250:	f013 0f01 	tst.w	r3, #1
 8005254:	d04a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xa6>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800525a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005264:	d152      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800526a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005274:	61da      	str	r2, [r3, #28]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005280:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8005286:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005290:	d03e      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xca>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005296:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800529a:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800529c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80052a0:	d018      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80052a2:	6862      	ldr	r2, [r4, #4]
 80052a4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d013      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052b0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80052b4:	6a19      	ldr	r1, [r3, #32]
 80052b6:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ba:	2200      	movs	r2, #0
 80052bc:	f2c4 2242 	movt	r2, #16962	@ 0x4242
 80052c0:	2601      	movs	r6, #1
 80052c2:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c6:	2600      	movs	r6, #0
 80052c8:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052cc:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052ce:	f011 0f01 	tst.w	r1, #1
 80052d2:	d137      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052d8:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80052dc:	6a13      	ldr	r3, [r2, #32]
 80052de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e2:	6861      	ldr	r1, [r4, #4]
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	d13f      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	f013 0f02 	tst.w	r3, #2
 80052f2:	d044      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80052f8:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80052fc:	6853      	ldr	r3, [r2, #4]
 80052fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005302:	68a1      	ldr	r1, [r4, #8]
 8005304:	430b      	orrs	r3, r1
 8005306:	6053      	str	r3, [r2, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005308:	2000      	movs	r0, #0
 800530a:	e039      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus pwrclkchanged = RESET;
 800530c:	2500      	movs	r5, #0
 800530e:	e7b8      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005310:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8005314:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800531e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005320:	f7ff f893 	bl	800444a <HAL_GetTick>
 8005324:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005326:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 800532a:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005334:	d1ad      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005336:	f7ff f888 	bl	800444a <HAL_GetTick>
 800533a:	1b80      	subs	r0, r0, r6
 800533c:	2864      	cmp	r0, #100	@ 0x64
 800533e:	d9f6      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xe8>
          return HAL_TIMEOUT;
 8005340:	2003      	movs	r0, #3
 8005342:	e01d      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8005344:	f7ff f881 	bl	800444a <HAL_GetTick>
 8005348:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800534e:	f2c4 0702 	movt	r7, #16386	@ 0x4002
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f013 0f02 	tst.w	r3, #2
 800535c:	d1ba      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7ff f874 	bl	800444a <HAL_GetTick>
 8005362:	1b80      	subs	r0, r0, r6
 8005364:	4540      	cmp	r0, r8
 8005366:	d9f6      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
 8005368:	2003      	movs	r0, #3
 800536a:	e009      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800536c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005370:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800537a:	61da      	str	r2, [r3, #28]
 800537c:	e7b6      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xa6>
  return HAL_OK;
 800537e:	2000      	movs	r0, #0
}
 8005380:	b002      	add	sp, #8
 8005382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005386 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005386:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d12f      	bne.n	80053f0 <HAL_TIM_Base_Start+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	2302      	movs	r3, #2
 8005392:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800539c:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01a      	beq.n	80053da <HAL_TIM_Base_Start+0x54>
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d017      	beq.n	80053da <HAL_TIM_Base_Start+0x54>
 80053aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053ae:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d011      	beq.n	80053da <HAL_TIM_Base_Start+0x54>
 80053b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ba:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <HAL_TIM_Base_Start+0x54>
 80053c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053c6:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d005      	beq.n	80053da <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053d6:	2000      	movs	r0, #0
 80053d8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	2a06      	cmp	r2, #6
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80053ec:	2000      	movs	r0, #0
 80053ee:	4770      	bx	lr
    return HAL_ERROR;
 80053f0:	2001      	movs	r0, #1
 80053f2:	4770      	bx	lr
  return HAL_OK;
 80053f4:	2000      	movs	r0, #0
}
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d134      	bne.n	800546c <HAL_TIM_Base_Start_IT+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005402:	2302      	movs	r3, #2
 8005404:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	68d3      	ldr	r3, [r2, #12]
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	6803      	ldr	r3, [r0, #0]
 8005414:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8005418:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800541c:	4293      	cmp	r3, r2
 800541e:	d01a      	beq.n	8005456 <HAL_TIM_Base_Start_IT+0x5e>
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005424:	d017      	beq.n	8005456 <HAL_TIM_Base_Start_IT+0x5e>
 8005426:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800542a:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800542e:	4293      	cmp	r3, r2
 8005430:	d011      	beq.n	8005456 <HAL_TIM_Base_Start_IT+0x5e>
 8005432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005436:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <HAL_TIM_Base_Start_IT+0x5e>
 800543e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005442:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8005446:	4293      	cmp	r3, r2
 8005448:	d005      	beq.n	8005456 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005452:	2000      	movs	r0, #0
 8005454:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	2a06      	cmp	r2, #6
 800545e:	d007      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005468:	2000      	movs	r0, #0
 800546a:	4770      	bx	lr
    return HAL_ERROR;
 800546c:	2001      	movs	r0, #1
 800546e:	4770      	bx	lr
  return HAL_OK;
 8005470:	2000      	movs	r0, #0
}
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005474:	4770      	bx	lr

08005476 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800547c:	4770      	bx	lr

0800547e <HAL_TIM_IRQHandler>:
{
 800547e:	b570      	push	{r4, r5, r6, lr}
 8005480:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005482:	6803      	ldr	r3, [r0, #0]
 8005484:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005486:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005488:	f015 0f02 	tst.w	r5, #2
 800548c:	d010      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800548e:	f016 0f02 	tst.w	r6, #2
 8005492:	d00d      	beq.n	80054b0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005494:	f06f 0202 	mvn.w	r2, #2
 8005498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800549a:	2301      	movs	r3, #1
 800549c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800549e:	6803      	ldr	r3, [r0, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f013 0f03 	tst.w	r3, #3
 80054a6:	d05e      	beq.n	8005566 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	f7ff ffe6 	bl	8005478 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	2300      	movs	r3, #0
 80054ae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054b0:	f015 0f04 	tst.w	r5, #4
 80054b4:	d012      	beq.n	80054dc <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054b6:	f016 0f04 	tst.w	r6, #4
 80054ba:	d00f      	beq.n	80054dc <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f06f 0204 	mvn.w	r2, #4
 80054c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c4:	2302      	movs	r3, #2
 80054c6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80054d0:	d04f      	beq.n	8005572 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff ffd0 	bl	8005478 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d8:	2300      	movs	r3, #0
 80054da:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054dc:	f015 0f08 	tst.w	r5, #8
 80054e0:	d012      	beq.n	8005508 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e2:	f016 0f08 	tst.w	r6, #8
 80054e6:	d00f      	beq.n	8005508 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	f06f 0208 	mvn.w	r2, #8
 80054ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054f0:	2304      	movs	r3, #4
 80054f2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f013 0f03 	tst.w	r3, #3
 80054fc:	d040      	beq.n	8005580 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff ffba 	bl	8005478 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005504:	2300      	movs	r3, #0
 8005506:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005508:	f015 0f10 	tst.w	r5, #16
 800550c:	d012      	beq.n	8005534 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800550e:	f016 0f10 	tst.w	r6, #16
 8005512:	d00f      	beq.n	8005534 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f06f 0210 	mvn.w	r2, #16
 800551a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551c:	2308      	movs	r3, #8
 800551e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005528:	d031      	beq.n	800558e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff ffa4 	bl	8005478 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005530:	2300      	movs	r3, #0
 8005532:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005534:	f015 0f01 	tst.w	r5, #1
 8005538:	d002      	beq.n	8005540 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800553a:	f016 0f01 	tst.w	r6, #1
 800553e:	d12d      	bne.n	800559c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005540:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8005544:	d002      	beq.n	800554c <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005546:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800554a:	d12f      	bne.n	80055ac <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800554c:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8005550:	d002      	beq.n	8005558 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005552:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8005556:	d131      	bne.n	80055bc <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005558:	f015 0f20 	tst.w	r5, #32
 800555c:	d002      	beq.n	8005564 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555e:	f016 0f20 	tst.w	r6, #32
 8005562:	d133      	bne.n	80055cc <HAL_TIM_IRQHandler+0x14e>
}
 8005564:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	f7ff ff86 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556a:	4620      	mov	r0, r4
 800556c:	f7ff ff85 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
 8005570:	e79c      	b.n	80054ac <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	4620      	mov	r0, r4
 8005574:	f7ff ff7f 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff ff7e 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
 800557e:	e7ab      	b.n	80054d8 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005580:	4620      	mov	r0, r4
 8005582:	f7ff ff78 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff ff77 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
 800558c:	e7ba      	b.n	8005504 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff ff71 	bl	8005476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	4620      	mov	r0, r4
 8005596:	f7ff ff70 	bl	800547a <HAL_TIM_PWM_PulseFinishedCallback>
 800559a:	e7c9      	b.n	8005530 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	f06f 0201 	mvn.w	r2, #1
 80055a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a4:	4620      	mov	r0, r4
 80055a6:	f7ff ff65 	bl	8005474 <HAL_TIM_PeriodElapsedCallback>
 80055aa:	e7c9      	b.n	8005540 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 fa0c 	bl	80059d2 <HAL_TIMEx_BreakCallback>
 80055ba:	e7c7      	b.n	800554c <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff ff59 	bl	800547c <HAL_TIM_TriggerCallback>
 80055ca:	e7c5      	b.n	8005558 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	f06f 0220 	mvn.w	r2, #32
 80055d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 f9fb 	bl	80059d0 <HAL_TIMEx_CommutCallback>
}
 80055da:	e7c3      	b.n	8005564 <HAL_TIM_IRQHandler+0xe6>

080055dc <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055dc:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055de:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80055e2:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80055e6:	4290      	cmp	r0, r2
 80055e8:	f000 8095 	beq.w	8005716 <TIM_Base_SetConfig+0x13a>
 80055ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80055f0:	f000 80af 	beq.w	8005752 <TIM_Base_SetConfig+0x176>
 80055f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055f8:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80055fc:	4290      	cmp	r0, r2
 80055fe:	f000 8085 	beq.w	800570c <TIM_Base_SetConfig+0x130>
 8005602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005606:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800560a:	4290      	cmp	r0, r2
 800560c:	d01b      	beq.n	8005646 <TIM_Base_SetConfig+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005612:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8005616:	4290      	cmp	r0, r2
 8005618:	d06a      	beq.n	80056f0 <TIM_Base_SetConfig+0x114>
 800561a:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800561e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8005622:	4290      	cmp	r0, r2
 8005624:	d048      	beq.n	80056b8 <TIM_Base_SetConfig+0xdc>
 8005626:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 800562a:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800562e:	4290      	cmp	r0, r2
 8005630:	d050      	beq.n	80056d4 <TIM_Base_SetConfig+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005636:	694a      	ldr	r2, [r1, #20]
 8005638:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800563a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563c:	688b      	ldr	r3, [r1, #8]
 800563e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005640:	680b      	ldr	r3, [r1, #0]
 8005642:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005644:	e07a      	b.n	800573c <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800564a:	684a      	ldr	r2, [r1, #4]
 800564c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8005652:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8005656:	4290      	cmp	r0, r2
 8005658:	d061      	beq.n	800571e <TIM_Base_SetConfig+0x142>
 800565a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800565e:	d07c      	beq.n	800575a <TIM_Base_SetConfig+0x17e>
 8005660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005664:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8005668:	4290      	cmp	r0, r2
 800566a:	d076      	beq.n	800575a <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800566c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005670:	68ca      	ldr	r2, [r1, #12]
 8005672:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005674:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005678:	694a      	ldr	r2, [r1, #20]
 800567a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800567c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567e:	688b      	ldr	r3, [r1, #8]
 8005680:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005682:	680b      	ldr	r3, [r1, #0]
 8005684:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005686:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800568a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800568e:	4298      	cmp	r0, r3
 8005690:	d052      	beq.n	8005738 <TIM_Base_SetConfig+0x15c>
 8005692:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005696:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800569a:	4298      	cmp	r0, r3
 800569c:	d04c      	beq.n	8005738 <TIM_Base_SetConfig+0x15c>
 800569e:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80056a2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80056a6:	4298      	cmp	r0, r3
 80056a8:	d046      	beq.n	8005738 <TIM_Base_SetConfig+0x15c>
 80056aa:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80056ae:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80056b2:	4298      	cmp	r0, r3
 80056b4:	d040      	beq.n	8005738 <TIM_Base_SetConfig+0x15c>
 80056b6:	e041      	b.n	800573c <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056bc:	68ca      	ldr	r2, [r1, #12]
 80056be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056c4:	694a      	ldr	r2, [r1, #20]
 80056c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ca:	688b      	ldr	r3, [r1, #8]
 80056cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ce:	680b      	ldr	r3, [r1, #0]
 80056d0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d2:	e031      	b.n	8005738 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d8:	68ca      	ldr	r2, [r1, #12]
 80056da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e0:	694a      	ldr	r2, [r1, #20]
 80056e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e6:	688b      	ldr	r3, [r1, #8]
 80056e8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ee:	e023      	b.n	8005738 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f4:	68ca      	ldr	r2, [r1, #12]
 80056f6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056fc:	694a      	ldr	r2, [r1, #20]
 80056fe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005700:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005702:	688b      	ldr	r3, [r1, #8]
 8005704:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005706:	680b      	ldr	r3, [r1, #0]
 8005708:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570a:	e015      	b.n	8005738 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005710:	684a      	ldr	r2, [r1, #4]
 8005712:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005714:	e021      	b.n	800575a <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800571a:	684a      	ldr	r2, [r1, #4]
 800571c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005722:	68ca      	ldr	r2, [r1, #12]
 8005724:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800572a:	694a      	ldr	r2, [r1, #20]
 800572c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800572e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005730:	688b      	ldr	r3, [r1, #8]
 8005732:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005734:	680b      	ldr	r3, [r1, #0]
 8005736:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005738:	690b      	ldr	r3, [r1, #16]
 800573a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800573c:	2301      	movs	r3, #1
 800573e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005740:	6903      	ldr	r3, [r0, #16]
 8005742:	f013 0f01 	tst.w	r3, #1
 8005746:	d016      	beq.n	8005776 <TIM_Base_SetConfig+0x19a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005748:	6903      	ldr	r3, [r0, #16]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	6103      	str	r3, [r0, #16]
  }
}
 8005750:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005756:	684a      	ldr	r2, [r1, #4]
 8005758:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800575a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	68ca      	ldr	r2, [r1, #12]
 8005760:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005766:	694a      	ldr	r2, [r1, #20]
 8005768:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800576a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576c:	688b      	ldr	r3, [r1, #8]
 800576e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005770:	680b      	ldr	r3, [r1, #0]
 8005772:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005774:	e7e2      	b.n	800573c <TIM_Base_SetConfig+0x160>
}
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005778:	b340      	cbz	r0, 80057cc <HAL_TIM_Base_Init+0x54>
{
 800577a:	b510      	push	{r4, lr}
 800577c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800577e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005782:	b1f3      	cbz	r3, 80057c2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	2302      	movs	r3, #2
 8005786:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578a:	4621      	mov	r1, r4
 800578c:	f851 0b04 	ldr.w	r0, [r1], #4
 8005790:	f7ff ff24 	bl	80055dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	2301      	movs	r3, #1
 8005796:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800579e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80057a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80057a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057b2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80057b6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80057ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80057be:	2000      	movs	r0, #0
}
 80057c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80057c2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80057c6:	f7fe fbb9 	bl	8003f3c <HAL_TIM_Base_MspInit>
 80057ca:	e7db      	b.n	8005784 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80057cc:	2001      	movs	r0, #1
}
 80057ce:	4770      	bx	lr

080057d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d8:	430a      	orrs	r2, r1
 80057da:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80057de:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e2:	6082      	str	r2, [r0, #8]
}
 80057e4:	bc10      	pop	{r4}
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIM_ConfigClockSource>:
{
 80057e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80057ea:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	f000 80ad 	beq.w	800594e <HAL_TIM_ConfigClockSource+0x166>
 80057f4:	4604      	mov	r4, r0
 80057f6:	2301      	movs	r3, #1
 80057f8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	2302      	movs	r3, #2
 80057fe:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005802:	6802      	ldr	r2, [r0, #0]
 8005804:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800580e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005810:	680b      	ldr	r3, [r1, #0]
 8005812:	2b60      	cmp	r3, #96	@ 0x60
 8005814:	d060      	beq.n	80058d8 <HAL_TIM_ConfigClockSource+0xf0>
 8005816:	d837      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0xa0>
 8005818:	2b40      	cmp	r3, #64	@ 0x40
 800581a:	d079      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0x128>
 800581c:	d815      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x62>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d007      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x4a>
 8005822:	d804      	bhi.n	800582e <HAL_TIM_ConfigClockSource+0x46>
 8005824:	f033 0210 	bics.w	r2, r3, #16
 8005828:	d003      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x4a>
 800582a:	2001      	movs	r0, #1
 800582c:	e040      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
 800582e:	2b30      	cmp	r3, #48	@ 0x30
 8005830:	d109      	bne.n	8005846 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005834:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005836:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8005840:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2000      	movs	r0, #0
}
 8005844:	e034      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8005846:	2001      	movs	r0, #1
 8005848:	e032      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
 800584a:	2b50      	cmp	r3, #80	@ 0x50
 800584c:	d11a      	bne.n	8005884 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005850:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005852:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005854:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005860:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005864:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005868:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800586c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800586e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005870:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005872:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005874:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800587a:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800587e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	2000      	movs	r0, #0
}
 8005882:	e015      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8005884:	2001      	movs	r0, #1
 8005886:	e013      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588c:	d05b      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x15e>
 800588e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005892:	d014      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xd6>
 8005894:	2b70      	cmp	r3, #112	@ 0x70
 8005896:	d158      	bne.n	800594a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8005898:	68cb      	ldr	r3, [r1, #12]
 800589a:	684a      	ldr	r2, [r1, #4]
 800589c:	6889      	ldr	r1, [r1, #8]
 800589e:	6800      	ldr	r0, [r0, #0]
 80058a0:	f7ff ff96 	bl	80057d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80058ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	68cb      	ldr	r3, [r1, #12]
 80058c0:	684a      	ldr	r2, [r1, #4]
 80058c2:	6889      	ldr	r1, [r1, #8]
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f7ff ff83 	bl	80057d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ca:	6822      	ldr	r2, [r4, #0]
 80058cc:	6893      	ldr	r3, [r2, #8]
 80058ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058d2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2000      	movs	r0, #0
      break;
 80058d6:	e7eb      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058d8:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80058da:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80058dc:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80058de:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e0:	6a19      	ldr	r1, [r3, #32]
 80058e2:	f021 0110 	bic.w	r1, r1, #16
 80058e6:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e8:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ea:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ee:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f6:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80058fa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fc:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058fe:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005900:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005906:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800590a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800590c:	2000      	movs	r0, #0
}
 800590e:	e7cf      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005910:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005912:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005914:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005916:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	6a1a      	ldr	r2, [r3, #32]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005920:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005922:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005926:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800592a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800592e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005932:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005934:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005936:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593c:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8005940:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2000      	movs	r0, #0
}
 8005944:	e7b4      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8005946:	2000      	movs	r0, #0
 8005948:	e7b2      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800594a:	2001      	movs	r0, #1
 800594c:	e7b0      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800594e:	2002      	movs	r0, #2
 8005950:	e7b4      	b.n	80058bc <HAL_TIM_ConfigClockSource+0xd4>

08005952 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005956:	2a01      	cmp	r2, #1
 8005958:	d038      	beq.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x7a>
{
 800595a:	b430      	push	{r4, r5}
 800595c:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800595e:	2201      	movs	r2, #1
 8005960:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	2202      	movs	r2, #2
 8005966:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800596a:	6804      	ldr	r4, [r0, #0]
 800596c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596e:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005970:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005974:	680d      	ldr	r5, [r1, #0]
 8005976:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005978:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f44f 5430 	mov.w	r4, #11264	@ 0x2c00
 8005980:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8005984:	42a2      	cmp	r2, r4
 8005986:	d014      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005988:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800598c:	d011      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800598e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005992:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 8005996:	42a2      	cmp	r2, r4
 8005998:	d00b      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800599a:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800599e:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 80059a2:	42a2      	cmp	r2, r4
 80059a4:	d005      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80059a6:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80059aa:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80059ae:	42a2      	cmp	r2, r4
 80059b0:	d104      	bne.n	80059bc <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b6:	6849      	ldr	r1, [r1, #4]
 80059b8:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ba:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059c2:	2000      	movs	r0, #0
 80059c4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80059c8:	bc30      	pop	{r4, r5}
 80059ca:	4770      	bx	lr
  __HAL_LOCK(htim);
 80059cc:	2002      	movs	r0, #2
}
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d2:	4770      	bx	lr

080059d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b510      	push	{r4, lr}
 80059d6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d8:	6802      	ldr	r2, [r0, #0]
 80059da:	6913      	ldr	r3, [r2, #16]
 80059dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80059e0:	68c1      	ldr	r1, [r0, #12]
 80059e2:	430b      	orrs	r3, r1
 80059e4:	6113      	str	r3, [r2, #16]
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80059e6:	6801      	ldr	r1, [r0, #0]
 80059e8:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ea:	6883      	ldr	r3, [r0, #8]
 80059ec:	6900      	ldr	r0, [r0, #16]
 80059ee:	4303      	orrs	r3, r0
 80059f0:	6960      	ldr	r0, [r4, #20]
 80059f2:	4303      	orrs	r3, r0
 80059f4:	69e0      	ldr	r0, [r4, #28]
 80059f6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80059f8:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 80059fc:	f022 020c 	bic.w	r2, r2, #12
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	6953      	ldr	r3, [r2, #20]
 8005a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0c:	69a1      	ldr	r1, [r4, #24]
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8005a12:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8005a16:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d021      	beq.n	8005a64 <UART_SetConfig+0x90>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7ff fbd7 	bl	80051d2 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a24:	69e3      	ldr	r3, [r4, #28]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a2a:	d01e      	beq.n	8005a6a <UART_SetConfig+0x96>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a2c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005a30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	f248 511f 	movw	r1, #34079	@ 0x851f
 8005a42:	f2c5 11eb 	movt	r1, #20971	@ 0x51eb
 8005a46:	fba1 4203 	umull	r4, r2, r1, r3
 8005a4a:	0952      	lsrs	r2, r2, #5
 8005a4c:	2464      	movs	r4, #100	@ 0x64
 8005a4e:	fb04 3312 	mls	r3, r4, r2, r3
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	3332      	adds	r3, #50	@ 0x32
 8005a56:	fba1 1303 	umull	r1, r3, r1, r3
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8005a60:	6082      	str	r2, [r0, #8]
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8005a62:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a64:	f7ff fbc8 	bl	80051f8 <HAL_RCC_GetPCLK2Freq>
 8005a68:	e7dc      	b.n	8005a24 <UART_SetConfig+0x50>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7a:	f248 521f 	movw	r2, #34079	@ 0x851f
 8005a7e:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8005a82:	fba2 0103 	umull	r0, r1, r2, r3
 8005a86:	0949      	lsrs	r1, r1, #5
 8005a88:	2064      	movs	r0, #100	@ 0x64
 8005a8a:	fb00 3311 	mls	r3, r0, r1, r3
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	3332      	adds	r3, #50	@ 0x32
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005a9c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005aa0:	091b      	lsrs	r3, r3, #4
 8005aa2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005aa6:	4413      	add	r3, r2
 8005aa8:	6083      	str	r3, [r0, #8]
 8005aaa:	e7da      	b.n	8005a62 <UART_SetConfig+0x8e>

08005aac <HAL_UART_Init>:
  if (huart == NULL)
 8005aac:	b360      	cbz	r0, 8005b08 <HAL_UART_Init+0x5c>
{
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005ab6:	b313      	cbz	r3, 8005afe <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	2324      	movs	r3, #36	@ 0x24
 8005aba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	68d3      	ldr	r3, [r2, #12]
 8005ac2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ac6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff ff83 	bl	80059d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	6913      	ldr	r3, [r2, #16]
 8005ad2:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005ad6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	6953      	ldr	r3, [r2, #20]
 8005adc:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005ae0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	68d3      	ldr	r3, [r2, #12]
 8005ae6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005aea:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	2000      	movs	r0, #0
 8005aee:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	2320      	movs	r3, #32
 8005af2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005af6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005afa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005afc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005afe:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8005b02:	f7fe fa59 	bl	8003fb8 <HAL_UART_MspInit>
 8005b06:	e7d7      	b.n	8005ab8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005b08:	2001      	movs	r0, #1
}
 8005b0a:	4770      	bx	lr

08005b0c <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005b0c:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005b0e:	f013 0f01 	tst.w	r3, #1
 8005b12:	d10d      	bne.n	8005b30 <LL_ADC_Init+0x24>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8005b14:	6843      	ldr	r3, [r0, #4]
 8005b16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b1a:	684a      	ldr	r2, [r1, #4]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	6043      	str	r3, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8005b20:	6883      	ldr	r3, [r0, #8]
 8005b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b26:	680a      	ldr	r2, [r1, #0]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4770      	bx	lr

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005b30:	2001      	movs	r0, #1
  }
  return status;
}
 8005b32:	4770      	bx	lr

08005b34 <LL_ADC_REG_Init>:
 8005b34:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8005b36:	f013 0f01 	tst.w	r3, #1
 8005b3a:	d121      	bne.n	8005b80 <LL_ADC_REG_Init+0x4c>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8005b3c:	684a      	ldr	r2, [r1, #4]
 8005b3e:	b1d2      	cbz	r2, 8005b76 <LL_ADC_REG_Init+0x42>
    {
      MODIFY_REG(ADCx->CR1,
 8005b40:	6843      	ldr	r3, [r0, #4]
 8005b42:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 8005b46:	4313      	orrs	r3, r2
 8005b48:	688a      	ldr	r2, [r1, #8]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8005b4e:	6883      	ldr	r3, [r0, #8]
 8005b50:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8005b54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005b58:	680a      	ldr	r2, [r1, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	68ca      	ldr	r2, [r1, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	690a      	ldr	r2, [r1, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8005b66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005b68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b6c:	684a      	ldr	r2, [r1, #4]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	62c3      	str	r3, [r0, #44]	@ 0x2c
  ErrorStatus status = SUCCESS;
 8005b72:	2000      	movs	r0, #0
}
 8005b74:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 8005b76:	6843      	ldr	r3, [r0, #4]
 8005b78:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 8005b7c:	6043      	str	r3, [r0, #4]
 8005b7e:	e7e6      	b.n	8005b4e <LL_ADC_REG_Init+0x1a>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005b80:	2001      	movs	r0, #1
  }
  return status;
}
 8005b82:	4770      	bx	lr

08005b84 <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8005b84:	680b      	ldr	r3, [r1, #0]
 8005b86:	f3c3 2c0f 	ubfx	ip, r3, #8, #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8a:	fa9c f2ac 	rbit	r2, ip
  pinpos = POSITION_VAL(pinmask);
 8005b8e:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8005b92:	fa3c f302 	lsrs.w	r3, ip, r2
 8005b96:	f000 8087 	beq.w	8005ca8 <LL_GPIO_Init+0x124>
{
 8005b9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8005b9e:	f04f 0e01 	mov.w	lr, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005ba2:	240f      	movs	r4, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8005ba4:	f04f 0803 	mov.w	r8, #3
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005ba8:	f04f 1501 	mov.w	r5, #65537	@ 0x10001
        currentpin = (0x00000101uL << pinpos);
 8005bac:	f240 1701 	movw	r7, #257	@ 0x101
 8005bb0:	46e1      	mov	r9, ip
 8005bb2:	e025      	b.n	8005c00 <LL_GPIO_Init+0x7c>
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005bb4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8005bb8:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005bbc:	faba fa8a 	clz	sl, sl
 8005bc0:	fa93 fba3 	rbit	fp, r3
 8005bc4:	fabb fb8b 	clz	fp, fp
 8005bc8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005bcc:	fa04 fa0a 	lsl.w	sl, r4, sl
 8005bd0:	f850 600c 	ldr.w	r6, [r0, ip]
 8005bd4:	ea26 0a0a 	bic.w	sl, r6, sl
 8005bd8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005bdc:	684e      	ldr	r6, [r1, #4]
 8005bde:	fa06 f60b 	lsl.w	r6, r6, fp
 8005be2:	ea4a 0606 	orr.w	r6, sl, r6
 8005be6:	f840 600c 	str.w	r6, [r0, ip]
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005bea:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005bee:	f02a 0a08 	bic.w	sl, sl, #8
 8005bf2:	f1ba 0f01 	cmp.w	sl, #1
 8005bf6:	d025      	beq.n	8005c44 <LL_GPIO_Init+0xc0>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8005bf8:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0u)
 8005bfa:	fa39 f302 	lsrs.w	r3, r9, r2
 8005bfe:	d050      	beq.n	8005ca2 <LL_GPIO_Init+0x11e>
    if ((pinmask & (1u << pinpos)) != 0u)
 8005c00:	fa0e f302 	lsl.w	r3, lr, r2
 8005c04:	ea13 0f09 	tst.w	r3, r9
 8005c08:	d0f6      	beq.n	8005bf8 <LL_GPIO_Init+0x74>
      if (pinpos < GPIO_PIN_MASK_POS)
 8005c0a:	2a07      	cmp	r2, #7
        currentpin = (0x00000101uL << pinpos);
 8005c0c:	bf91      	iteee	ls
 8005c0e:	fa07 f302 	lslls.w	r3, r7, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005c12:	f1a2 0308 	subhi.w	r3, r2, #8
 8005c16:	fa05 f303 	lslhi.w	r3, r5, r3
 8005c1a:	f043 6380 	orrhi.w	r3, r3, #67108864	@ 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8005c1e:	684e      	ldr	r6, [r1, #4]
 8005c20:	2e08      	cmp	r6, #8
 8005c22:	d1c7      	bne.n	8005bb4 <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8005c24:	68c6      	ldr	r6, [r0, #12]
 8005c26:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8005c2a:	fa9c faac 	rbit	sl, ip
 8005c2e:	faba fa8a 	clz	sl, sl
 8005c32:	ea26 0c0c 	bic.w	ip, r6, ip
 8005c36:	690e      	ldr	r6, [r1, #16]
 8005c38:	fa06 f60a 	lsl.w	r6, r6, sl
 8005c3c:	ea4c 0606 	orr.w	r6, ip, r6
 8005c40:	60c6      	str	r6, [r0, #12]
}
 8005c42:	e7b7      	b.n	8005bb4 <LL_GPIO_Init+0x30>
 8005c44:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8005c48:	faba fa8a 	clz	sl, sl
 8005c4c:	fa93 fba3 	rbit	fp, r3
 8005c50:	fabb fb8b 	clz	fp, fp
 8005c54:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005c58:	fa08 fa0a 	lsl.w	sl, r8, sl
 8005c5c:	ea26 0a0a 	bic.w	sl, r6, sl
 8005c60:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005c64:	688e      	ldr	r6, [r1, #8]
 8005c66:	fa06 f60b 	lsl.w	r6, r6, fp
 8005c6a:	ea4a 0606 	orr.w	r6, sl, r6
 8005c6e:	f840 600c 	str.w	r6, [r0, ip]
 8005c72:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8005c76:	faba fa8a 	clz	sl, sl
 8005c7a:	fa93 f3a3 	rbit	r3, r3
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005c86:	f04f 0b04 	mov.w	fp, #4
 8005c8a:	fa0b fa0a 	lsl.w	sl, fp, sl
 8005c8e:	ea26 0a0a 	bic.w	sl, r6, sl
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	68ce      	ldr	r6, [r1, #12]
 8005c96:	409e      	lsls	r6, r3
 8005c98:	ea4a 0606 	orr.w	r6, sl, r6
 8005c9c:	f840 600c 	str.w	r6, [r0, ip]
}
 8005ca0:	e7aa      	b.n	8005bf8 <LL_GPIO_Init+0x74>
  }
  return (SUCCESS);
}
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4770      	bx	lr

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	@ (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	200000c4 	.word	0x200000c4

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	2600      	movs	r6, #0
 8005cbc:	4d0c      	ldr	r5, [pc, #48]	@ (8005cf0 <__libc_init_array+0x38>)
 8005cbe:	4c0d      	ldr	r4, [pc, #52]	@ (8005cf4 <__libc_init_array+0x3c>)
 8005cc0:	1b64      	subs	r4, r4, r5
 8005cc2:	10a4      	asrs	r4, r4, #2
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	f000 f910 	bl	8005eec <_init>
 8005ccc:	2600      	movs	r6, #0
 8005cce:	4d0a      	ldr	r5, [pc, #40]	@ (8005cf8 <__libc_init_array+0x40>)
 8005cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8005cfc <__libc_init_array+0x44>)
 8005cd2:	1b64      	subs	r4, r4, r5
 8005cd4:	10a4      	asrs	r4, r4, #2
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	080065e8 	.word	0x080065e8
 8005cf4:	080065e8 	.word	0x080065e8
 8005cf8:	080065e8 	.word	0x080065e8
 8005cfc:	080065ec 	.word	0x080065ec

08005d00 <sqrt>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	4606      	mov	r6, r0
 8005d04:	460f      	mov	r7, r1
 8005d06:	f000 f81f 	bl	8005d48 <__ieee754_sqrt>
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	460d      	mov	r5, r1
 8005d10:	463b      	mov	r3, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fed1 	bl	8000abc <__aeabi_dcmpun>
 8005d1a:	b990      	cbnz	r0, 8005d42 <sqrt+0x42>
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4630      	mov	r0, r6
 8005d22:	4639      	mov	r1, r7
 8005d24:	f7fa fea2 	bl	8000a6c <__aeabi_dcmplt>
 8005d28:	b158      	cbz	r0, 8005d42 <sqrt+0x42>
 8005d2a:	f7ff ffbf 	bl	8005cac <__errno>
 8005d2e:	2321      	movs	r3, #33	@ 0x21
 8005d30:	2200      	movs	r2, #0
 8005d32:	6003      	str	r3, [r0, #0]
 8005d34:	2300      	movs	r3, #0
 8005d36:	4610      	mov	r0, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f7fa fd4f 	bl	80007dc <__aeabi_ddiv>
 8005d3e:	4604      	mov	r4, r0
 8005d40:	460d      	mov	r5, r1
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d48 <__ieee754_sqrt>:
 8005d48:	4a65      	ldr	r2, [pc, #404]	@ (8005ee0 <__ieee754_sqrt+0x198>)
 8005d4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4e:	438a      	bics	r2, r1
 8005d50:	4606      	mov	r6, r0
 8005d52:	460f      	mov	r7, r1
 8005d54:	460b      	mov	r3, r1
 8005d56:	4604      	mov	r4, r0
 8005d58:	d10e      	bne.n	8005d78 <__ieee754_sqrt+0x30>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	f7fa fc14 	bl	8000588 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fa58 	bl	800021c <__adddf3>
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	460f      	mov	r7, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	2900      	cmp	r1, #0
 8005d7a:	dc0c      	bgt.n	8005d96 <__ieee754_sqrt+0x4e>
 8005d7c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005d80:	4302      	orrs	r2, r0
 8005d82:	d0f5      	beq.n	8005d70 <__ieee754_sqrt+0x28>
 8005d84:	b189      	cbz	r1, 8005daa <__ieee754_sqrt+0x62>
 8005d86:	4602      	mov	r2, r0
 8005d88:	f7fa fa46 	bl	8000218 <__aeabi_dsub>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	f7fa fd24 	bl	80007dc <__aeabi_ddiv>
 8005d94:	e7ea      	b.n	8005d6c <__ieee754_sqrt+0x24>
 8005d96:	150a      	asrs	r2, r1, #20
 8005d98:	d115      	bne.n	8005dc6 <__ieee754_sqrt+0x7e>
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	e009      	b.n	8005db2 <__ieee754_sqrt+0x6a>
 8005d9e:	0ae3      	lsrs	r3, r4, #11
 8005da0:	3a15      	subs	r2, #21
 8005da2:	0564      	lsls	r4, r4, #21
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0fa      	beq.n	8005d9e <__ieee754_sqrt+0x56>
 8005da8:	e7f7      	b.n	8005d9a <__ieee754_sqrt+0x52>
 8005daa:	460a      	mov	r2, r1
 8005dac:	e7fa      	b.n	8005da4 <__ieee754_sqrt+0x5c>
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	3101      	adds	r1, #1
 8005db2:	02d8      	lsls	r0, r3, #11
 8005db4:	d5fb      	bpl.n	8005dae <__ieee754_sqrt+0x66>
 8005db6:	1e48      	subs	r0, r1, #1
 8005db8:	1a12      	subs	r2, r2, r0
 8005dba:	f1c1 0020 	rsb	r0, r1, #32
 8005dbe:	fa24 f000 	lsr.w	r0, r4, r0
 8005dc2:	4303      	orrs	r3, r0
 8005dc4:	408c      	lsls	r4, r1
 8005dc6:	2700      	movs	r7, #0
 8005dc8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8005dcc:	2116      	movs	r1, #22
 8005dce:	07d2      	lsls	r2, r2, #31
 8005dd0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8005dd4:	463a      	mov	r2, r7
 8005dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dde:	bf5c      	itt	pl
 8005de0:	005b      	lslpl	r3, r3, #1
 8005de2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8005de6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dea:	bf58      	it	pl
 8005dec:	0064      	lslpl	r4, r4, #1
 8005dee:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005df2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005df6:	0064      	lsls	r4, r4, #1
 8005df8:	1815      	adds	r5, r2, r0
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	bfde      	ittt	le
 8005dfe:	182a      	addle	r2, r5, r0
 8005e00:	1b5b      	suble	r3, r3, r5
 8005e02:	183f      	addle	r7, r7, r0
 8005e04:	0fe5      	lsrs	r5, r4, #31
 8005e06:	3901      	subs	r1, #1
 8005e08:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005e0c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005e10:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005e14:	d1f0      	bne.n	8005df8 <__ieee754_sqrt+0xb0>
 8005e16:	460d      	mov	r5, r1
 8005e18:	2620      	movs	r6, #32
 8005e1a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	eb00 0c01 	add.w	ip, r0, r1
 8005e24:	dc02      	bgt.n	8005e2c <__ieee754_sqrt+0xe4>
 8005e26:	d113      	bne.n	8005e50 <__ieee754_sqrt+0x108>
 8005e28:	45a4      	cmp	ip, r4
 8005e2a:	d811      	bhi.n	8005e50 <__ieee754_sqrt+0x108>
 8005e2c:	f1bc 0f00 	cmp.w	ip, #0
 8005e30:	eb0c 0100 	add.w	r1, ip, r0
 8005e34:	da3e      	bge.n	8005eb4 <__ieee754_sqrt+0x16c>
 8005e36:	2900      	cmp	r1, #0
 8005e38:	db3c      	blt.n	8005eb4 <__ieee754_sqrt+0x16c>
 8005e3a:	f102 0e01 	add.w	lr, r2, #1
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	4672      	mov	r2, lr
 8005e42:	45a4      	cmp	ip, r4
 8005e44:	bf88      	it	hi
 8005e46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005e4a:	eba4 040c 	sub.w	r4, r4, ip
 8005e4e:	4405      	add	r5, r0
 8005e50:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8005e54:	3e01      	subs	r6, #1
 8005e56:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8005e5a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005e5e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005e62:	d1dc      	bne.n	8005e1e <__ieee754_sqrt+0xd6>
 8005e64:	431c      	orrs	r4, r3
 8005e66:	d01a      	beq.n	8005e9e <__ieee754_sqrt+0x156>
 8005e68:	4c1e      	ldr	r4, [pc, #120]	@ (8005ee4 <__ieee754_sqrt+0x19c>)
 8005e6a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8005ee8 <__ieee754_sqrt+0x1a0>
 8005e6e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e76:	f7fa f9cf 	bl	8000218 <__aeabi_dsub>
 8005e7a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4650      	mov	r0, sl
 8005e84:	4659      	mov	r1, fp
 8005e86:	f7fa fdfb 	bl	8000a80 <__aeabi_dcmple>
 8005e8a:	b140      	cbz	r0, 8005e9e <__ieee754_sqrt+0x156>
 8005e8c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e90:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e98:	d10e      	bne.n	8005eb8 <__ieee754_sqrt+0x170>
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	3701      	adds	r7, #1
 8005e9e:	107b      	asrs	r3, r7, #1
 8005ea0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ea4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005ea8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8005eac:	086b      	lsrs	r3, r5, #1
 8005eae:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8005eb2:	e75b      	b.n	8005d6c <__ieee754_sqrt+0x24>
 8005eb4:	4696      	mov	lr, r2
 8005eb6:	e7c2      	b.n	8005e3e <__ieee754_sqrt+0xf6>
 8005eb8:	f7fa f9b0 	bl	800021c <__adddf3>
 8005ebc:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4650      	mov	r0, sl
 8005ec6:	4659      	mov	r1, fp
 8005ec8:	f7fa fdd0 	bl	8000a6c <__aeabi_dcmplt>
 8005ecc:	b120      	cbz	r0, 8005ed8 <__ieee754_sqrt+0x190>
 8005ece:	1cab      	adds	r3, r5, #2
 8005ed0:	bf08      	it	eq
 8005ed2:	3701      	addeq	r7, #1
 8005ed4:	3502      	adds	r5, #2
 8005ed6:	e7e2      	b.n	8005e9e <__ieee754_sqrt+0x156>
 8005ed8:	1c6b      	adds	r3, r5, #1
 8005eda:	f023 0501 	bic.w	r5, r3, #1
 8005ede:	e7de      	b.n	8005e9e <__ieee754_sqrt+0x156>
 8005ee0:	7ff00000 	.word	0x7ff00000
 8005ee4:	080065e0 	.word	0x080065e0
 8005ee8:	080065d8 	.word	0x080065d8

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
