
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002b30  08002b30  00003b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b88  08002b88  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b88  08002b88  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b88  08002b88  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b88  08002b88  00003b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b8c  08002b8c  00003b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08002b9c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002b9c  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb4d  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6b  00000000  00000000  0000fb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  000119f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00010cee  00000000  00000000  00012570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e681  00000000  00000000  0002325e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000668d8  00000000  00000000  000318df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000981b7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000008e7  00000000  00000000  000981fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ebc  00000000  00000000  00098ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0009b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002b18 	.word	0x08002b18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002b18 	.word	0x08002b18

08000210 <lcd_delay_us>:
static void lcd_send(uint8_t value, uint8_t is_data);

/* Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK.
 * This is approximate; HD44780 is tolerant. For safety we overshoot. */
static void lcd_delay_us(uint16_t micros)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
    if (micros >= 1000u) {
 800021a:	88fb      	ldrh	r3, [r7, #6]
 800021c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000220:	d313      	bcc.n	800024a <lcd_delay_us+0x3a>
        HAL_Delay(micros / 1000u);
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	4a12      	ldr	r2, [pc, #72]	@ (8000270 <lcd_delay_us+0x60>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	099b      	lsrs	r3, r3, #6
 800022c:	b29b      	uxth	r3, r3
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ff10 	bl	8001054 <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000234:	88fb      	ldrh	r3, [r7, #6]
 8000236:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <lcd_delay_us+0x60>)
 8000238:	fba2 1203 	umull	r1, r2, r2, r3
 800023c:	0992      	lsrs	r2, r2, #6
 800023e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000242:	fb01 f202 	mul.w	r2, r1, r2
 8000246:	1a9b      	subs	r3, r3, r2
 8000248:	80fb      	strh	r3, [r7, #6]
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 800024a:	88fa      	ldrh	r2, [r7, #6]
 800024c:	4613      	mov	r3, r2
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	4413      	add	r3, r2
 8000252:	00db      	lsls	r3, r3, #3
 8000254:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8000256:	e000      	b.n	800025a <lcd_delay_us+0x4a>
        __asm volatile ("nop");
 8000258:	bf00      	nop
    while (count--) {
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	60fa      	str	r2, [r7, #12]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f9      	bne.n	8000258 <lcd_delay_us+0x48>
    }
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	10624dd3 	.word	0x10624dd3

08000274 <lcd_pulse_enable>:

static void lcd_pulse_enable(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2110      	movs	r1, #16
 800027c:	4807      	ldr	r0, [pc, #28]	@ (800029c <lcd_pulse_enable+0x28>)
 800027e:	f001 fca9 	bl	8001bd4 <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 8000282:	2001      	movs	r0, #1
 8000284:	f7ff ffc4 	bl	8000210 <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	4803      	ldr	r0, [pc, #12]	@ (800029c <lcd_pulse_enable+0x28>)
 800028e:	f001 fca1 	bl	8001bd4 <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 8000292:	2032      	movs	r0, #50	@ 0x32
 8000294:	f7ff ffbc 	bl	8000210 <lcd_delay_us>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010c00 	.word	0x40010c00

080002a0 <lcd_write4>:

static void lcd_write4(uint8_t nibble)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002b8:	4816      	ldr	r0, [pc, #88]	@ (8000314 <lcd_write4+0x74>)
 80002ba:	f001 fc8b 	bl	8001bd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002d0:	4810      	ldr	r0, [pc, #64]	@ (8000314 <lcd_write4+0x74>)
 80002d2:	f001 fc7f 	bl	8001bd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	109b      	asrs	r3, r3, #2
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	461a      	mov	r2, r3
 80002e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e8:	480a      	ldr	r0, [pc, #40]	@ (8000314 <lcd_write4+0x74>)
 80002ea:	f001 fc73 	bl	8001bd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	10db      	asrs	r3, r3, #3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <lcd_write4+0x74>)
 8000302:	f001 fc67 	bl	8001bd4 <HAL_GPIO_WritePin>
    lcd_pulse_enable();
 8000306:	f7ff ffb5 	bl	8000274 <lcd_pulse_enable>
}
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010800 	.word	0x40010800

08000318 <lcd_send>:

static void lcd_send(uint8_t value, uint8_t is_data)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	460a      	mov	r2, r1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	4613      	mov	r3, r2
 8000326:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	2b00      	cmp	r3, #0
 800032c:	bf14      	ite	ne
 800032e:	2301      	movne	r3, #1
 8000330:	2300      	moveq	r3, #0
 8000332:	b2db      	uxtb	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	2108      	movs	r1, #8
 8000338:	4809      	ldr	r0, [pc, #36]	@ (8000360 <lcd_send+0x48>)
 800033a:	f001 fc4b 	bl	8001bd4 <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	091b      	lsrs	r3, r3, #4
 8000342:	b2db      	uxtb	r3, r3
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffab 	bl	80002a0 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	f003 030f 	and.w	r3, r3, #15
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ffa4 	bl	80002a0 <lcd_write4>
}
 8000358:	bf00      	nop
 800035a:	3708      	adds	r7, #8
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40010c00 	.word	0x40010c00

08000364 <LCD_Backlight>:

/* Public API */
void LCD_Backlight(uint8_t on)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf14      	ite	ne
 8000374:	2301      	movne	r3, #1
 8000376:	2300      	moveq	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000380:	4803      	ldr	r0, [pc, #12]	@ (8000390 <LCD_Backlight+0x2c>)
 8000382:	f001 fc27 	bl	8001bd4 <HAL_GPIO_WritePin>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010c00 	.word	0x40010c00

08000394 <LCD_Init>:

void LCD_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2110      	movs	r1, #16
 800039c:	481c      	ldr	r0, [pc, #112]	@ (8000410 <LCD_Init+0x7c>)
 800039e:	f001 fc19 	bl	8001bd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2108      	movs	r1, #8
 80003a6:	481a      	ldr	r0, [pc, #104]	@ (8000410 <LCD_Init+0x7c>)
 80003a8:	f001 fc14 	bl	8001bd4 <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 80003ac:	2028      	movs	r0, #40	@ 0x28
 80003ae:	f000 fe51 	bl	8001054 <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 80003b2:	2003      	movs	r0, #3
 80003b4:	f7ff ff74 	bl	80002a0 <lcd_write4>
    HAL_Delay(5);
 80003b8:	2005      	movs	r0, #5
 80003ba:	f000 fe4b 	bl	8001054 <HAL_Delay>
    lcd_write4(0x03);
 80003be:	2003      	movs	r0, #3
 80003c0:	f7ff ff6e 	bl	80002a0 <lcd_write4>
    lcd_delay_us(150);
 80003c4:	2096      	movs	r0, #150	@ 0x96
 80003c6:	f7ff ff23 	bl	8000210 <lcd_delay_us>
    lcd_write4(0x03);
 80003ca:	2003      	movs	r0, #3
 80003cc:	f7ff ff68 	bl	80002a0 <lcd_write4>
    lcd_delay_us(150);
 80003d0:	2096      	movs	r0, #150	@ 0x96
 80003d2:	f7ff ff1d 	bl	8000210 <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 80003d6:	2002      	movs	r0, #2
 80003d8:	f7ff ff62 	bl	80002a0 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 80003dc:	2100      	movs	r1, #0
 80003de:	2028      	movs	r0, #40	@ 0x28
 80003e0:	f7ff ff9a 	bl	8000318 <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	2008      	movs	r0, #8
 80003e8:	f7ff ff96 	bl	8000318 <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 80003ec:	2100      	movs	r1, #0
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff ff92 	bl	8000318 <lcd_send>
    HAL_Delay(2);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 fe2d 	bl	8001054 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 80003fa:	2100      	movs	r1, #0
 80003fc:	2006      	movs	r0, #6
 80003fe:	f7ff ff8b 	bl	8000318 <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000402:	2100      	movs	r1, #0
 8000404:	200c      	movs	r0, #12
 8000406:	f7ff ff87 	bl	8000318 <lcd_send>
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010c00 	.word	0x40010c00

08000414 <LCD_Clear>:

void LCD_Clear(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    lcd_send(0x01, 0);
 8000418:	2100      	movs	r1, #0
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ff7c 	bl	8000318 <lcd_send>
    HAL_Delay(2);
 8000420:	2002      	movs	r0, #2
 8000422:	f000 fe17 	bl	8001054 <HAL_Delay>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <LCD_SetCursor>:
    lcd_send(0x02, 0);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d901      	bls.n	8000446 <LCD_SetCursor+0x1a>
 8000442:	2303      	movs	r3, #3
 8000444:	71bb      	strb	r3, [r7, #6]
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	4a08      	ldr	r2, [pc, #32]	@ (800046c <LCD_SetCursor+0x40>)
 800044a:	5cd2      	ldrb	r2, [r2, r3]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4413      	add	r3, r2
 8000450:	b2db      	uxtb	r3, r3
 8000452:	b25b      	sxtb	r3, r3
 8000454:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000458:	b25b      	sxtb	r3, r3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff5a 	bl	8000318 <lcd_send>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	08002b4c 	.word	0x08002b4c

08000470 <LCD_WriteChar>:

void LCD_WriteChar(char c)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    lcd_send((uint8_t)c, 1);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff4a 	bl	8000318 <lcd_send>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <LCD_Print>:

void LCD_Print(const char *str)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
    if (str == NULL) return;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d00c      	beq.n	80004b4 <LCD_Print+0x28>
    while (*str) {
 800049a:	e006      	b.n	80004aa <LCD_Print+0x1e>
        LCD_WriteChar(*str++);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ffe3 	bl	8000470 <LCD_WriteChar>
    while (*str) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f4      	bne.n	800049c <LCD_Print+0x10>
 80004b2:	e000      	b.n	80004b6 <LCD_Print+0x2a>
    if (str == NULL) return;
 80004b4:	bf00      	nop
    }
}
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <LCD_PrintUInt8>:
{
    lcd_send(0x08, 0);
}

void LCD_PrintUInt8(uint8_t value)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
    char buf[4]; /* max 255 */
    int idx = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
    if (value >= 200) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80004ce:	d90b      	bls.n	80004e8 <LCD_PrintUInt8+0x2c>
        buf[idx++] = '2';
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60fa      	str	r2, [r7, #12]
 80004d6:	3310      	adds	r3, #16
 80004d8:	443b      	add	r3, r7
 80004da:	2232      	movs	r2, #50	@ 0x32
 80004dc:	f803 2c08 	strb.w	r2, [r3, #-8]
        value -= 200;
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	3338      	adds	r3, #56	@ 0x38
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	e00d      	b.n	8000504 <LCD_PrintUInt8+0x48>
    } else if (value >= 100) {
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b63      	cmp	r3, #99	@ 0x63
 80004ec:	d90a      	bls.n	8000504 <LCD_PrintUInt8+0x48>
        buf[idx++] = '1';
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60fa      	str	r2, [r7, #12]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	2231      	movs	r2, #49	@ 0x31
 80004fa:	f803 2c08 	strb.w	r2, [r3, #-8]
        value -= 100;
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	3b64      	subs	r3, #100	@ 0x64
 8000502:	71fb      	strb	r3, [r7, #7]
    }
    if (idx > 0 || value >= 10) {
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dc02      	bgt.n	8000510 <LCD_PrintUInt8+0x54>
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b09      	cmp	r3, #9
 800050e:	d919      	bls.n	8000544 <LCD_PrintUInt8+0x88>
        buf[idx++] = (char)('0' + (value / 10));
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	4a19      	ldr	r2, [pc, #100]	@ (8000578 <LCD_PrintUInt8+0xbc>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	b2da      	uxtb	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	1c59      	adds	r1, r3, #1
 8000520:	60f9      	str	r1, [r7, #12]
 8000522:	3230      	adds	r2, #48	@ 0x30
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	3310      	adds	r3, #16
 8000528:	443b      	add	r3, r7
 800052a:	f803 2c08 	strb.w	r2, [r3, #-8]
        value = (uint8_t)(value % 10);
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <LCD_PrintUInt8+0xbc>)
 8000532:	fba3 1302 	umull	r1, r3, r3, r2
 8000536:	08d9      	lsrs	r1, r3, #3
 8000538:	460b      	mov	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	71fb      	strb	r3, [r7, #7]
    }
    buf[idx++] = (char)('0' + value);
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60fa      	str	r2, [r7, #12]
 800054a:	79fa      	ldrb	r2, [r7, #7]
 800054c:	3230      	adds	r2, #48	@ 0x30
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	3310      	adds	r3, #16
 8000552:	443b      	add	r3, r7
 8000554:	f803 2c08 	strb.w	r2, [r3, #-8]
    buf[idx] = '\0';
 8000558:	f107 0208 	add.w	r2, r7, #8
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
    LCD_Print(buf);
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff8f 	bl	800048c <LCD_Print>
}
 800056e:	bf00      	nop
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	cccccccd 	.word	0xcccccccd

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fd0f 	bl	8000fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f878 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f998 	bl	80008bc <MX_GPIO_Init>
  MX_ADC1_Init();
 800058c:	f000 f8cc 	bl	8000728 <MX_ADC1_Init>
  MX_DAC_Init();
 8000590:	f000 f908 	bl	80007a4 <MX_DAC_Init>
  MX_I2C1_Init();
 8000594:	f000 f93a 	bl	800080c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f966 	bl	8000868 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Backlight(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff fee1 	bl	8000364 <LCD_Backlight>
  LCD_Init();
 80005a2:	f7ff fef7 	bl	8000394 <LCD_Init>
  LCD_SetCursor(3, 0);
 80005a6:	2100      	movs	r1, #0
 80005a8:	2003      	movs	r0, #3
 80005aa:	f7ff ff3f 	bl	800042c <LCD_SetCursor>
  LCD_Print("BAT_CHARGER");
 80005ae:	482b      	ldr	r0, [pc, #172]	@ (800065c <main+0xe0>)
 80005b0:	f7ff ff6c 	bl	800048c <LCD_Print>
  LCD_SetCursor(3, 3);
 80005b4:	2103      	movs	r1, #3
 80005b6:	2003      	movs	r0, #3
 80005b8:	f7ff ff38 	bl	800042c <LCD_SetCursor>
  LCD_Print("JHD204A READY");
 80005bc:	4828      	ldr	r0, [pc, #160]	@ (8000660 <main+0xe4>)
 80005be:	f7ff ff65 	bl	800048c <LCD_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4827      	ldr	r0, [pc, #156]	@ (8000664 <main+0xe8>)
 80005c6:	f001 f8aa 	bl	800171e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80005ca:	2110      	movs	r1, #16
 80005cc:	4825      	ldr	r0, [pc, #148]	@ (8000664 <main+0xe8>)
 80005ce:	f001 f8a6 	bl	800171e <HAL_DAC_Start>

  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d8:	4823      	ldr	r0, [pc, #140]	@ (8000668 <main+0xec>)
 80005da:	f001 fafb 	bl	8001bd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e4:	4821      	ldr	r0, [pc, #132]	@ (800066c <main+0xf0>)
 80005e6:	f001 faf5 	bl	8001bd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005f0:	481e      	ldr	r0, [pc, #120]	@ (800066c <main+0xf0>)
 80005f2:	f001 faef 	bl	8001bd4 <HAL_GPIO_WritePin>

  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 80005f6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	4819      	ldr	r0, [pc, #100]	@ (8000664 <main+0xe8>)
 8000600:	f001 f8e3 	bl	80017ca <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 8000604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000608:	2200      	movs	r2, #0
 800060a:	2110      	movs	r1, #16
 800060c:	4815      	ldr	r0, [pc, #84]	@ (8000664 <main+0xe8>)
 800060e:	f001 f8dc 	bl	80017ca <HAL_DAC_SetValue>

  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000618:	4814      	ldr	r0, [pc, #80]	@ (800066c <main+0xf0>)
 800061a:	f001 fadb 	bl	8001bd4 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 800061e:	20fa      	movs	r0, #250	@ 0xfa
 8000620:	f000 fd18 	bl	8001054 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800062a:	4810      	ldr	r0, [pc, #64]	@ (800066c <main+0xf0>)
 800062c:	f001 fad2 	bl	8001bd4 <HAL_GPIO_WritePin>
  while (1)
  {
	  LCD_Clear();
 8000630:	f7ff fef0 	bl	8000414 <LCD_Clear>
	  LCD_SetCursor(3, 2);
 8000634:	2102      	movs	r1, #2
 8000636:	2003      	movs	r0, #3
 8000638:	f7ff fef8 	bl	800042c <LCD_SetCursor>
	  LCD_PrintUInt8(buttonState);
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <main+0xf4>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff3b 	bl	80004bc <LCD_PrintUInt8>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000646:	2108      	movs	r1, #8
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <main+0xf8>)
 800064a:	f001 fadb 	bl	8001c04 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000652:	f000 fcff 	bl	8001054 <HAL_Delay>
	  LCD_Clear();
 8000656:	bf00      	nop
 8000658:	e7ea      	b.n	8000630 <main+0xb4>
 800065a:	bf00      	nop
 800065c:	08002b30 	.word	0x08002b30
 8000660:	08002b3c 	.word	0x08002b3c
 8000664:	2000005c 	.word	0x2000005c
 8000668:	40010c00 	.word	0x40010c00
 800066c:	40011000 	.word	0x40011000
 8000670:	20000028 	.word	0x20000028
 8000674:	40010800 	.word	0x40010800

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b092      	sub	sp, #72	@ 0x48
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2228      	movs	r2, #40	@ 0x28
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fa1a 	bl	8002ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80006be:	2300      	movs	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fc1c 	bl	8001f04 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d2:	f000 f9bd 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fe89 	bl	8002408 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006fc:	f000 f9a8 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000700:	2302      	movs	r3, #2
 8000702:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fffe 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000716:	f000 f99b 	bl	8000a50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800071a:	f001 ff2d 	bl	8002578 <HAL_RCC_EnableCSS>
}
 800071e:	bf00      	nop
 8000720:	3748      	adds	r7, #72	@ 0x48
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_ADC1_Init+0x74>)
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_ADC1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_ADC1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ADC1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_ADC1_Init+0x74>)
 8000752:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_ADC1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ADC1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <MX_ADC1_Init+0x74>)
 8000766:	f000 fc99 	bl	800109c <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f96e 	bl	8000a50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000778:	2301      	movs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC1_Init+0x74>)
 8000786:	f000 fd61 	bl	800124c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000790:	f000 f95e 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40012400 	.word	0x40012400

080007a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_DAC_Init+0x60>)
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <MX_DAC_Init+0x64>)
 80007b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007b8:	4812      	ldr	r0, [pc, #72]	@ (8000804 <MX_DAC_Init+0x60>)
 80007ba:	f000 ff8e 	bl	80016da <HAL_DAC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c4:	f000 f944 	bl	8000a50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_DAC_Init+0x60>)
 80007d8:	f001 f820 	bl	800181c <HAL_DAC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e2:	f000 f935 	bl	8000a50 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2210      	movs	r2, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_DAC_Init+0x60>)
 80007ee:	f001 f815 	bl	800181c <HAL_DAC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f92a 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000005c 	.word	0x2000005c
 8000808:	40007400 	.word	0x40007400

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_I2C1_Init+0x50>)
 800084a:	f001 fa17 	bl	8001c7c <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 f8fc 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000070 	.word	0x20000070
 8000860:	40005400 	.word	0x40005400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART1_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART1_UART_Init+0x4c>)
 80008a0:	f001 ffda 	bl	8002858 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f8d1 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000c4 	.word	0x200000c4
 80008b8:	40013800 	.word	0x40013800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b59      	ldr	r3, [pc, #356]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a58      	ldr	r2, [pc, #352]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b56      	ldr	r3, [pc, #344]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b53      	ldr	r3, [pc, #332]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a52      	ldr	r2, [pc, #328]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b50      	ldr	r3, [pc, #320]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b4d      	ldr	r3, [pc, #308]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a4c      	ldr	r2, [pc, #304]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b47      	ldr	r3, [pc, #284]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a46      	ldr	r2, [pc, #280]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x17c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000936:	4841      	ldr	r0, [pc, #260]	@ (8000a3c <MX_GPIO_Init+0x180>)
 8000938:	f001 f94c 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2108      	movs	r1, #8
 8000940:	483f      	ldr	r0, [pc, #252]	@ (8000a40 <MX_GPIO_Init+0x184>)
 8000942:	f001 f947 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f248 0138 	movw	r1, #32824	@ 0x8038
 800094c:	483d      	ldr	r0, [pc, #244]	@ (8000a44 <MX_GPIO_Init+0x188>)
 800094e:	f001 f941 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8000958:	4839      	ldr	r0, [pc, #228]	@ (8000a40 <MX_GPIO_Init+0x184>)
 800095a:	f001 f93b 	bl	8001bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SHUTDOWN1_Pin SHUTDOWN2_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 800095e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4831      	ldr	r0, [pc, #196]	@ (8000a3c <MX_GPIO_Init+0x180>)
 8000978:	f000 ffa8 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_D2_Pin LCD_D3_Pin LCD_D1_Pin
                           LCD_D0_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 800097c:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8000980:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <MX_GPIO_Init+0x184>)
 8000996:	f000 ff99 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_Pin B5_Pin B4_Pin B1_Pin
                           B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 800099a:	f647 4304 	movw	r3, #31748	@ 0x7c04
 800099e:	617b      	str	r3, [r7, #20]
                          |B2_Pin|B3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0x18c>)
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	@ (8000a44 <MX_GPIO_Init+0x188>)
 80009b0:	f000 ff8c 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_RS_Pin LCD_E_Pin RTS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 80009b4:	f248 0338 	movw	r3, #32824	@ 0x8038
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	481d      	ldr	r0, [pc, #116]	@ (8000a44 <MX_GPIO_Init+0x188>)
 80009ce:	f000 ff7d 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80009d2:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4816      	ldr	r0, [pc, #88]	@ (8000a40 <MX_GPIO_Init+0x184>)
 80009e8:	f000 ff70 	bl	80018cc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_GPIO_Init+0x190>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0a:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <MX_GPIO_Init+0x190>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	210f      	movs	r1, #15
 8000a14:	2008      	movs	r0, #8
 8000a16:	f000 fe2a 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a1a:	2008      	movs	r0, #8
 8000a1c:	f000 fe43 	bl	80016a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	210f      	movs	r1, #15
 8000a24:	2028      	movs	r0, #40	@ 0x28
 8000a26:	f000 fe22 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2a:	2028      	movs	r0, #40	@ 0x28
 8000a2c:	f000 fe3b 	bl	80016a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40011000 	.word	0x40011000
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40010000 	.word	0x40010000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a18      	ldr	r2, [pc, #96]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x6c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2005      	movs	r0, #5
 8000a98:	f000 fde9 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f000 fe02 	bl	80016a6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_MspInit+0x70>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_MspInit+0x70>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010000 	.word	0x40010000

08000ad0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0318 	add.w	r3, r7, #24
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a1f      	ldr	r2, [pc, #124]	@ (8000b68 <HAL_ADC_MspInit+0x98>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d137      	bne.n	8000b60 <HAL_ADC_MspInit+0x90>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b26:	f043 0308 	orr.w	r3, r3, #8
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_ADC_MspInit+0x9c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0308 	and.w	r3, r3, #8
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_AC_Pin|TEMP_Pin|I_DC1_Pin|V_BAT1_Pin
 8000b38:	23c7      	movs	r3, #199	@ 0xc7
 8000b3a:	61bb      	str	r3, [r7, #24]
                          |V_DC1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4619      	mov	r1, r3
 8000b46:	480a      	ldr	r0, [pc, #40]	@ (8000b70 <HAL_ADC_MspInit+0xa0>)
 8000b48:	f000 fec0 	bl	80018cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_DC2_Pin|I_DC2_Pin;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b50:	2303      	movs	r3, #3
 8000b52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <HAL_ADC_MspInit+0xa4>)
 8000b5c:	f000 feb6 	bl	80018cc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	@ 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40012400 	.word	0x40012400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <HAL_DAC_MspInit+0x6c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d121      	bne.n	8000bdc <HAL_DAC_MspInit+0x64>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b98:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000b9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ba2:	61d3      	str	r3, [r2, #28]
 8000ba4:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_DAC_MspInit+0x70>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bc8:	2330      	movs	r3, #48	@ 0x30
 8000bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_DAC_MspInit+0x74>)
 8000bd8:	f000 fe78 	bl	80018cc <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40007400 	.word	0x40007400
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800

08000bf0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c80 <HAL_I2C_MspInit+0x90>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d132      	bne.n	8000c76 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4812      	ldr	r0, [pc, #72]	@ (8000c88 <HAL_I2C_MspInit+0x98>)
 8000c3e:	f000 fe45 	bl	80018cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_I2C_MspInit+0x9c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c58:	4a0c      	ldr	r2, [pc, #48]	@ (8000c8c <HAL_I2C_MspInit+0x9c>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <HAL_UART_MspInit+0xa4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13d      	bne.n	8000d2c <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_UART_MspInit+0xa8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce0:	2340      	movs	r3, #64	@ 0x40
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4812      	ldr	r0, [pc, #72]	@ (8000d3c <HAL_UART_MspInit+0xac>)
 8000cf4:	f000 fdea 	bl	80018cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <HAL_UART_MspInit+0xac>)
 8000d0c:	f000 fdde 	bl	80018cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <HAL_UART_MspInit+0xb0>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d18:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d26:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <HAL_UART_MspInit+0xb0>)
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	@ 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40013800 	.word	0x40013800
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40010000 	.word	0x40010000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000d48:	f001 fca8 	bl	800269c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x8>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d98:	f000 f940 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8000db2:	2004      	movs	r0, #4
 8000db4:	f000 ff40 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <EXTI2_IRQHandler+0xb8>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	607b      	str	r3, [r7, #4]
    uint8_t s = (uint8_t)(
        ((!!(idr & B1_Pin)) << BUT1) |
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	b25a      	sxtb	r2, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf14      	ite	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	2300      	moveq	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
        ((!!(idr & B1_Pin)) << BUT1) |
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b25a      	sxtb	r2, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf14      	ite	ne
 8000df4:	2301      	movne	r3, #1
 8000df6:	2300      	moveq	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25a      	sxtb	r2, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b25a      	sxtb	r2, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	bf14      	ite	ne
 8000e28:	2301      	movne	r3, #1
 8000e2a:	2300      	moveq	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b25a      	sxtb	r2, r3
        ((!!(idr & B6_Pin)) << BUT6)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b25b      	sxtb	r3, r3
    uint8_t s = (uint8_t)(
 8000e52:	70fb      	strb	r3, [r7, #3]
    );
    buttonState = s;
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <EXTI2_IRQHandler+0xbc>)
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	7013      	strb	r3, [r2, #0]
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	20000028 	.word	0x20000028

08000e6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8000e72:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e76:	f000 fedf 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8000e7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e7e:	f000 fedb 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e86:	f000 fed7 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000e8a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e8e:	f000 fed3 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000e92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e96:	f000 fecf 	bl	8001c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <EXTI15_10_IRQHandler+0xd8>)
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	607b      	str	r3, [r7, #4]
    uint8_t s = (uint8_t)(
        ((!!(idr & B1_Pin)) << BUT1) |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	bf14      	ite	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	2300      	moveq	r3, #0
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b25a      	sxtb	r2, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
        ((!!(idr & B1_Pin)) << BUT1) |
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b25a      	sxtb	r2, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	bf14      	ite	ne
 8000ed6:	2301      	movne	r3, #1
 8000ed8:	2300      	moveq	r3, #0
 8000eda:	b2db      	uxtb	r3, r3
        ((!!(idr & B2_Pin)) << BUT2) |
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b25a      	sxtb	r2, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bf14      	ite	ne
 8000ef0:	2301      	movne	r3, #1
 8000ef2:	2300      	moveq	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
        ((!!(idr & B3_Pin)) << BUT3) |
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b25a      	sxtb	r2, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
        ((!!(idr & B4_Pin)) << BUT4) |
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b25a      	sxtb	r2, r3
        ((!!(idr & B6_Pin)) << BUT6)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
        ((!!(idr & B5_Pin)) << BUT5) |
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b25b      	sxtb	r3, r3
    uint8_t s = (uint8_t)(
 8000f34:	70fb      	strb	r3, [r7, #3]
    );
    buttonState = s;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <EXTI15_10_IRQHandler+0xdc>)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	7013      	strb	r3, [r2, #0]
  }

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	20000028 	.word	0x20000028

08000f4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f58:	f7ff fff8 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f5e:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f60:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a09      	ldr	r2, [pc, #36]	@ (8000f98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f74:	4c09      	ldr	r4, [pc, #36]	@ (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f001 fda5 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff faf9 	bl	800057c <main>
  bx lr
 8000f8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08002b90 	.word	0x08002b90
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	20000110 	.word	0x20000110

08000fa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>

08000fa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 fb56 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fac:	200f      	movs	r0, #15
 8000fae:	f000 f805 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fd53 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fb71 	bl	80016c2 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 fb39 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <HAL_IncTick+0x20>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	20000008 	.word	0x20000008
 800103c:	2000010c 	.word	0x2000010c

08001040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	@ (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	2000010c 	.word	0x2000010c

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff fff0 	bl	8001040 <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffe0 	bl	8001040 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008

0800109c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0be      	b.n	800123c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fcf8 	bl	8000ad0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f9ab 	bl	800143c <ADC_ConversionStop_Disable>
 80010e6:	4603      	mov	r3, r0
 80010e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 8099 	bne.w	800122a <HAL_ADC_Init+0x18e>
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f040 8095 	bne.w	800122a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001104:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001108:	f023 0302 	bic.w	r3, r3, #2
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800111c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7b1b      	ldrb	r3, [r3, #12]
 8001122:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001124:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4313      	orrs	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001134:	d003      	beq.n	800113e <HAL_ADC_Init+0xa2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_ADC_Init+0xa8>
 800113e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001142:	e000      	b.n	8001146 <HAL_ADC_Init+0xaa>
 8001144:	2300      	movs	r3, #0
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7d1b      	ldrb	r3, [r3, #20]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d119      	bne.n	8001188 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7b1b      	ldrb	r3, [r3, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d109      	bne.n	8001170 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	3b01      	subs	r3, #1
 8001162:	035a      	lsls	r2, r3, #13
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e00b      	b.n	8001188 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	f043 0220 	orr.w	r2, r3, #32
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b28      	ldr	r3, [pc, #160]	@ (8001244 <HAL_ADC_Init+0x1a8>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b8:	d003      	beq.n	80011c2 <HAL_ADC_Init+0x126>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d104      	bne.n	80011cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	051b      	lsls	r3, r3, #20
 80011ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	430a      	orrs	r2, r1
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_ADC_Init+0x1ac>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d10b      	bne.n	8001208 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fa:	f023 0303 	bic.w	r3, r3, #3
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001206:	e018      	b.n	800123a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120c:	f023 0312 	bic.w	r3, r3, #18
 8001210:	f043 0210 	orr.w	r2, r3, #16
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001228:	e007      	b.n	800123a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	f043 0210 	orr.w	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	ffe1f7fd 	.word	0xffe1f7fd
 8001248:	ff1f0efe 	.word	0xff1f0efe

0800124c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x20>
 8001268:	2302      	movs	r3, #2
 800126a:	e0dc      	b.n	8001426 <HAL_ADC_ConfigChannel+0x1da>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d81c      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b05      	subs	r3, #5
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b05      	subs	r3, #5
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b4:	e03c      	b.n	8001330 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d81c      	bhi.n	80012f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b23      	subs	r3, #35	@ 0x23
 80012d0:	221f      	movs	r2, #31
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4019      	ands	r1, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b23      	subs	r3, #35	@ 0x23
 80012ea:	fa00 f203 	lsl.w	r2, r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f6:	e01b      	b.n	8001330 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b41      	subs	r3, #65	@ 0x41
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b41      	subs	r3, #65	@ 0x41
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b09      	cmp	r3, #9
 8001336:	d91c      	bls.n	8001372 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68d9      	ldr	r1, [r3, #12]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	4019      	ands	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	3b1e      	subs	r3, #30
 8001364:	fa00 f203 	lsl.w	r2, r0, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e019      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6919      	ldr	r1, [r3, #16]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	2207      	movs	r2, #7
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6898      	ldr	r0, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d132      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <HAL_ADC_ConfigChannel+0x1e4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d125      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d126      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80013dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d11a      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_ADC_ConfigChannel+0x1e8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <HAL_ADC_ConfigChannel+0x1ec>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x1b2>
 800140a:	e007      	b.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40012400 	.word	0x40012400
 8001434:	20000000 	.word	0x20000000
 8001438:	431bde83 	.word	0x431bde83

0800143c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d12e      	bne.n	80014b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001466:	f7ff fdeb 	bl	8001040 <HAL_GetTick>
 800146a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800146c:	e01b      	b.n	80014a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800146e:	f7ff fde7 	bl	8001040 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d914      	bls.n	80014a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10d      	bne.n	80014a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	f043 0210 	orr.w	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e007      	b.n	80014b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d0dc      	beq.n	800146e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4906      	ldr	r1, [pc, #24]	@ (8001558 <__NVIC_EnableIRQ+0x34>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100

0800155c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	@ 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
         );
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	@ 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff90 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff2d 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff42 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff90 	bl	80015b0 <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5f 	bl	800155c <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff35 	bl	8001524 <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e014      	b.n	8001716 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fa3b 	bl	8000b78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e046      	b.n	80017c0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	795b      	ldrb	r3, [r3, #5]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_DAC_Start+0x20>
 800173a:	2302      	movs	r3, #2
 800173c:	e040      	b.n	80017c0 <HAL_DAC_Start+0xa2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	2201      	movs	r2, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10f      	bne.n	8001788 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001772:	2b3c      	cmp	r3, #60	@ 0x3c
 8001774:	d11d      	bne.n	80017b2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	e014      	b.n	80017b2 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	213c      	movs	r1, #60	@ 0x3c
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	429a      	cmp	r2, r3
 80017a0:	d107      	bne.n	80017b2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0202 	orr.w	r2, r2, #2
 80017b0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e015      	b.n	8001812 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	3308      	adds	r3, #8
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e004      	b.n	8001808 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	3314      	adds	r3, #20
 8001806:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	461a      	mov	r2, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_DAC_ConfigChannel+0x1c>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e042      	b.n	80018c2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_DAC_ConfigChannel+0x2c>
 8001844:	2302      	movs	r3, #2
 8001846:	e03c      	b.n	80018c2 <HAL_DAC_ConfigChannel+0xa6>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2202      	movs	r2, #2
 8001852:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	22c0      	movs	r2, #192	@ 0xc0
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80018c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	@ 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e169      	b.n	8001bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8158 	bne.w	8001bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a9a      	ldr	r2, [pc, #616]	@ (8001b6c <HAL_GPIO_Init+0x2a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05e      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001908:	4a98      	ldr	r2, [pc, #608]	@ (8001b6c <HAL_GPIO_Init+0x2a0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d875      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800190e:	4a98      	ldr	r2, [pc, #608]	@ (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d058      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001914:	4a96      	ldr	r2, [pc, #600]	@ (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d86f      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800191a:	4a96      	ldr	r2, [pc, #600]	@ (8001b74 <HAL_GPIO_Init+0x2a8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d052      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001920:	4a94      	ldr	r2, [pc, #592]	@ (8001b74 <HAL_GPIO_Init+0x2a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d869      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001926:	4a94      	ldr	r2, [pc, #592]	@ (8001b78 <HAL_GPIO_Init+0x2ac>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04c      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 800192c:	4a92      	ldr	r2, [pc, #584]	@ (8001b78 <HAL_GPIO_Init+0x2ac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d863      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001932:	4a92      	ldr	r2, [pc, #584]	@ (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d046      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001938:	4a90      	ldr	r2, [pc, #576]	@ (8001b7c <HAL_GPIO_Init+0x2b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d85d      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d82a      	bhi.n	8001998 <HAL_GPIO_Init+0xcc>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d859      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001946:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <HAL_GPIO_Init+0x80>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019a1 	.word	0x080019a1
 8001954:	080019b3 	.word	0x080019b3
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019fb 	.word	0x080019fb
 8001960:	080019fb 	.word	0x080019fb
 8001964:	080019fb 	.word	0x080019fb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	080019fb 	.word	0x080019fb
 8001970:	080019fb 	.word	0x080019fb
 8001974:	080019fb 	.word	0x080019fb
 8001978:	080019fb 	.word	0x080019fb
 800197c:	080019fb 	.word	0x080019fb
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019fb 	.word	0x080019fb
 8001988:	080019fb 	.word	0x080019fb
 800198c:	080019fb 	.word	0x080019fb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019bd 	.word	0x080019bd
 8001998:	4a79      	ldr	r2, [pc, #484]	@ (8001b80 <HAL_GPIO_Init+0x2b4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e029      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e024      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01f      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e01a      	b.n	80019fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e013      	b.n	80019fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e009      	b.n	80019fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x130>
          break;
 80019fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	@ 0xff
 8001a00:	d801      	bhi.n	8001a06 <HAL_GPIO_Init+0x13a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_Init+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	@ 0xff
 8001a10:	d802      	bhi.n	8001a18 <HAL_GPIO_Init+0x14c>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x152>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	210f      	movs	r1, #15
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80b1 	beq.w	8001bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	@ (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b4a      	ldr	r3, [pc, #296]	@ (8001b84 <HAL_GPIO_Init+0x2b8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a64:	4a48      	ldr	r2, [pc, #288]	@ (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a40      	ldr	r2, [pc, #256]	@ (8001b8c <HAL_GPIO_Init+0x2c0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d013      	beq.n	8001ab8 <HAL_GPIO_Init+0x1ec>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3f      	ldr	r2, [pc, #252]	@ (8001b90 <HAL_GPIO_Init+0x2c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00d      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0x1e4>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	@ (8001b98 <HAL_GPIO_Init+0x2cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_GPIO_Init+0x1e0>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e004      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e002      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <HAL_GPIO_Init+0x1ee>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001abc:	f002 0203 	and.w	r2, r2, #3
 8001ac0:	0092      	lsls	r2, r2, #2
 8001ac2:	4093      	lsls	r3, r2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aca:	492f      	ldr	r1, [pc, #188]	@ (8001b88 <HAL_GPIO_Init+0x2bc>)
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	492c      	ldr	r1, [pc, #176]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4928      	ldr	r1, [pc, #160]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0c:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	4922      	ldr	r1, [pc, #136]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60cb      	str	r3, [r1, #12]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	491e      	ldr	r1, [pc, #120]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4918      	ldr	r1, [pc, #96]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b42:	4b16      	ldr	r3, [pc, #88]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4914      	ldr	r1, [pc, #80]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d021      	beq.n	8001ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	490e      	ldr	r1, [pc, #56]	@ (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e021      	b.n	8001bae <HAL_GPIO_Init+0x2e2>
 8001b6a:	bf00      	nop
 8001b6c:	10320000 	.word	0x10320000
 8001b70:	10310000 	.word	0x10310000
 8001b74:	10220000 	.word	0x10220000
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	10120000 	.word	0x10120000
 8001b80:	10110000 	.word	0x10110000
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40010c00 	.word	0x40010c00
 8001b94:	40011000 	.word	0x40011000
 8001b98:	40011400 	.word	0x40011400
 8001b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_GPIO_Init+0x304>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4909      	ldr	r1, [pc, #36]	@ (8001bd0 <HAL_GPIO_Init+0x304>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f47f ae8e 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	372c      	adds	r7, #44	@ 0x2c
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
 8001be0:	4613      	mov	r3, r2
 8001be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be4:	787b      	ldrb	r3, [r7, #1]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bf0:	e003      	b.n	8001bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	611a      	str	r2, [r3, #16]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43d9      	mvns	r1, r3
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	400b      	ands	r3, r1
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f806 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e12b      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe ffa4 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	@ 0x24
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce0:	f000 fcb4 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8001ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a81      	ldr	r2, [pc, #516]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d807      	bhi.n	8001d00 <HAL_I2C_Init+0x84>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a80      	ldr	r2, [pc, #512]	@ (8001ef4 <HAL_I2C_Init+0x278>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	bf94      	ite	ls
 8001cf8:	2301      	movls	r3, #1
 8001cfa:	2300      	movhi	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e006      	b.n	8001d0e <HAL_I2C_Init+0x92>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4a7d      	ldr	r2, [pc, #500]	@ (8001ef8 <HAL_I2C_Init+0x27c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bf94      	ite	ls
 8001d08:	2301      	movls	r3, #1
 8001d0a:	2300      	movhi	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e0e7      	b.n	8001ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a78      	ldr	r2, [pc, #480]	@ (8001efc <HAL_I2C_Init+0x280>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d802      	bhi.n	8001d50 <HAL_I2C_Init+0xd4>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	e009      	b.n	8001d64 <HAL_I2C_Init+0xe8>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	4a69      	ldr	r2, [pc, #420]	@ (8001f00 <HAL_I2C_Init+0x284>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	495c      	ldr	r1, [pc, #368]	@ (8001ef0 <HAL_I2C_Init+0x274>)
 8001d80:	428b      	cmp	r3, r1
 8001d82:	d819      	bhi.n	8001db8 <HAL_I2C_Init+0x13c>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e59      	subs	r1, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d98:	400b      	ands	r3, r1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_I2C_Init+0x138>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1e59      	subs	r1, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db2:	e051      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db4:	2304      	movs	r3, #4
 8001db6:	e04f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d111      	bne.n	8001de4 <HAL_I2C_Init+0x168>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1e58      	subs	r0, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e012      	b.n	8001e0a <HAL_I2C_Init+0x18e>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Init+0x196>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e022      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10e      	bne.n	8001e38 <HAL_I2C_Init+0x1bc>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1e58      	subs	r0, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	440b      	add	r3, r1
 8001e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e36:	e00f      	b.n	8001e58 <HAL_I2C_Init+0x1dc>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	6809      	ldr	r1, [r1, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6911      	ldr	r1, [r2, #16]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68d2      	ldr	r2, [r2, #12]
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	000186a0 	.word	0x000186a0
 8001ef4:	001e847f 	.word	0x001e847f
 8001ef8:	003d08ff 	.word	0x003d08ff
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e272      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f24:	4b92      	ldr	r3, [pc, #584]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d00c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f30:	4b8f      	ldr	r3, [pc, #572]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d112      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5e>
 8001f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f48:	d10b      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	4b89      	ldr	r3, [pc, #548]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d06c      	beq.n	8002030 <HAL_RCC_OscConfig+0x12c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d168      	bne.n	8002030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e24c      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x76>
 8001f6c:	4b80      	ldr	r3, [pc, #512]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a7f      	ldr	r2, [pc, #508]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	e02e      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x98>
 8001f82:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7a      	ldr	r2, [pc, #488]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b78      	ldr	r3, [pc, #480]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a77      	ldr	r2, [pc, #476]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e01d      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xbc>
 8001fa6:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a71      	ldr	r2, [pc, #452]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xd4>
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a6a      	ldr	r2, [pc, #424]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b68      	ldr	r3, [pc, #416]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a67      	ldr	r2, [pc, #412]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f82e 	bl	8001040 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f82a 	bl	8001040 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e200      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe4>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f81a 	bl	8001040 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002010:	f7ff f816 	bl	8001040 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b64      	cmp	r3, #100	@ 0x64
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e1ec      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x10c>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d063      	beq.n	8002106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	4b4c      	ldr	r3, [pc, #304]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00b      	beq.n	8002062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800204a:	4b49      	ldr	r3, [pc, #292]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b08      	cmp	r3, #8
 8002054:	d11c      	bne.n	8002090 <HAL_RCC_OscConfig+0x18c>
 8002056:	4b46      	ldr	r3, [pc, #280]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d116      	bne.n	8002090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	4b43      	ldr	r3, [pc, #268]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_RCC_OscConfig+0x176>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e1c0      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b3d      	ldr	r3, [pc, #244]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4939      	ldr	r1, [pc, #228]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	e03a      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d020      	beq.n	80020da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_RCC_OscConfig+0x270>)
 800209a:	2201      	movs	r2, #1
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ffcf 	bl	8001040 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a6:	f7fe ffcb 	bl	8001040 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e1a1      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4927      	ldr	r1, [pc, #156]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020da:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <HAL_RCC_OscConfig+0x270>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffae 	bl	8001040 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e8:	f7fe ffaa 	bl	8001040 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e180      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03a      	beq.n	8002188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d019      	beq.n	800214e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_RCC_OscConfig+0x274>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7fe ff8e 	bl	8001040 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002128:	f7fe ff8a 	bl	8001040 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e160      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCC_OscConfig+0x26c>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 fabc 	bl	80026c4 <RCC_Delay>
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_OscConfig+0x274>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7fe ff74 	bl	8001040 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	e00f      	b.n	800217c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7fe ff70 	bl	8001040 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d908      	bls.n	800217c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e146      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	42420000 	.word	0x42420000
 8002178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217c:	4b92      	ldr	r3, [pc, #584]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1e9      	bne.n	800215c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0304 	and.w	r3, r3, #4
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80a6 	beq.w	80022e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	4b8b      	ldr	r3, [pc, #556]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10d      	bne.n	80021c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b88      	ldr	r3, [pc, #544]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a87      	ldr	r2, [pc, #540]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]
 80021b2:	4b85      	ldr	r3, [pc, #532]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b82      	ldr	r3, [pc, #520]	@ (80023cc <HAL_RCC_OscConfig+0x4c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d118      	bne.n	8002200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ce:	4b7f      	ldr	r3, [pc, #508]	@ (80023cc <HAL_RCC_OscConfig+0x4c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7e      	ldr	r2, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0x4c8>)
 80021d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7fe ff31 	bl	8001040 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e2:	f7fe ff2d 	bl	8001040 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	@ 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e103      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	4b75      	ldr	r3, [pc, #468]	@ (80023cc <HAL_RCC_OscConfig+0x4c8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x312>
 8002208:	4b6f      	ldr	r3, [pc, #444]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a6e      	ldr	r2, [pc, #440]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e02d      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x334>
 800221e:	4b6a      	ldr	r3, [pc, #424]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a69      	ldr	r2, [pc, #420]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	4b67      	ldr	r3, [pc, #412]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	4a66      	ldr	r2, [pc, #408]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 0304 	bic.w	r3, r3, #4
 8002234:	6213      	str	r3, [r2, #32]
 8002236:	e01c      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b05      	cmp	r3, #5
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x356>
 8002240:	4b61      	ldr	r3, [pc, #388]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a60      	ldr	r2, [pc, #384]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b5e      	ldr	r3, [pc, #376]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a5d      	ldr	r2, [pc, #372]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e00b      	b.n	8002272 <HAL_RCC_OscConfig+0x36e>
 800225a:	4b5b      	ldr	r3, [pc, #364]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a5a      	ldr	r2, [pc, #360]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b58      	ldr	r3, [pc, #352]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a57      	ldr	r2, [pc, #348]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227a:	f7fe fee1 	bl	8001040 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fedd 	bl	8001040 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e0b1      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	4b4b      	ldr	r3, [pc, #300]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ee      	beq.n	8002282 <HAL_RCC_OscConfig+0x37e>
 80022a4:	e014      	b.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fecb 	bl	8001040 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fec7 	bl	8001040 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e09b      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	4b40      	ldr	r3, [pc, #256]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8087 	beq.w	80023fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d061      	beq.n	80023bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d146      	bne.n	800238e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fe9b 	bl	8001040 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7fe fe97 	bl	8001040 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e06d      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002334:	d108      	bne.n	8002348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002336:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f023 020f 	bic.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4921      	ldr	r1, [pc, #132]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a19      	ldr	r1, [r3, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	430b      	orrs	r3, r1
 800235a:	491b      	ldr	r1, [pc, #108]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fe6b 	bl	8001040 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7fe fe67 	bl	8001040 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e03d      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x46a>
 800238c:	e035      	b.n	80023fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_RCC_OscConfig+0x4cc>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fe54 	bl	8001040 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fe50 	bl	8001040 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e026      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x498>
 80023ba:	e01e      	b.n	80023fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e019      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
 80023d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_OscConfig+0x500>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0a0      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d020      	beq.n	800246a <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002434:	4b4c      	ldr	r3, [pc, #304]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4a4b      	ldr	r2, [pc, #300]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 800243a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800243e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244c:	4b46      	ldr	r3, [pc, #280]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a45      	ldr	r2, [pc, #276]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002452:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002456:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b43      	ldr	r3, [pc, #268]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4940      	ldr	r1, [pc, #256]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d040      	beq.n	80024f8 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b34      	ldr	r3, [pc, #208]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e05b      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b30      	ldr	r3, [pc, #192]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4929      	ldr	r1, [pc, #164]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fdba 	bl	8001040 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe fdb6 	bl	8001040 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e03b      	b.n	800255e <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4915      	ldr	r1, [pc, #84]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490d      	ldr	r1, [pc, #52]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f82b 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x160>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4909      	ldr	r1, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x164>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a08      	ldr	r2, [pc, #32]	@ (8002570 <HAL_RCC_ClockConfig+0x168>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_RCC_ClockConfig+0x16c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd30 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	08002b50 	.word	0x08002b50
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800257c:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_RCC_EnableCSS+0x14>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	4242004c 	.word	0x4242004c

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x90>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
 80025be:	e026      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c0:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	e026      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a16      	ldr	r2, [pc, #88]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00f      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x90>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a11      	ldr	r2, [pc, #68]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025f0:	fb03 f202 	mul.w	r2, r3, r2
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	e004      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	e002      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002610:	613b      	str	r3, [r7, #16]
      break;
 8002612:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002614:	693b      	ldr	r3, [r7, #16]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	016e3600 	.word	0x016e3600
 8002628:	08002b68 	.word	0x08002b68
 800262c:	08002b78 	.word	0x08002b78
 8002630:	003d0900 	.word	0x003d0900
 8002634:	007a1200 	.word	0x007a1200

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08002b60 	.word	0x08002b60

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002678:	f7ff ffde 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0adb      	lsrs	r3, r3, #11
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	@ (8002698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08002b60 	.word	0x08002b60

0800269c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_RCC_NMI_IRQHandler+0x20>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a8:	2b80      	cmp	r3, #128	@ 0x80
 80026aa:	d104      	bne.n	80026b6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80026ac:	f000 f828 	bl	8002700 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80026b2:	2280      	movs	r2, #128	@ 0x80
 80026b4:	701a      	strb	r2, [r3, #0]
  }
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	4002100a 	.word	0x4002100a

080026c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <RCC_Delay+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <RCC_Delay+0x38>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e0:	bf00      	nop
  }
  while (Delay --);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <RCC_Delay+0x1c>
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d07d      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272c:	4b47      	ldr	r3, [pc, #284]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10d      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b44      	ldr	r3, [pc, #272]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4a43      	ldr	r2, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002742:	61d3      	str	r3, [r2, #28]
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d118      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a3a      	ldr	r2, [pc, #232]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276c:	f7fe fc68 	bl	8001040 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	e008      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fe fc64 	bl	8001040 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e05e      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002786:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002792:	4b2e      	ldr	r3, [pc, #184]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800279a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02e      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d027      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b0:	4b26      	ldr	r3, [pc, #152]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027c0:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc33 	bl	8001040 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fc2f 	bl	8001040 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e027      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ee      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	490f      	ldr	r1, [pc, #60]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800280e:	4313      	orrs	r3, r2
 8002810:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	4a0b      	ldr	r2, [pc, #44]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002822:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002830:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4903      	ldr	r1, [pc, #12]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	42420440 	.word	0x42420440

08002858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e042      	b.n	80028f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fa06 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	@ 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800289a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f82b 	bl	80028f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4313      	orrs	r3, r2
 800292c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002938:	f023 030c 	bic.w	r3, r3, #12
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699a      	ldr	r2, [r3, #24]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a55      	ldr	r2, [pc, #340]	@ (8002ab8 <UART_SetConfig+0x1c0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d103      	bne.n	800296e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002966:	f7ff fe85 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	e002      	b.n	8002974 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800296e:	f7ff fe6d 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 8002972:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800297c:	d14c      	bne.n	8002a18 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	4a49      	ldr	r2, [pc, #292]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	0119      	lsls	r1, r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <UART_SetConfig+0x1c4>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	@ 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	3332      	adds	r3, #50	@ 0x32
 80029c8:	4a3c      	ldr	r2, [pc, #240]	@ (8002abc <UART_SetConfig+0x1c4>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029d6:	4419      	add	r1, r3
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ee:	4b33      	ldr	r3, [pc, #204]	@ (8002abc <UART_SetConfig+0x1c4>)
 80029f0:	fba3 0302 	umull	r0, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	2064      	movs	r0, #100	@ 0x64
 80029f8:	fb00 f303 	mul.w	r3, r0, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	3332      	adds	r3, #50	@ 0x32
 8002a02:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 0207 	and.w	r2, r3, #7
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	440a      	add	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8002a16:	e04a      	b.n	8002aae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	0119      	lsls	r1, r3, #4
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	009a      	lsls	r2, r3, #2
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a50:	fba3 0302 	umull	r0, r3, r3, r2
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	2064      	movs	r0, #100	@ 0x64
 8002a58:	fb00 f303 	mul.w	r3, r0, r3
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	3332      	adds	r3, #50	@ 0x32
 8002a62:	4a16      	ldr	r2, [pc, #88]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6e:	4419      	add	r1, r3
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009a      	lsls	r2, r3, #2
 8002a7a:	441a      	add	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a88:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	2064      	movs	r0, #100	@ 0x64
 8002a90:	fb00 f303 	mul.w	r3, r0, r3
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	3332      	adds	r3, #50	@ 0x32
 8002a9a:	4a08      	ldr	r2, [pc, #32]	@ (8002abc <UART_SetConfig+0x1c4>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	440a      	add	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	51eb851f 	.word	0x51eb851f

08002ac0 <memset>:
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4402      	add	r2, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4d0c      	ldr	r5, [pc, #48]	@ (8002b08 <__libc_init_array+0x38>)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	@ (8002b0c <__libc_init_array+0x3c>)
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	f000 f81a 	bl	8002b18 <_init>
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	4d0a      	ldr	r5, [pc, #40]	@ (8002b10 <__libc_init_array+0x40>)
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8002b14 <__libc_init_array+0x44>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08002b88 	.word	0x08002b88
 8002b0c:	08002b88 	.word	0x08002b88
 8002b10:	08002b88 	.word	0x08002b88
 8002b14:	08002b8c 	.word	0x08002b8c

08002b18 <_init>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	bf00      	nop
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr

08002b24 <_fini>:
 8002b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b26:	bf00      	nop
 8002b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2a:	bc08      	pop	{r3}
 8002b2c:	469e      	mov	lr, r3
 8002b2e:	4770      	bx	lr
