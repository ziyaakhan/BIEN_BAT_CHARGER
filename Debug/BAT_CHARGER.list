
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  08006b50  08006b50  00007b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007290  08007290  00009128  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007290  08007290  00009128  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007290  08007290  00009128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007294  08007294  00008294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08007298  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000128  080073c0  00009128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  080073c0  000098b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c88d  00000000  00000000  00009151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003474  00000000  00000000  000259de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000eae1  00000000  00000000  00028e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00037938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6a  00000000  00000000  000388e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000152c7  00000000  00000000  00039852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f320  00000000  00000000  0004eb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bcf3  00000000  00000000  0006de39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9b2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f04  00000000  00000000  000e9b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000eca74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000128 	.word	0x20000128
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b38 	.word	0x08006b38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000012c 	.word	0x2000012c
 800020c:	08006b38 	.word	0x08006b38

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <adc_init>:

int16_t adcGain[ADC1_CHANNEL_COUNT + 3];
uint16_t dcOffset = 1985;

void adc_init(void)
{
 8000b28:	b082      	sub	sp, #8
	adcGain[listVAC]   = 9100;
 8000b2a:	f240 1344 	movw	r3, #324	@ 0x144
 8000b2e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b32:	f242 328c 	movw	r2, #9100	@ 0x238c
 8000b36:	801a      	strh	r2, [r3, #0]
	adcGain[listTEMP]  = Q15(1);
 8000b38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b3c:	805a      	strh	r2, [r3, #2]
	adcGain[listIDC]   = 2500;
 8000b3e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b42:	8099      	strh	r1, [r3, #4]
	adcGain[listVBAT1] = 2500;
 8000b44:	80d9      	strh	r1, [r3, #6]
	adcGain[listVDC1]  = Q15(1);
 8000b46:	811a      	strh	r2, [r3, #8]
	adcGain[listVDC2]  = Q15(1);
 8000b48:	815a      	strh	r2, [r3, #10]
	adcGain[listIDC2]  = 15000;
 8000b4a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000b4e:	819a      	strh	r2, [r3, #12]
	adcGain[listIDC2 + 1]  = 4000;
 8000b50:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000b54:	81da      	strh	r2, [r3, #14]
	adcGain[listIDC2 + 2]  = 3300;
 8000b56:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000b5a:	821a      	strh	r2, [r3, #16]
	adcGain[listIDC2 + 3]  = 2575;
 8000b5c:	f640 220f 	movw	r2, #2575	@ 0xa0f
 8000b60:	825a      	strh	r2, [r3, #18]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b62:	2300      	movs	r3, #0
 8000b64:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	f022 0201 	bic.w	r2, r2, #1
 8000b6e:	609a      	str	r2, [r3, #8]
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000b70:	f242 424c 	movw	r2, #9292	@ 0x244c
 8000b74:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8000b78:	611a      	str	r2, [r3, #16]

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
    LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)adc1Buffer);
 8000b7a:	f240 5274 	movw	r2, #1396	@ 0x574
 8000b7e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000b82:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	f36f 020f 	bfc	r2, #0, #16
 8000b8a:	f042 0207 	orr.w	r2, r2, #7
 8000b8e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b96:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b9e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000baa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bb6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f042 0220 	orr.w	r2, r2, #32
 8000bbe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000bc6:	f022 0210 	bic.w	r2, r2, #16
 8000bca:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	f042 0202 	orr.w	r2, r2, #2
 8000bd2:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000bdc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000be0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	609a      	str	r2, [r3, #8]
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1); // opsiyonel: NVIC enable da yap
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);

    LL_ADC_Enable(ADC1);
    for (volatile int i = 0; i < 1000; i++) { __asm volatile("nop"); } // kısa gecikme
 8000bec:	2300      	movs	r3, #0
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bf6:	da07      	bge.n	8000c08 <adc_init+0xe0>
 8000bf8:	bf00      	nop
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	9b01      	ldr	r3, [sp, #4]
 8000c02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c06:	dbf7      	blt.n	8000bf8 <adc_init+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c08:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000c0c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c16:	609a      	str	r2, [r3, #8]

    LL_ADC_REG_StartConversionSWStart(ADC1);
}
 8000c18:	b002      	add	sp, #8
 8000c1a:	4770      	bx	lr

08000c1c <calculationTemp>:

void calculationTemp(uint16_t adcValue)
{
	if (adcValue < 3124)
 8000c1c:	f640 4333 	movw	r3, #3123	@ 0xc33
 8000c20:	4298      	cmp	r0, r3
 8000c22:	d80c      	bhi.n	8000c3e <calculationTemp+0x22>
	{
		temp = ((adcValue * M1) >>15) + C1;
 8000c24:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8000c28:	fb03 f000 	mul.w	r0, r3, r0
 8000c2c:	13c0      	asrs	r0, r0, #15
 8000c2e:	385e      	subs	r0, #94	@ 0x5e
 8000c30:	b2c0      	uxtb	r0, r0
 8000c32:	f240 1358 	movw	r3, #344	@ 0x158
 8000c36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000c3a:	7018      	strb	r0, [r3, #0]
	}
	else
	{
		temp = ((adcValue * M5) >>15) + C5;
	}
}
 8000c3c:	4770      	bx	lr
	else if ( adcValue < 3289)
 8000c3e:	f640 43d8 	movw	r3, #3288	@ 0xcd8
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d807      	bhi.n	8000c56 <calculationTemp+0x3a>
		temp = ((adcValue * M2) >>15) + C2;
 8000c46:	f44f 732c 	mov.w	r3, #688	@ 0x2b0
 8000c4a:	fb03 f000 	mul.w	r0, r3, r0
 8000c4e:	13c0      	asrs	r0, r0, #15
 8000c50:	381f      	subs	r0, #31
 8000c52:	b2c0      	uxtb	r0, r0
 8000c54:	e7ed      	b.n	8000c32 <calculationTemp+0x16>
	else if (adcValue < 3545)
 8000c56:	f640 53d8 	movw	r3, #3544	@ 0xdd8
 8000c5a:	4298      	cmp	r0, r3
 8000c5c:	d806      	bhi.n	8000c6c <calculationTemp+0x50>
		temp = ((adcValue * M3) >>15) + C3;
 8000c5e:	f240 6366 	movw	r3, #1638	@ 0x666
 8000c62:	fb03 f000 	mul.w	r0, r3, r0
 8000c66:	f3c0 30c7 	ubfx	r0, r0, #15, #8
 8000c6a:	e7e2      	b.n	8000c32 <calculationTemp+0x16>
	else if (adcValue < 3786)
 8000c6c:	f640 63c9 	movw	r3, #3785	@ 0xec9
 8000c70:	4298      	cmp	r0, r3
 8000c72:	d807      	bhi.n	8000c84 <calculationTemp+0x68>
		temp = ((adcValue * M4) >>15) + C4;
 8000c74:	f240 531e 	movw	r3, #1310	@ 0x51e
 8000c78:	fb03 f000 	mul.w	r0, r3, r0
 8000c7c:	13c0      	asrs	r0, r0, #15
 8000c7e:	384b      	subs	r0, #75	@ 0x4b
 8000c80:	b2c0      	uxtb	r0, r0
 8000c82:	e7d6      	b.n	8000c32 <calculationTemp+0x16>
		temp = ((adcValue * M5) >>15) + C5;
 8000c84:	f240 33d7 	movw	r3, #983	@ 0x3d7
 8000c88:	fb03 f000 	mul.w	r0, r3, r0
 8000c8c:	13c0      	asrs	r0, r0, #15
 8000c8e:	3819      	subs	r0, #25
 8000c90:	b2c0      	uxtb	r0, r0
 8000c92:	e7ce      	b.n	8000c32 <calculationTemp+0x16>

08000c94 <lcd_delay_us>:
/**
 * @brief Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK
 * @details This is approximate; HD44780 is tolerant. For safety we overshoot.
 * @param micros Number of microseconds to delay
 */
static void lcd_delay_us(uint16_t micros) {
 8000c94:	b530      	push	{r4, r5, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	4604      	mov	r4, r0
    if (micros >= 1000u) {
 8000c9a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000c9e:	d20f      	bcs.n	8000cc0 <lcd_delay_us+0x2c>
        HAL_Delay(micros / 1000u);
        micros = (uint16_t)(micros % 1000u);
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 8000ca0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000ca4:	00e4      	lsls	r4, r4, #3
 8000ca6:	9401      	str	r4, [sp, #4]
    while (count--) {
 8000ca8:	9b01      	ldr	r3, [sp, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	9201      	str	r2, [sp, #4]
 8000cae:	b12b      	cbz	r3, 8000cbc <lcd_delay_us+0x28>
        __asm volatile ("nop");
 8000cb0:	bf00      	nop
    while (count--) {
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	9201      	str	r2, [sp, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f9      	bne.n	8000cb0 <lcd_delay_us+0x1c>
    }
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd30      	pop	{r4, r5, pc}
        HAL_Delay(micros / 1000u);
 8000cc0:	f644 50d3 	movw	r0, #19923	@ 0x4dd3
 8000cc4:	f2c1 0062 	movt	r0, #4194	@ 0x1062
 8000cc8:	fba0 3004 	umull	r3, r0, r0, r4
 8000ccc:	0985      	lsrs	r5, r0, #6
 8000cce:	4628      	mov	r0, r5
 8000cd0:	f004 f9e7 	bl	80050a2 <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd8:	fb03 4415 	mls	r4, r3, r5, r4
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	e7df      	b.n	8000ca0 <lcd_delay_us+0xc>

08000ce0 <lcd_write4>:

/**
 * @brief Write 4-bit nibble to LCD data pins
 * @param nibble 4-bit value to write (lower 4 bits used)
 */
static void lcd_write4(uint8_t nibble) {
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4604      	mov	r4, r0
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ce4:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8000ce8:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000cec:	f000 0201 	and.w	r2, r0, #1
 8000cf0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f004 fc33 	bl	8005560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cfa:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8000cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d02:	4628      	mov	r0, r5
 8000d04:	f004 fc2c 	bl	8005560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d08:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8000d0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d10:	4628      	mov	r0, r5
 8000d12:	f004 fc25 	bl	8005560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d16:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8000d1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f004 fc1e 	bl	8005560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d24:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d28:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	4620      	mov	r0, r4
 8000d32:	f004 fc15 	bl	8005560 <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff ffac 	bl	8000c94 <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	4620      	mov	r0, r4
 8000d42:	f004 fc0d 	bl	8005560 <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 8000d46:	2032      	movs	r0, #50	@ 0x32
 8000d48:	f7ff ffa4 	bl	8000c94 <lcd_delay_us>
    lcd_pulse_enable();
}
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}

08000d4e <lcd_send>:
/**
 * @brief Send 8-bit value to LCD (command or data)
 * @param value 8-bit value to send
 * @param is_data 1 for data, 0 for command
 */
static void lcd_send(uint8_t value, uint8_t is_data) {
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d52:	1e0a      	subs	r2, r1, #0
 8000d54:	bf18      	it	ne
 8000d56:	2201      	movne	r2, #1
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000d5e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d62:	f004 fbfd 	bl	8005560 <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 8000d66:	0920      	lsrs	r0, r4, #4
 8000d68:	f7ff ffba 	bl	8000ce0 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 8000d6c:	f004 000f 	and.w	r0, r4, #15
 8000d70:	f7ff ffb6 	bl	8000ce0 <lcd_write4>
}
 8000d74:	bd10      	pop	{r4, pc}

08000d76 <LCD_Backlight>:

/**
 * @brief Control LCD backlight
 * @param on 1 to turn on, 0 to turn off
 */
void LCD_Backlight(uint8_t on) {
 8000d76:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d78:	1e02      	subs	r2, r0, #0
 8000d7a:	bf18      	it	ne
 8000d7c:	2201      	movne	r2, #1
 8000d7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d82:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000d86:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d8a:	f004 fbe9 	bl	8005560 <HAL_GPIO_WritePin>
}
 8000d8e:	bd08      	pop	{r3, pc}

08000d90 <LCD_Init>:

/**
 * @brief Initialize the LCD display
 * @details Performs 4-bit initialization sequence per HD44780 datasheet
 */
void LCD_Init(void) {
 8000d90:	b510      	push	{r4, lr}
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d92:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d96:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f004 fbde 	bl	8005560 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	4620      	mov	r0, r4
 8000daa:	f004 fbd9 	bl	8005560 <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 8000dae:	2028      	movs	r0, #40	@ 0x28
 8000db0:	f004 f977 	bl	80050a2 <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f7ff ff93 	bl	8000ce0 <lcd_write4>
    HAL_Delay(5);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f004 f971 	bl	80050a2 <HAL_Delay>
    lcd_write4(0x03);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff ff8d 	bl	8000ce0 <lcd_write4>
    lcd_delay_us(150);
 8000dc6:	2096      	movs	r0, #150	@ 0x96
 8000dc8:	f7ff ff64 	bl	8000c94 <lcd_delay_us>
    lcd_write4(0x03);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f7ff ff87 	bl	8000ce0 <lcd_write4>
    lcd_delay_us(150);
 8000dd2:	2096      	movs	r0, #150	@ 0x96
 8000dd4:	f7ff ff5e 	bl	8000c94 <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff ff81 	bl	8000ce0 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 8000dde:	2100      	movs	r1, #0
 8000de0:	2028      	movs	r0, #40	@ 0x28
 8000de2:	f7ff ffb4 	bl	8000d4e <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 8000de6:	2100      	movs	r1, #0
 8000de8:	2008      	movs	r0, #8
 8000dea:	f7ff ffb0 	bl	8000d4e <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 8000dee:	2100      	movs	r1, #0
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ffac 	bl	8000d4e <lcd_send>
    HAL_Delay(2);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f004 f953 	bl	80050a2 <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f7ff ffa5 	bl	8000d4e <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000e04:	2100      	movs	r1, #0
 8000e06:	200c      	movs	r0, #12
 8000e08:	f7ff ffa1 	bl	8000d4e <lcd_send>
}
 8000e0c:	bd10      	pop	{r4, pc}

08000e0e <LCD_Clear>:

/**
 * @brief Clear the entire LCD display
 */
void LCD_Clear(void) {
 8000e0e:	b508      	push	{r3, lr}
    lcd_send(0x01, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff9b 	bl	8000d4e <lcd_send>
    HAL_Delay(2);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f004 f942 	bl	80050a2 <HAL_Delay>
}
 8000e1e:	bd08      	pop	{r3, pc}

08000e20 <LCD_SetCursor>:
/**
 * @brief Set cursor position
 * @param col Column position (0-19 for 20x4 display)
 * @param row Row position (0-3 for 20x4 display)
 */
void LCD_SetCursor(uint8_t col, uint8_t row) {
 8000e20:	b508      	push	{r3, lr}
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 8000e22:	f646 3374 	movw	r3, #27508	@ 0x6b74
 8000e26:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000e2a:	2903      	cmp	r1, #3
 8000e2c:	bf28      	it	cs
 8000e2e:	2103      	movcs	r1, #3
 8000e30:	5c5b      	ldrb	r3, [r3, r1]
 8000e32:	4418      	add	r0, r3
 8000e34:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8000e38:	2100      	movs	r1, #0
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	f7ff ff87 	bl	8000d4e <lcd_send>
}
 8000e40:	bd08      	pop	{r3, pc}

08000e42 <LCD_WriteChar>:

/**
 * @brief Write a single character
 * @param c Character to write
 */
void LCD_WriteChar(char c) {
 8000e42:	b508      	push	{r3, lr}
    lcd_send((uint8_t)c, 1);
 8000e44:	2101      	movs	r1, #1
 8000e46:	f7ff ff82 	bl	8000d4e <lcd_send>
}
 8000e4a:	bd08      	pop	{r3, pc}

08000e4c <LCD_Print>:
/**
 * @brief Print a null-terminated string
 * @param str String to print (NULL-safe)
 */
void LCD_Print(const char *str) {
    if (str == NULL) return;
 8000e4c:	b150      	cbz	r0, 8000e64 <LCD_Print+0x18>
void LCD_Print(const char *str) {
 8000e4e:	b510      	push	{r4, lr}
 8000e50:	4604      	mov	r4, r0
    while (*str) {
 8000e52:	7800      	ldrb	r0, [r0, #0]
 8000e54:	b128      	cbz	r0, 8000e62 <LCD_Print+0x16>
        LCD_WriteChar(*str++);
 8000e56:	f7ff fff4 	bl	8000e42 <LCD_WriteChar>
    while (*str) {
 8000e5a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d1f9      	bne.n	8000e56 <LCD_Print+0xa>
    }
}
 8000e62:	bd10      	pop	{r4, pc}
 8000e64:	4770      	bx	lr

08000e66 <LCD_PrintUInt16>:

/**
 * @brief Print a 16-bit unsigned integer
 * @param value Value to print (0-65535)
 */
void LCD_PrintUInt16(uint16_t value) {
 8000e66:	b500      	push	{lr}
 8000e68:	b083      	sub	sp, #12
    char buf[6]; /* max 65535 */
    int idx = 0;
    
    /* Handle thousands */
    if (value >= 10000) {
 8000e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000e6e:	4298      	cmp	r0, r3
 8000e70:	d963      	bls.n	8000f3a <LCD_PrintUInt16+0xd4>
        buf[idx++] = (char)('0' + (value / 10000));
 8000e72:	f241 7359 	movw	r3, #5977	@ 0x1759
 8000e76:	f2cd 13b7 	movt	r3, #53687	@ 0xd1b7
 8000e7a:	fba3 2300 	umull	r2, r3, r3, r0
 8000e7e:	0b5b      	lsrs	r3, r3, #13
 8000e80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000e84:	f88d 2000 	strb.w	r2, [sp]
        value = (uint16_t)(value % 10000);
 8000e88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e8c:	fb02 0313 	mls	r3, r2, r3, r0
 8000e90:	b298      	uxth	r0, r3
        buf[idx++] = (char)('0' + (value / 10000));
 8000e92:	2301      	movs	r3, #1
    }
    if (value >= 1000) {
 8000e94:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e98:	d314      	bcc.n	8000ec4 <LCD_PrintUInt16+0x5e>
        buf[idx++] = (char)('0' + (value / 1000));
 8000e9a:	f103 0208 	add.w	r2, r3, #8
 8000e9e:	eb0d 0102 	add.w	r1, sp, r2
 8000ea2:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8000ea6:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8000eaa:	fba2 c200 	umull	ip, r2, r2, r0
 8000eae:	0992      	lsrs	r2, r2, #6
 8000eb0:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000eb4:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 1000);
 8000eb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ebc:	fb01 0212 	mls	r2, r1, r2, r0
 8000ec0:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 1000));
 8000ec2:	3301      	adds	r3, #1
    }
    if (value >= 100) {
 8000ec4:	2863      	cmp	r0, #99	@ 0x63
 8000ec6:	d913      	bls.n	8000ef0 <LCD_PrintUInt16+0x8a>
        buf[idx++] = (char)('0' + (value / 100));
 8000ec8:	f103 0208 	add.w	r2, r3, #8
 8000ecc:	eb0d 0102 	add.w	r1, sp, r2
 8000ed0:	f248 521f 	movw	r2, #34079	@ 0x851f
 8000ed4:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8000ed8:	fba2 c200 	umull	ip, r2, r2, r0
 8000edc:	0952      	lsrs	r2, r2, #5
 8000ede:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000ee2:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 100);
 8000ee6:	2164      	movs	r1, #100	@ 0x64
 8000ee8:	fb01 0212 	mls	r2, r1, r2, r0
 8000eec:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 100));
 8000eee:	3301      	adds	r3, #1
    }
    if (value >= 10) {
 8000ef0:	2809      	cmp	r0, #9
 8000ef2:	d914      	bls.n	8000f1e <LCD_PrintUInt16+0xb8>
        buf[idx++] = (char)('0' + (value / 10));
 8000ef4:	f103 0208 	add.w	r2, r3, #8
 8000ef8:	eb0d 0102 	add.w	r1, sp, r2
 8000efc:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8000f00:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8000f04:	fba2 c200 	umull	ip, r2, r2, r0
 8000f08:	08d2      	lsrs	r2, r2, #3
 8000f0a:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000f0e:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 10);
 8000f12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f16:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8000f1a:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 10));
 8000f1c:	3301      	adds	r3, #1
    }
    buf[idx++] = (char)('0' + value);
 8000f1e:	3308      	adds	r3, #8
 8000f20:	446b      	add	r3, sp
 8000f22:	3030      	adds	r0, #48	@ 0x30
 8000f24:	f803 0c08 	strb.w	r0, [r3, #-8]
    buf[idx] = '\0';
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f803 2c07 	strb.w	r2, [r3, #-7]
    LCD_Print(buf);
 8000f2e:	4668      	mov	r0, sp
 8000f30:	f7ff ff8c 	bl	8000e4c <LCD_Print>
}
 8000f34:	b003      	add	sp, #12
 8000f36:	f85d fb04 	ldr.w	pc, [sp], #4
    int idx = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e7aa      	b.n	8000e94 <LCD_PrintUInt16+0x2e>

08000f3e <LCD_PrintInt16>:

/**
 * @brief Print a 16-bit signed integer
 * @param value Value to print (-32768 to 32767)
 */
void LCD_PrintInt16(int16_t value) {
 8000f3e:	b510      	push	{r4, lr}
    if (value < 0) {
 8000f40:	1e04      	subs	r4, r0, #0
 8000f42:	db03      	blt.n	8000f4c <LCD_PrintInt16+0xe>
        LCD_WriteChar('-');
        value = (int16_t)(-value);
    }
    LCD_PrintUInt16((uint16_t)value);
 8000f44:	b2a0      	uxth	r0, r4
 8000f46:	f7ff ff8e 	bl	8000e66 <LCD_PrintUInt16>
}
 8000f4a:	bd10      	pop	{r4, pc}
        LCD_WriteChar('-');
 8000f4c:	202d      	movs	r0, #45	@ 0x2d
 8000f4e:	f7ff ff78 	bl	8000e42 <LCD_WriteChar>
        value = (int16_t)(-value);
 8000f52:	4260      	negs	r0, r4
 8000f54:	b204      	sxth	r4, r0
 8000f56:	e7f5      	b.n	8000f44 <LCD_PrintInt16+0x6>

08000f58 <LCD_PrintUInt16_1dp>:
/**
 * @brief Print a 16-bit value with 1 decimal place
 * @details Input value is multiplied by 10, output shows 1 decimal place
 * @param value_times_10 Value multiplied by 10 (e.g., 194 for 19.4)
 */
void LCD_PrintUInt16_1dp(uint16_t value_times_10) {
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	4604      	mov	r4, r0
    uint16_t integer = value_times_10 / 10u;
 8000f5c:	f64c 40cd 	movw	r0, #52429	@ 0xcccd
 8000f60:	f6cc 40cc 	movt	r0, #52428	@ 0xcccc
 8000f64:	fba0 3004 	umull	r3, r0, r0, r4
 8000f68:	08c5      	lsrs	r5, r0, #3
    uint16_t frac = value_times_10 % 10u;
    /* Pad to fixed width 4: " 9.0" or "19.4" */

    LCD_PrintUInt16(integer);
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	f7ff ff7b 	bl	8000e66 <LCD_PrintUInt16>
    LCD_WriteChar('.');
 8000f70:	202e      	movs	r0, #46	@ 0x2e
 8000f72:	f7ff ff66 	bl	8000e42 <LCD_WriteChar>
    uint16_t frac = value_times_10 % 10u;
 8000f76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000f7a:	eba4 0045 	sub.w	r0, r4, r5, lsl #1
    LCD_WriteChar((char)('0' + frac));
 8000f7e:	3030      	adds	r0, #48	@ 0x30
 8000f80:	b2c0      	uxtb	r0, r0
 8000f82:	f7ff ff5e 	bl	8000e42 <LCD_WriteChar>
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}

08000f88 <LCD_PrintQ15>:

void LCD_PrintQ15(int16_t value_q15) {
 8000f88:	b508      	push	{r3, lr}
    LCD_PrintInt16(value_q15);
 8000f8a:	f7ff ffd8 	bl	8000f3e <LCD_PrintInt16>
}
 8000f8e:	bd08      	pop	{r3, pc}

08000f90 <ui_assign_language>:
{
    return UI_STR_TABLE[lcdLangId][id];
}

static void ui_assign_language(void)
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
    const char * const * T = UI_STR_TABLE[lcdLangId];
 8000f92:	f240 032e 	movw	r3, #46	@ 0x2e
 8000f96:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f247 02f8 	movw	r2, #28920	@ 0x70f8
 8000fa0:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    STR_BATV     = T[UI_LBL_BATV];
 8000fa8:	f240 51a8 	movw	r1, #1448	@ 0x5a8
 8000fac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000fb0:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8000fb2:	6008      	str	r0, [r1, #0]
    STR_CAPACITY = T[UI_LBL_CAPACITY];
 8000fb4:	f240 51a4 	movw	r1, #1444	@ 0x5a4
 8000fb8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000fbc:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 8000fbe:	6008      	str	r0, [r1, #0]
    STR_COUNT    = T[UI_LBL_COUNT];
 8000fc0:	6c16      	ldr	r6, [r2, #64]	@ 0x40
    if (lcdLangId == 0) {
 8000fc2:	f646 3578 	movw	r5, #27512	@ 0x6b78
 8000fc6:	f6c0 0500 	movt	r5, #2048	@ 0x800
 8000fca:	f646 327c 	movw	r2, #27516	@ 0x6b7c
 8000fce:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf18      	it	ne
 8000fd6:	4615      	movne	r5, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf0c      	ite	eq
 8000fdc:	f04f 0e49 	moveq.w	lr, #73	@ 0x49
 8000fe0:	f04f 0e41 	movne.w	lr, #65	@ 0x41
 8000fe4:	f247 04ac 	movw	r4, #28844	@ 0x70ac
 8000fe8:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8000fec:	f247 02a0 	movw	r2, #28832	@ 0x70a0
 8000ff0:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf18      	it	ne
 8000ff8:	4614      	movne	r4, r2
 8000ffa:	f247 0098 	movw	r0, #28824	@ 0x7098
 8000ffe:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001002:	f247 0290 	movw	r2, #28816	@ 0x7090
 8001006:	f6c0 0200 	movt	r2, #2048	@ 0x800
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf18      	it	ne
 800100e:	4610      	movne	r0, r2
 8001010:	f247 0184 	movw	r1, #28804	@ 0x7084
 8001014:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8001018:	f247 0278 	movw	r2, #28792	@ 0x7078
 800101c:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf18      	it	ne
 8001024:	4611      	movne	r1, r2
 8001026:	f247 0270 	movw	r2, #28784	@ 0x7070
 800102a:	f6c0 0200 	movt	r2, #2048	@ 0x800
 800102e:	f247 0c68 	movw	ip, #28776	@ 0x7068
 8001032:	f6c0 0c00 	movt	ip, #2048	@ 0x800
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf18      	it	ne
 800103a:	4662      	movne	r2, ip
    STR_COUNT    = T[UI_LBL_COUNT];
 800103c:	f240 53a0 	movw	r3, #1440	@ 0x5a0
 8001040:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001044:	601e      	str	r6, [r3, #0]
        STR_LOAD_BORDER_TOP    = strEN_LOADING_LINE0;
 8001046:	f240 5c9c 	movw	ip, #1436	@ 0x59c
 800104a:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800104e:	f646 3380 	movw	r3, #27520	@ 0x6b80
 8001052:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001056:	f8cc 3000 	str.w	r3, [ip]
        STR_LOAD_BORDER_BOTTOM = strEN_LOADING_LINE3;
 800105a:	f240 5c98 	movw	ip, #1432	@ 0x598
 800105e:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8001062:	f8cc 3000 	str.w	r3, [ip]
        STR_LABELS_SHORT       = LABELS_EN_SHORT;
        STR_MENU_ITEMS         = MENU_ITEMS_EN;
        STR_LANG_VAL           = "EN";
 8001066:	f240 5394 	movw	r3, #1428	@ 0x594
 800106a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800106e:	601d      	str	r5, [r3, #0]
        CH_CURR                = 'I';
 8001070:	f240 0302 	movw	r3, #2
 8001074:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001078:	f883 e000 	strb.w	lr, [r3]
        STATUS_COL             = 15u;
        TEMP_COL               = 11u;
        DEVICE_MODE_STRINGS    = DEVICE_MODE_STRINGS_EN;
 800107c:	f240 5390 	movw	r3, #1424	@ 0x590
 8001080:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001084:	601c      	str	r4, [r3, #0]
        DEVICE_TYPE_STRINGS    = DEVICE_TYPE_EN;
 8001086:	f240 538c 	movw	r3, #1420	@ 0x58c
 800108a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800108e:	6018      	str	r0, [r3, #0]
        MAIN_LABELS            = MAIN_LABELS_EN;
 8001090:	f240 5388 	movw	r3, #1416	@ 0x588
 8001094:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001098:	6019      	str	r1, [r3, #0]
        STATUS_STRINGS         = STATUS_EN;
 800109a:	f240 5384 	movw	r3, #1412	@ 0x584
 800109e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010a2:	601a      	str	r2, [r3, #0]
        DEVICE_MODE_STRINGS    = DEVICE_MODE_STRINGS_TR;
        DEVICE_TYPE_STRINGS    = DEVICE_TYPE_TR;
        MAIN_LABELS            = MAIN_LABELS_TR;
        STATUS_STRINGS         = STATUS_TR;
    }
}
 80010a4:	bd70      	pop	{r4, r5, r6, pc}

080010a6 <lcd_menu_set_language>:

/**
 * @brief Set the display language
 * @param lang_id Language ID (0: English, 1: Turkish)
 */
void lcd_menu_set_language(uint8_t lang_id) {
 80010a6:	b508      	push	{r3, lr}
    if (lang_id != 0u)
 80010a8:	f240 032e 	movw	r3, #46	@ 0x2e
 80010ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010b0:	3800      	subs	r0, #0
 80010b2:	bf18      	it	ne
 80010b4:	2001      	movne	r0, #1
 80010b6:	7018      	strb	r0, [r3, #0]
    }
    else
    {
        lcdLangId = 0u;
    }
    ui_assign_language();
 80010b8:	f7ff ff6a 	bl	8000f90 <ui_assign_language>
    LCD_Clear();
 80010bc:	f7ff fea7 	bl	8000e0e <LCD_Clear>
}
 80010c0:	bd08      	pop	{r3, pc}

080010c2 <lcd_handle>:
/**
 * @brief Handle LCD display rendering
 * @details Renders the current page based on pageID and language
 */
void lcd_handle(void)
{
 80010c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
    /* Clear once when page changes or explicitly requested */
    if (pageID != prevPageID || uiNeedsClear)
 80010c8:	f240 52e2 	movw	r2, #1506	@ 0x5e2
 80010cc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80010d0:	f240 032d 	movw	r3, #45	@ 0x2d
 80010d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d105      	bne.n	80010ec <lcd_handle+0x2a>
 80010e0:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 80010e4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b18b      	cbz	r3, 8001110 <lcd_handle+0x4e>
    {
        LCD_Clear();
 80010ec:	f7ff fe8f 	bl	8000e0e <LCD_Clear>
        prevPageID = pageID;
 80010f0:	f240 032d 	movw	r3, #45	@ 0x2d
 80010f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010f8:	f240 52e2 	movw	r2, #1506	@ 0x5e2
 80010fc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	701a      	strb	r2, [r3, #0]
        uiNeedsClear = 0;
 8001104:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8001108:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
    }

    /* Ensure language strings are assigned even if init wasn't called */
    if (STR_BATV == 0 || STR_CAPACITY == 0 || STR_COUNT == 0)
 8001110:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8001114:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b15b      	cbz	r3, 8001134 <lcd_handle+0x72>
 800111c:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 8001120:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b12b      	cbz	r3, 8001134 <lcd_handle+0x72>
 8001128:	f240 53a0 	movw	r3, #1440	@ 0x5a0
 800112c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b90b      	cbnz	r3, 8001138 <lcd_handle+0x76>
    {
        ui_assign_language();
 8001134:	f7ff ff2c 	bl	8000f90 <ui_assign_language>
    }

    /* Edit mode is entered with Right press in button_handle; no long-press */

    switch(pageID)
 8001138:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800113c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b0d      	cmp	r3, #13
 8001144:	f200 80ca 	bhi.w	80012dc <lcd_handle+0x21a>
 8001148:	e8df f013 	tbh	[pc, r3, lsl #1]
 800114c:	00ce000e 	.word	0x00ce000e
 8001150:	02ba0200 	.word	0x02ba0200
 8001154:	048c0435 	.word	0x048c0435
 8001158:	0647052d 	.word	0x0647052d
 800115c:	08550704 	.word	0x08550704
 8001160:	09080792 	.word	0x09080792
 8001164:	0a960960 	.word	0x0a960960
    {
    case PAGE_LOADING:
    {
        /* Dynamic line 2 content per operating mode */
        LCD_SetCursor(0, 0); 
 8001168:	2100      	movs	r1, #0
 800116a:	4608      	mov	r0, r1
 800116c:	f7ff fe58 	bl	8000e20 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_TOP);
 8001170:	f240 539c 	movw	r3, #1436	@ 0x59c
 8001174:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f7ff fe67 	bl	8000e4c <LCD_Print>
        /* Center company name */
        LCD_SetCursor(0, 1);
 800117e:	2101      	movs	r1, #1
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe4d 	bl	8000e20 <LCD_SetCursor>
        {
            char line[21];
            const char *name = companyName;
            int len = 0; while (name[len] && len < 20) len++;
 8001186:	f240 0318 	movw	r3, #24
 800118a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d063      	beq.n	800125c <lcd_handle+0x19a>
 8001194:	f240 0218 	movw	r2, #24
 8001198:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800119c:	2300      	movs	r3, #0
 800119e:	3301      	adds	r3, #1
 80011a0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80011a4:	b119      	cbz	r1, 80011ae <lcd_handle+0xec>
 80011a6:	2b14      	cmp	r3, #20
 80011a8:	d1f9      	bne.n	800119e <lcd_handle+0xdc>
            int pad = (20 - len) / 2;
 80011aa:	2400      	movs	r4, #0
 80011ac:	e010      	b.n	80011d0 <lcd_handle+0x10e>
 80011ae:	f1c3 0214 	rsb	r2, r3, #20
 80011b2:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80011b6:	1064      	asrs	r4, r4, #1
            for (int i=0;i<pad;i++) line[i] = ' ';
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	dd09      	ble.n	80011d0 <lcd_handle+0x10e>
 80011bc:	a901      	add	r1, sp, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	2020      	movs	r0, #32
 80011c2:	f801 0b01 	strb.w	r0, [r1], #1
 80011c6:	3201      	adds	r2, #1
 80011c8:	4294      	cmp	r4, r2
 80011ca:	dcfa      	bgt.n	80011c2 <lcd_handle+0x100>
            for (int i=0;i<len;i++) line[pad+i] = name[i];
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd0f      	ble.n	80011f0 <lcd_handle+0x12e>
 80011d0:	f240 0218 	movw	r2, #24
 80011d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80011d8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80011dc:	4469      	add	r1, sp
 80011de:	3925      	subs	r1, #37	@ 0x25
 80011e0:	eb03 0c02 	add.w	ip, r3, r2
 80011e4:	f812 0b01 	ldrb.w	r0, [r2], #1
 80011e8:	f801 0f01 	strb.w	r0, [r1, #1]!
 80011ec:	4594      	cmp	ip, r2
 80011ee:	d1f9      	bne.n	80011e4 <lcd_handle+0x122>
            for (int i=pad+len;i<20;i++) line[i] = ' ';
 80011f0:	4423      	add	r3, r4
 80011f2:	2b13      	cmp	r3, #19
 80011f4:	dc09      	bgt.n	800120a <lcd_handle+0x148>
 80011f6:	3328      	adds	r3, #40	@ 0x28
 80011f8:	446b      	add	r3, sp
 80011fa:	3b25      	subs	r3, #37	@ 0x25
 80011fc:	f10d 0117 	add.w	r1, sp, #23
 8001200:	2220      	movs	r2, #32
 8001202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001206:	428b      	cmp	r3, r1
 8001208:	d1fb      	bne.n	8001202 <lcd_handle+0x140>
            line[20] = '\0';
 800120a:	2400      	movs	r4, #0
 800120c:	f88d 4018 	strb.w	r4, [sp, #24]
            LCD_Print(line);
 8001210:	a801      	add	r0, sp, #4
 8001212:	f7ff fe1b 	bl	8000e4c <LCD_Print>
        }
        LCD_SetCursor(0, 2);
 8001216:	2102      	movs	r1, #2
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fe01 	bl	8000e20 <LCD_SetCursor>
        {
            const char *dev = DEVICE_NAMES_LANG[lcdLangId][operatingMode];
 800121e:	f240 0304 	movw	r3, #4
 8001222:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001226:	f240 022e 	movw	r2, #46	@ 0x2e
 800122a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800122e:	7811      	ldrb	r1, [r2, #0]
 8001230:	f240 7272 	movw	r2, #1906	@ 0x772
 8001234:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800123e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            char buf[21];
            int len=0; while (dev[len] && len<20) len++;
 8001242:	780b      	ldrb	r3, [r1, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d04c      	beq.n	80012e2 <lcd_handle+0x220>
 8001248:	460b      	mov	r3, r1
 800124a:	4622      	mov	r2, r4
 800124c:	3201      	adds	r2, #1
 800124e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001252:	b130      	cbz	r0, 8001262 <lcd_handle+0x1a0>
 8001254:	2a14      	cmp	r2, #20
 8001256:	d1f9      	bne.n	800124c <lcd_handle+0x18a>
            int pad = (20 - len) / 2;
 8001258:	2300      	movs	r3, #0
 800125a:	e014      	b.n	8001286 <lcd_handle+0x1c4>
            int len = 0; while (name[len] && len < 20) len++;
 800125c:	2300      	movs	r3, #0
            int pad = (20 - len) / 2;
 800125e:	240a      	movs	r4, #10
 8001260:	e7ac      	b.n	80011bc <lcd_handle+0xfa>
            int pad = (20 - len) / 2;
 8001262:	f1c2 0014 	rsb	r0, r2, #20
 8001266:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800126a:	105b      	asrs	r3, r3, #1
            for (int i=0;i<pad;i++) buf[i]=' ';
 800126c:	2801      	cmp	r0, #1
 800126e:	dd0a      	ble.n	8001286 <lcd_handle+0x1c4>
 8001270:	ac01      	add	r4, sp, #4
 8001272:	2000      	movs	r0, #0
 8001274:	f04f 0c20 	mov.w	ip, #32
 8001278:	f804 cb01 	strb.w	ip, [r4], #1
 800127c:	3001      	adds	r0, #1
 800127e:	4298      	cmp	r0, r3
 8001280:	dbfa      	blt.n	8001278 <lcd_handle+0x1b6>
            for (int i=0;i<len;i++) buf[pad+i]=dev[i];
 8001282:	2a00      	cmp	r2, #0
 8001284:	dd0c      	ble.n	80012a0 <lcd_handle+0x1de>
 8001286:	3901      	subs	r1, #1
 8001288:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800128c:	4468      	add	r0, sp
 800128e:	3825      	subs	r0, #37	@ 0x25
 8001290:	eb01 0c02 	add.w	ip, r1, r2
 8001294:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001298:	f800 4f01 	strb.w	r4, [r0, #1]!
 800129c:	458c      	cmp	ip, r1
 800129e:	d1f9      	bne.n	8001294 <lcd_handle+0x1d2>
            for (int i=pad+len;i<20;i++) buf[i]=' ';
 80012a0:	4413      	add	r3, r2
 80012a2:	2b13      	cmp	r3, #19
 80012a4:	dc09      	bgt.n	80012ba <lcd_handle+0x1f8>
 80012a6:	3328      	adds	r3, #40	@ 0x28
 80012a8:	446b      	add	r3, sp
 80012aa:	3b25      	subs	r3, #37	@ 0x25
 80012ac:	f10d 0117 	add.w	r1, sp, #23
 80012b0:	2220      	movs	r2, #32
 80012b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80012b6:	4299      	cmp	r1, r3
 80012b8:	d1fb      	bne.n	80012b2 <lcd_handle+0x1f0>
            buf[20]='\0';
 80012ba:	2400      	movs	r4, #0
 80012bc:	f88d 4018 	strb.w	r4, [sp, #24]
            LCD_Print(buf);
 80012c0:	a801      	add	r0, sp, #4
 80012c2:	f7ff fdc3 	bl	8000e4c <LCD_Print>
        }
        LCD_SetCursor(0, 3); 
 80012c6:	2103      	movs	r1, #3
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fda9 	bl	8000e20 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_BOTTOM);
 80012ce:	f240 5398 	movw	r3, #1432	@ 0x598
 80012d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	f7ff fdb8 	bl	8000e4c <LCD_Print>
    /* duplicate blocks removed */

    default:
        break;
    }
}
 80012dc:	b00a      	add	sp, #40	@ 0x28
 80012de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            int len=0; while (dev[len] && len<20) len++;
 80012e2:	2200      	movs	r2, #0
            int pad = (20 - len) / 2;
 80012e4:	230a      	movs	r3, #10
 80012e6:	e7c3      	b.n	8001270 <lcd_handle+0x1ae>
		LCD_SetCursor(0, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4608      	mov	r0, r1
 80012ec:	f7ff fd98 	bl	8000e20 <LCD_SetCursor>
            while (*a && companyLen < 20) { a++; companyLen++; }
 80012f0:	f240 0318 	movw	r3, #24
 80012f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012f8:	7819      	ldrb	r1, [r3, #0]
 80012fa:	2900      	cmp	r1, #0
 80012fc:	f000 80e2 	beq.w	80014c4 <lcd_handle+0x402>
 8001300:	461c      	mov	r4, r3
 8001302:	461a      	mov	r2, r3
            uint8_t companyLen = 0;
 8001304:	2300      	movs	r3, #0
            while (*a && companyLen < 20) { a++; companyLen++; }
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800130e:	b190      	cbz	r0, 8001336 <lcd_handle+0x274>
 8001310:	2b14      	cmp	r3, #20
 8001312:	d1f8      	bne.n	8001306 <lcd_handle+0x244>
                uint8_t pad = (20 - companyLen) >> 1; /* Bit shift for divide by 2 */
 8001314:	f1c3 0314 	rsb	r3, r3, #20
 8001318:	f3c3 0347 	ubfx	r3, r3, #1, #8
                for (uint8_t i = 0; i < pad && idx < 20; i++) line[idx++] = ' ';
 800131c:	2b00      	cmp	r3, #0
 800131e:	d03c      	beq.n	800139a <lcd_handle+0x2d8>
 8001320:	f10d 0c04 	add.w	ip, sp, #4
 8001324:	2001      	movs	r0, #1
 8001326:	2520      	movs	r5, #32
 8001328:	b2c2      	uxtb	r2, r0
 800132a:	f80c 5b01 	strb.w	r5, [ip], #1
 800132e:	4293      	cmp	r3, r2
 8001330:	d934      	bls.n	800139c <lcd_handle+0x2da>
 8001332:	3001      	adds	r0, #1
 8001334:	e7f8      	b.n	8001328 <lcd_handle+0x266>
            if (companyLen > 8) {
 8001336:	2b08      	cmp	r3, #8
 8001338:	d8ec      	bhi.n	8001314 <lcd_handle+0x252>
            while (*a && idx < 20) line[idx++] = *a++;
 800133a:	ac01      	add	r4, sp, #4
 800133c:	f240 0018 	movw	r0, #24
 8001340:	f2c2 0000 	movt	r0, #8192	@ 0x2000
            if (companyLen > 8) {
 8001344:	2201      	movs	r2, #1
            while (*a && idx < 20) line[idx++] = *a++;
 8001346:	b2d3      	uxtb	r3, r2
 8001348:	f804 1b01 	strb.w	r1, [r4], #1
 800134c:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8001350:	2900      	cmp	r1, #0
 8001352:	f000 80b3 	beq.w	80014bc <lcd_handle+0x3fa>
 8001356:	3201      	adds	r2, #1
 8001358:	2a15      	cmp	r2, #21
 800135a:	d1f4      	bne.n	8001346 <lcd_handle+0x284>
                const char *deviceType = DEVICE_TYPE_STRINGS[operatingMode];
 800135c:	f240 7272 	movw	r2, #1906	@ 0x772
 8001360:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001364:	7811      	ldrb	r1, [r2, #0]
 8001366:	f240 528c 	movw	r2, #1420	@ 0x58c
 800136a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800136e:	6812      	ldr	r2, [r2, #0]
            while (*b && idx < 20) line[idx++] = *b++;
 8001370:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	bb7a      	cbnz	r2, 80013d8 <lcd_handle+0x316>
            while (idx < 20) line[idx++] = ' ';
 8001378:	2b13      	cmp	r3, #19
 800137a:	d82d      	bhi.n	80013d8 <lcd_handle+0x316>
 800137c:	aa01      	add	r2, sp, #4
 800137e:	441a      	add	r2, r3
 8001380:	f10d 0105 	add.w	r1, sp, #5
 8001384:	4419      	add	r1, r3
 8001386:	f1c3 0313 	rsb	r3, r3, #19
 800138a:	b2db      	uxtb	r3, r3
 800138c:	440b      	add	r3, r1
 800138e:	2120      	movs	r1, #32
 8001390:	f802 1b01 	strb.w	r1, [r2], #1
 8001394:	429a      	cmp	r2, r3
 8001396:	d1fb      	bne.n	8001390 <lcd_handle+0x2ce>
 8001398:	e01e      	b.n	80013d8 <lcd_handle+0x316>
            uint8_t idx = 0;
 800139a:	461a      	mov	r2, r3
                while (*a && idx < 20) line[idx++] = *a++;
 800139c:	2a13      	cmp	r2, #19
 800139e:	d81b      	bhi.n	80013d8 <lcd_handle+0x316>
 80013a0:	ab01      	add	r3, sp, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	3201      	adds	r2, #1
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f803 1b01 	strb.w	r1, [r3], #1
 80013ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80013b0:	b111      	cbz	r1, 80013b8 <lcd_handle+0x2f6>
 80013b2:	2a14      	cmp	r2, #20
 80013b4:	d1f6      	bne.n	80013a4 <lcd_handle+0x2e2>
 80013b6:	e00f      	b.n	80013d8 <lcd_handle+0x316>
                while (idx < 20) line[idx++] = ' ';
 80013b8:	2a13      	cmp	r2, #19
 80013ba:	d80d      	bhi.n	80013d8 <lcd_handle+0x316>
 80013bc:	ab01      	add	r3, sp, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f10d 0105 	add.w	r1, sp, #5
 80013c4:	4411      	add	r1, r2
 80013c6:	f1c2 0213 	rsb	r2, r2, #19
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440a      	add	r2, r1
 80013ce:	2120      	movs	r1, #32
 80013d0:	f803 1b01 	strb.w	r1, [r3], #1
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d1fb      	bne.n	80013d0 <lcd_handle+0x30e>
            line[20] = '\0';
 80013d8:	2600      	movs	r6, #0
 80013da:	f88d 6018 	strb.w	r6, [sp, #24]
            LCD_Print(line);
 80013de:	a801      	add	r0, sp, #4
 80013e0:	f7ff fd34 	bl	8000e4c <LCD_Print>
		LCD_SetCursor(0, 1);
 80013e4:	2101      	movs	r1, #1
 80013e6:	4630      	mov	r0, r6
 80013e8:	f7ff fd1a 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(MAIN_LABELS[0]); /* "Cikis V:" / "Output V:" */
 80013ec:	f240 5588 	movw	r5, #1416	@ 0x588
 80013f0:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	f7ff fd28 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(8, 1);
 80013fc:	2101      	movs	r1, #1
 80013fe:	2008      	movs	r0, #8
 8001400:	f7ff fd0e 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("      "); /* Clear 6 spaces to remove old value and extra V */
 8001404:	f646 3498 	movw	r4, #27544	@ 0x6b98
 8001408:	f6c0 0400 	movt	r4, #2048	@ 0x800
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fd1d 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(8, 1);
 8001412:	2101      	movs	r1, #1
 8001414:	2008      	movs	r0, #8
 8001416:	f7ff fd03 	bl	8000e20 <LCD_SetCursor>
        LCD_PrintUInt16_1dp(adcVBAT1);
 800141a:	f240 1362 	movw	r3, #354	@ 0x162
 800141e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001422:	8818      	ldrh	r0, [r3, #0]
 8001424:	f7ff fd98 	bl	8000f58 <LCD_PrintUInt16_1dp>
        LCD_WriteChar('V');
 8001428:	2056      	movs	r0, #86	@ 0x56
 800142a:	f7ff fd0a 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(14, 1);
 800142e:	2101      	movs	r1, #1
 8001430:	200e      	movs	r0, #14
 8001432:	f7ff fcf5 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(STATUS_STRINGS[outputState]); /* "Acik"/"Kapali" or "Open"/"Close" */
 8001436:	f240 53df 	movw	r3, #1503	@ 0x5df
 800143a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	f240 5384 	movw	r3, #1412	@ 0x584
 8001444:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800144e:	f7ff fcfd 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0, 2);
 8001452:	2102      	movs	r1, #2
 8001454:	4630      	mov	r0, r6
 8001456:	f7ff fce3 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(MAIN_LABELS[1]); /* "Cikis I:" / "Output I:" */
 800145a:	682b      	ldr	r3, [r5, #0]
 800145c:	6858      	ldr	r0, [r3, #4]
 800145e:	f7ff fcf5 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(8, 2);
 8001462:	2102      	movs	r1, #2
 8001464:	2008      	movs	r0, #8
 8001466:	f7ff fcdb 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("      "); /* Clear 6 spaces to remove old value */
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff fcee 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(8, 2);
 8001470:	2102      	movs	r1, #2
 8001472:	2008      	movs	r0, #8
 8001474:	f7ff fcd4 	bl	8000e20 <LCD_SetCursor>
        LCD_PrintUInt16_1dp(adcIDC2);
 8001478:	f240 135a 	movw	r3, #346	@ 0x15a
 800147c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001480:	8818      	ldrh	r0, [r3, #0]
 8001482:	f7ff fd69 	bl	8000f58 <LCD_PrintUInt16_1dp>
        LCD_WriteChar('A');
 8001486:	2041      	movs	r0, #65	@ 0x41
 8001488:	f7ff fcdb 	bl	8000e42 <LCD_WriteChar>
        if (operatingMode == MODE_CHARGER && outputState) {
 800148c:	f240 7372 	movw	r3, #1906	@ 0x772
 8001490:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b933      	cbnz	r3, 80014a6 <lcd_handle+0x3e4>
 8001498:	f240 53df 	movw	r3, #1503	@ 0x5df
 800149c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d138      	bne.n	8001518 <lcd_handle+0x456>
            LCD_SetCursor(14, 2);
 80014a6:	2102      	movs	r1, #2
 80014a8:	200e      	movs	r0, #14
 80014aa:	f7ff fcb9 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("      "); /* Clear charge state area */
 80014ae:	f646 3098 	movw	r0, #27544	@ 0x6b98
 80014b2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80014b6:	f7ff fcc9 	bl	8000e4c <LCD_Print>
 80014ba:	e70f      	b.n	80012dc <lcd_handle+0x21a>
            if (idx < 20) line[idx++] = ' ';
 80014bc:	2b13      	cmp	r3, #19
 80014be:	f63f af4d 	bhi.w	800135c <lcd_handle+0x29a>
 80014c2:	4619      	mov	r1, r3
 80014c4:	1c4b      	adds	r3, r1, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f101 0228 	add.w	r2, r1, #40	@ 0x28
 80014cc:	eb0d 0102 	add.w	r1, sp, r2
 80014d0:	2220      	movs	r2, #32
 80014d2:	f801 2c24 	strb.w	r2, [r1, #-36]
                const char *deviceType = DEVICE_TYPE_STRINGS[operatingMode];
 80014d6:	f240 7272 	movw	r2, #1906	@ 0x772
 80014da:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80014de:	7811      	ldrb	r1, [r2, #0]
 80014e0:	f240 528c 	movw	r2, #1420	@ 0x58c
 80014e4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
            while (*b && idx < 20) line[idx++] = *b++;
 80014ee:	780a      	ldrb	r2, [r1, #0]
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	f43f af41 	beq.w	8001378 <lcd_handle+0x2b6>
 80014f6:	2b13      	cmp	r3, #19
 80014f8:	f63f af6e 	bhi.w	80013d8 <lcd_handle+0x316>
 80014fc:	a801      	add	r0, sp, #4
 80014fe:	4418      	add	r0, r3
 8001500:	3301      	adds	r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f800 2b01 	strb.w	r2, [r0], #1
 8001508:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800150c:	2a00      	cmp	r2, #0
 800150e:	f43f af33 	beq.w	8001378 <lcd_handle+0x2b6>
 8001512:	2b14      	cmp	r3, #20
 8001514:	d1f4      	bne.n	8001500 <lcd_handle+0x43e>
 8001516:	e75f      	b.n	80013d8 <lcd_handle+0x316>
            LCD_SetCursor(14, 2);
 8001518:	2102      	movs	r1, #2
 800151a:	200e      	movs	r0, #14
 800151c:	f7ff fc80 	bl	8000e20 <LCD_SetCursor>
            LCD_Print(STAGE_NAMES_LANG[lcdLangId][batInfo.chargeState]); /* Charge state */
 8001520:	f247 13f8 	movw	r3, #29176	@ 0x71f8
 8001524:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001528:	f240 022e 	movw	r2, #46	@ 0x2e
 800152c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001530:	7811      	ldrb	r1, [r2, #0]
 8001532:	f240 0234 	movw	r2, #52	@ 0x34
 8001536:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800153a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 800153e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001542:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001546:	f7ff fc81 	bl	8000e4c <LCD_Print>
 800154a:	e6c7      	b.n	80012dc <lcd_handle+0x21a>
    return UI_STR_TABLE[lcdLangId][id];
 800154c:	f240 032e 	movw	r3, #46	@ 0x2e
 8001550:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001554:	7819      	ldrb	r1, [r3, #0]
 8001556:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 800155a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800155e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001562:	681c      	ldr	r4, [r3, #0]
        const char * const * items = MENU_ITEMS_LANG_MODE[lcdLangId][operatingMode];
 8001564:	f247 03b8 	movw	r3, #28856	@ 0x70b8
 8001568:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800156c:	f240 7272 	movw	r2, #1906	@ 0x772
 8001570:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800157a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        LCD_SetCursor(1, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2001      	movs	r0, #1
 8001582:	f7ff fc4d 	bl	8000e20 <LCD_SetCursor>
            while (*t)
 8001586:	7820      	ldrb	r0, [r4, #0]
 8001588:	b160      	cbz	r0, 80015a4 <lcd_handle+0x4e2>
                if (c >= 'a' && c <= 'z')
 800158a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001592:	bf9c      	itt	ls
 8001594:	3820      	subls	r0, #32
 8001596:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001598:	f7ff fc53 	bl	8000e42 <LCD_WriteChar>
            while (*t)
 800159c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d1f2      	bne.n	800158a <lcd_handle+0x4c8>
        if (deviceMode == 2) { /* KULLANICI SECIM */
 80015a4:	f240 0314 	movw	r3, #20
 80015a8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015ac:	781b      	ldrb	r3, [r3, #0]
            total = 4u; /* Show all 4 menu items including Operating Mode */
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	bf14      	ite	ne
 80015b2:	2303      	movne	r3, #3
 80015b4:	2304      	moveq	r3, #4
        uint8_t sel = (uint8_t)(menuIndex % total);
 80015b6:	f240 52de 	movw	r2, #1502	@ 0x5de
 80015ba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80015be:	7816      	ldrb	r6, [r2, #0]
 80015c0:	fbb6 f2f3 	udiv	r2, r6, r3
 80015c4:	fb03 6612 	mls	r6, r3, r2, r6
 80015c8:	b2f6      	uxtb	r6, r6
        uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 80015ca:	18f2      	adds	r2, r6, r3
 80015cc:	3a01      	subs	r2, #1
 80015ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80015d2:	fb03 2711 	mls	r7, r3, r1, r2
 80015d6:	b2fc      	uxtb	r4, r7
        uint8_t next = (uint8_t)((sel + 1u) % total);
 80015d8:	46b2      	mov	sl, r6
 80015da:	f106 0901 	add.w	r9, r6, #1
 80015de:	fbb9 f2f3 	udiv	r2, r9, r3
 80015e2:	fb03 9912 	mls	r9, r3, r2, r9
 80015e6:	fa5f f889 	uxtb.w	r8, r9
        LCD_SetCursor(1, 1);
 80015ea:	2101      	movs	r1, #1
 80015ec:	4608      	mov	r0, r1
 80015ee:	f7ff fc17 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + prev));
 80015f2:	f104 0031 	add.w	r0, r4, #49	@ 0x31
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	f7ff fc23 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 80015fc:	202e      	movs	r0, #46	@ 0x2e
 80015fe:	f7ff fc20 	bl	8000e42 <LCD_WriteChar>
        if (deviceMode == 2) {
 8001602:	f240 0314 	movw	r3, #20
 8001606:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d048      	beq.n	80016a2 <lcd_handle+0x5e0>
            uint8_t realPrev = (prev >= 2) ? (prev + 1) : prev;
 8001610:	2c01      	cmp	r4, #1
 8001612:	bf84      	itt	hi
 8001614:	3401      	addhi	r4, #1
 8001616:	b2e4      	uxtbhi	r4, r4
            LCD_Print(items[realPrev]);
 8001618:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800161c:	f7ff fc16 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0, 2);
 8001620:	2102      	movs	r1, #2
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fbfc 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar('>');
 8001628:	203e      	movs	r0, #62	@ 0x3e
 800162a:	f7ff fc0a 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1, 2);
 800162e:	2102      	movs	r1, #2
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fbf5 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + sel));
 8001636:	f106 0031 	add.w	r0, r6, #49	@ 0x31
 800163a:	b2c0      	uxtb	r0, r0
 800163c:	f7ff fc01 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 8001640:	202e      	movs	r0, #46	@ 0x2e
 8001642:	f7ff fbfe 	bl	8000e42 <LCD_WriteChar>
        if (deviceMode == 2) {
 8001646:	f240 0314 	movw	r3, #20
 800164a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d02b      	beq.n	80016ac <lcd_handle+0x5ea>
            uint8_t realSel = (sel >= 2) ? (sel + 1) : sel;
 8001654:	2e01      	cmp	r6, #1
 8001656:	bf84      	itt	hi
 8001658:	3601      	addhi	r6, #1
 800165a:	b2f6      	uxtbhi	r6, r6
            LCD_Print(items[realSel]);
 800165c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8001660:	f7ff fbf4 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(1, 3);
 8001664:	2103      	movs	r1, #3
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff fbda 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + next));
 800166c:	f108 0031 	add.w	r0, r8, #49	@ 0x31
 8001670:	b2c0      	uxtb	r0, r0
 8001672:	f7ff fbe6 	bl	8000e42 <LCD_WriteChar>
        LCD_WriteChar('.');
 8001676:	202e      	movs	r0, #46	@ 0x2e
 8001678:	f7ff fbe3 	bl	8000e42 <LCD_WriteChar>
        if (deviceMode == 2) {
 800167c:	f240 0314 	movw	r3, #20
 8001680:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d015      	beq.n	80016b6 <lcd_handle+0x5f4>
            uint8_t realNext = (next >= 2) ? (next + 1) : next;
 800168a:	f1b8 0f01 	cmp.w	r8, #1
 800168e:	bf84      	itt	hi
 8001690:	f108 0801 	addhi.w	r8, r8, #1
 8001694:	fa5f f888 	uxtbhi.w	r8, r8
            LCD_Print(items[realNext]);
 8001698:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
 800169c:	f7ff fbd6 	bl	8000e4c <LCD_Print>
 80016a0:	e61c      	b.n	80012dc <lcd_handle+0x21a>
        LCD_Print(items[prev]);
 80016a2:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 80016a6:	f7ff fbd1 	bl	8000e4c <LCD_Print>
 80016aa:	e7b9      	b.n	8001620 <lcd_handle+0x55e>
        LCD_Print(items[sel]);
 80016ac:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
 80016b0:	f7ff fbcc 	bl	8000e4c <LCD_Print>
 80016b4:	e7d6      	b.n	8001664 <lcd_handle+0x5a2>
        LCD_Print(items[next]);
 80016b6:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 80016ba:	f7ff fbc7 	bl	8000e4c <LCD_Print>
 80016be:	e60d      	b.n	80012dc <lcd_handle+0x21a>
        LCD_SetCursor(1, 0);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff fbac 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80016c8:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 80016cc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80016d0:	f240 022e 	movw	r2, #46	@ 0x2e
 80016d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	685c      	ldr	r4, [r3, #4]
            while (*t) 
 80016e0:	7820      	ldrb	r0, [r4, #0]
 80016e2:	b160      	cbz	r0, 80016fe <lcd_handle+0x63c>
                if (c >= 'a' && c <= 'z') 
 80016e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 80016ec:	bf9c      	itt	ls
 80016ee:	3820      	subls	r0, #32
 80016f0:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 80016f2:	f7ff fba6 	bl	8000e42 <LCD_WriteChar>
            while (*t) 
 80016f6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d1f2      	bne.n	80016e4 <lcd_handle+0x622>
        if (operatingMode == MODE_CHARGER) {
 80016fe:	f240 7372 	movw	r3, #1906	@ 0x772
 8001702:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f040 80a1 	bne.w	8001850 <lcd_handle+0x78e>
            uint8_t sel = (uint8_t)(subIndex % total);
 800170e:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8001712:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001716:	781c      	ldrb	r4, [r3, #0]
 8001718:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 800171c:	2101      	movs	r1, #1
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff fb7e 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001724:	2c00      	cmp	r4, #0
 8001726:	d13c      	bne.n	80017a2 <lcd_handle+0x6e0>
            LCD_SetCursor(0,2);
 8001728:	2102      	movs	r1, #2
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fb78 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001730:	203e      	movs	r0, #62	@ 0x3e
 8001732:	f7ff fb86 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001736:	2102      	movs	r1, #2
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff fb71 	bl	8000e20 <LCD_SetCursor>
                LCD_Print(STR_BATV);
 800173e:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 8001742:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f7ff fb80 	bl	8000e4c <LCD_Print>
                    if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; }
 800174c:	f240 0334 	movw	r3, #52	@ 0x34
 8001750:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b18      	cmp	r3, #24
                    LCD_PrintUInt16(batv);
 8001758:	bf34      	ite	cc
 800175a:	200c      	movcc	r0, #12
 800175c:	2018      	movcs	r0, #24
 800175e:	f7ff fb82 	bl	8000e66 <LCD_PrintUInt16>
                    LCD_WriteChar('V');
 8001762:	2056      	movs	r0, #86	@ 0x56
 8001764:	f7ff fb6d 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001768:	2103      	movs	r1, #3
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fb58 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001770:	2103      	movs	r1, #3
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fb54 	bl	8000e20 <LCD_SetCursor>
                    LCD_Print(STR_CAPACITY);
 8001778:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 800177c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f7ff fb63 	bl	8000e4c <LCD_Print>
                    LCD_PrintUInt16_1dp(batInfo.batteryCap);
 8001786:	f240 0334 	movw	r3, #52	@ 0x34
 800178a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800178e:	8898      	ldrh	r0, [r3, #4]
 8001790:	f7ff fbe2 	bl	8000f58 <LCD_PrintUInt16_1dp>
                    LCD_Print("Ah"); 
 8001794:	f646 30a0 	movw	r0, #27552	@ 0x6ba0
 8001798:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800179c:	f7ff fb56 	bl	8000e4c <LCD_Print>
 80017a0:	e59c      	b.n	80012dc <lcd_handle+0x21a>
                LCD_SetCursor(1,1);
 80017a2:	2101      	movs	r1, #1
 80017a4:	4608      	mov	r0, r1
 80017a6:	f7ff fb3b 	bl	8000e20 <LCD_SetCursor>
                    LCD_Print(STR_BATV);
 80017aa:	f240 53a8 	movw	r3, #1448	@ 0x5a8
 80017ae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	f7ff fb4a 	bl	8000e4c <LCD_Print>
                        if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; }
 80017b8:	f240 0334 	movw	r3, #52	@ 0x34
 80017bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b18      	cmp	r3, #24
                        LCD_PrintUInt16(batv);
 80017c4:	bf34      	ite	cc
 80017c6:	200c      	movcc	r0, #12
 80017c8:	2018      	movcs	r0, #24
 80017ca:	f7ff fb4c 	bl	8000e66 <LCD_PrintUInt16>
                        LCD_WriteChar('V');
 80017ce:	2056      	movs	r0, #86	@ 0x56
 80017d0:	f7ff fb37 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,2);
 80017d4:	2102      	movs	r1, #2
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fb22 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 80017dc:	203e      	movs	r0, #62	@ 0x3e
 80017de:	f7ff fb30 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80017e2:	2102      	movs	r1, #2
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fb1b 	bl	8000e20 <LCD_SetCursor>
                LCD_Print(STR_CAPACITY);
 80017ea:	f240 53a4 	movw	r3, #1444	@ 0x5a4
 80017ee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	f7ff fb2a 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 80017f8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80017fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b9eb      	cbnz	r3, 8001840 <lcd_handle+0x77e>
                LCD_PrintUInt16_1dp(batInfo.batteryCap);
 8001804:	f240 0334 	movw	r3, #52	@ 0x34
 8001808:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800180c:	8898      	ldrh	r0, [r3, #4]
 800180e:	f7ff fba3 	bl	8000f58 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 8001812:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001816:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b9a3      	cbnz	r3, 8001848 <lcd_handle+0x786>
                LCD_Print("Ah");
 800181e:	f646 30a0 	movw	r0, #27552	@ 0x6ba0
 8001822:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001826:	f7ff fb11 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 800182a:	2103      	movs	r1, #3
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff faf7 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 8001832:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 8001836:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800183a:	f7ff fb07 	bl	8000e4c <LCD_Print>
 800183e:	e54d      	b.n	80012dc <lcd_handle+0x21a>
                if (isEditing) LCD_WriteChar('[');
 8001840:	205b      	movs	r0, #91	@ 0x5b
 8001842:	f7ff fafe 	bl	8000e42 <LCD_WriteChar>
 8001846:	e7dd      	b.n	8001804 <lcd_handle+0x742>
                if (isEditing) LCD_WriteChar(']');
 8001848:	205d      	movs	r0, #93	@ 0x5d
 800184a:	f7ff fafa 	bl	8000e42 <LCD_WriteChar>
 800184e:	e7e6      	b.n	800181e <lcd_handle+0x75c>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001850:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8001854:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001858:	781c      	ldrb	r4, [r3, #0]
 800185a:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 800185e:	2101      	movs	r1, #1
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fadd 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001866:	2c00      	cmp	r4, #0
 8001868:	d14b      	bne.n	8001902 <lcd_handle+0x840>
                LCD_Print("                    ");
 800186a:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 800186e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001872:	f7ff faeb 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001876:	2102      	movs	r1, #2
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fad1 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 800187e:	203e      	movs	r0, #62	@ 0x3e
 8001880:	f7ff fadf 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001884:	2102      	movs	r1, #2
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff faca 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("V set:");
 800188c:	f646 30bc 	movw	r0, #27580	@ 0x6bbc
 8001890:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001894:	f7ff fada 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 8001898:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800189c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d177      	bne.n	8001996 <lcd_handle+0x8d4>
                LCD_PrintUInt16_1dp(outputVSet_dV);
 80018a6:	f240 03c6 	movw	r3, #198	@ 0xc6
 80018aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018ae:	8818      	ldrh	r0, [r3, #0]
 80018b0:	f7ff fb52 	bl	8000f58 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 80018b4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80018b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d16d      	bne.n	800199e <lcd_handle+0x8dc>
                LCD_WriteChar('V');
 80018c2:	2056      	movs	r0, #86	@ 0x56
 80018c4:	f7ff fabd 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 80018c8:	2103      	movs	r1, #3
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff faa8 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 80018d0:	2103      	movs	r1, #3
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff faa4 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("I max:");
 80018d8:	f646 30c4 	movw	r0, #27588	@ 0x6bc4
 80018dc:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80018e0:	f7ff fab4 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(outputIMax_dA);
 80018e4:	f240 03c4 	movw	r3, #196	@ 0xc4
 80018e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018ec:	8818      	ldrh	r0, [r3, #0]
 80018ee:	f7ff fb33 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar(CH_CURR);
 80018f2:	f240 0302 	movw	r3, #2
 80018f6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018fa:	7818      	ldrb	r0, [r3, #0]
 80018fc:	f7ff faa1 	bl	8000e42 <LCD_WriteChar>
 8001900:	e4ec      	b.n	80012dc <lcd_handle+0x21a>
                LCD_SetCursor(1,1);
 8001902:	2101      	movs	r1, #1
 8001904:	4608      	mov	r0, r1
 8001906:	f7ff fa8b 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("V set:");
 800190a:	f646 30bc 	movw	r0, #27580	@ 0x6bbc
 800190e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001912:	f7ff fa9b 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(outputVSet_dV);
 8001916:	f240 03c6 	movw	r3, #198	@ 0xc6
 800191a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800191e:	8818      	ldrh	r0, [r3, #0]
 8001920:	f7ff fb1a 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('V');
 8001924:	2056      	movs	r0, #86	@ 0x56
 8001926:	f7ff fa8c 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,2);
 800192a:	2102      	movs	r1, #2
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fa77 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001932:	203e      	movs	r0, #62	@ 0x3e
 8001934:	f7ff fa85 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001938:	2102      	movs	r1, #2
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fa70 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("I max:");
 8001940:	f646 30c4 	movw	r0, #27588	@ 0x6bc4
 8001944:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001948:	f7ff fa80 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 800194c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001950:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	bb33      	cbnz	r3, 80019a6 <lcd_handle+0x8e4>
                LCD_PrintUInt16_1dp(outputIMax_dA);
 8001958:	f240 03c4 	movw	r3, #196	@ 0xc4
 800195c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001960:	8818      	ldrh	r0, [r3, #0]
 8001962:	f7ff faf9 	bl	8000f58 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 8001966:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800196a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b9eb      	cbnz	r3, 80019ae <lcd_handle+0x8ec>
                LCD_WriteChar(CH_CURR);
 8001972:	f240 0302 	movw	r3, #2
 8001976:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800197a:	7818      	ldrb	r0, [r3, #0]
 800197c:	f7ff fa61 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001980:	2103      	movs	r1, #3
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fa4c 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 8001988:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 800198c:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001990:	f7ff fa5c 	bl	8000e4c <LCD_Print>
 8001994:	e4a2      	b.n	80012dc <lcd_handle+0x21a>
                if (isEditing) LCD_WriteChar('[');
 8001996:	205b      	movs	r0, #91	@ 0x5b
 8001998:	f7ff fa53 	bl	8000e42 <LCD_WriteChar>
 800199c:	e783      	b.n	80018a6 <lcd_handle+0x7e4>
                if (isEditing) LCD_WriteChar(']');
 800199e:	205d      	movs	r0, #93	@ 0x5d
 80019a0:	f7ff fa4f 	bl	8000e42 <LCD_WriteChar>
 80019a4:	e78d      	b.n	80018c2 <lcd_handle+0x800>
                if (isEditing) LCD_WriteChar('[');
 80019a6:	205b      	movs	r0, #91	@ 0x5b
 80019a8:	f7ff fa4b 	bl	8000e42 <LCD_WriteChar>
 80019ac:	e7d4      	b.n	8001958 <lcd_handle+0x896>
                if (isEditing) LCD_WriteChar(']');
 80019ae:	205d      	movs	r0, #93	@ 0x5d
 80019b0:	f7ff fa47 	bl	8000e42 <LCD_WriteChar>
 80019b4:	e7dd      	b.n	8001972 <lcd_handle+0x8b0>
        LCD_SetCursor(1,0);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff fa31 	bl	8000e20 <LCD_SetCursor>
            const char *t = OUTCTL_TITLE_LANG[lcdLangId][operatingMode];
 80019be:	f247 0350 	movw	r3, #28752	@ 0x7050
 80019c2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80019c6:	f240 022e 	movw	r2, #46	@ 0x2e
 80019ca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80019ce:	7811      	ldrb	r1, [r2, #0]
 80019d0:	f240 7272 	movw	r2, #1906	@ 0x772
 80019d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019de:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
            while (*t) { char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 80019e2:	7820      	ldrb	r0, [r4, #0]
 80019e4:	b160      	cbz	r0, 8001a00 <lcd_handle+0x93e>
 80019e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b19      	cmp	r3, #25
 80019ee:	bf9c      	itt	ls
 80019f0:	3820      	subls	r0, #32
 80019f2:	b2c0      	uxtbls	r0, r0
 80019f4:	f7ff fa25 	bl	8000e42 <LCD_WriteChar>
 80019f8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d1f2      	bne.n	80019e6 <lcd_handle+0x924>
        LCD_SetCursor(0,1);
 8001a00:	2101      	movs	r1, #1
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff fa0c 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("                    ");
 8001a08:	f646 34a4 	movw	r4, #27556	@ 0x6ba4
 8001a0c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff fa1b 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0,2);
 8001a16:	2102      	movs	r1, #2
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fa01 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar('>');
 8001a1e:	203e      	movs	r0, #62	@ 0x3e
 8001a20:	f7ff fa0f 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1,2);
 8001a24:	2102      	movs	r1, #2
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff f9fa 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(OUTCTL_ITEM_LANG[lcdLangId][operatingMode]);
 8001a2c:	f247 0338 	movw	r3, #28728	@ 0x7038
 8001a30:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001a34:	f240 022e 	movw	r2, #46	@ 0x2e
 8001a38:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001a3c:	7811      	ldrb	r1, [r2, #0]
 8001a3e:	f240 7272 	movw	r2, #1906	@ 0x772
 8001a42:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001a46:	7812      	ldrb	r2, [r2, #0]
 8001a48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a50:	f7ff f9fc 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0,3);
 8001a54:	2103      	movs	r1, #3
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff f9e2 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("                    ");
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff f9f5 	bl	8000e4c <LCD_Print>
        break;
 8001a62:	e43b      	b.n	80012dc <lcd_handle+0x21a>
        LCD_SetCursor(1,0);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff f9da 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001a6c:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001a70:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001a74:	f240 022e 	movw	r2, #46	@ 0x2e
 8001a78:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	68dc      	ldr	r4, [r3, #12]
            while (*t)
 8001a84:	7820      	ldrb	r0, [r4, #0]
 8001a86:	b160      	cbz	r0, 8001aa2 <lcd_handle+0x9e0>
                if (c >= 'a' && c <= 'z')
 8001a88:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001a90:	bf9c      	itt	ls
 8001a92:	3820      	subls	r0, #32
 8001a94:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001a96:	f7ff f9d4 	bl	8000e42 <LCD_WriteChar>
            while (*t)
 8001a9a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d1f2      	bne.n	8001a88 <lcd_handle+0x9c6>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001aa2:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8001aa6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001aaa:	781c      	ldrb	r4, [r3, #0]
 8001aac:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff f9b4 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001ab8:	bbd4      	cbnz	r4, 8001b30 <lcd_handle+0xa6e>
                LCD_Print("                    ");
 8001aba:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 8001abe:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001ac2:	f7ff f9c3 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff f9a9 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001ace:	203e      	movs	r0, #62	@ 0x3e
 8001ad0:	f7ff f9b7 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff f9a2 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001adc:	2031      	movs	r0, #49	@ 0x31
 8001ade:	f7ff f9b0 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001ae2:	202e      	movs	r0, #46	@ 0x2e
 8001ae4:	f7ff f9ad 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001ae8:	f247 04f8 	movw	r4, #28920	@ 0x70f8
 8001aec:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001af0:	f240 052e 	movw	r5, #46	@ 0x2e
 8001af4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001af8:	782b      	ldrb	r3, [r5, #0]
 8001afa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME)); 
 8001afe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001b00:	f7ff f9a4 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 8001b04:	2103      	movs	r1, #3
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff f98a 	bl	8000e20 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff f986 	bl	8000e20 <LCD_SetCursor>
                LCD_WriteChar('2');
 8001b14:	2032      	movs	r0, #50	@ 0x32
 8001b16:	f7ff f994 	bl	8000e42 <LCD_WriteChar>
                LCD_WriteChar('.');
 8001b1a:	202e      	movs	r0, #46	@ 0x2e
 8001b1c:	f7ff f991 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001b20:	782b      	ldrb	r3, [r5, #0]
 8001b22:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_SUPPLY_NAME));
 8001b26:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001b28:	f7ff f990 	bl	8000e4c <LCD_Print>
 8001b2c:	f7ff bbd6 	b.w	80012dc <lcd_handle+0x21a>
                LCD_SetCursor(1,1); 
 8001b30:	2101      	movs	r1, #1
 8001b32:	4608      	mov	r0, r1
 8001b34:	f7ff f974 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001b38:	2031      	movs	r0, #49	@ 0x31
 8001b3a:	f7ff f982 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001b3e:	202e      	movs	r0, #46	@ 0x2e
 8001b40:	f7ff f97f 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001b44:	f247 04f8 	movw	r4, #28920	@ 0x70f8
 8001b48:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001b4c:	f240 052e 	movw	r5, #46	@ 0x2e
 8001b50:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001b54:	782b      	ldrb	r3, [r5, #0]
 8001b56:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME));
 8001b5a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001b5c:	f7ff f976 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001b60:	2102      	movs	r1, #2
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff f95c 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001b68:	203e      	movs	r0, #62	@ 0x3e
 8001b6a:	f7ff f96a 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001b6e:	2102      	movs	r1, #2
 8001b70:	2001      	movs	r0, #1
 8001b72:	f7ff f955 	bl	8000e20 <LCD_SetCursor>
				LCD_WriteChar('2'); 
 8001b76:	2032      	movs	r0, #50	@ 0x32
 8001b78:	f7ff f963 	bl	8000e42 <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001b7c:	202e      	movs	r0, #46	@ 0x2e
 8001b7e:	f7ff f960 	bl	8000e42 <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001b82:	782b      	ldrb	r3, [r5, #0]
 8001b84:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_SUPPLY_NAME)); 
 8001b88:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001b8a:	f7ff f95f 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,3);
 8001b8e:	2103      	movs	r1, #3
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff f945 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("                    ");
 8001b96:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 8001b9a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001b9e:	f7ff f955 	bl	8000e4c <LCD_Print>
 8001ba2:	f7ff bb9b 	b.w	80012dc <lcd_handle+0x21a>
        LCD_SetCursor(1,0);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff f939 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001bae:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001bb2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001bb6:	f240 022e 	movw	r2, #46	@ 0x2e
 8001bba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	691c      	ldr	r4, [r3, #16]
            while (*t) { char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8001bc6:	7820      	ldrb	r0, [r4, #0]
 8001bc8:	b160      	cbz	r0, 8001be4 <lcd_handle+0xb22>
 8001bca:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b19      	cmp	r3, #25
 8001bd2:	bf9c      	itt	ls
 8001bd4:	3820      	subls	r0, #32
 8001bd6:	b2c0      	uxtbls	r0, r0
 8001bd8:	f7ff f933 	bl	8000e42 <LCD_WriteChar>
 8001bdc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d1f2      	bne.n	8001bca <lcd_handle+0xb08>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001be4:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8001be8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001bec:	781d      	ldrb	r5, [r3, #0]
 8001bee:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8001bf2:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8001bf6:	fba2 3105 	umull	r3, r1, r2, r5
 8001bfa:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8001bfe:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8001c02:	1aed      	subs	r5, r5, r3
 8001c04:	b2ed      	uxtb	r5, r5
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8001c06:	1cab      	adds	r3, r5, #2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	fba2 1203 	umull	r1, r2, r2, r3
 8001c0e:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8001c12:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	f7ff f8ff 	bl	8000e20 <LCD_SetCursor>
            if (prev == 0) {
 8001c22:	2c00      	cmp	r4, #0
 8001c24:	d03f      	beq.n	8001ca6 <lcd_handle+0xbe4>
            else if (prev == 1) {
 8001c26:	2c01      	cmp	r4, #1
 8001c28:	d053      	beq.n	8001cd2 <lcd_handle+0xc10>
    return UI_STR_TABLE[lcdLangId][id];
 8001c2a:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001c2e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001c32:	f240 022e 	movw	r2, #46	@ 0x2e
 8001c36:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001c40:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c42:	f7ff f903 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8001c46:	2102      	movs	r1, #2
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff f8e9 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001c4e:	203e      	movs	r0, #62	@ 0x3e
 8001c50:	f7ff f8f7 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7ff f8e2 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 8001c5c:	2d00      	cmp	r5, #0
 8001c5e:	d051      	beq.n	8001d04 <lcd_handle+0xc42>
            } else if (sel == 1) {
 8001c60:	2d01      	cmp	r5, #1
 8001c62:	d07a      	beq.n	8001d5a <lcd_handle+0xc98>
    return UI_STR_TABLE[lcdLangId][id];
 8001c64:	f247 04f8 	movw	r4, #28920	@ 0x70f8
 8001c68:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001c6c:	f240 052e 	movw	r5, #46	@ 0x2e
 8001c70:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001c74:	782b      	ldrb	r3, [r5, #0]
 8001c76:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001c7a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001c7c:	f7ff f8e6 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 8001c80:	2103      	movs	r1, #3
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff f8cc 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001c88:	782b      	ldrb	r3, [r5, #0]
 8001c8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001c8e:	6a18      	ldr	r0, [r3, #32]
 8001c90:	f7ff f8dc 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001c94:	f240 5394 	movw	r3, #1428	@ 0x594
 8001c98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f7ff f8d5 	bl	8000e4c <LCD_Print>
 8001ca2:	f7ff bb1b 	b.w	80012dc <lcd_handle+0x21a>
    return UI_STR_TABLE[lcdLangId][id];
 8001ca6:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001caa:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001cae:	f240 022e 	movw	r2, #46	@ 0x2e
 8001cb2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001cb6:	7812      	ldrb	r2, [r2, #0]
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001cbc:	6a18      	ldr	r0, [r3, #32]
 8001cbe:	f7ff f8c5 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001cc2:	f240 5394 	movw	r3, #1428	@ 0x594
 8001cc6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f7ff f8be 	bl	8000e4c <LCD_Print>
 8001cd0:	e7b9      	b.n	8001c46 <lcd_handle+0xb84>
    return UI_STR_TABLE[lcdLangId][id];
 8001cd2:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001cd6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001cda:	f240 022e 	movw	r2, #46	@ 0x2e
 8001cde:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001ce8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001cea:	f7ff f8af 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(brightness);
 8001cee:	f240 030c 	movw	r3, #12
 8001cf2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001cf6:	7818      	ldrb	r0, [r3, #0]
 8001cf8:	f7ff f8b5 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8001cfc:	2025      	movs	r0, #37	@ 0x25
 8001cfe:	f7ff f8a0 	bl	8000e42 <LCD_WriteChar>
 8001d02:	e7a0      	b.n	8001c46 <lcd_handle+0xb84>
    return UI_STR_TABLE[lcdLangId][id];
 8001d04:	f247 04f8 	movw	r4, #28920	@ 0x70f8
 8001d08:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001d0c:	f240 052e 	movw	r5, #46	@ 0x2e
 8001d10:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001d14:	782b      	ldrb	r3, [r5, #0]
 8001d16:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001d1a:	6a18      	ldr	r0, [r3, #32]
 8001d1c:	f7ff f896 	bl	8000e4c <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001d20:	f240 5394 	movw	r3, #1428	@ 0x594
 8001d24:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	f7ff f88f 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 8001d2e:	2103      	movs	r1, #3
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff f875 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001d36:	782b      	ldrb	r3, [r5, #0]
 8001d38:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001d3c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001d3e:	f7ff f885 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(brightness);
 8001d42:	f240 030c 	movw	r3, #12
 8001d46:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d4a:	7818      	ldrb	r0, [r3, #0]
 8001d4c:	f7ff f88b 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8001d50:	2025      	movs	r0, #37	@ 0x25
 8001d52:	f7ff f876 	bl	8000e42 <LCD_WriteChar>
 8001d56:	f7ff bac1 	b.w	80012dc <lcd_handle+0x21a>
    return UI_STR_TABLE[lcdLangId][id];
 8001d5a:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001d5e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d62:	f240 022e 	movw	r2, #46	@ 0x2e
 8001d66:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001d70:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001d72:	f7ff f86b 	bl	8000e4c <LCD_Print>
                if (isEditing)
 8001d76:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d7a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	bb1b      	cbnz	r3, 8001dca <lcd_handle+0xd08>
                LCD_PrintUInt16(brightness);
 8001d82:	f240 030c 	movw	r3, #12
 8001d86:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d8a:	7818      	ldrb	r0, [r3, #0]
 8001d8c:	f7ff f86b 	bl	8000e66 <LCD_PrintUInt16>
                if (isEditing)
 8001d90:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d94:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b9d3      	cbnz	r3, 8001dd2 <lcd_handle+0xd10>
                LCD_WriteChar('%');
 8001d9c:	2025      	movs	r0, #37	@ 0x25
 8001d9e:	f7ff f850 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,3);
 8001da2:	2103      	movs	r1, #3
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff f83b 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001daa:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001dae:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001db2:	f240 022e 	movw	r2, #46	@ 0x2e
 8001db6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001dc0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001dc2:	f7ff f843 	bl	8000e4c <LCD_Print>
 8001dc6:	f7ff ba89 	b.w	80012dc <lcd_handle+0x21a>
                    LCD_WriteChar('[');
 8001dca:	205b      	movs	r0, #91	@ 0x5b
 8001dcc:	f7ff f839 	bl	8000e42 <LCD_WriteChar>
 8001dd0:	e7d7      	b.n	8001d82 <lcd_handle+0xcc0>
                    LCD_WriteChar(']');
 8001dd2:	205d      	movs	r0, #93	@ 0x5d
 8001dd4:	f7ff f835 	bl	8000e42 <LCD_WriteChar>
 8001dd8:	e7e0      	b.n	8001d9c <lcd_handle+0xcda>
    return UI_STR_TABLE[lcdLangId][id];
 8001dda:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001dde:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001de2:	f240 022e 	movw	r2, #46	@ 0x2e
 8001de6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
            while (src[n] && n < 20) 
 8001df2:	780b      	ldrb	r3, [r1, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8092 	beq.w	8001f1e <lcd_handle+0xe5c>
 8001dfa:	ac01      	add	r4, sp, #4
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	e000      	b.n	8001e02 <lcd_handle+0xd40>
 8001e00:	4610      	mov	r0, r2
                if (c >= 'a' && c <= 'z') 
 8001e02:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	2a19      	cmp	r2, #25
                    c = (char)(c - 'a' + 'A');
 8001e0a:	bf9c      	itt	ls
 8001e0c:	3b20      	subls	r3, #32
 8001e0e:	b2db      	uxtbls	r3, r3
                up[n] = c; 
 8001e10:	f804 3b01 	strb.w	r3, [r4], #1
                n++; 
 8001e14:	fa5f fc80 	uxtb.w	ip, r0
            while (src[n] && n < 20) 
 8001e18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001e1c:	b113      	cbz	r3, 8001e24 <lcd_handle+0xd62>
 8001e1e:	1c42      	adds	r2, r0, #1
 8001e20:	2814      	cmp	r0, #20
 8001e22:	d1ed      	bne.n	8001e00 <lcd_handle+0xd3e>
            up[n]='\0';
 8001e24:	f10c 0328 	add.w	r3, ip, #40	@ 0x28
 8001e28:	eb0d 0c03 	add.w	ip, sp, r3
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f80c 1c24 	strb.w	r1, [ip, #-36]
            uint8_t col = (uint8_t)((20u - n) / 2u);
 8001e32:	f1c0 0014 	rsb	r0, r0, #20
            LCD_SetCursor(col, 0);
 8001e36:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8001e3a:	f7fe fff1 	bl	8000e20 <LCD_SetCursor>
            LCD_Print(up);
 8001e3e:	a801      	add	r0, sp, #4
 8001e40:	f7ff f804 	bl	8000e4c <LCD_Print>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8001e44:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001e48:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <lcd_handle+0xe62>
                mfgPinError = 0; msg = ui_get(UI_STR_ENTER_PIN);
 8001e52:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8001e56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    return UI_STR_TABLE[lcdLangId][id];
 8001e5e:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001e62:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001e66:	f240 022e 	movw	r2, #46	@ 0x2e
 8001e6a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
            uint8_t len=0; while (msg[len] && len<20) len++;
 8001e76:	782b      	ldrb	r3, [r5, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d069      	beq.n	8001f50 <lcd_handle+0xe8e>
 8001e7c:	f105 0014 	add.w	r0, r5, #20
 8001e80:	462b      	mov	r3, r5
 8001e82:	f1c5 0101 	rsb	r1, r5, #1
 8001e86:	18cc      	adds	r4, r1, r3
 8001e88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001e8c:	b10a      	cbz	r2, 8001e92 <lcd_handle+0xdd0>
 8001e8e:	4283      	cmp	r3, r0
 8001e90:	d1f9      	bne.n	8001e86 <lcd_handle+0xdc4>
            LCD_SetCursor(0, 1); LCD_Print("                    "); /* clear line */
 8001e92:	2101      	movs	r1, #1
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7fe ffc3 	bl	8000e20 <LCD_SetCursor>
 8001e9a:	f646 36a4 	movw	r6, #27556	@ 0x6ba4
 8001e9e:	f6c0 0600 	movt	r6, #2048	@ 0x800
 8001ea2:	4630      	mov	r0, r6
 8001ea4:	f7fe ffd2 	bl	8000e4c <LCD_Print>
            uint8_t col = (uint8_t)((20u - len) / 2u);
 8001ea8:	f1c4 0014 	rsb	r0, r4, #20
            LCD_SetCursor(col, 1); LCD_Print(msg);
 8001eac:	2101      	movs	r1, #1
 8001eae:	f3c0 0047 	ubfx	r0, r0, #1, #8
 8001eb2:	f7fe ffb5 	bl	8000e20 <LCD_SetCursor>
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f7fe ffc8 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0, 2);
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe ffae 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("                    ");
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7fe ffc1 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(start, 2);
 8001eca:	2102      	movs	r1, #2
 8001ecc:	2008      	movs	r0, #8
 8001ece:	f7fe ffa7 	bl	8000e20 <LCD_SetCursor>
            for (uint8_t i = 0; i < 4; i++)
 8001ed2:	f240 54b0 	movw	r4, #1456	@ 0x5b0
 8001ed6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8001eda:	1d25      	adds	r5, r4, #4
                LCD_WriteChar((char)('0' + mfgPinInput[i]));
 8001edc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001ee0:	3030      	adds	r0, #48	@ 0x30
 8001ee2:	b2c0      	uxtb	r0, r0
 8001ee4:	f7fe ffad 	bl	8000e42 <LCD_WriteChar>
            for (uint8_t i = 0; i < 4; i++)
 8001ee8:	42ac      	cmp	r4, r5
 8001eea:	d1f7      	bne.n	8001edc <lcd_handle+0xe1a>
            LCD_SetCursor(0, 3);
 8001eec:	2103      	movs	r1, #3
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe ff96 	bl	8000e20 <LCD_SetCursor>
            LCD_Print("                    ");
 8001ef4:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 8001ef8:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001efc:	f7fe ffa6 	bl	8000e4c <LCD_Print>
            LCD_SetCursor((uint8_t)(start + mfgPinPos), 3);
 8001f00:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8001f04:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f08:	7818      	ldrb	r0, [r3, #0]
 8001f0a:	3008      	adds	r0, #8
 8001f0c:	2103      	movs	r1, #3
 8001f0e:	b2c0      	uxtb	r0, r0
 8001f10:	f7fe ff86 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('^');
 8001f14:	205e      	movs	r0, #94	@ 0x5e
 8001f16:	f7fe ff94 	bl	8000e42 <LCD_WriteChar>
        break;
 8001f1a:	f7ff b9df 	b.w	80012dc <lcd_handle+0x21a>
            uint8_t n = 0; 
 8001f1e:	469c      	mov	ip, r3
            while (src[n] && n < 20) 
 8001f20:	2000      	movs	r0, #0
 8001f22:	e77f      	b.n	8001e24 <lcd_handle+0xd62>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8001f24:	f003 f8b7 	bl	8005096 <HAL_GetTick>
 8001f28:	f240 53d0 	movw	r3, #1488	@ 0x5d0
 8001f2c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4298      	cmp	r0, r3
 8001f34:	d28d      	bcs.n	8001e52 <lcd_handle+0xd90>
    return UI_STR_TABLE[lcdLangId][id];
 8001f36:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001f3a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001f3e:	f240 022e 	movw	r2, #46	@ 0x2e
 8001f42:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
                msg = ui_get(UI_STR_WRONG_PIN);
 8001f4e:	e792      	b.n	8001e76 <lcd_handle+0xdb4>
            uint8_t len=0; while (msg[len] && len<20) len++;
 8001f50:	2400      	movs	r4, #0
 8001f52:	e79e      	b.n	8001e92 <lcd_handle+0xdd0>
        LCD_SetCursor(1,0);
 8001f54:	2100      	movs	r1, #0
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7fe ff62 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001f5c:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8001f60:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001f64:	f240 022e 	movw	r2, #46	@ 0x2e
 8001f68:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f72:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
            while(*t)
 8001f74:	7820      	ldrb	r0, [r4, #0]
 8001f76:	b160      	cbz	r0, 8001f92 <lcd_handle+0xed0>
                if (c >= 'a' && c <= 'z') 
 8001f78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001f80:	bf9c      	itt	ls
 8001f82:	3820      	subls	r0, #32
 8001f84:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001f86:	f7fe ff5c 	bl	8000e42 <LCD_WriteChar>
            while(*t)
 8001f8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d1f2      	bne.n	8001f78 <lcd_handle+0xeb6>
            UiStrId ids[5] = { UI_STR_MFG_COMPANY, UI_STR_MFG_GAIN, UI_STR_MFG_OFFSET, UI_STR_MFG_LIMITS, UI_STR_MFG_MODE };
 8001f92:	231a      	movs	r3, #26
 8001f94:	f88d 3004 	strb.w	r3, [sp, #4]
 8001f98:	231b      	movs	r3, #27
 8001f9a:	f88d 3005 	strb.w	r3, [sp, #5]
 8001f9e:	231c      	movs	r3, #28
 8001fa0:	f88d 3006 	strb.w	r3, [sp, #6]
 8001fa4:	231d      	movs	r3, #29
 8001fa6:	f88d 3007 	strb.w	r3, [sp, #7]
 8001faa:	231e      	movs	r3, #30
 8001fac:	f88d 3008 	strb.w	r3, [sp, #8]
            uint8_t sel = (uint8_t)(subIndex % total);
 8001fb0:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8001fb4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f64c 46cd 	movw	r6, #52429	@ 0xcccd
 8001fbe:	f6cc 46cc 	movt	r6, #52428	@ 0xcccc
 8001fc2:	fba6 2103 	umull	r2, r1, r6, r3
 8001fc6:	f001 02fc 	and.w	r2, r1, #252	@ 0xfc
 8001fca:	eb02 0291 	add.w	r2, r2, r1, lsr #2
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	f7fe ff23 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001fda:	f247 05f8 	movw	r5, #28920	@ 0x70f8
 8001fde:	f6c0 0500 	movt	r5, #2048	@ 0x800
 8001fe2:	f240 072e 	movw	r7, #46	@ 0x2e
 8001fe6:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8001fea:	7838      	ldrb	r0, [r7, #0]
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8001fec:	1d23      	adds	r3, r4, #4
 8001fee:	fba6 2103 	umull	r2, r1, r6, r3
 8001ff2:	f401 72fe 	and.w	r2, r1, #508	@ 0x1fc
 8001ff6:	eb02 0291 	add.w	r2, r2, r1, lsr #2
 8001ffa:	1a9b      	subs	r3, r3, r2
            LCD_Print(ui_get(ids[prev]));
 8001ffc:	3328      	adds	r3, #40	@ 0x28
 8001ffe:	446b      	add	r3, sp
    return UI_STR_TABLE[lcdLangId][id];
 8002000:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002004:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            LCD_Print(ui_get(ids[prev]));
 8002008:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800200c:	f7fe ff1e 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 8002010:	2102      	movs	r1, #2
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe ff04 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8002018:	203e      	movs	r0, #62	@ 0x3e
 800201a:	f7fe ff12 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 800201e:	2102      	movs	r1, #2
 8002020:	2001      	movs	r0, #1
 8002022:	f7fe fefd 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002026:	783b      	ldrb	r3, [r7, #0]
            LCD_Print(ui_get(ids[sel]));
 8002028:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800202c:	446a      	add	r2, sp
    return UI_STR_TABLE[lcdLangId][id];
 800202e:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8002032:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
            LCD_Print(ui_get(ids[sel]));
 8002036:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800203a:	f7fe ff07 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 800203e:	2103      	movs	r1, #3
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe feed 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002046:	7838      	ldrb	r0, [r7, #0]
            uint8_t next = (uint8_t)((sel + 1u) % total);
 8002048:	1c63      	adds	r3, r4, #1
 800204a:	fba6 1203 	umull	r1, r2, r6, r3
 800204e:	f402 71fe 	and.w	r1, r2, #508	@ 0x1fc
 8002052:	eb01 0292 	add.w	r2, r1, r2, lsr #2
 8002056:	1a9b      	subs	r3, r3, r2
            LCD_Print(ui_get(ids[next]));
 8002058:	3328      	adds	r3, #40	@ 0x28
 800205a:	446b      	add	r3, sp
    return UI_STR_TABLE[lcdLangId][id];
 800205c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8002060:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
            LCD_Print(ui_get(ids[next]));
 8002064:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002068:	f7fe fef0 	bl	8000e4c <LCD_Print>
        break;
 800206c:	f7ff b936 	b.w	80012dc <lcd_handle+0x21a>
        LCD_SetCursor(1,0);
 8002070:	2100      	movs	r1, #0
 8002072:	2001      	movs	r0, #1
 8002074:	f7fe fed4 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002078:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 800207c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002080:	f240 022e 	movw	r2, #46	@ 0x2e
 8002084:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8002090:	7820      	ldrb	r0, [r4, #0]
 8002092:	b160      	cbz	r0, 80020ae <lcd_handle+0xfec>
 8002094:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b19      	cmp	r3, #25
 800209c:	bf9c      	itt	ls
 800209e:	3820      	subls	r0, #32
 80020a0:	b2c0      	uxtbls	r0, r0
 80020a2:	f7fe fece 	bl	8000e42 <LCD_WriteChar>
 80020a6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80020aa:	2800      	cmp	r0, #0
 80020ac:	d1f2      	bne.n	8002094 <lcd_handle+0xfd2>
        if (!isEditing)
 80020ae:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80020b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b9db      	cbnz	r3, 80020f2 <lcd_handle+0x1030>
 80020ba:	f240 0317 	movw	r3, #23
 80020be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020c2:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80020c6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80020ca:	f103 0015 	add.w	r0, r3, #21
            for (int i=0;i<21;i++){ companyBackup[i] = companyName[i]; }
 80020ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80020d2:	f802 1f01 	strb.w	r1, [r2, #1]!
 80020d6:	4283      	cmp	r3, r0
 80020d8:	d1f9      	bne.n	80020ce <lcd_handle+0x100c>
            companyEditPos = 0;
 80020da:	f240 53b6 	movw	r3, #1462	@ 0x5b6
 80020de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
            isEditing = 1u;
 80020e6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80020ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
        LCD_SetCursor(0,1); LCD_Print("                    ");
 80020f2:	2101      	movs	r1, #1
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7fe fe93 	bl	8000e20 <LCD_SetCursor>
 80020fa:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 80020fe:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002102:	f7fe fea3 	bl	8000e4c <LCD_Print>
            int len = 0; while (companyName[len] && len < 20) len++;
 8002106:	f240 0318 	movw	r3, #24
 800210a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d062      	beq.n	80021da <lcd_handle+0x1118>
 8002114:	f240 0018 	movw	r0, #24
 8002118:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800211c:	4602      	mov	r2, r0
 800211e:	2300      	movs	r3, #0
 8002120:	469c      	mov	ip, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002128:	b121      	cbz	r1, 8002134 <lcd_handle+0x1072>
 800212a:	2b14      	cmp	r3, #20
 800212c:	d1f8      	bne.n	8002120 <lcd_handle+0x105e>
 800212e:	f04f 0c13 	mov.w	ip, #19
 8002132:	e003      	b.n	800213c <lcd_handle+0x107a>
            for (int i=0;i<len && idx < 20; i++) {
 8002134:	2b00      	cmp	r3, #0
 8002136:	bfd8      	it	le
 8002138:	2200      	movle	r2, #0
 800213a:	dd1a      	ble.n	8002172 <lcd_handle+0x10b0>
 800213c:	ac01      	add	r4, sp, #4
 800213e:	2100      	movs	r1, #0
 8002140:	e00b      	b.n	800215a <lcd_handle+0x1098>
                if (c < 'A' || c > 'Z') c = ' ';
 8002142:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	2a1a      	cmp	r2, #26
 800214a:	bf28      	it	cs
 800214c:	2320      	movcs	r3, #32
                line[idx++] = c;
 800214e:	1c4a      	adds	r2, r1, #1
 8002150:	f804 3b01 	strb.w	r3, [r4], #1
            for (int i=0;i<len && idx < 20; i++) {
 8002154:	458c      	cmp	ip, r1
 8002156:	dd0a      	ble.n	800216e <lcd_handle+0x10ac>
 8002158:	4611      	mov	r1, r2
                char c = companyName[i];
 800215a:	f810 3b01 	ldrb.w	r3, [r0], #1
                if (c >= 'a' && c <= 'z') c = (char)(c - 'a' + 'A');
 800215e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	2a19      	cmp	r2, #25
 8002166:	d8ec      	bhi.n	8002142 <lcd_handle+0x1080>
 8002168:	3b20      	subs	r3, #32
 800216a:	b2db      	uxtb	r3, r3
                if (c < 'A' || c > 'Z') c = ' ';
 800216c:	e7ef      	b.n	800214e <lcd_handle+0x108c>
            while (idx < 20) line[idx++] = ' ';
 800216e:	2a13      	cmp	r2, #19
 8002170:	dc0a      	bgt.n	8002188 <lcd_handle+0x10c6>
 8002172:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8002176:	446b      	add	r3, sp
 8002178:	3b25      	subs	r3, #37	@ 0x25
 800217a:	f10d 0117 	add.w	r1, sp, #23
 800217e:	2220      	movs	r2, #32
 8002180:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002184:	428b      	cmp	r3, r1
 8002186:	d1fb      	bne.n	8002180 <lcd_handle+0x10be>
            line[20] = '\0';
 8002188:	2000      	movs	r0, #0
 800218a:	f88d 0018 	strb.w	r0, [sp, #24]
            LCD_SetCursor(0,2);
 800218e:	2102      	movs	r1, #2
 8002190:	f7fe fe46 	bl	8000e20 <LCD_SetCursor>
            LCD_Print(line);
 8002194:	a801      	add	r0, sp, #4
 8002196:	f7fe fe59 	bl	8000e4c <LCD_Print>
            if (isEditing) {
 800219a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800219e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b1db      	cbz	r3, 80021de <lcd_handle+0x111c>
                LCD_SetCursor(0,3); LCD_Print("                    ");
 80021a6:	2103      	movs	r1, #3
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fe39 	bl	8000e20 <LCD_SetCursor>
 80021ae:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 80021b2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80021b6:	f7fe fe49 	bl	8000e4c <LCD_Print>
                int cursorCol = companyEditPos;
 80021ba:	f240 53b6 	movw	r3, #1462	@ 0x5b6
 80021be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80021c2:	7818      	ldrb	r0, [r3, #0]
                if (cursorCol >= 0 && cursorCol < 20) {
 80021c4:	2813      	cmp	r0, #19
 80021c6:	f63f a889 	bhi.w	80012dc <lcd_handle+0x21a>
                    LCD_SetCursor(cursorCol, 3);
 80021ca:	2103      	movs	r1, #3
 80021cc:	f7fe fe28 	bl	8000e20 <LCD_SetCursor>
                    LCD_WriteChar('^');
 80021d0:	205e      	movs	r0, #94	@ 0x5e
 80021d2:	f7fe fe36 	bl	8000e42 <LCD_WriteChar>
 80021d6:	f7ff b881 	b.w	80012dc <lcd_handle+0x21a>
            int len = 0; while (companyName[len] && len < 20) len++;
 80021da:	2200      	movs	r2, #0
 80021dc:	e7c9      	b.n	8002172 <lcd_handle+0x10b0>
                LCD_SetCursor(0,3); LCD_Print("                    ");
 80021de:	2103      	movs	r1, #3
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fe1d 	bl	8000e20 <LCD_SetCursor>
 80021e6:	f646 30a4 	movw	r0, #27556	@ 0x6ba4
 80021ea:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80021ee:	f7fe fe2d 	bl	8000e4c <LCD_Print>
        break;
 80021f2:	f7ff b873 	b.w	80012dc <lcd_handle+0x21a>
        LCD_SetCursor(1,0);
 80021f6:	2100      	movs	r1, #0
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe fe11 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80021fe:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8002202:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002206:	f240 022e 	movw	r2, #46	@ 0x2e
 800220a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002214:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8002216:	7820      	ldrb	r0, [r4, #0]
 8002218:	b160      	cbz	r0, 8002234 <lcd_handle+0x1172>
 800221a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b19      	cmp	r3, #25
 8002222:	bf9c      	itt	ls
 8002224:	3820      	subls	r0, #32
 8002226:	b2c0      	uxtbls	r0, r0
 8002228:	f7fe fe0b 	bl	8000e42 <LCD_WriteChar>
 800222c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002230:	2800      	cmp	r0, #0
 8002232:	d1f2      	bne.n	800221a <lcd_handle+0x1158>
        const char *names[9] = { "VAC", "TEMP", "IDC", "VBAT1", "VDC1", "VDC2", "IDC2_1", "IDC2_2", "IDC2_3" };
 8002234:	f10d 0c04 	add.w	ip, sp, #4
 8002238:	f646 3450 	movw	r4, #27472	@ 0x6b50
 800223c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8002240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002242:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	f8cc 3000 	str.w	r3, [ip]
        uint8_t sel = (uint8_t)(subIndex % total);
 8002252:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002256:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	f648 6439 	movw	r4, #36409	@ 0x8e39
 8002260:	f6c3 04e3 	movt	r4, #14563	@ 0x38e3
 8002264:	fba4 1302 	umull	r1, r3, r4, r2
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	b2d7      	uxtb	r7, r2
        uint8_t next = (uint8_t)((sel + 1u) % total);
 8002272:	1c7b      	adds	r3, r7, #1
 8002274:	fba4 2603 	umull	r2, r6, r4, r3
 8002278:	0876      	lsrs	r6, r6, #1
 800227a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
 800227e:	1b9e      	subs	r6, r3, r6
        LCD_SetCursor(1,1);
 8002280:	2101      	movs	r1, #1
 8002282:	4608      	mov	r0, r1
 8002284:	f7fe fdcc 	bl	8000e20 <LCD_SetCursor>
        uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	fba4 2403 	umull	r2, r4, r4, r3
 8002290:	0864      	lsrs	r4, r4, #1
 8002292:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8002296:	1b1c      	subs	r4, r3, r4
        LCD_Print(names[prev]);
 8002298:	ab0a      	add	r3, sp, #40	@ 0x28
 800229a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800229e:	f853 0c24 	ldr.w	r0, [r3, #-36]
 80022a2:	f7fe fdd3 	bl	8000e4c <LCD_Print>
        LCD_Print(": ");
 80022a6:	f646 35cc 	movw	r5, #27596	@ 0x6bcc
 80022aa:	f6c0 0500 	movt	r5, #2048	@ 0x800
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7fe fdcc 	bl	8000e4c <LCD_Print>
        LCD_PrintQ15(adcGain[prev]);
 80022b4:	f240 1344 	movw	r3, #324	@ 0x144
 80022b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022bc:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 80022c0:	f7fe fe62 	bl	8000f88 <LCD_PrintQ15>
        LCD_SetCursor(0,2);
 80022c4:	2102      	movs	r1, #2
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7fe fdaa 	bl	8000e20 <LCD_SetCursor>
        LCD_WriteChar('>');
 80022cc:	203e      	movs	r0, #62	@ 0x3e
 80022ce:	f7fe fdb8 	bl	8000e42 <LCD_WriteChar>
        LCD_SetCursor(1,2);
 80022d2:	2102      	movs	r1, #2
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7fe fda3 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(names[sel]);
 80022da:	ab0a      	add	r3, sp, #40	@ 0x28
 80022dc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80022e0:	f853 0c24 	ldr.w	r0, [r3, #-36]
 80022e4:	f7fe fdb2 	bl	8000e4c <LCD_Print>
        LCD_Print(": ");
 80022e8:	4628      	mov	r0, r5
 80022ea:	f7fe fdaf 	bl	8000e4c <LCD_Print>
        if (isEditing) { LCD_WriteChar('['); }
 80022ee:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80022f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	bb43      	cbnz	r3, 800234c <lcd_handle+0x128a>
        LCD_PrintQ15(adcGain[sel]);
 80022fa:	f240 1344 	movw	r3, #324	@ 0x144
 80022fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002302:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 8002306:	f7fe fe3f 	bl	8000f88 <LCD_PrintQ15>
        if (isEditing) { LCD_WriteChar(']'); }
 800230a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800230e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b9f3      	cbnz	r3, 8002354 <lcd_handle+0x1292>
        LCD_SetCursor(1,3);
 8002316:	2103      	movs	r1, #3
 8002318:	2001      	movs	r0, #1
 800231a:	f7fe fd81 	bl	8000e20 <LCD_SetCursor>
        LCD_Print(names[next]);
 800231e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002320:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002324:	f853 0c24 	ldr.w	r0, [r3, #-36]
 8002328:	f7fe fd90 	bl	8000e4c <LCD_Print>
        LCD_Print(": ");
 800232c:	f646 30cc 	movw	r0, #27596	@ 0x6bcc
 8002330:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002334:	f7fe fd8a 	bl	8000e4c <LCD_Print>
        LCD_PrintQ15(adcGain[next]);
 8002338:	f240 1344 	movw	r3, #324	@ 0x144
 800233c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002340:	f933 0016 	ldrsh.w	r0, [r3, r6, lsl #1]
 8002344:	f7fe fe20 	bl	8000f88 <LCD_PrintQ15>
        break;
 8002348:	f7fe bfc8 	b.w	80012dc <lcd_handle+0x21a>
        if (isEditing) { LCD_WriteChar('['); }
 800234c:	205b      	movs	r0, #91	@ 0x5b
 800234e:	f7fe fd78 	bl	8000e42 <LCD_WriteChar>
 8002352:	e7d2      	b.n	80022fa <lcd_handle+0x1238>
        if (isEditing) { LCD_WriteChar(']'); }
 8002354:	205d      	movs	r0, #93	@ 0x5d
 8002356:	f7fe fd74 	bl	8000e42 <LCD_WriteChar>
 800235a:	e7dc      	b.n	8002316 <lcd_handle+0x1254>
        LCD_SetCursor(1,0);
 800235c:	2100      	movs	r1, #0
 800235e:	2001      	movs	r0, #1
 8002360:	f7fe fd5e 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002364:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8002368:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800236c:	f240 022e 	movw	r2, #46	@ 0x2e
 8002370:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 800237c:	7820      	ldrb	r0, [r4, #0]
 800237e:	b160      	cbz	r0, 800239a <lcd_handle+0x12d8>
 8002380:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b19      	cmp	r3, #25
 8002388:	bf9c      	itt	ls
 800238a:	3820      	subls	r0, #32
 800238c:	b2c0      	uxtbls	r0, r0
 800238e:	f7fe fd58 	bl	8000e42 <LCD_WriteChar>
 8002392:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002396:	2800      	cmp	r0, #0
 8002398:	d1f2      	bne.n	8002380 <lcd_handle+0x12be>
        LCD_SetCursor(1,2);
 800239a:	2102      	movs	r1, #2
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe fd3f 	bl	8000e20 <LCD_SetCursor>
        LCD_Print("DC Offset: ");
 80023a2:	f646 30d0 	movw	r0, #27600	@ 0x6bd0
 80023a6:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80023aa:	f7fe fd4f 	bl	8000e4c <LCD_Print>
        if (isEditing) { LCD_WriteChar('['); }
 80023ae:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80023b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	bb03      	cbnz	r3, 80023fc <lcd_handle+0x133a>
        LCD_PrintUInt16(dcOffset);
 80023ba:	f240 0300 	movw	r3, #0
 80023be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023c2:	8818      	ldrh	r0, [r3, #0]
 80023c4:	f7fe fd4f 	bl	8000e66 <LCD_PrintUInt16>
        if (isEditing) { LCD_WriteChar(']'); }
 80023c8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80023cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b9bb      	cbnz	r3, 8002404 <lcd_handle+0x1342>
        LCD_SetCursor(0,1); LCD_Print("                    ");
 80023d4:	2101      	movs	r1, #1
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fd22 	bl	8000e20 <LCD_SetCursor>
 80023dc:	f646 34a4 	movw	r4, #27556	@ 0x6ba4
 80023e0:	f6c0 0400 	movt	r4, #2048	@ 0x800
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fd31 	bl	8000e4c <LCD_Print>
        LCD_SetCursor(0,3); LCD_Print("                    ");
 80023ea:	2103      	movs	r1, #3
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fd17 	bl	8000e20 <LCD_SetCursor>
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe fd2a 	bl	8000e4c <LCD_Print>
        break;
 80023f8:	f7fe bf70 	b.w	80012dc <lcd_handle+0x21a>
        if (isEditing) { LCD_WriteChar('['); }
 80023fc:	205b      	movs	r0, #91	@ 0x5b
 80023fe:	f7fe fd20 	bl	8000e42 <LCD_WriteChar>
 8002402:	e7da      	b.n	80023ba <lcd_handle+0x12f8>
        if (isEditing) { LCD_WriteChar(']'); }
 8002404:	205d      	movs	r0, #93	@ 0x5d
 8002406:	f7fe fd1c 	bl	8000e42 <LCD_WriteChar>
 800240a:	e7e3      	b.n	80023d4 <lcd_handle+0x1312>
        LCD_SetCursor(1,0);
 800240c:	2100      	movs	r1, #0
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe fd06 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002414:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8002418:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800241c:	f240 022e 	movw	r2, #46	@ 0x2e
 8002420:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	6f5c      	ldr	r4, [r3, #116]	@ 0x74
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 800242c:	7820      	ldrb	r0, [r4, #0]
 800242e:	b160      	cbz	r0, 800244a <lcd_handle+0x1388>
 8002430:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b19      	cmp	r3, #25
 8002438:	bf9c      	itt	ls
 800243a:	3820      	subls	r0, #32
 800243c:	b2c0      	uxtbls	r0, r0
 800243e:	f7fe fd00 	bl	8000e42 <LCD_WriteChar>
 8002442:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002446:	2800      	cmp	r0, #0
 8002448:	d1f2      	bne.n	8002430 <lcd_handle+0x136e>
            uint8_t sel = (uint8_t)(subIndex % total);
 800244a:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 800244e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8002458:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 800245c:	fba2 1003 	umull	r1, r0, r2, r3
 8002460:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8002464:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 8002468:	1a5b      	subs	r3, r3, r1
 800246a:	b2dd      	uxtb	r5, r3
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 800246c:	1cab      	adds	r3, r5, #2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	fba2 1203 	umull	r1, r2, r2, r3
 8002474:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8002478:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8002480:	2101      	movs	r1, #1
 8002482:	4608      	mov	r0, r1
 8002484:	f7fe fccc 	bl	8000e20 <LCD_SetCursor>
            if (prev == 0) {
 8002488:	2c00      	cmp	r4, #0
 800248a:	d057      	beq.n	800253c <lcd_handle+0x147a>
            } else if (prev == 1) {
 800248c:	2c01      	cmp	r4, #1
 800248e:	d066      	beq.n	800255e <lcd_handle+0x149c>
                LCD_Print("Temp Max:");
 8002490:	f646 30ec 	movw	r0, #27628	@ 0x6bec
 8002494:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002498:	f7fe fcd8 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(tempMax);
 800249c:	f240 030e 	movw	r3, #14
 80024a0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024a4:	8818      	ldrh	r0, [r3, #0]
 80024a6:	f7fe fcde 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('C');
 80024aa:	2043      	movs	r0, #67	@ 0x43
 80024ac:	f7fe fcc9 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(0,2);
 80024b0:	2102      	movs	r1, #2
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe fcb4 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 80024b8:	203e      	movs	r0, #62	@ 0x3e
 80024ba:	f7fe fcc2 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80024be:	2102      	movs	r1, #2
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe fcad 	bl	8000e20 <LCD_SetCursor>
            if (sel == 0) {
 80024c6:	2d00      	cmp	r5, #0
 80024c8:	d05a      	beq.n	8002580 <lcd_handle+0x14be>
            } else if (sel == 1) {
 80024ca:	2d01      	cmp	r5, #1
 80024cc:	f000 8092 	beq.w	80025f4 <lcd_handle+0x1532>
                LCD_Print("Temp Max:");
 80024d0:	f646 30ec 	movw	r0, #27628	@ 0x6bec
 80024d4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80024d8:	f7fe fcb8 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 80024dc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80024e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 80be 	bne.w	8002668 <lcd_handle+0x15a6>
                LCD_PrintUInt16(tempMax);
 80024ec:	f240 030e 	movw	r3, #14
 80024f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024f4:	8818      	ldrh	r0, [r3, #0]
 80024f6:	f7fe fcb6 	bl	8000e66 <LCD_PrintUInt16>
                if (isEditing) LCD_WriteChar(']');
 80024fa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80024fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 80b3 	bne.w	8002670 <lcd_handle+0x15ae>
                LCD_WriteChar('C');
 800250a:	2043      	movs	r0, #67	@ 0x43
 800250c:	f7fe fc99 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,3);
 8002510:	2103      	movs	r1, #3
 8002512:	2001      	movs	r0, #1
 8002514:	f7fe fc84 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("V Max:");
 8002518:	f646 30dc 	movw	r0, #27612	@ 0x6bdc
 800251c:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002520:	f7fe fc94 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(vMax_dV);
 8002524:	f240 0312 	movw	r3, #18
 8002528:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800252c:	8818      	ldrh	r0, [r3, #0]
 800252e:	f7fe fd13 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('V');
 8002532:	2056      	movs	r0, #86	@ 0x56
 8002534:	f7fe fc85 	bl	8000e42 <LCD_WriteChar>
 8002538:	f7fe bed0 	b.w	80012dc <lcd_handle+0x21a>
                LCD_Print("V Max:");
 800253c:	f646 30dc 	movw	r0, #27612	@ 0x6bdc
 8002540:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002544:	f7fe fc82 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(vMax_dV);
 8002548:	f240 0312 	movw	r3, #18
 800254c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002550:	8818      	ldrh	r0, [r3, #0]
 8002552:	f7fe fd01 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('V');
 8002556:	2056      	movs	r0, #86	@ 0x56
 8002558:	f7fe fc73 	bl	8000e42 <LCD_WriteChar>
 800255c:	e7a8      	b.n	80024b0 <lcd_handle+0x13ee>
                LCD_Print("I Max:");
 800255e:	f646 30e4 	movw	r0, #27620	@ 0x6be4
 8002562:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002566:	f7fe fc71 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(iMax_dA);
 800256a:	f240 0310 	movw	r3, #16
 800256e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002572:	8818      	ldrh	r0, [r3, #0]
 8002574:	f7fe fcf0 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('A');
 8002578:	2041      	movs	r0, #65	@ 0x41
 800257a:	f7fe fc62 	bl	8000e42 <LCD_WriteChar>
 800257e:	e797      	b.n	80024b0 <lcd_handle+0x13ee>
                LCD_Print("V Max:");
 8002580:	f646 30dc 	movw	r0, #27612	@ 0x6bdc
 8002584:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8002588:	f7fe fc60 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 800258c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002590:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	bb2b      	cbnz	r3, 80025e4 <lcd_handle+0x1522>
                LCD_PrintUInt16_1dp(vMax_dV);
 8002598:	f240 0312 	movw	r3, #18
 800259c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025a0:	8818      	ldrh	r0, [r3, #0]
 80025a2:	f7fe fcd9 	bl	8000f58 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 80025a6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80025aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b9e3      	cbnz	r3, 80025ec <lcd_handle+0x152a>
                LCD_WriteChar('V');
 80025b2:	2056      	movs	r0, #86	@ 0x56
 80025b4:	f7fe fc45 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,3);
 80025b8:	2103      	movs	r1, #3
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7fe fc30 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("I Max:");
 80025c0:	f646 30e4 	movw	r0, #27620	@ 0x6be4
 80025c4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80025c8:	f7fe fc40 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16_1dp(iMax_dA);
 80025cc:	f240 0310 	movw	r3, #16
 80025d0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025d4:	8818      	ldrh	r0, [r3, #0]
 80025d6:	f7fe fcbf 	bl	8000f58 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('A');
 80025da:	2041      	movs	r0, #65	@ 0x41
 80025dc:	f7fe fc31 	bl	8000e42 <LCD_WriteChar>
 80025e0:	f7fe be7c 	b.w	80012dc <lcd_handle+0x21a>
                if (isEditing) LCD_WriteChar('[');
 80025e4:	205b      	movs	r0, #91	@ 0x5b
 80025e6:	f7fe fc2c 	bl	8000e42 <LCD_WriteChar>
 80025ea:	e7d5      	b.n	8002598 <lcd_handle+0x14d6>
                if (isEditing) LCD_WriteChar(']');
 80025ec:	205d      	movs	r0, #93	@ 0x5d
 80025ee:	f7fe fc28 	bl	8000e42 <LCD_WriteChar>
 80025f2:	e7de      	b.n	80025b2 <lcd_handle+0x14f0>
                LCD_Print("I Max:");
 80025f4:	f646 30e4 	movw	r0, #27620	@ 0x6be4
 80025f8:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80025fc:	f7fe fc26 	bl	8000e4c <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 8002600:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002604:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	bb2b      	cbnz	r3, 8002658 <lcd_handle+0x1596>
                LCD_PrintUInt16_1dp(iMax_dA);
 800260c:	f240 0310 	movw	r3, #16
 8002610:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002614:	8818      	ldrh	r0, [r3, #0]
 8002616:	f7fe fc9f 	bl	8000f58 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 800261a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800261e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b9e3      	cbnz	r3, 8002660 <lcd_handle+0x159e>
                LCD_WriteChar('A');
 8002626:	2041      	movs	r0, #65	@ 0x41
 8002628:	f7fe fc0b 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,3);
 800262c:	2103      	movs	r1, #3
 800262e:	2001      	movs	r0, #1
 8002630:	f7fe fbf6 	bl	8000e20 <LCD_SetCursor>
                LCD_Print("Temp Max:");
 8002634:	f646 30ec 	movw	r0, #27628	@ 0x6bec
 8002638:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800263c:	f7fe fc06 	bl	8000e4c <LCD_Print>
                LCD_PrintUInt16(tempMax);
 8002640:	f240 030e 	movw	r3, #14
 8002644:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002648:	8818      	ldrh	r0, [r3, #0]
 800264a:	f7fe fc0c 	bl	8000e66 <LCD_PrintUInt16>
                LCD_WriteChar('C');
 800264e:	2043      	movs	r0, #67	@ 0x43
 8002650:	f7fe fbf7 	bl	8000e42 <LCD_WriteChar>
 8002654:	f7fe be42 	b.w	80012dc <lcd_handle+0x21a>
                if (isEditing) LCD_WriteChar('[');
 8002658:	205b      	movs	r0, #91	@ 0x5b
 800265a:	f7fe fbf2 	bl	8000e42 <LCD_WriteChar>
 800265e:	e7d5      	b.n	800260c <lcd_handle+0x154a>
                if (isEditing) LCD_WriteChar(']');
 8002660:	205d      	movs	r0, #93	@ 0x5d
 8002662:	f7fe fbee 	bl	8000e42 <LCD_WriteChar>
 8002666:	e7de      	b.n	8002626 <lcd_handle+0x1564>
                if (isEditing) LCD_WriteChar('[');
 8002668:	205b      	movs	r0, #91	@ 0x5b
 800266a:	f7fe fbea 	bl	8000e42 <LCD_WriteChar>
 800266e:	e73d      	b.n	80024ec <lcd_handle+0x142a>
                if (isEditing) LCD_WriteChar(']');
 8002670:	205d      	movs	r0, #93	@ 0x5d
 8002672:	f7fe fbe6 	bl	8000e42 <LCD_WriteChar>
 8002676:	e748      	b.n	800250a <lcd_handle+0x1448>
        LCD_SetCursor(1,0);
 8002678:	2100      	movs	r1, #0
 800267a:	2001      	movs	r0, #1
 800267c:	f7fe fbd0 	bl	8000e20 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8002680:	f247 03f8 	movw	r3, #28920	@ 0x70f8
 8002684:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002688:	f240 022e 	movw	r2, #46	@ 0x2e
 800268c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002696:	6f9c      	ldr	r4, [r3, #120]	@ 0x78
            while(*t){ char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8002698:	7820      	ldrb	r0, [r4, #0]
 800269a:	b160      	cbz	r0, 80026b6 <lcd_handle+0x15f4>
 800269c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b19      	cmp	r3, #25
 80026a4:	bf9c      	itt	ls
 80026a6:	3820      	subls	r0, #32
 80026a8:	b2c0      	uxtbls	r0, r0
 80026aa:	f7fe fbca 	bl	8000e42 <LCD_WriteChar>
 80026ae:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d1f2      	bne.n	800269c <lcd_handle+0x15da>
            if (prevPageID != pageID) {
 80026b6:	f240 022d 	movw	r2, #45	@ 0x2d
 80026ba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026be:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80026c2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026c6:	7812      	ldrb	r2, [r2, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d009      	beq.n	80026e2 <lcd_handle+0x1620>
                subIndex = deviceMode;
 80026ce:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80026d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026d6:	f240 0214 	movw	r2, #20
 80026da:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
            uint8_t sel = (uint8_t)(subIndex % total);
 80026e2:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80026e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f64a 25ab 	movw	r5, #43691	@ 0xaaab
 80026f0:	f6ca 25aa 	movt	r5, #43690	@ 0xaaaa
 80026f4:	fba5 2103 	umull	r2, r1, r5, r3
 80026f8:	f001 02fe 	and.w	r2, r1, #254	@ 0xfe
 80026fc:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8002704:	2101      	movs	r1, #1
 8002706:	4608      	mov	r0, r1
 8002708:	f7fe fb8a 	bl	8000e20 <LCD_SetCursor>
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 800270c:	1ca3      	adds	r3, r4, #2
 800270e:	fba5 2103 	umull	r2, r1, r5, r3
 8002712:	f401 72ff 	and.w	r2, r1, #510	@ 0x1fe
 8002716:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 800271a:	1a9b      	subs	r3, r3, r2
            LCD_Print(DEVICE_MODE_STRINGS[prev]);
 800271c:	f240 5690 	movw	r6, #1424	@ 0x590
 8002720:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8002724:	6832      	ldr	r2, [r6, #0]
 8002726:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800272a:	f7fe fb8f 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(0,2);
 800272e:	2102      	movs	r1, #2
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe fb75 	bl	8000e20 <LCD_SetCursor>
            LCD_WriteChar('>');
 8002736:	203e      	movs	r0, #62	@ 0x3e
 8002738:	f7fe fb83 	bl	8000e42 <LCD_WriteChar>
            LCD_SetCursor(1,2);
 800273c:	2102      	movs	r1, #2
 800273e:	2001      	movs	r0, #1
 8002740:	f7fe fb6e 	bl	8000e20 <LCD_SetCursor>
            LCD_Print(DEVICE_MODE_STRINGS[sel]);
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800274a:	f7fe fb7f 	bl	8000e4c <LCD_Print>
            LCD_SetCursor(1,3);
 800274e:	2103      	movs	r1, #3
 8002750:	2001      	movs	r0, #1
 8002752:	f7fe fb65 	bl	8000e20 <LCD_SetCursor>
            uint8_t next = (uint8_t)((sel + 1u) % total);
 8002756:	1c63      	adds	r3, r4, #1
 8002758:	fba5 1203 	umull	r1, r2, r5, r3
 800275c:	f402 71ff 	and.w	r1, r2, #510	@ 0x1fe
 8002760:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8002764:	1a9b      	subs	r3, r3, r2
            LCD_Print(DEVICE_MODE_STRINGS[next]);
 8002766:	6832      	ldr	r2, [r6, #0]
 8002768:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800276c:	f7fe fb6e 	bl	8000e4c <LCD_Print>
}
 8002770:	f7fe bdb4 	b.w	80012dc <lcd_handle+0x21a>

08002774 <button_handle>:
 * - Down: No action
 * - Right: Next page
 * - Off: Set SHUTDOWN2 = 0
 */
void button_handle(void) {
    if (buttonState == 0) 
 8002774:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002778:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f001 8374 	beq.w	8003e6c <button_handle+0x16f8>
void button_handle(void) {
 8002784:	b510      	push	{r4, lr}
 8002786:	b082      	sub	sp, #8
        return;
    }

    /* Button order: Left, On, Up, Down, Right, Off */
    /* Structure by page for clarity (switch-case style) */
    if (buttonState & BUT_LEFT_M) 
 8002788:	f013 0f01 	tst.w	r3, #1
 800278c:	f000 812a 	beq.w	80029e4 <button_handle+0x270>
    {
        if (isEditing) 
 8002790:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002794:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b9b3      	cbnz	r3, 80027ca <button_handle+0x56>
            isEditing = 0u; 
            uiNeedsClear = 1u; 
            buttonState = 0; 
            return;
        }
        if (pageID == PAGE_MFG_PIN) 
 800279c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80027a0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3b02      	subs	r3, #2
 80027a8:	2b0b      	cmp	r3, #11
 80027aa:	f200 811b 	bhi.w	80029e4 <button_handle+0x270>
 80027ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027b2:	0111      	.short	0x0111
 80027b4:	01400140 	.word	0x01400140
 80027b8:	01400140 	.word	0x01400140
 80027bc:	00e500cf 	.word	0x00e500cf
 80027c0:	00fb00fb 	.word	0x00fb00fb
 80027c4:	00fb00fb 	.word	0x00fb00fb
 80027c8:	00fb      	.short	0x00fb
            if (pageID == PAGE_ENTER_DATA) {
 80027ca:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80027ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3b03      	subs	r3, #3
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	f200 808e 	bhi.w	80028f8 <button_handle+0x184>
 80027dc:	e8df f003 	tbb	[pc, r3]
 80027e0:	5f8c3a04 	.word	0x5f8c3a04
 80027e4:	9f718c8c 	.word	0x9f718c8c
                if (operatingMode == MODE_CHARGER) {
 80027e8:	f240 7372 	movw	r3, #1906	@ 0x772
 80027ec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b98b      	cbnz	r3, 8002818 <button_handle+0xa4>
                    if (subIndex==1) batInfo.batteryCap = (uint16_t)editBackupValue;
 80027f4:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80027f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d17a      	bne.n	80028f8 <button_handle+0x184>
 8002802:	f240 0334 	movw	r3, #52	@ 0x34
 8002806:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800280a:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 800280e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	e06f      	b.n	80028f8 <button_handle+0x184>
                    if (subIndex==0) outputVSet_dV = editBackupValue;
 8002818:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 800281c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b953      	cbnz	r3, 800283a <button_handle+0xc6>
 8002824:	f240 03c6 	movw	r3, #198	@ 0xc6
 8002828:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800282c:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 8002830:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	801a      	strh	r2, [r3, #0]
 8002838:	e05e      	b.n	80028f8 <button_handle+0x184>
                    else if (subIndex==1) outputIMax_dA = editBackupValue;
 800283a:	2b01      	cmp	r3, #1
 800283c:	d15c      	bne.n	80028f8 <button_handle+0x184>
 800283e:	f240 03c4 	movw	r3, #196	@ 0xc4
 8002842:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002846:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 800284a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800284e:	8812      	ldrh	r2, [r2, #0]
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e051      	b.n	80028f8 <button_handle+0x184>
                if (operatingMode == MODE_CHARGER) {
 8002854:	f240 7372 	movw	r3, #1906	@ 0x772
 8002858:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d14a      	bne.n	80028f8 <button_handle+0x184>
                    if (subIndex==0) testVoltage_dV = editBackupValue;
 8002862:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002866:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b953      	cbnz	r3, 8002884 <button_handle+0x110>
 800286e:	f240 03ca 	movw	r3, #202	@ 0xca
 8002872:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002876:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 800287a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	e039      	b.n	80028f8 <button_handle+0x184>
                    else if (subIndex==1) testCurrent_dA = editBackupValue;
 8002884:	2b01      	cmp	r3, #1
 8002886:	d137      	bne.n	80028f8 <button_handle+0x184>
 8002888:	f240 03c8 	movw	r3, #200	@ 0xc8
 800288c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002890:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 8002894:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	801a      	strh	r2, [r3, #0]
 800289c:	e02c      	b.n	80028f8 <button_handle+0x184>
                if (subIndex==1) brightness = (uint8_t)editBackupValue;
 800289e:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80028a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d125      	bne.n	80028f8 <button_handle+0x184>
 80028ac:	f240 030c 	movw	r3, #12
 80028b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028b4:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 80028b8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e01a      	b.n	80028f8 <button_handle+0x184>
                adcGain[sel] = (int16_t)editBackupValue;
 80028c2:	f240 1144 	movw	r1, #324	@ 0x144
 80028c6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
                uint8_t sel = (uint8_t)(subIndex % 9u);
 80028ca:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80028ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	f648 6339 	movw	r3, #36409	@ 0x8e39
 80028d8:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 80028dc:	fba3 0302 	umull	r0, r3, r3, r2
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80028e6:	1ad2      	subs	r2, r2, r3
                adcGain[sel] = (int16_t)editBackupValue;
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f240 53ce 	movw	r3, #1486	@ 0x5ce
 80028ee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
            isEditing = 0u; 
 80028f8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80028fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
            uiNeedsClear = 1u; 
 8002904:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002908:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800290c:	2101      	movs	r1, #1
 800290e:	7019      	strb	r1, [r3, #0]
            buttonState = 0; 
 8002910:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002914:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002918:	701a      	strb	r2, [r3, #0]
            return;
 800291a:	f001 b952 	b.w	8003bc2 <button_handle+0x144e>
 800291e:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 8002922:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002926:	f240 0217 	movw	r2, #23
 800292a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800292e:	f103 0015 	add.w	r0, r3, #21
                for (int i=0;i<21;i++){ companyName[i] = companyBackup[i]; }
 8002932:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002936:	f802 1f01 	strb.w	r1, [r2, #1]!
 800293a:	4298      	cmp	r0, r3
 800293c:	d1f9      	bne.n	8002932 <button_handle+0x1be>
    pageID = page;
 800293e:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002942:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002946:	2208      	movs	r2, #8
 8002948:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800294a:	f7fe fa60 	bl	8000e0e <LCD_Clear>
}
 800294e:	e7d3      	b.n	80028f8 <button_handle+0x184>
    pageID = page;
 8002950:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002954:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002958:	2206      	movs	r2, #6
 800295a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800295c:	f7fe fa57 	bl	8000e0e <LCD_Clear>
        {
            lcd_menu_set_page(PAGE_SETTINGS);
            uiNeedsClear = 1u; buttonState = 0; return;
 8002960:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002964:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002970:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	f001 b923 	b.w	8003bc2 <button_handle+0x144e>
    pageID = page;
 800297c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002980:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002984:	2206      	movs	r2, #6
 8002986:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002988:	f7fe fa41 	bl	8000e0e <LCD_Clear>
        } 
        else if (pageID == PAGE_MFG_MENU)
        {
            /* exit manufacturer menu */
            lcd_menu_set_page(PAGE_SETTINGS);
            uiNeedsClear = 1u; buttonState = 0; return;
 800298c:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8002990:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800299c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	f001 b90d 	b.w	8003bc2 <button_handle+0x144e>
    pageID = page;
 80029a8:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80029ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029b0:	2208      	movs	r2, #8
 80029b2:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80029b4:	f7fe fa2b 	bl	8000e0e <LCD_Clear>
        }
        else if (pageID == PAGE_MFG_COMPANY || pageID == PAGE_MFG_GAIN || pageID == PAGE_MFG_OFFSET || pageID == PAGE_MFG_LIMITS || pageID == PAGE_MFG_MODE)
        {
            /* exit any manufacturer subpage back to manufacturer menu */
            lcd_menu_set_page(PAGE_MFG_MENU);
            uiNeedsClear = 1u; buttonState = 0; return;
 80029b8:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 80029bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80029c8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	f001 b8f7 	b.w	8003bc2 <button_handle+0x144e>
    pageID = page;
 80029d4:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80029d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80029e0:	f7fe fa15 	bl	8000e0e <LCD_Clear>
        {
            /* other pages: no action unless specified later */
        }
    }
    /* On: set SHUTDOWN2 = 1 (same on all pages) */
    if (buttonState & BUT_ON_M) {
 80029e4:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80029e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f013 0f02 	tst.w	r3, #2
 80029f2:	d127      	bne.n	8002a44 <button_handle+0x2d0>
        deviceOn = 1;
        batInfo.chargeState = STATE_BULK;
    }
    /* Off: set SHUTDOWN2 = 0 (same on all pages) 
	*/
    if (buttonState & BUT_OFF_M) {
 80029f4:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80029f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f013 0f20 	tst.w	r3, #32
 8002a02:	d136      	bne.n	8002a72 <button_handle+0x2fe>
        dacValueI = 0;
        dacValueV = 1050;
    }

    /* Up/Down behavior depends on page */
    switch (pageID) {
 8002a04:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002a08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	3b02      	subs	r3, #2
 8002a10:	2b0b      	cmp	r3, #11
 8002a12:	f200 84b6 	bhi.w	8003382 <button_handle+0xc0e>
 8002a16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a1a:	0048      	.short	0x0048
 8002a1c:	01c4009d 	.word	0x01c4009d
 8002a20:	02c9026e 	.word	0x02c9026e
 8002a24:	05920457 	.word	0x05920457
 8002a28:	064c038a 	.word	0x064c038a
 8002a2c:	077006f4 	.word	0x077006f4
 8002a30:	0859      	.short	0x0859
    pageID = page;
 8002a32:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002a36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002a3e:	f7fe f9e6 	bl	8000e0e <LCD_Clear>
}
 8002a42:	e7cf      	b.n	80029e4 <button_handle+0x270>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a4a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a4e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002a52:	f002 fd85 	bl	8005560 <HAL_GPIO_WritePin>
        deviceOn = 1;
 8002a56:	f240 7370 	movw	r3, #1904	@ 0x770
 8002a5a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
        batInfo.chargeState = STATE_BULK;
 8002a62:	f240 0334 	movw	r3, #52	@ 0x34
 8002a66:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8002a70:	e7c0      	b.n	80029f4 <button_handle+0x280>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
 8002a72:	2200      	movs	r2, #0
 8002a74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a78:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002a7c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002a80:	f002 fd6e 	bl	8005560 <HAL_GPIO_WritePin>
        deviceOn = 0;
 8002a84:	f240 7370 	movw	r3, #1904	@ 0x770
 8002a88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
        dacValueI = 0;
 8002a90:	f240 53e4 	movw	r3, #1508	@ 0x5e4
 8002a94:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a98:	801a      	strh	r2, [r3, #0]
        dacValueV = 1050;
 8002a9a:	f240 0330 	movw	r3, #48	@ 0x30
 8002a9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002aa2:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002aa6:	801a      	strh	r2, [r3, #0]
 8002aa8:	e7ac      	b.n	8002a04 <button_handle+0x290>
    case PAGE_MENU:
        {
            uint8_t total;
            if (deviceMode == 2) { /* KULLANICI SECIM */
 8002aaa:	f240 0314 	movw	r3, #20
 8002aae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ab2:	781b      	ldrb	r3, [r3, #0]
                total = 4u; /* Show all 4 menu items including Operating Mode */
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	bf14      	ite	ne
 8002ab8:	2103      	movne	r1, #3
 8002aba:	2104      	moveq	r1, #4
            } else {
                total = 3u; /* Hide Operating Mode when device mode is fixed */
            }
        if (buttonState & BUT_UP_M) {
 8002abc:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002ac0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	f012 0f04 	tst.w	r2, #4
 8002aca:	d00b      	beq.n	8002ae4 <button_handle+0x370>
                menuIndex = (uint8_t)((menuIndex + total - 1u) % total);
 8002acc:	f240 50de 	movw	r0, #1502	@ 0x5de
 8002ad0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002ad4:	7803      	ldrb	r3, [r0, #0]
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	fbb3 fcf1 	udiv	ip, r3, r1
 8002ade:	fb01 331c 	mls	r3, r1, ip, r3
 8002ae2:	7003      	strb	r3, [r0, #0]
        }
        if (buttonState & BUT_DOWN_M) {
 8002ae4:	f012 0f08 	tst.w	r2, #8
 8002ae8:	d00a      	beq.n	8002b00 <button_handle+0x38c>
                menuIndex = (uint8_t)((menuIndex + 1u) % total);
 8002aea:	f240 50de 	movw	r0, #1502	@ 0x5de
 8002aee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002af2:	7803      	ldrb	r3, [r0, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	fbb3 fcf1 	udiv	ip, r3, r1
 8002afa:	fb01 331c 	mls	r3, r1, ip, r3
 8002afe:	7003      	strb	r3, [r0, #0]
    default:
        break;
    }

    /* Right: navigate/enter/edit */
    if (buttonState & BUT_RIGHT_M) {
 8002b00:	f012 0f10 	tst.w	r2, #16
 8002b04:	f001 803a 	beq.w	8003b7c <button_handle+0x1408>
            lcd_menu_set_page(PAGE_MENU);
        } else if (pageID == PAGE_LOADING) {
            lcd_menu_set_page(PAGE_MAIN);
        } else if (pageID == PAGE_MENU) {
            /* Enter selected subpage */
            subIndex = 0;
 8002b08:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002b0c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
            if (deviceMode == 2) { /* KULLANICI SECIM - show all 4 options */
 8002b14:	f240 0314 	movw	r3, #20
 8002b18:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f001 805a 	beq.w	8003bd8 <button_handle+0x1464>
                break;
            default:
                break;
                }
            } else { /* GUC KAYNAGI or SARJ CIHAZI - hide operating mode */
                switch (menuIndex) {
 8002b24:	f240 53de 	movw	r3, #1502	@ 0x5de
 8002b28:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	f001 8081 	beq.w	8003c36 <button_handle+0x14c2>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f001 8087 	beq.w	8003c48 <button_handle+0x14d4>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f041 801e 	bne.w	8003b7c <button_handle+0x1408>
    pageID = page;
 8002b40:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002b44:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b48:	2203      	movs	r2, #3
 8002b4a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002b4c:	f7fe f95f 	bl	8000e0e <LCD_Clear>
}
 8002b50:	f001 b814 	b.w	8003b7c <button_handle+0x1408>
        if (isEditing) {
 8002b54:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002b58:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80d9 	beq.w	8002d16 <button_handle+0x5a2>
            if (operatingMode == MODE_CHARGER) {
 8002b64:	f240 7372 	movw	r3, #1906	@ 0x772
 8002b68:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d16b      	bne.n	8002c4a <button_handle+0x4d6>
                if (buttonState & BUT_UP_M) {
 8002b72:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002b76:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f013 0f04 	tst.w	r3, #4
 8002b80:	d031      	beq.n	8002be6 <button_handle+0x472>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002b82:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002b86:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b8a:	7812      	ldrb	r2, [r2, #0]
 8002b8c:	bb4a      	cbnz	r2, 8002be2 <button_handle+0x46e>
 8002b8e:	f240 0234 	movw	r2, #52	@ 0x34
 8002b92:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	2a18      	cmp	r2, #24
 8002b9a:	bf34      	ite	cc
 8002b9c:	2118      	movcc	r1, #24
 8002b9e:	210c      	movcs	r1, #12
 8002ba0:	f240 0234 	movw	r2, #52	@ 0x34
 8002ba4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ba8:	6011      	str	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002baa:	f013 0f08 	tst.w	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <button_handle+0x458>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002bb0:	f240 0334 	movw	r3, #52	@ 0x34
 8002bb4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b18      	cmp	r3, #24
 8002bbc:	bf34      	ite	cc
 8002bbe:	2218      	movcc	r2, #24
 8002bc0:	220c      	movcs	r2, #12
 8002bc2:	f240 0334 	movw	r3, #52	@ 0x34
 8002bc6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bca:	601a      	str	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002bcc:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002bd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f013 0f10 	tst.w	r3, #16
 8002bda:	f040 80ca 	bne.w	8002d72 <button_handle+0x5fe>
 8002bde:	f000 bfcd 	b.w	8003b7c <button_handle+0x1408>
                    else if (subIndex == 1 && batInfo.batteryCap < 990) { batInfo.batteryCap += 10; }
 8002be2:	2a01      	cmp	r2, #1
 8002be4:	d013      	beq.n	8002c0e <button_handle+0x49a>
                if (buttonState & BUT_DOWN_M) {
 8002be6:	f013 0f08 	tst.w	r3, #8
 8002bea:	d0ef      	beq.n	8002bcc <button_handle+0x458>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002bec:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002bf0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0da      	beq.n	8002bb0 <button_handle+0x43c>
                    else if (subIndex == 1 && batInfo.batteryCap > 9) { batInfo.batteryCap -= 10; }
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d1e6      	bne.n	8002bcc <button_handle+0x458>
 8002bfe:	f240 0334 	movw	r3, #52	@ 0x34
 8002c02:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	d9df      	bls.n	8002bcc <button_handle+0x458>
 8002c0c:	e016      	b.n	8002c3c <button_handle+0x4c8>
                    else if (subIndex == 1 && batInfo.batteryCap < 990) { batInfo.batteryCap += 10; }
 8002c0e:	f240 0234 	movw	r2, #52	@ 0x34
 8002c12:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c16:	6852      	ldr	r2, [r2, #4]
 8002c18:	f240 31dd 	movw	r1, #989	@ 0x3dd
 8002c1c:	428a      	cmp	r2, r1
 8002c1e:	d805      	bhi.n	8002c2c <button_handle+0x4b8>
 8002c20:	f240 0134 	movw	r1, #52	@ 0x34
 8002c24:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002c28:	320a      	adds	r2, #10
 8002c2a:	604a      	str	r2, [r1, #4]
                if (buttonState & BUT_DOWN_M) {
 8002c2c:	f013 0f08 	tst.w	r3, #8
 8002c30:	d0cc      	beq.n	8002bcc <button_handle+0x458>
                    else if (subIndex == 1 && batInfo.batteryCap > 9) { batInfo.batteryCap -= 10; }
 8002c32:	f240 0334 	movw	r3, #52	@ 0x34
 8002c36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f240 0234 	movw	r2, #52	@ 0x34
 8002c40:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c44:	3b0a      	subs	r3, #10
 8002c46:	6053      	str	r3, [r2, #4]
 8002c48:	e7c0      	b.n	8002bcc <button_handle+0x458>
                if (buttonState & BUT_UP_M) {
 8002c4a:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002c4e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	f013 0f04 	tst.w	r3, #4
 8002c58:	d045      	beq.n	8002ce6 <button_handle+0x572>
                    if (subIndex == 0 && outputVSet_dV < 240) { outputVSet_dV++; }
 8002c5a:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002c5e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	b9f2      	cbnz	r2, 8002ca4 <button_handle+0x530>
 8002c66:	f240 02c6 	movw	r2, #198	@ 0xc6
 8002c6a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	2aef      	cmp	r2, #239	@ 0xef
 8002c72:	f201 80c4 	bhi.w	8003dfe <button_handle+0x168a>
 8002c76:	f240 01c6 	movw	r1, #198	@ 0xc6
 8002c7a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002c7e:	3201      	adds	r2, #1
 8002c80:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 8002c82:	f013 0f08 	tst.w	r3, #8
 8002c86:	f001 80c5 	beq.w	8003e14 <button_handle+0x16a0>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002c8a:	f240 03c6 	movw	r3, #198	@ 0xc6
 8002c8e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	f240 02c6 	movw	r2, #198	@ 0xc6
 8002c98:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	8013      	strh	r3, [r2, #0]
 8002ca0:	f001 b8b8 	b.w	8003e14 <button_handle+0x16a0>
                    else if (subIndex == 1 && outputIMax_dA < 400) { outputIMax_dA++; }
 8002ca4:	2a01      	cmp	r2, #1
 8002ca6:	d11e      	bne.n	8002ce6 <button_handle+0x572>
 8002ca8:	f240 02c4 	movw	r2, #196	@ 0xc4
 8002cac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002cb0:	8812      	ldrh	r2, [r2, #0]
 8002cb2:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 8002cb6:	d205      	bcs.n	8002cc4 <button_handle+0x550>
 8002cb8:	f240 01c4 	movw	r1, #196	@ 0xc4
 8002cbc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002cc0:	3201      	adds	r2, #1
 8002cc2:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 8002cc4:	f013 0f08 	tst.w	r3, #8
 8002cc8:	f001 80a4 	beq.w	8003e14 <button_handle+0x16a0>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 8002ccc:	f240 03c4 	movw	r3, #196	@ 0xc4
 8002cd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	f240 02c4 	movw	r2, #196	@ 0xc4
 8002cda:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	8013      	strh	r3, [r2, #0]
 8002ce2:	f001 b897 	b.w	8003e14 <button_handle+0x16a0>
                if (buttonState & BUT_DOWN_M) {
 8002ce6:	f013 0f08 	tst.w	r3, #8
 8002cea:	f001 8093 	beq.w	8003e14 <button_handle+0x16a0>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002cee:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002cf2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f001 8083 	beq.w	8003e04 <button_handle+0x1690>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f041 8088 	bne.w	8003e14 <button_handle+0x16a0>
 8002d04:	f240 03c4 	movw	r3, #196	@ 0xc4
 8002d08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f001 8080 	beq.w	8003e14 <button_handle+0x16a0>
 8002d14:	e7df      	b.n	8002cd6 <button_handle+0x562>
            if (buttonState & BUT_UP_M) 
 8002d16:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002d1a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	f013 0f04 	tst.w	r3, #4
 8002d24:	d008      	beq.n	8002d38 <button_handle+0x5c4>
                subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 8002d26:	f240 51dd 	movw	r1, #1501	@ 0x5dd
 8002d2a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002d2e:	780a      	ldrb	r2, [r1, #0]
 8002d30:	3201      	adds	r2, #1
 8002d32:	f002 0201 	and.w	r2, r2, #1
 8002d36:	700a      	strb	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) 
 8002d38:	f013 0f08 	tst.w	r3, #8
 8002d3c:	d008      	beq.n	8002d50 <button_handle+0x5dc>
                subIndex = (uint8_t)((subIndex + 1u) % total); 
 8002d3e:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002d42:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002d46:	7813      	ldrb	r3, [r2, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	7013      	strb	r3, [r2, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002d50:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002d54:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f013 0f10 	tst.w	r3, #16
 8002d5e:	f000 870d 	beq.w	8003b7c <button_handle+0x1408>
                    break;
                }
            }
        } else if (pageID == PAGE_ENTER_DATA) {
            /* Immediate toggle for selection fields; edit for numeric */
            if (operatingMode == MODE_CHARGER && subIndex == 0u) {
 8002d62:	f240 7372 	movw	r3, #1906	@ 0x772
 8002d66:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f041 805a 	bne.w	8003e26 <button_handle+0x16b2>
 8002d72:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002d76:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 87ff 	bne.w	8003d80 <button_handle+0x160c>
                /* Bat V immediate toggle */
                batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u;
 8002d82:	f240 0334 	movw	r3, #52	@ 0x34
 8002d86:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b18      	cmp	r3, #24
 8002d8e:	bf34      	ite	cc
 8002d90:	2218      	movcc	r2, #24
 8002d92:	220c      	movcs	r2, #12
 8002d94:	f240 0334 	movw	r3, #52	@ 0x34
 8002d98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f000 beed 	b.w	8003b7c <button_handle+0x1408>
        if (isEditing) {
 8002da2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002da6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d07a      	beq.n	8002ea6 <button_handle+0x732>
            if (operatingMode == MODE_CHARGER) {
 8002db0:	f240 7372 	movw	r3, #1906	@ 0x772
 8002db4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d155      	bne.n	8002e6a <button_handle+0x6f6>
                if (buttonState & BUT_UP_M) {
 8002dbe:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002dc2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f013 0f04 	tst.w	r3, #4
 8002dcc:	d02f      	beq.n	8002e2e <button_handle+0x6ba>
                    if (subIndex == 0) { testVoltage_dV++; }
 8002dce:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002dd2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	b9d2      	cbnz	r2, 8002e10 <button_handle+0x69c>
 8002dda:	f240 02ca 	movw	r2, #202	@ 0xca
 8002dde:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002de2:	8811      	ldrh	r1, [r2, #0]
 8002de4:	3101      	adds	r1, #1
 8002de6:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002de8:	f013 0f08 	tst.w	r3, #8
 8002dec:	f000 86c6 	beq.w	8003b7c <button_handle+0x1408>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 8002df0:	f240 03ca 	movw	r3, #202	@ 0xca
 8002df4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 86be 	beq.w	8003b7c <button_handle+0x1408>
 8002e00:	f240 02ca 	movw	r2, #202	@ 0xca
 8002e04:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	8013      	strh	r3, [r2, #0]
 8002e0c:	f000 beb6 	b.w	8003b7c <button_handle+0x1408>
                    else if (subIndex == 1) { testCurrent_dA++; }
 8002e10:	2a01      	cmp	r2, #1
 8002e12:	f040 86b3 	bne.w	8003b7c <button_handle+0x1408>
 8002e16:	f240 02c8 	movw	r2, #200	@ 0xc8
 8002e1a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002e1e:	8811      	ldrh	r1, [r2, #0]
 8002e20:	3101      	adds	r1, #1
 8002e22:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002e24:	f013 0f08 	tst.w	r3, #8
 8002e28:	d10f      	bne.n	8002e4a <button_handle+0x6d6>
 8002e2a:	f000 bea7 	b.w	8003b7c <button_handle+0x1408>
 8002e2e:	f013 0f08 	tst.w	r3, #8
 8002e32:	f000 86a3 	beq.w	8003b7c <button_handle+0x1408>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 8002e36:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002e3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0d5      	beq.n	8002df0 <button_handle+0x67c>
                    else if (subIndex == 1 && testCurrent_dA > 0) { testCurrent_dA--; }
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 8699 	bne.w	8003b7c <button_handle+0x1408>
 8002e4a:	f240 03c8 	movw	r3, #200	@ 0xc8
 8002e4e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8691 	beq.w	8003b7c <button_handle+0x1408>
 8002e5a:	f240 02c8 	movw	r2, #200	@ 0xc8
 8002e5e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002e62:	3b01      	subs	r3, #1
 8002e64:	8013      	strh	r3, [r2, #0]
 8002e66:	f000 be89 	b.w	8003b7c <button_handle+0x1408>
                if (buttonState & BUT_UP_M) { shortCircuitTest ^= 1u; }
 8002e6a:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002e6e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f013 0f04 	tst.w	r3, #4
 8002e78:	d007      	beq.n	8002e8a <button_handle+0x716>
 8002e7a:	f240 7271 	movw	r2, #1905	@ 0x771
 8002e7e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002e82:	7811      	ldrb	r1, [r2, #0]
 8002e84:	f081 0101 	eor.w	r1, r1, #1
 8002e88:	7011      	strb	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) { shortCircuitTest ^= 1u; }
 8002e8a:	f013 0f08 	tst.w	r3, #8
 8002e8e:	f000 8675 	beq.w	8003b7c <button_handle+0x1408>
 8002e92:	f240 7371 	movw	r3, #1905	@ 0x771
 8002e96:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	f082 0201 	eor.w	r2, r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	f000 be6b 	b.w	8003b7c <button_handle+0x1408>
            if (operatingMode == MODE_CHARGER) {
 8002ea6:	f240 7372 	movw	r3, #1906	@ 0x772
 8002eaa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f040 8663 	bne.w	8003b7c <button_handle+0x1408>
                if (buttonState & BUT_UP_M) 
 8002eb6:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002eba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f013 0f04 	tst.w	r3, #4
 8002ec4:	d008      	beq.n	8002ed8 <button_handle+0x764>
                    subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 8002ec6:	f240 51dd 	movw	r1, #1501	@ 0x5dd
 8002eca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002ece:	780a      	ldrb	r2, [r1, #0]
 8002ed0:	3201      	adds	r2, #1
 8002ed2:	f002 0201 	and.w	r2, r2, #1
 8002ed6:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 8002ed8:	f013 0f08 	tst.w	r3, #8
 8002edc:	f000 864e 	beq.w	8003b7c <button_handle+0x1408>
                    subIndex = (uint8_t)((subIndex + 1u) % total); 
 8002ee0:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002ee4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ee8:	7813      	ldrb	r3, [r2, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	7013      	strb	r3, [r2, #0]
 8002ef2:	f000 be43 	b.w	8003b7c <button_handle+0x1408>
        if (isEditing) {
 8002ef6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002efa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b3b3      	cbz	r3, 8002f70 <button_handle+0x7fc>
            if (buttonState & BUT_UP_M) { operatingMode = MODE_CHARGER; }
 8002f02:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002f06:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	f013 0f04 	tst.w	r3, #4
 8002f10:	d005      	beq.n	8002f1e <button_handle+0x7aa>
 8002f12:	f240 7272 	movw	r2, #1906	@ 0x772
 8002f16:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	7011      	strb	r1, [r2, #0]
            if (buttonState & BUT_DOWN_M) { operatingMode = MODE_SUPPLY; }
 8002f1e:	f013 0f08 	tst.w	r3, #8
 8002f22:	d005      	beq.n	8002f30 <button_handle+0x7bc>
 8002f24:	f240 7372 	movw	r3, #1906	@ 0x772
 8002f28:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002f30:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002f34:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	f013 0f10 	tst.w	r3, #16
 8002f3e:	f000 861d 	beq.w	8003b7c <button_handle+0x1408>
                mfgPinError = 0;
                lcd_menu_set_page(PAGE_MFG_PIN);
            }
        } else if (pageID == PAGE_OPERATING_MODE) {
            /* Sağ: seçili öğeye göre modu ATA ve ana sayfaya dön */
            if (subIndex == 0u) 
 8002f42:	f240 7372 	movw	r3, #1906	@ 0x772
 8002f46:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f4a:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002f4e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	3a00      	subs	r2, #0
 8002f56:	bf18      	it	ne
 8002f58:	2201      	movne	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8002f5c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8002f60:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002f68:	f7fd ff51 	bl	8000e0e <LCD_Clear>
}
 8002f6c:	f000 be06 	b.w	8003b7c <button_handle+0x1408>
            if (buttonState & BUT_UP_M) 
 8002f70:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002f74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f013 0f04 	tst.w	r3, #4
 8002f7e:	d008      	beq.n	8002f92 <button_handle+0x81e>
                subIndex = (uint8_t)((subIndex + 2u - 1u) % 2u); 
 8002f80:	f240 51dd 	movw	r1, #1501	@ 0x5dd
 8002f84:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002f88:	780a      	ldrb	r2, [r1, #0]
 8002f8a:	3201      	adds	r2, #1
 8002f8c:	f002 0201 	and.w	r2, r2, #1
 8002f90:	700a      	strb	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) 
 8002f92:	f013 0f08 	tst.w	r3, #8
 8002f96:	d0cb      	beq.n	8002f30 <button_handle+0x7bc>
                subIndex = (uint8_t)((subIndex + 1u) % 2u); 
 8002f98:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8002f9c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002fa0:	7813      	ldrb	r3, [r2, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	7013      	strb	r3, [r2, #0]
 8002faa:	e7c1      	b.n	8002f30 <button_handle+0x7bc>
        if (isEditing) {
 8002fac:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002fb0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8088 	beq.w	80030cc <button_handle+0x958>
            if (subIndex == 1) {
 8002fbc:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002fc0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d02f      	beq.n	800302a <button_handle+0x8b6>
    if (buttonState & BUT_RIGHT_M) {
 8002fca:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8002fce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	f013 0f10 	tst.w	r3, #16
 8002fd8:	f000 85d0 	beq.w	8003b7c <button_handle+0x1408>
            if (subIndex == 0u) {
 8002fdc:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8002fe0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 865e 	beq.w	8003ca8 <button_handle+0x1534>
            } else if (subIndex == 1u) {
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d053      	beq.n	8003098 <button_handle+0x924>
                mfgPinPos = 0; 
 8002ff0:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 8002ff4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	7013      	strb	r3, [r2, #0]
                mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 8002ffc:	f240 52b0 	movw	r2, #1456	@ 0x5b0
 8003000:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003004:	70d3      	strb	r3, [r2, #3]
 8003006:	7093      	strb	r3, [r2, #2]
 8003008:	7053      	strb	r3, [r2, #1]
 800300a:	7013      	strb	r3, [r2, #0]
                mfgPinError = 0;
 800300c:	f240 52d4 	movw	r2, #1492	@ 0x5d4
 8003010:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003014:	7013      	strb	r3, [r2, #0]
    pageID = page;
 8003016:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800301a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800301e:	2207      	movs	r2, #7
 8003020:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003022:	f7fd fef4 	bl	8000e0e <LCD_Clear>
}
 8003026:	f000 bda9 	b.w	8003b7c <button_handle+0x1408>
                if (buttonState & BUT_UP_M) 
 800302a:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800302e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f013 0f04 	tst.w	r3, #4
 8003038:	d01b      	beq.n	8003072 <button_handle+0x8fe>
                    if (brightness < 100) 
 800303a:	f240 020c 	movw	r2, #12
 800303e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003042:	7812      	ldrb	r2, [r2, #0]
 8003044:	2a63      	cmp	r2, #99	@ 0x63
 8003046:	d805      	bhi.n	8003054 <button_handle+0x8e0>
                        brightness++; 
 8003048:	f240 010c 	movw	r1, #12
 800304c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003050:	3201      	adds	r2, #1
 8003052:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 8003054:	f013 0f08 	tst.w	r3, #8
 8003058:	d015      	beq.n	8003086 <button_handle+0x912>
                    if (brightness > 0) 
 800305a:	f240 030c 	movw	r3, #12
 800305e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003062:	781b      	ldrb	r3, [r3, #0]
                        brightness--; 
 8003064:	f240 020c 	movw	r2, #12
 8003068:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800306c:	3b01      	subs	r3, #1
 800306e:	7013      	strb	r3, [r2, #0]
 8003070:	e009      	b.n	8003086 <button_handle+0x912>
                if (buttonState & BUT_DOWN_M) 
 8003072:	f013 0f08 	tst.w	r3, #8
 8003076:	d006      	beq.n	8003086 <button_handle+0x912>
                    if (brightness > 0) 
 8003078:	f240 030c 	movw	r3, #12
 800307c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <button_handle+0x8f0>
    if (buttonState & BUT_RIGHT_M) {
 8003086:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800308a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	f013 0f10 	tst.w	r3, #16
 8003094:	f000 8572 	beq.w	8003b7c <button_handle+0x1408>
                if (!isEditing) 
 8003098:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800309c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 860a 	bne.w	8003cbc <button_handle+0x1548>
                    editBackupValue = brightness; 
 80030a8:	f240 53ce 	movw	r3, #1486	@ 0x5ce
 80030ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030b0:	f240 020c 	movw	r2, #12
 80030b4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80030b8:	7812      	ldrb	r2, [r2, #0]
 80030ba:	801a      	strh	r2, [r3, #0]
                    isEditing = 1u; 
 80030bc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80030c0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	f000 bd58 	b.w	8003b7c <button_handle+0x1408>
            if (buttonState & BUT_UP_M) 
 80030cc:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80030d0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	f012 0f04 	tst.w	r2, #4
 80030da:	d011      	beq.n	8003100 <button_handle+0x98c>
                subIndex = (uint8_t)((subIndex + 3u - 1u) % 3u); 
 80030dc:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 80030e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80030e4:	7803      	ldrb	r3, [r0, #0]
 80030e6:	3302      	adds	r3, #2
 80030e8:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 80030ec:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 80030f0:	fba1 4103 	umull	r4, r1, r1, r3
 80030f4:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 80030f8:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 80030fc:	1a5b      	subs	r3, r3, r1
 80030fe:	7003      	strb	r3, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 8003100:	f012 0f08 	tst.w	r2, #8
 8003104:	f43f af61 	beq.w	8002fca <button_handle+0x856>
                subIndex = (uint8_t)((subIndex + 1u) % 3u); 
 8003108:	f240 51dd 	movw	r1, #1501	@ 0x5dd
 800310c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003110:	780b      	ldrb	r3, [r1, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8003118:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 800311c:	fba2 0203 	umull	r0, r2, r2, r3
 8003120:	f402 70ff 	and.w	r0, r2, #510	@ 0x1fe
 8003124:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	700b      	strb	r3, [r1, #0]
 800312c:	e74d      	b.n	8002fca <button_handle+0x856>
        if (buttonState & BUT_LEFT_M)
 800312e:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003132:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f013 0001 	ands.w	r0, r3, #1
 800313c:	d13e      	bne.n	80031bc <button_handle+0xa48>
        if (isEditing)
 800313e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003142:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	2a00      	cmp	r2, #0
 800314a:	d074      	beq.n	8003236 <button_handle+0xac2>
            uint8_t sel = (uint8_t)(subIndex % 9u);
 800314c:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8003150:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003154:	7811      	ldrb	r1, [r2, #0]
 8003156:	f648 6239 	movw	r2, #36409	@ 0x8e39
 800315a:	f6c3 02e3 	movt	r2, #14563	@ 0x38e3
 800315e:	fba2 c201 	umull	ip, r2, r2, r1
 8003162:	0852      	lsrs	r2, r2, #1
 8003164:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8003168:	1a8a      	subs	r2, r1, r2
            int16_t val = adcGain[sel];
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f240 1144 	movw	r1, #324	@ 0x144
 8003170:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003174:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
            if (buttonState & BUT_UP_M) { if (val < 32767) { val++; } }
 8003178:	f013 0f04 	tst.w	r3, #4
 800317c:	d006      	beq.n	800318c <button_handle+0xa18>
 800317e:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8003182:	4561      	cmp	r1, ip
 8003184:	f000 860d 	beq.w	8003da2 <button_handle+0x162e>
 8003188:	3101      	adds	r1, #1
 800318a:	b209      	sxth	r1, r1
            if (buttonState & BUT_DOWN_M) { if (val > 0) { val--; } }
 800318c:	f013 0f08 	tst.w	r3, #8
 8003190:	d003      	beq.n	800319a <button_handle+0xa26>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd01      	ble.n	800319a <button_handle+0xa26>
 8003196:	3901      	subs	r1, #1
 8003198:	b209      	sxth	r1, r1
            adcGain[sel] = val;
 800319a:	f240 1c44 	movw	ip, #324	@ 0x144
 800319e:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80031a2:	f82c 1012 	strh.w	r1, [ip, r2, lsl #1]
        if (buttonState & BUT_RIGHT_M)
 80031a6:	f013 0f10 	tst.w	r3, #16
 80031aa:	f000 84e7 	beq.w	8003b7c <button_handle+0x1408>
            else { isEditing = 0u; }
 80031ae:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80031b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031b6:	7018      	strb	r0, [r3, #0]
        if (pageID == PAGE_MAIN) {
 80031b8:	f000 bce0 	b.w	8003b7c <button_handle+0x1408>
            if (isEditing)
 80031bc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80031c0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b303      	cbz	r3, 800320a <button_handle+0xa96>
                adcGain[sel] = (int16_t)editBackupValue; /* restore on cancel */
 80031c8:	f240 1144 	movw	r1, #324	@ 0x144
 80031cc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
                uint8_t sel = (uint8_t)(subIndex % 9u);
 80031d0:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80031d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	f648 6339 	movw	r3, #36409	@ 0x8e39
 80031de:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 80031e2:	fba3 0302 	umull	r0, r3, r3, r2
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80031ec:	1ad3      	subs	r3, r2, r3
                adcGain[sel] = (int16_t)editBackupValue; /* restore on cancel */
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 80031f4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                isEditing = 0u;
 80031fe:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003202:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
    pageID = page;
 800320a:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800320e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003212:	2208      	movs	r2, #8
 8003214:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003216:	f7fd fdfa 	bl	8000e0e <LCD_Clear>
            uiNeedsClear = 1u; buttonState = 0; return;
 800321a:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 800321e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800322a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	f000 bcc6 	b.w	8003bc2 <button_handle+0x144e>
            if (buttonState & BUT_UP_M) 
 8003236:	f013 0f04 	tst.w	r3, #4
 800323a:	d010      	beq.n	800325e <button_handle+0xaea>
                subIndex = (uint8_t)((subIndex + 9u - 1u) % 9u); 
 800323c:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003240:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003244:	7801      	ldrb	r1, [r0, #0]
 8003246:	3108      	adds	r1, #8
 8003248:	f648 6239 	movw	r2, #36409	@ 0x8e39
 800324c:	f6c3 02e3 	movt	r2, #14563	@ 0x38e3
 8003250:	fba2 4201 	umull	r4, r2, r2, r1
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800325a:	1a89      	subs	r1, r1, r2
 800325c:	7001      	strb	r1, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 800325e:	f013 0f08 	tst.w	r3, #8
 8003262:	d010      	beq.n	8003286 <button_handle+0xb12>
                subIndex = (uint8_t)((subIndex + 1u) % 9u); 
 8003264:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003268:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800326c:	7801      	ldrb	r1, [r0, #0]
 800326e:	3101      	adds	r1, #1
 8003270:	f648 6239 	movw	r2, #36409	@ 0x8e39
 8003274:	f6c3 02e3 	movt	r2, #14563	@ 0x38e3
 8003278:	fba2 4201 	umull	r4, r2, r2, r1
 800327c:	0852      	lsrs	r2, r2, #1
 800327e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8003282:	1a89      	subs	r1, r1, r2
 8003284:	7001      	strb	r1, [r0, #0]
        if (buttonState & BUT_RIGHT_M)
 8003286:	f013 0f10 	tst.w	r3, #16
 800328a:	f000 8477 	beq.w	8003b7c <button_handle+0x1408>
            if (!isEditing) { editBackupValue = (uint16_t)adcGain[sel]; isEditing = 1u; }
 800328e:	f240 51ce 	movw	r1, #1486	@ 0x5ce
 8003292:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003296:	f240 1044 	movw	r0, #324	@ 0x144
 800329a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
            uint8_t sel = (uint8_t)(subIndex % 9u);
 800329e:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80032a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80032a6:	781a      	ldrb	r2, [r3, #0]
 80032a8:	f648 6339 	movw	r3, #36409	@ 0x8e39
 80032ac:	f6c3 03e3 	movt	r3, #14563	@ 0x38e3
 80032b0:	fba3 4302 	umull	r4, r3, r3, r2
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80032ba:	1ad3      	subs	r3, r2, r3
            if (!isEditing) { editBackupValue = (uint16_t)adcGain[sel]; isEditing = 1u; }
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80032c2:	800b      	strh	r3, [r1, #0]
 80032c4:	2001      	movs	r0, #1
 80032c6:	e772      	b.n	80031ae <button_handle+0xa3a>
        if (buttonState & BUT_UP_M) 
 80032c8:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80032cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	f013 0f04 	tst.w	r3, #4
 80032d6:	d020      	beq.n	800331a <button_handle+0xba6>
            if (mfgPinInput[mfgPinPos] < 9) 
 80032d8:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 80032dc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 80032e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80032ea:	5c89      	ldrb	r1, [r1, r2]
 80032ec:	2908      	cmp	r1, #8
 80032ee:	d805      	bhi.n	80032fc <button_handle+0xb88>
                mfgPinInput[mfgPinPos]++;
 80032f0:	f240 50b0 	movw	r0, #1456	@ 0x5b0
 80032f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80032f8:	3101      	adds	r1, #1
 80032fa:	5481      	strb	r1, [r0, r2]
        if (buttonState & BUT_DOWN_M) 
 80032fc:	f013 0f08 	tst.w	r3, #8
 8003300:	d01a      	beq.n	8003338 <button_handle+0xbc4>
            if (mfgPinInput[mfgPinPos] > 0) 
 8003302:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 8003306:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800330a:	5c89      	ldrb	r1, [r1, r2]
                mfgPinInput[mfgPinPos]--;
 800330c:	f240 50b0 	movw	r0, #1456	@ 0x5b0
 8003310:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003314:	3901      	subs	r1, #1
 8003316:	5481      	strb	r1, [r0, r2]
 8003318:	e00e      	b.n	8003338 <button_handle+0xbc4>
        if (buttonState & BUT_DOWN_M) 
 800331a:	f013 0f08 	tst.w	r3, #8
 800331e:	d00b      	beq.n	8003338 <button_handle+0xbc4>
            if (mfgPinInput[mfgPinPos] > 0) 
 8003320:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 8003324:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 800332e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003332:	5c89      	ldrb	r1, [r1, r2]
 8003334:	2900      	cmp	r1, #0
 8003336:	d1e9      	bne.n	800330c <button_handle+0xb98>
        if (buttonState & BUT_LEFT_M) 
 8003338:	f013 0f01 	tst.w	r3, #1
 800333c:	d00c      	beq.n	8003358 <button_handle+0xbe4>
            if (mfgPinPos < 3u)
 800333e:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8003342:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d83f      	bhi.n	80033cc <button_handle+0xc58>
                mfgPinPos++;
 800334c:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 8003350:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003354:	3301      	adds	r3, #1
 8003356:	7013      	strb	r3, [r2, #0]
            GPIO_PinState rightNow = HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin);
 8003358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800335c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003360:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003364:	f002 f8f6 	bl	8005554 <HAL_GPIO_ReadPin>
            if (rightNow == GPIO_PIN_SET) {
 8003368:	2801      	cmp	r0, #1
 800336a:	d06e      	beq.n	800344a <button_handle+0xcd6>
                rightPressStartMs = 0u;
 800336c:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 8003370:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
                rightPressTriggered = 0u;
 8003378:	f240 5382 	movw	r3, #1410	@ 0x582
 800337c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003380:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 8003382:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003386:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f013 0f10 	tst.w	r3, #16
 8003390:	f000 83f4 	beq.w	8003b7c <button_handle+0x1408>
        if (pageID == PAGE_MAIN) {
 8003394:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003398:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b07      	cmp	r3, #7
 80033a0:	f200 83ec 	bhi.w	8003b7c <button_handle+0x1408>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <button_handle+0xc38>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	08003bc7 	.word	0x08003bc7
 80033b0:	08003b6d 	.word	0x08003b6d
 80033b4:	08002b09 	.word	0x08002b09
 80033b8:	08002d63 	.word	0x08002d63
 80033bc:	08003b7d 	.word	0x08003b7d
 80033c0:	08002f43 	.word	0x08002f43
 80033c4:	08002fdd 	.word	0x08002fdd
 80033c8:	08003ccb 	.word	0x08003ccb
                if (entered == mfgPinCode) {
 80033cc:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80033d0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 80033d4:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 80033d8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80033dc:	780b      	ldrb	r3, [r1, #0]
 80033de:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80033e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80033e6:	784b      	ldrb	r3, [r1, #1]
 80033e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033f6:	78ca      	ldrb	r2, [r1, #3]
 80033f8:	4413      	add	r3, r2
 80033fa:	788a      	ldrb	r2, [r1, #2]
 80033fc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003400:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                if (entered == mfgPinCode) {
 8003404:	8802      	ldrh	r2, [r0, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	429a      	cmp	r2, r3
 800340a:	d00f      	beq.n	800342c <button_handle+0xcb8>
                    mfgPinError = 1; 
 800340c:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8003410:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
                    mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 8003418:	f001 fe3d 	bl	8005096 <HAL_GetTick>
 800341c:	f240 53d0 	movw	r3, #1488	@ 0x5d0
 8003420:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003424:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8003428:	6018      	str	r0, [r3, #0]
 800342a:	e795      	b.n	8003358 <button_handle+0xbe4>
                    mfgPinError = 0; 
 800342c:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8003430:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8003438:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800343c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003440:	2208      	movs	r2, #8
 8003442:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003444:	f7fd fce3 	bl	8000e0e <LCD_Clear>
}
 8003448:	e786      	b.n	8003358 <button_handle+0xbe4>
                if (rightPressStartMs == 0u) { rightPressStartMs = HAL_GetTick(); rightPressTriggered = 0u; }
 800344a:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 800344e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d055      	beq.n	8003504 <button_handle+0xd90>
                else if (!rightPressTriggered && (HAL_GetTick() - rightPressStartMs) >= 1000u) {
 8003458:	f240 5382 	movw	r3, #1410	@ 0x582
 800345c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d18d      	bne.n	8003382 <button_handle+0xc0e>
 8003466:	f001 fe16 	bl	8005096 <HAL_GetTick>
 800346a:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 800346e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	1ac3      	subs	r3, r0, r3
 8003476:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800347a:	d382      	bcc.n	8003382 <button_handle+0xc0e>
                    if (entered == mfgPinCode) {
 800347c:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8003480:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                    uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 8003484:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 8003488:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800348c:	780b      	ldrb	r3, [r1, #0]
 800348e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8003492:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003496:	784b      	ldrb	r3, [r1, #1]
 8003498:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800349c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034a6:	78ca      	ldrb	r2, [r1, #3]
 80034a8:	4413      	add	r3, r2
 80034aa:	788a      	ldrb	r2, [r1, #2]
 80034ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80034b0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    if (entered == mfgPinCode) {
 80034b4:	8802      	ldrh	r2, [r0, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d031      	beq.n	8003520 <button_handle+0xdac>
                        mfgPinError = 1; 
 80034bc:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 80034c0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
                        mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 80034c8:	f001 fde5 	bl	8005096 <HAL_GetTick>
 80034cc:	f240 53d0 	movw	r3, #1488	@ 0x5d0
 80034d0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80034d4:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 80034d8:	6018      	str	r0, [r3, #0]
                        mfgPinPos = 0;
 80034da:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 80034de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
                        mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 80034e6:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 80034ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80034ee:	70da      	strb	r2, [r3, #3]
 80034f0:	709a      	strb	r2, [r3, #2]
 80034f2:	705a      	strb	r2, [r3, #1]
 80034f4:	701a      	strb	r2, [r3, #0]
                    rightPressTriggered = 1u; /* prevent retrigger until release */
 80034f6:	f240 5382 	movw	r3, #1410	@ 0x582
 80034fa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	e73e      	b.n	8003382 <button_handle+0xc0e>
                if (rightPressStartMs == 0u) { rightPressStartMs = HAL_GetTick(); rightPressTriggered = 0u; }
 8003504:	f001 fdc7 	bl	8005096 <HAL_GetTick>
 8003508:	f240 53d8 	movw	r3, #1496	@ 0x5d8
 800350c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003510:	6018      	str	r0, [r3, #0]
 8003512:	f240 5382 	movw	r3, #1410	@ 0x582
 8003516:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e730      	b.n	8003382 <button_handle+0xc0e>
                        mfgPinError = 0; 
 8003520:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8003524:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
    pageID = page;
 800352c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003530:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003534:	2208      	movs	r2, #8
 8003536:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003538:	f7fd fc69 	bl	8000e0e <LCD_Clear>
}
 800353c:	e7db      	b.n	80034f6 <button_handle+0xd82>
        if (buttonState & BUT_LEFT_M) 
 800353e:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003542:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f013 0f01 	tst.w	r3, #1
 800354c:	d158      	bne.n	8003600 <button_handle+0xe8c>
        if (buttonState & BUT_UP_M) 
 800354e:	f013 0f04 	tst.w	r3, #4
 8003552:	d011      	beq.n	8003578 <button_handle+0xe04>
            subIndex = (uint8_t)((subIndex + 5u - 1u) % 5u);
 8003554:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003558:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800355c:	7802      	ldrb	r2, [r0, #0]
 800355e:	3204      	adds	r2, #4
 8003560:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8003564:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8003568:	fba1 c102 	umull	ip, r1, r1, r2
 800356c:	f401 7cfe 	and.w	ip, r1, #508	@ 0x1fc
 8003570:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 8003574:	1a52      	subs	r2, r2, r1
 8003576:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_DOWN_M) 
 8003578:	f013 0f08 	tst.w	r3, #8
 800357c:	d011      	beq.n	80035a2 <button_handle+0xe2e>
            subIndex = (uint8_t)((subIndex + 1u) % 5u);
 800357e:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003582:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003586:	7802      	ldrb	r2, [r0, #0]
 8003588:	3201      	adds	r2, #1
 800358a:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 800358e:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8003592:	fba1 c102 	umull	ip, r1, r1, r2
 8003596:	f401 7cfe 	and.w	ip, r1, #508	@ 0x1fc
 800359a:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 800359e:	1a52      	subs	r2, r2, r1
 80035a0:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_RIGHT_M)
 80035a2:	f013 0f10 	tst.w	r3, #16
 80035a6:	f000 82e9 	beq.w	8003b7c <button_handle+0x1408>
            UiStrId ids[5] = { UI_STR_MFG_COMPANY, UI_STR_MFG_GAIN, UI_STR_MFG_OFFSET, UI_STR_MFG_LIMITS, UI_STR_MFG_MODE };
 80035aa:	231a      	movs	r3, #26
 80035ac:	f88d 3000 	strb.w	r3, [sp]
 80035b0:	231b      	movs	r3, #27
 80035b2:	f88d 3001 	strb.w	r3, [sp, #1]
 80035b6:	231c      	movs	r3, #28
 80035b8:	f88d 3002 	strb.w	r3, [sp, #2]
 80035bc:	231d      	movs	r3, #29
 80035be:	f88d 3003 	strb.w	r3, [sp, #3]
 80035c2:	231e      	movs	r3, #30
 80035c4:	f88d 3004 	strb.w	r3, [sp, #4]
            uint8_t sel = (uint8_t)(subIndex % 5u);
 80035c8:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 80035cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 80035d6:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 80035da:	fba2 1203 	umull	r1, r2, r2, r3
 80035de:	f002 01fc 	and.w	r1, r2, #252	@ 0xfc
 80035e2:	eb01 0292 	add.w	r2, r1, r2, lsr #2
 80035e6:	1a9b      	subs	r3, r3, r2
            if (ids[sel] == UI_STR_MFG_GAIN) {
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3308      	adds	r3, #8
 80035ec:	446b      	add	r3, sp
 80035ee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80035f2:	3b1a      	subs	r3, #26
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d853      	bhi.n	80036a0 <button_handle+0xf2c>
 80035f8:	e8df f003 	tbb	[pc, r3]
 80035fc:	49401737 	.word	0x49401737
    pageID = page;
 8003600:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003604:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003608:	2206      	movs	r2, #6
 800360a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800360c:	f7fd fbff 	bl	8000e0e <LCD_Clear>
            uiNeedsClear = 1u; buttonState = 0; return;
 8003610:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8003614:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003620:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e2cb      	b.n	8003bc2 <button_handle+0x144e>
                isEditing = 0u; /* reset edit state when entering gain */
 800362a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800362e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
                subIndex = 0u; /* start from first channel */
 8003636:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 800363a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800363e:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8003640:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003644:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003648:	2209      	movs	r2, #9
 800364a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800364c:	f7fd fbdf 	bl	8000e0e <LCD_Clear>
            uiNeedsClear = 1u; buttonState = 0; return;
 8003650:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8003654:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003660:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e2ab      	b.n	8003bc2 <button_handle+0x144e>
    pageID = page;
 800366a:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800366e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003672:	220a      	movs	r2, #10
 8003674:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003676:	f7fd fbca 	bl	8000e0e <LCD_Clear>
}
 800367a:	e7e9      	b.n	8003650 <button_handle+0xedc>
    pageID = page;
 800367c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003680:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003684:	220b      	movs	r2, #11
 8003686:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003688:	f7fd fbc1 	bl	8000e0e <LCD_Clear>
}
 800368c:	e7e0      	b.n	8003650 <button_handle+0xedc>
    pageID = page;
 800368e:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003692:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003696:	220c      	movs	r2, #12
 8003698:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800369a:	f7fd fbb8 	bl	8000e0e <LCD_Clear>
}
 800369e:	e7d7      	b.n	8003650 <button_handle+0xedc>
    pageID = page;
 80036a0:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 80036a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036a8:	220d      	movs	r2, #13
 80036aa:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80036ac:	f7fd fbaf 	bl	8000e0e <LCD_Clear>
}
 80036b0:	e7ce      	b.n	8003650 <button_handle+0xedc>
        if (buttonState & BUT_RIGHT_M)
 80036b2:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80036b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036ba:	7819      	ldrb	r1, [r3, #0]
 80036bc:	f011 0f10 	tst.w	r1, #16
 80036c0:	d00c      	beq.n	80036dc <button_handle+0xf68>
            if (companyEditPos < 19u) { 
 80036c2:	f240 53b6 	movw	r3, #1462	@ 0x5b6
 80036c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b12      	cmp	r3, #18
 80036ce:	d826      	bhi.n	800371e <button_handle+0xfaa>
                companyEditPos++; 
 80036d0:	f240 52b6 	movw	r2, #1462	@ 0x5b6
 80036d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80036d8:	3301      	adds	r3, #1
 80036da:	7013      	strb	r3, [r2, #0]
        if (isEditing)
 80036dc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80036e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8248 	beq.w	8003b7c <button_handle+0x1408>
            char c = companyName[companyEditPos];
 80036ec:	f240 53b6 	movw	r3, #1462	@ 0x5b6
 80036f0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036f4:	7818      	ldrb	r0, [r3, #0]
 80036f6:	4602      	mov	r2, r0
 80036f8:	f240 0318 	movw	r3, #24
 80036fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003700:	5c1b      	ldrb	r3, [r3, r0]
            if (buttonState & BUT_UP_M)
 8003702:	f011 0f04 	tst.w	r1, #4
 8003706:	d02b      	beq.n	8003760 <button_handle+0xfec>
                if (c == '\0') {
 8003708:	b31b      	cbz	r3, 8003752 <button_handle+0xfde>
                } else if (c == ' ') {
 800370a:	2b20      	cmp	r3, #32
 800370c:	d03c      	beq.n	8003788 <button_handle+0x1014>
                } else if (c >= 'A' && c < 'Z') {
 800370e:	f1a3 0441 	sub.w	r4, r3, #65	@ 0x41
 8003712:	b2e4      	uxtb	r4, r4
 8003714:	2c18      	cmp	r4, #24
 8003716:	d839      	bhi.n	800378c <button_handle+0x1018>
                    c++; 
 8003718:	3301      	adds	r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e01a      	b.n	8003754 <button_handle+0xfe0>
                isEditing = 0u; lcd_menu_set_page(PAGE_MFG_MENU); uiNeedsClear = 1u; buttonState = 0; return;
 800371e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003722:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003726:	2400      	movs	r4, #0
 8003728:	701c      	strb	r4, [r3, #0]
    pageID = page;
 800372a:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800372e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003732:	2208      	movs	r2, #8
 8003734:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003736:	f7fd fb6a 	bl	8000e0e <LCD_Clear>
                isEditing = 0u; lcd_menu_set_page(PAGE_MFG_MENU); uiNeedsClear = 1u; buttonState = 0; return;
 800373a:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 800373e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 800374a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800374e:	701c      	strb	r4, [r3, #0]
 8003750:	e237      	b.n	8003bc2 <button_handle+0x144e>
                    c = ' ';
 8003752:	2320      	movs	r3, #32
                companyName[companyEditPos] = c;
 8003754:	f240 0c18 	movw	ip, #24
 8003758:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800375c:	f80c 3000 	strb.w	r3, [ip, r0]
            if (buttonState & BUT_DOWN_M)
 8003760:	f011 0f08 	tst.w	r1, #8
 8003764:	f000 820a 	beq.w	8003b7c <button_handle+0x1408>
                if (c == 'A' || c == ' ')
 8003768:	2b41      	cmp	r3, #65	@ 0x41
 800376a:	d011      	beq.n	8003790 <button_handle+0x101c>
 800376c:	2b20      	cmp	r3, #32
 800376e:	d00f      	beq.n	8003790 <button_handle+0x101c>
                else if (c > 'A' && c <= 'Z')
 8003770:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	2a18      	cmp	r2, #24
 8003778:	d83c      	bhi.n	80037f4 <button_handle+0x1080>
                    c--; companyName[companyEditPos] = c;
 800377a:	f240 0218 	movw	r2, #24
 800377e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003782:	3b01      	subs	r3, #1
 8003784:	5413      	strb	r3, [r2, r0]
 8003786:	e1f9      	b.n	8003b7c <button_handle+0x1408>
                    c = 'A'; /* space -> A */
 8003788:	2341      	movs	r3, #65	@ 0x41
 800378a:	e7e3      	b.n	8003754 <button_handle+0xfe0>
                    c = ' '; /* Z -> space */
 800378c:	2320      	movs	r3, #32
 800378e:	e7e1      	b.n	8003754 <button_handle+0xfe0>
 8003790:	f240 0318 	movw	r3, #24
 8003794:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003798:	4403      	add	r3, r0
                    while (i < 20)
 800379a:	2a13      	cmp	r2, #19
 800379c:	dc05      	bgt.n	80037aa <button_handle+0x1036>
                        companyName[i] = companyName[i+1];
 800379e:	3201      	adds	r2, #1
 80037a0:	7859      	ldrb	r1, [r3, #1]
 80037a2:	f803 1b01 	strb.w	r1, [r3], #1
                        if (companyName[i] == '\0') break;
 80037a6:	2900      	cmp	r1, #0
 80037a8:	d1f7      	bne.n	800379a <button_handle+0x1026>
                    companyName[20] = '\0';
 80037aa:	f240 0318 	movw	r3, #24
 80037ae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037b2:	2200      	movs	r2, #0
 80037b4:	751a      	strb	r2, [r3, #20]
                    int len = 0; while (companyName[len] && len < 20) len++;
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b1c3      	cbz	r3, 80037ec <button_handle+0x1078>
 80037ba:	f240 0218 	movw	r2, #24
 80037be:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80037c2:	2300      	movs	r3, #0
 80037c4:	3301      	adds	r3, #1
 80037c6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80037ca:	b159      	cbz	r1, 80037e4 <button_handle+0x1070>
 80037cc:	2b14      	cmp	r3, #20
 80037ce:	d1f9      	bne.n	80037c4 <button_handle+0x1050>
                    if (companyEditPos >= (uint8_t)len && companyEditPos > 0u) { companyEditPos--; }
 80037d0:	2813      	cmp	r0, #19
 80037d2:	f240 81d3 	bls.w	8003b7c <button_handle+0x1408>
 80037d6:	f240 53b6 	movw	r3, #1462	@ 0x5b6
 80037da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037de:	3801      	subs	r0, #1
 80037e0:	7018      	strb	r0, [r3, #0]
 80037e2:	e1cb      	b.n	8003b7c <button_handle+0x1408>
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4298      	cmp	r0, r3
 80037e8:	f0c0 81c8 	bcc.w	8003b7c <button_handle+0x1408>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f000 81c5 	beq.w	8003b7c <button_handle+0x1408>
 80037f2:	e7f0      	b.n	80037d6 <button_handle+0x1062>
                    companyName[companyEditPos] = 'A';
 80037f4:	f240 0318 	movw	r3, #24
 80037f8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037fc:	2241      	movs	r2, #65	@ 0x41
 80037fe:	541a      	strb	r2, [r3, r0]
 8003800:	e1bc      	b.n	8003b7c <button_handle+0x1408>
        if (buttonState & BUT_LEFT_M)
 8003802:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003806:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	f013 0f01 	tst.w	r3, #1
 8003810:	d12d      	bne.n	800386e <button_handle+0x10fa>
        if (buttonState & BUT_RIGHT_M)
 8003812:	f013 0f10 	tst.w	r3, #16
 8003816:	d05c      	beq.n	80038d2 <button_handle+0x115e>
            if (!isEditing) { editBackupValue = dcOffset; isEditing = 1u; }
 8003818:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800381c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	2a00      	cmp	r2, #0
 8003824:	d14e      	bne.n	80038c4 <button_handle+0x1150>
 8003826:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 800382a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800382e:	f240 0100 	movw	r1, #0
 8003832:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003836:	8809      	ldrh	r1, [r1, #0]
 8003838:	8011      	strh	r1, [r2, #0]
 800383a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800383e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003842:	2101      	movs	r1, #1
 8003844:	7011      	strb	r1, [r2, #0]
            uint16_t val = dcOffset;
 8003846:	f240 0200 	movw	r2, #0
 800384a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800384e:	8812      	ldrh	r2, [r2, #0]
            if (buttonState & BUT_UP_M) { if (val < 65535u) { val++; } }
 8003850:	f013 0f04 	tst.w	r3, #4
 8003854:	d046      	beq.n	80038e4 <button_handle+0x1170>
 8003856:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800385a:	428a      	cmp	r2, r1
 800385c:	d001      	beq.n	8003862 <button_handle+0x10ee>
 800385e:	3201      	adds	r2, #1
 8003860:	b292      	uxth	r2, r2
            if (buttonState & BUT_DOWN_M) { if (val > 0u) { val--; } }
 8003862:	f013 0f08 	tst.w	r3, #8
 8003866:	d042      	beq.n	80038ee <button_handle+0x117a>
 8003868:	3a01      	subs	r2, #1
 800386a:	b292      	uxth	r2, r2
 800386c:	e03f      	b.n	80038ee <button_handle+0x117a>
            if (isEditing) { dcOffset = (uint16_t)editBackupValue; isEditing = 0u; }
 800386e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003872:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b17b      	cbz	r3, 800389a <button_handle+0x1126>
 800387a:	f240 0300 	movw	r3, #0
 800387e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003882:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 8003886:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003892:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
    pageID = page;
 800389a:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 800389e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038a2:	2208      	movs	r2, #8
 80038a4:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80038a6:	f7fd fab2 	bl	8000e0e <LCD_Clear>
            lcd_menu_set_page(PAGE_MFG_MENU); uiNeedsClear = 1u; buttonState = 0; return;
 80038aa:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 80038ae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80038ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e17e      	b.n	8003bc2 <button_handle+0x144e>
            else { isEditing = 0u; }
 80038c4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80038c8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
        if (isEditing)
 80038d0:	e154      	b.n	8003b7c <button_handle+0x1408>
 80038d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80038d6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	2a00      	cmp	r2, #0
 80038de:	f000 814d 	beq.w	8003b7c <button_handle+0x1408>
 80038e2:	e7b0      	b.n	8003846 <button_handle+0x10d2>
            if (buttonState & BUT_DOWN_M) { if (val > 0u) { val--; } }
 80038e4:	f013 0f08 	tst.w	r3, #8
 80038e8:	d001      	beq.n	80038ee <button_handle+0x117a>
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d1bc      	bne.n	8003868 <button_handle+0x10f4>
            dcOffset = val;
 80038ee:	f240 0300 	movw	r3, #0
 80038f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	e140      	b.n	8003b7c <button_handle+0x1408>
        if (buttonState & BUT_RIGHT_M)
 80038fa:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 80038fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f013 0f10 	tst.w	r3, #16
 8003908:	d05a      	beq.n	80039c0 <button_handle+0x124c>
            if (!isEditing) {
 800390a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800390e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	bb12      	cbnz	r2, 800395c <button_handle+0x11e8>
                if (subIndex == 0) {
 8003916:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 800391a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	b982      	cbnz	r2, 8003944 <button_handle+0x11d0>
                    editBackupValue = vMax_dV;
 8003922:	f240 0212 	movw	r2, #18
 8003926:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800392a:	8811      	ldrh	r1, [r2, #0]
 800392c:	f240 52ce 	movw	r2, #1486	@ 0x5ce
 8003930:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003934:	8011      	strh	r1, [r2, #0]
                isEditing = 1u;
 8003936:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800393a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800393e:	2101      	movs	r1, #1
 8003940:	7011      	strb	r1, [r2, #0]
        if (isEditing) {
 8003942:	e044      	b.n	80039ce <button_handle+0x125a>
                } else if (subIndex == 1) {
 8003944:	2a01      	cmp	r2, #1
                    editBackupValue = iMax_dA;
 8003946:	bf07      	ittee	eq
 8003948:	f240 0210 	movweq	r2, #16
 800394c:	f2c2 0200 	movteq	r2, #8192	@ 0x2000
                    editBackupValue = tempMax;
 8003950:	f240 020e 	movwne	r2, #14
 8003954:	f2c2 0200 	movtne	r2, #8192	@ 0x2000
 8003958:	8811      	ldrh	r1, [r2, #0]
 800395a:	e7e7      	b.n	800392c <button_handle+0x11b8>
                isEditing = 0u;
 800395c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003960:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003964:	2100      	movs	r1, #0
 8003966:	7011      	strb	r1, [r2, #0]
            if (buttonState & BUT_UP_M) 
 8003968:	f013 0f04 	tst.w	r3, #4
 800396c:	d011      	beq.n	8003992 <button_handle+0x121e>
                subIndex = (uint8_t)((subIndex + 3u - 1u) % 3u);
 800396e:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003972:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003976:	7802      	ldrb	r2, [r0, #0]
 8003978:	3202      	adds	r2, #2
 800397a:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 800397e:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 8003982:	fba1 4102 	umull	r4, r1, r1, r2
 8003986:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 800398a:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 800398e:	1a52      	subs	r2, r2, r1
 8003990:	7002      	strb	r2, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 8003992:	f013 0f08 	tst.w	r3, #8
 8003996:	f000 80f1 	beq.w	8003b7c <button_handle+0x1408>
                subIndex = (uint8_t)((subIndex + 1u) % 3u);
 800399a:	f240 51dd 	movw	r1, #1501	@ 0x5dd
 800399e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80039a2:	780b      	ldrb	r3, [r1, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 80039aa:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 80039ae:	fba2 0203 	umull	r0, r2, r2, r3
 80039b2:	f402 70ff 	and.w	r0, r2, #510	@ 0x1fe
 80039b6:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
 80039be:	e0dd      	b.n	8003b7c <button_handle+0x1408>
        if (isEditing) {
 80039c0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80039c4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	2a00      	cmp	r2, #0
 80039cc:	d0cc      	beq.n	8003968 <button_handle+0x11f4>
            if (buttonState & BUT_UP_M) {
 80039ce:	f013 0f04 	tst.w	r3, #4
 80039d2:	d051      	beq.n	8003a78 <button_handle+0x1304>
                if (subIndex == 0 && vMax_dV < 500) { vMax_dV++; }
 80039d4:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 80039d8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80039dc:	7812      	ldrb	r2, [r2, #0]
 80039de:	bb0a      	cbnz	r2, 8003a24 <button_handle+0x12b0>
 80039e0:	f240 0212 	movw	r2, #18
 80039e4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80039e8:	8812      	ldrh	r2, [r2, #0]
 80039ea:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 80039ee:	f080 8229 	bcs.w	8003e44 <button_handle+0x16d0>
 80039f2:	f240 0112 	movw	r1, #18
 80039f6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80039fa:	3201      	adds	r2, #1
 80039fc:	800a      	strh	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) {
 80039fe:	f013 0f08 	tst.w	r3, #8
 8003a02:	f000 80bb 	beq.w	8003b7c <button_handle+0x1408>
                if (subIndex == 0 && vMax_dV > 50) { vMax_dV--; }
 8003a06:	f240 0312 	movw	r3, #18
 8003a0a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	2b32      	cmp	r3, #50	@ 0x32
 8003a12:	f240 80b3 	bls.w	8003b7c <button_handle+0x1408>
 8003a16:	f240 0212 	movw	r2, #18
 8003a1a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	8013      	strh	r3, [r2, #0]
 8003a22:	e0ab      	b.n	8003b7c <button_handle+0x1408>
                else if (subIndex == 1 && iMax_dA < 500) { iMax_dA++; }
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	d112      	bne.n	8003a4e <button_handle+0x12da>
 8003a28:	f240 0210 	movw	r2, #16
 8003a2c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a30:	8812      	ldrh	r2, [r2, #0]
 8003a32:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8003a36:	f080 820a 	bcs.w	8003e4e <button_handle+0x16da>
 8003a3a:	f240 0110 	movw	r1, #16
 8003a3e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003a42:	3201      	adds	r2, #1
 8003a44:	800a      	strh	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) {
 8003a46:	f013 0f08 	tst.w	r3, #8
 8003a4a:	d121      	bne.n	8003a90 <button_handle+0x131c>
 8003a4c:	e096      	b.n	8003b7c <button_handle+0x1408>
                else if (subIndex == 2 && tempMax < 150) { tempMax++; }
 8003a4e:	2a02      	cmp	r2, #2
 8003a50:	f040 8094 	bne.w	8003b7c <button_handle+0x1408>
 8003a54:	f240 020e 	movw	r2, #14
 8003a58:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	2a95      	cmp	r2, #149	@ 0x95
 8003a60:	f200 81fa 	bhi.w	8003e58 <button_handle+0x16e4>
 8003a64:	f240 010e 	movw	r1, #14
 8003a68:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003a6c:	3201      	adds	r2, #1
 8003a6e:	800a      	strh	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) {
 8003a70:	f013 0f08 	tst.w	r3, #8
 8003a74:	d11c      	bne.n	8003ab0 <button_handle+0x133c>
 8003a76:	e081      	b.n	8003b7c <button_handle+0x1408>
 8003a78:	f013 0f08 	tst.w	r3, #8
 8003a7c:	d07e      	beq.n	8003b7c <button_handle+0x1408>
                if (subIndex == 0 && vMax_dV > 50) { vMax_dV--; }
 8003a7e:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8003a82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0bc      	beq.n	8003a06 <button_handle+0x1292>
                else if (subIndex == 1 && iMax_dA > 10) { iMax_dA--; }
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10d      	bne.n	8003aac <button_handle+0x1338>
 8003a90:	f240 0310 	movw	r3, #16
 8003a94:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b0a      	cmp	r3, #10
 8003a9c:	d96e      	bls.n	8003b7c <button_handle+0x1408>
 8003a9e:	f240 0210 	movw	r2, #16
 8003aa2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	8013      	strh	r3, [r2, #0]
 8003aaa:	e067      	b.n	8003b7c <button_handle+0x1408>
                else if (subIndex == 2 && tempMax > 50) { tempMax--; }
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d165      	bne.n	8003b7c <button_handle+0x1408>
 8003ab0:	f240 030e 	movw	r3, #14
 8003ab4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	2b32      	cmp	r3, #50	@ 0x32
 8003abc:	d95e      	bls.n	8003b7c <button_handle+0x1408>
 8003abe:	f240 020e 	movw	r2, #14
 8003ac2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	8013      	strh	r3, [r2, #0]
 8003aca:	e057      	b.n	8003b7c <button_handle+0x1408>
        if (buttonState & BUT_UP_M) 
 8003acc:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003ad0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f013 0f04 	tst.w	r3, #4
 8003ada:	d011      	beq.n	8003b00 <button_handle+0x138c>
            subIndex = (uint8_t)((subIndex + 3u - 1u) % 3u);
 8003adc:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003ae0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003ae4:	7802      	ldrb	r2, [r0, #0]
 8003ae6:	3202      	adds	r2, #2
 8003ae8:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 8003aec:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 8003af0:	fba1 c102 	umull	ip, r1, r1, r2
 8003af4:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 8003af8:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 8003afc:	1a52      	subs	r2, r2, r1
 8003afe:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_DOWN_M) 
 8003b00:	f013 0f08 	tst.w	r3, #8
 8003b04:	d011      	beq.n	8003b2a <button_handle+0x13b6>
            subIndex = (uint8_t)((subIndex + 1u) % 3u);
 8003b06:	f240 50dd 	movw	r0, #1501	@ 0x5dd
 8003b0a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003b0e:	7802      	ldrb	r2, [r0, #0]
 8003b10:	3201      	adds	r2, #1
 8003b12:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 8003b16:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 8003b1a:	fba1 c102 	umull	ip, r1, r1, r2
 8003b1e:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 8003b22:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 8003b26:	1a52      	subs	r2, r2, r1
 8003b28:	7002      	strb	r2, [r0, #0]
        if (buttonState & BUT_RIGHT_M)
 8003b2a:	f013 0f10 	tst.w	r3, #16
 8003b2e:	d025      	beq.n	8003b7c <button_handle+0x1408>
            deviceMode = (uint8_t)(subIndex % 3u);
 8003b30:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8003b34:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8003b3e:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8003b42:	fba2 1203 	umull	r1, r2, r2, r3
 8003b46:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8003b4a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f240 0214 	movw	r2, #20
 8003b56:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003b5a:	7013      	strb	r3, [r2, #0]
            if (deviceMode == 0) { /* GUC KAYNAGI */
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8126 	beq.w	8003dae <button_handle+0x163a>
            } else if (deviceMode == 1) { /* SARJ CIHAZI */
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f040 8136 	bne.w	8003dd4 <button_handle+0x1660>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	e121      	b.n	8003db0 <button_handle+0x163c>
    pageID = page;
 8003b6c:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003b70:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b74:	2202      	movs	r2, #2
 8003b76:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003b78:	f7fd f949 	bl	8000e0e <LCD_Clear>
            }
        }
    }

    /* On/Off button handling for output control */
    if (buttonState & BUT_ON_M) {
 8003b7c:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003b80:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f013 0f02 	tst.w	r3, #2
 8003b8a:	d005      	beq.n	8003b98 <button_handle+0x1424>
        outputState = 1;
 8003b8c:	f240 52df 	movw	r2, #1503	@ 0x5df
 8003b90:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003b94:	2101      	movs	r1, #1
 8003b96:	7011      	strb	r1, [r2, #0]
    }
    if (buttonState & BUT_OFF_M) {
 8003b98:	f013 0f20 	tst.w	r3, #32
 8003b9c:	d005      	beq.n	8003baa <button_handle+0x1436>
        outputState = 0;
 8003b9e:	f240 53df 	movw	r3, #1503	@ 0x5df
 8003ba2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
    }

    uiNeedsClear = 1; /* clear-once after any button handling */
 8003baa:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8003bae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
    buttonState = 0;
 8003bb6:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003bba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
}
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd10      	pop	{r4, pc}
    pageID = page;
 8003bc6:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003bca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003bd2:	f7fd f91c 	bl	8000e0e <LCD_Clear>
}
 8003bd6:	e7d1      	b.n	8003b7c <button_handle+0x1408>
            switch (menuIndex) {
 8003bd8:	f240 53de 	movw	r3, #1502	@ 0x5de
 8003bdc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d8ca      	bhi.n	8003b7c <button_handle+0x1408>
 8003be6:	e8df f003 	tbb	[pc, r3]
 8003bea:	0b02      	.short	0x0b02
 8003bec:	1d14      	.short	0x1d14
    pageID = page;
 8003bee:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003bf2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003bfa:	f7fd f908 	bl	8000e0e <LCD_Clear>
}
 8003bfe:	e7bd      	b.n	8003b7c <button_handle+0x1408>
    pageID = page;
 8003c00:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003c04:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003c0c:	f7fd f8ff 	bl	8000e0e <LCD_Clear>
}
 8003c10:	e7b4      	b.n	8003b7c <button_handle+0x1408>
    pageID = page;
 8003c12:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003c16:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003c1e:	f7fd f8f6 	bl	8000e0e <LCD_Clear>
}
 8003c22:	e7ab      	b.n	8003b7c <button_handle+0x1408>
    pageID = page;
 8003c24:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003c28:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c2c:	2206      	movs	r2, #6
 8003c2e:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003c30:	f7fd f8ed 	bl	8000e0e <LCD_Clear>
}
 8003c34:	e7a2      	b.n	8003b7c <button_handle+0x1408>
    pageID = page;
 8003c36:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003c3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003c42:	f7fd f8e4 	bl	8000e0e <LCD_Clear>
}
 8003c46:	e799      	b.n	8003b7c <button_handle+0x1408>
    pageID = page;
 8003c48:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003c4c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c50:	2206      	movs	r2, #6
 8003c52:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003c54:	f7fd f8db 	bl	8000e0e <LCD_Clear>
}
 8003c58:	e790      	b.n	8003b7c <button_handle+0x1408>
                            editBackupValue = (uint16_t)batInfo.batteryCap; 
 8003c5a:	f240 53ce 	movw	r3, #1486	@ 0x5ce
 8003c5e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c62:	f240 0234 	movw	r2, #52	@ 0x34
 8003c66:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003c6a:	6852      	ldr	r2, [r2, #4]
 8003c6c:	801a      	strh	r2, [r3, #0]
 8003c6e:	e091      	b.n	8003d94 <button_handle+0x1620>
                        if (subIndex == 0u) 
 8003c70:	f240 53dd 	movw	r3, #1501	@ 0x5dd
 8003c74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b953      	cbnz	r3, 8003c92 <button_handle+0x151e>
                            editBackupValue = outputVSet_dV; 
 8003c7c:	f240 53ce 	movw	r3, #1486	@ 0x5ce
 8003c80:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c84:	f240 02c6 	movw	r2, #198	@ 0xc6
 8003c88:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	e080      	b.n	8003d94 <button_handle+0x1620>
                            editBackupValue = outputIMax_dA; 
 8003c92:	f240 53ce 	movw	r3, #1486	@ 0x5ce
 8003c96:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c9a:	f240 02c4 	movw	r2, #196	@ 0xc4
 8003c9e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	e075      	b.n	8003d94 <button_handle+0x1620>
                lcd_menu_set_language((uint8_t)(lcdLangId ^ 1u));
 8003ca8:	f240 032e 	movw	r3, #46	@ 0x2e
 8003cac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cb0:	7818      	ldrb	r0, [r3, #0]
 8003cb2:	f080 0001 	eor.w	r0, r0, #1
 8003cb6:	f7fd f9f6 	bl	80010a6 <lcd_menu_set_language>
 8003cba:	e75f      	b.n	8003b7c <button_handle+0x1408>
                    isEditing = 0u; 
 8003cbc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003cc0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e758      	b.n	8003b7c <button_handle+0x1408>
            if (mfgPinPos < 3u)
 8003cca:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8003cce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d806      	bhi.n	8003ce6 <button_handle+0x1572>
                mfgPinPos++;
 8003cd8:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 8003cdc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	7013      	strb	r3, [r2, #0]
 8003ce4:	e74a      	b.n	8003b7c <button_handle+0x1408>
                if (entered == mfgPinCode) {
 8003ce6:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8003cea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 8003cee:	f240 51b0 	movw	r1, #1456	@ 0x5b0
 8003cf2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003cf6:	780b      	ldrb	r3, [r1, #0]
 8003cf8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8003cfc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8003d00:	784b      	ldrb	r3, [r1, #1]
 8003d02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d10:	78ca      	ldrb	r2, [r1, #3]
 8003d12:	4413      	add	r3, r2
 8003d14:	788a      	ldrb	r2, [r1, #2]
 8003d16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003d1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                if (entered == mfgPinCode) {
 8003d1e:	8802      	ldrh	r2, [r0, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d01d      	beq.n	8003d62 <button_handle+0x15ee>
                    mfgPinError = 1; 
 8003d26:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8003d2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
                    mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 8003d32:	f001 f9b0 	bl	8005096 <HAL_GetTick>
 8003d36:	f240 53d0 	movw	r3, #1488	@ 0x5d0
 8003d3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d3e:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8003d42:	6018      	str	r0, [r3, #0]
                    mfgPinPos = 0;
 8003d44:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 8003d48:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
                    mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 8003d50:	f240 53b0 	movw	r3, #1456	@ 0x5b0
 8003d54:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d58:	70da      	strb	r2, [r3, #3]
 8003d5a:	709a      	strb	r2, [r3, #2]
 8003d5c:	705a      	strb	r2, [r3, #1]
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e70c      	b.n	8003b7c <button_handle+0x1408>
                    mfgPinError = 0; 
 8003d62:	f240 53d4 	movw	r3, #1492	@ 0x5d4
 8003d66:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8003d6e:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003d72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d76:	2208      	movs	r2, #8
 8003d78:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003d7a:	f7fd f848 	bl	8000e0e <LCD_Clear>
}
 8003d7e:	e6fd      	b.n	8003b7c <button_handle+0x1408>
                if (!isEditing) {
 8003d80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003d84:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	2a00      	cmp	r2, #0
 8003d8c:	d153      	bne.n	8003e36 <button_handle+0x16c2>
                        if (subIndex == 1u) 
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	f43f af63 	beq.w	8003c5a <button_handle+0x14e6>
                    isEditing = 1u;
 8003d94:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003d98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e6ec      	b.n	8003b7c <button_handle+0x1408>
            if (buttonState & BUT_DOWN_M) { if (val > 0) { val--; } }
 8003da2:	f013 0f08 	tst.w	r3, #8
 8003da6:	f43f a9f8 	beq.w	800319a <button_handle+0xa26>
 8003daa:	f7ff b9f4 	b.w	8003196 <button_handle+0xa22>
 8003dae:	2201      	movs	r2, #1
                operatingMode = MODE_CHARGER;
 8003db0:	f240 7372 	movw	r3, #1906	@ 0x772
 8003db4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003db8:	701a      	strb	r2, [r3, #0]
            if (deviceMode != 2 && menuIndex >= 2) {
 8003dba:	f240 53de 	movw	r3, #1502	@ 0x5de
 8003dbe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d905      	bls.n	8003dd4 <button_handle+0x1660>
                menuIndex = 0; /* Reset to first menu item */
 8003dc8:	f240 53de 	movw	r3, #1502	@ 0x5de
 8003dcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8003dd4:	f240 53e2 	movw	r3, #1506	@ 0x5e2
 8003dd8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ddc:	2208      	movs	r2, #8
 8003dde:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8003de0:	f7fd f815 	bl	8000e0e <LCD_Clear>
            uiNeedsClear = 1u; buttonState = 0; return;
 8003de4:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8003de8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003df4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e6e1      	b.n	8003bc2 <button_handle+0x144e>
                if (buttonState & BUT_DOWN_M) {
 8003dfe:	f013 0f08 	tst.w	r3, #8
 8003e02:	d007      	beq.n	8003e14 <button_handle+0x16a0>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8003e04:	f240 03c6 	movw	r3, #198	@ 0xc6
 8003e08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f47e af40 	bne.w	8002c94 <button_handle+0x520>
    if (buttonState & BUT_RIGHT_M) {
 8003e14:	f240 53e1 	movw	r3, #1505	@ 0x5e1
 8003e18:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	f013 0f10 	tst.w	r3, #16
 8003e22:	f43f aeab 	beq.w	8003b7c <button_handle+0x1408>
                if (!isEditing) {
 8003e26:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003e2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f43f af1d 	beq.w	8003c70 <button_handle+0x14fc>
                    isEditing = 0u;
 8003e36:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003e3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e69b      	b.n	8003b7c <button_handle+0x1408>
            if (buttonState & BUT_DOWN_M) {
 8003e44:	f013 0f08 	tst.w	r3, #8
 8003e48:	f47f addd 	bne.w	8003a06 <button_handle+0x1292>
 8003e4c:	e696      	b.n	8003b7c <button_handle+0x1408>
 8003e4e:	f013 0f08 	tst.w	r3, #8
 8003e52:	f43f ae93 	beq.w	8003b7c <button_handle+0x1408>
 8003e56:	e61b      	b.n	8003a90 <button_handle+0x131c>
 8003e58:	f013 0f08 	tst.w	r3, #8
 8003e5c:	f43f ae8e 	beq.w	8003b7c <button_handle+0x1408>
                else if (subIndex == 2 && tempMax > 50) { tempMax--; }
 8003e60:	f240 030e 	movw	r3, #14
 8003e64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	e628      	b.n	8003abe <button_handle+0x134a>
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e70:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e74:	f1c0 0c07 	rsb	ip, r0, #7
 8003e78:	f1bc 0f04 	cmp.w	ip, #4
 8003e7c:	bf28      	it	cs
 8003e7e:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e82:	1d03      	adds	r3, r0, #4
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	bf8c      	ite	hi
 8003e88:	1ec3      	subhi	r3, r0, #3
 8003e8a:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	fa00 fc0c 	lsl.w	ip, r0, ip
 8003e94:	ea21 010c 	bic.w	r1, r1, ip
 8003e98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e9a:	4098      	lsls	r0, r3
 8003e9c:	ea22 0000 	bic.w	r0, r2, r0
         );
}
 8003ea0:	4308      	orrs	r0, r1
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_SetChannelSamplingTime>:
{
 8003ea4:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eaa:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003eae:	fab3 f383 	clz	r3, r3
 8003eb2:	f001 7e00 	and.w	lr, r1, #33554432	@ 0x2000000
 8003eb6:	fa2e fe03 	lsr.w	lr, lr, r3
 8003eba:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 8003ebc:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003ec0:	f001 71f8 	and.w	r1, r1, #32505856	@ 0x1f00000
 8003ec4:	f04f 73f8 	mov.w	r3, #32505856	@ 0x1f00000
 8003ec8:	fa93 fca3 	rbit	ip, r3
 8003ecc:	fabc fc8c 	clz	ip, ip
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003edc:	2507      	movs	r5, #7
 8003ede:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003ee2:	ea24 0c0c 	bic.w	ip, r4, ip
 8003ee6:	40d9      	lsrs	r1, r3
 8003ee8:	408a      	lsls	r2, r1
 8003eea:	ea4c 0202 	orr.w	r2, ip, r2
 8003eee:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
}
 8003ef2:	bd30      	pop	{r4, r5, pc}

08003ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b500      	push	{lr}
 8003ef6:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef8:	2300      	movs	r3, #0
 8003efa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8003efe:	930d      	str	r3, [sp, #52]	@ 0x34
 8003f00:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f02:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	9304      	str	r3, [sp, #16]
 8003f08:	9305      	str	r3, [sp, #20]
 8003f0a:	9306      	str	r3, [sp, #24]
 8003f0c:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f14:	2201      	movs	r2, #1
 8003f16:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f1c:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003f1e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f20:	2202      	movs	r2, #2
 8003f22:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f24:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f26:	a808      	add	r0, sp, #32
 8003f28:	f001 fc00 	bl	800572c <HAL_RCC_OscConfig>
 8003f2c:	b9c0      	cbnz	r0, 8003f60 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f2e:	230f      	movs	r3, #15
 8003f30:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f32:	2302      	movs	r3, #2
 8003f34:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f36:	2100      	movs	r1, #0
 8003f38:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f3a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f3c:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f3e:	a803      	add	r0, sp, #12
 8003f40:	f001 fec0 	bl	8005cc4 <HAL_RCC_ClockConfig>
 8003f44:	b970      	cbnz	r0, 8003f64 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f46:	2302      	movs	r3, #2
 8003f48:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f4e:	4668      	mov	r0, sp
 8003f50:	f001 ff9f 	bl	8005e92 <HAL_RCCEx_PeriphCLKConfig>
 8003f54:	b940      	cbnz	r0, 8003f68 <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003f56:	f001 fe74 	bl	8005c42 <HAL_RCC_EnableCSS>
}
 8003f5a:	b013      	add	sp, #76	@ 0x4c
 8003f5c:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8003f60:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f62:	e7fe      	b.n	8003f62 <SystemClock_Config+0x6e>
 8003f64:	b672      	cpsid	i
 8003f66:	e7fe      	b.n	8003f66 <SystemClock_Config+0x72>
 8003f68:	b672      	cpsid	i
 8003f6a:	e7fe      	b.n	8003f6a <SystemClock_Config+0x76>

08003f6c <main>:
{
 8003f6c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003f70:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 8003f72:	f001 f878 	bl	8005066 <HAL_Init>
  SystemClock_Config();
 8003f76:	f7ff ffbd 	bl	8003ef4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7a:	2400      	movs	r4, #0
 8003f7c:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003f7e:	9410      	str	r4, [sp, #64]	@ 0x40
 8003f80:	9411      	str	r4, [sp, #68]	@ 0x44
 8003f82:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f84:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8003f88:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8003f8c:	69ab      	ldr	r3, [r5, #24]
 8003f8e:	f043 0310 	orr.w	r3, r3, #16
 8003f92:	61ab      	str	r3, [r5, #24]
 8003f94:	69ab      	ldr	r3, [r5, #24]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9e:	69ab      	ldr	r3, [r5, #24]
 8003fa0:	f043 0320 	orr.w	r3, r3, #32
 8003fa4:	61ab      	str	r3, [r5, #24]
 8003fa6:	69ab      	ldr	r3, [r5, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	9305      	str	r3, [sp, #20]
 8003fae:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb0:	69ab      	ldr	r3, [r5, #24]
 8003fb2:	f043 0304 	orr.w	r3, r3, #4
 8003fb6:	61ab      	str	r3, [r5, #24]
 8003fb8:	69ab      	ldr	r3, [r5, #24]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	9306      	str	r3, [sp, #24]
 8003fc0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	69ab      	ldr	r3, [r5, #24]
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	61ab      	str	r3, [r5, #24]
 8003fca:	69ab      	ldr	r3, [r5, #24]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	9307      	str	r3, [sp, #28]
 8003fd2:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003fd4:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
 8003fd8:	f2c4 0b01 	movt	fp, #16385	@ 0x4001
 8003fdc:	4622      	mov	r2, r4
 8003fde:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8003fe2:	4658      	mov	r0, fp
 8003fe4:	f001 fabc 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003fe8:	f44f 6900 	mov.w	r9, #2048	@ 0x800
 8003fec:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2108      	movs	r1, #8
 8003ff4:	4648      	mov	r0, r9
 8003ff6:	f001 fab3 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 8003ffa:	f44f 6a40 	mov.w	sl, #3072	@ 0xc00
 8003ffe:	f2c4 0a01 	movt	sl, #16385	@ 0x4001
 8004002:	4622      	mov	r2, r4
 8004004:	f248 0138 	movw	r1, #32824	@ 0x8038
 8004008:	4650      	mov	r0, sl
 800400a:	f001 faa9 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 800400e:	4622      	mov	r2, r4
 8004010:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8004014:	4648      	mov	r0, r9
 8004016:	f001 faa3 	bl	8005560 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 800401a:	f44f 4860 	mov.w	r8, #57344	@ 0xe000
 800401e:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004022:	2701      	movs	r7, #1
 8004024:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2602      	movs	r6, #2
 800402a:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800402c:	a90f      	add	r1, sp, #60	@ 0x3c
 800402e:	4658      	mov	r0, fp
 8004030:	f001 f94c 	bl	80052cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 8004034:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8004038:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800403a:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	a90f      	add	r1, sp, #60	@ 0x3c
 8004042:	4648      	mov	r0, r9
 8004044:	f001 f942 	bl	80052cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 8004048:	f647 4304 	movw	r3, #31748	@ 0x7c04
 800404c:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800404e:	4623      	mov	r3, r4
 8004050:	f2c1 0311 	movt	r3, #4113	@ 0x1011
 8004054:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	a90f      	add	r1, sp, #60	@ 0x3c
 800405a:	4650      	mov	r0, sl
 800405c:	f001 f936 	bl	80052cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 8004060:	f248 0338 	movw	r3, #32824	@ 0x8038
 8004064:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004066:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406a:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406c:	a90f      	add	r1, sp, #60	@ 0x3c
 800406e:	4650      	mov	r0, sl
 8004070:	f001 f92c 	bl	80052cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004074:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8004078:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407e:	a90f      	add	r1, sp, #60	@ 0x3c
 8004080:	4648      	mov	r0, r9
 8004082:	f001 f923 	bl	80052cc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8004086:	4622      	mov	r2, r4
 8004088:	210f      	movs	r1, #15
 800408a:	2008      	movs	r0, #8
 800408c:	f001 f830 	bl	80050f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004090:	2008      	movs	r0, #8
 8004092:	f001 f866 	bl	8005162 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8004096:	4622      	mov	r2, r4
 8004098:	210f      	movs	r1, #15
 800409a:	2028      	movs	r0, #40	@ 0x28
 800409c:	f001 f828 	bl	80050f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80040a0:	2028      	movs	r0, #40	@ 0x28
 80040a2:	f001 f85e 	bl	8005162 <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80040a6:	696b      	ldr	r3, [r5, #20]
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	616b      	str	r3, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80040ae:	696b      	ldr	r3, [r5, #20]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80040b6:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b8:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80040bc:	f368 431f 	bfi	r3, r8, #16, #16
 80040c0:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80040c2:	4622      	mov	r2, r4
 80040c4:	4621      	mov	r1, r4
 80040c6:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80040ca:	f7ff fed1 	bl	8003e70 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	0103      	lsls	r3, r0, #4
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80040d6:	f368 421f 	bfi	r2, r8, #16, #16
 80040da:	f882 330b 	strb.w	r3, [r2, #779]	@ 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040de:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80040e2:	f368 431f 	bfi	r3, r8, #16, #16
 80040e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040ea:	601a      	str	r2, [r3, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80040ec:	9408      	str	r4, [sp, #32]
 80040ee:	9409      	str	r4, [sp, #36]	@ 0x24
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80040f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80040f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80040f4:	940c      	str	r4, [sp, #48]	@ 0x30
 80040f6:	940d      	str	r4, [sp, #52]	@ 0x34
 80040f8:	940e      	str	r4, [sp, #56]	@ 0x38
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fa:	9410      	str	r4, [sp, #64]	@ 0x40
 80040fc:	9411      	str	r4, [sp, #68]	@ 0x44
 80040fe:	9412      	str	r4, [sp, #72]	@ 0x48
 8004100:	9413      	str	r4, [sp, #76]	@ 0x4c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004102:	69ab      	ldr	r3, [r5, #24]
 8004104:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004108:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800410a:	69ab      	ldr	r3, [r5, #24]
 800410c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004110:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004112:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004114:	69ab      	ldr	r3, [r5, #24]
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800411c:	69ab      	ldr	r3, [r5, #24]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004124:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004126:	69ab      	ldr	r3, [r5, #24]
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800412e:	69ab      	ldr	r3, [r5, #24]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004136:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_6
 8004138:	f24c 73c7 	movw	r3, #51143	@ 0xc7c7
 800413c:	930f      	str	r3, [sp, #60]	@ 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413e:	a90f      	add	r1, sp, #60	@ 0x3c
 8004140:	4648      	mov	r0, r9
 8004142:	f002 fb45 	bl	80067d0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8004146:	f240 3303 	movw	r3, #771	@ 0x303
 800414a:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800414c:	9410      	str	r4, [sp, #64]	@ 0x40
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800414e:	a90f      	add	r1, sp, #60	@ 0x3c
 8004150:	4650      	mov	r0, sl
 8004152:	f002 fb3d 	bl	80067d0 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8004156:	4623      	mov	r3, r4
 8004158:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004162:	f022 0210 	bic.w	r2, r2, #16
 8004166:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 800416e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	f042 0220 	orr.w	r2, r2, #32
 8004176:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800417e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004186:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800418e:	433a      	orrs	r2, r7
 8004190:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004198:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800419c:	609a      	str	r2, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800419e:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80041a2:	f368 431f 	bfi	r3, r8, #16, #16
 80041a6:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(ADC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80041a8:	4622      	mov	r2, r4
 80041aa:	4621      	mov	r1, r4
 80041ac:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80041b0:	f7ff fe5e 	bl	8003e70 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b4:	0103      	lsls	r3, r0, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80041bc:	f368 421f 	bfi	r2, r8, #16, #16
 80041c0:	f882 3312 	strb.w	r3, [r2, #786]	@ 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c4:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80041c8:	f368 431f 	bfi	r3, r8, #16, #16
 80041cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80041d0:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80041d2:	9408      	str	r4, [sp, #32]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80041d4:	9709      	str	r7, [sp, #36]	@ 0x24
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80041d6:	f44f 5810 	mov.w	r8, #9216	@ 0x2400
 80041da:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 80041de:	a908      	add	r1, sp, #32
 80041e0:	4640      	mov	r0, r8
 80041e2:	f002 fab9 	bl	8006758 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 80041e6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80041ea:	930a      	str	r3, [sp, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 80041ec:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 80041f0:	930b      	str	r3, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80041f2:	940c      	str	r4, [sp, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80041f4:	940d      	str	r4, [sp, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80041f6:	970e      	str	r7, [sp, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80041f8:	a90a      	add	r1, sp, #40	@ 0x28
 80041fa:	4640      	mov	r0, r8
 80041fc:	f002 fac0 	bl	8006780 <LL_ADC_REG_Init>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	f44f 7940 	mov.w	r9, #768	@ 0x300
 8004204:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 8004210:	fa2a f303 	lsr.w	r3, sl, r3
 8004214:	f242 452c 	movw	r5, #9260	@ 0x242c
 8004218:	f2c4 0501 	movt	r5, #16385	@ 0x4001
  MODIFY_REG(*preg,
 800421c:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004220:	f022 021f 	bic.w	r2, r2, #31
 8004224:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8004228:	4632      	mov	r2, r6
 800422a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800422e:	4640      	mov	r0, r8
 8004230:	f7ff fe38 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 8004234:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8004240:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004244:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8004248:	f042 0220 	orr.w	r2, r2, #32
 800424c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8004250:	4632      	mov	r2, r6
 8004252:	2101      	movs	r1, #1
 8004254:	f2c0 2130 	movt	r1, #560	@ 0x230
 8004258:	4640      	mov	r0, r8
 800425a:	f7ff fe23 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 800425e:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 800426a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800426e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8004272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004276:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800427a:	4632      	mov	r2, r6
 800427c:	4631      	mov	r1, r6
 800427e:	f2c0 2160 	movt	r1, #608	@ 0x260
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fe0e 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 8004288:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8004294:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8004298:	f422 2278 	bic.w	r2, r2, #1015808	@ 0xf8000
 800429c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80042a0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80042a4:	4632      	mov	r2, r6
 80042a6:	2106      	movs	r1, #6
 80042a8:	f2c0 3120 	movt	r1, #800	@ 0x320
 80042ac:	4640      	mov	r0, r8
 80042ae:	f7ff fdf9 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 80042b2:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 80042be:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80042c2:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80042c6:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 80042ca:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80042ce:	4632      	mov	r2, r6
 80042d0:	2107      	movs	r1, #7
 80042d2:	f2c0 3150 	movt	r1, #848	@ 0x350
 80042d6:	4640      	mov	r0, r8
 80042d8:	f7ff fde4 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 80042dc:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 80042e8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80042ec:	f022 5278 	bic.w	r2, r2, #1040187392	@ 0x3e000000
 80042f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80042f4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80042f8:	4632      	mov	r2, r6
 80042fa:	2108      	movs	r1, #8
 80042fc:	f2c0 3180 	movt	r1, #896	@ 0x380
 8004300:	4640      	mov	r0, r8
 8004302:	f7ff fdcf 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
 8004306:	fa99 f3a9 	rbit	r3, r9
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	40df      	lsrs	r7, r3
  MODIFY_REG(*preg,
 8004310:	f855 3027 	ldr.w	r3, [r5, r7, lsl #2]
 8004314:	f023 031f 	bic.w	r3, r3, #31
 8004318:	f043 0309 	orr.w	r3, r3, #9
 800431c:	f845 3027 	str.w	r3, [r5, r7, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8004320:	4632      	mov	r2, r6
 8004322:	2109      	movs	r1, #9
 8004324:	f2c0 31b0 	movt	r1, #944	@ 0x3b0
 8004328:	4640      	mov	r0, r8
 800432a:	f7ff fdbb 	bl	8003ea4 <LL_ADC_SetChannelSamplingTime>
  DAC_ChannelConfTypeDef sConfig = {0};
 800432e:	940f      	str	r4, [sp, #60]	@ 0x3c
 8004330:	9410      	str	r4, [sp, #64]	@ 0x40
  hdac.Instance = DAC;
 8004332:	f240 705c 	movw	r0, #1884	@ 0x75c
 8004336:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800433a:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 800433e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004342:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8004344:	f000 ff30 	bl	80051a8 <HAL_DAC_Init>
 8004348:	2800      	cmp	r0, #0
 800434a:	f040 814c 	bne.w	80045e6 <main+0x67a>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800434e:	2200      	movs	r2, #0
 8004350:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004352:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004354:	a90f      	add	r1, sp, #60	@ 0x3c
 8004356:	f240 705c 	movw	r0, #1884	@ 0x75c
 800435a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800435e:	f000 ff84 	bl	800526a <HAL_DAC_ConfigChannel>
 8004362:	2800      	cmp	r0, #0
 8004364:	f040 8141 	bne.w	80045ea <main+0x67e>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004368:	2210      	movs	r2, #16
 800436a:	a90f      	add	r1, sp, #60	@ 0x3c
 800436c:	f240 705c 	movw	r0, #1884	@ 0x75c
 8004370:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004374:	f000 ff79 	bl	800526a <HAL_DAC_ConfigChannel>
 8004378:	2800      	cmp	r0, #0
 800437a:	f040 8138 	bne.w	80045ee <main+0x682>
  hi2c1.Instance = I2C1;
 800437e:	f240 7008 	movw	r0, #1800	@ 0x708
 8004382:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004386:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 800438a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800438e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004390:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8004394:	f2c0 0301 	movt	r3, #1
 8004398:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800439a:	2300      	movs	r3, #0
 800439c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800439e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043a4:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043a6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043a8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043aa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043ac:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043ae:	f001 f8ef 	bl	8005590 <HAL_I2C_Init>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f040 811d 	bne.w	80045f2 <main+0x686>
  huart1.Instance = USART1;
 80043b8:	f240 50e8 	movw	r0, #1512	@ 0x5e8
 80043bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80043c0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80043c4:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80043c8:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80043ca:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80043ce:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043d0:	2300      	movs	r3, #0
 80043d2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043d4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d8:	220c      	movs	r2, #12
 80043da:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043dc:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043de:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043e0:	f002 f98a 	bl	80066f8 <HAL_UART_Init>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f040 8106 	bne.w	80045f6 <main+0x68a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ea:	2300      	movs	r3, #0
 80043ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80043f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80043f2:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80043f6:	930b      	str	r3, [sp, #44]	@ 0x2c
  htim3.Instance = TIM3;
 80043f8:	f240 6078 	movw	r0, #1656	@ 0x678
 80043fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004400:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004404:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004408:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 800440a:	2217      	movs	r2, #23
 800440c:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8004410:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004414:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004416:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004418:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800441a:	f001 ffd3 	bl	80063c4 <HAL_TIM_Base_Init>
 800441e:	2800      	cmp	r0, #0
 8004420:	f040 80eb 	bne.w	80045fa <main+0x68e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004428:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800442a:	a90f      	add	r1, sp, #60	@ 0x3c
 800442c:	f240 6078 	movw	r0, #1656	@ 0x678
 8004430:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004434:	f001 fffe 	bl	8006434 <HAL_TIM_ConfigClockSource>
 8004438:	2800      	cmp	r0, #0
 800443a:	f040 80e0 	bne.w	80045fe <main+0x692>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800443e:	2320      	movs	r3, #32
 8004440:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004446:	a90a      	add	r1, sp, #40	@ 0x28
 8004448:	f240 6078 	movw	r0, #1656	@ 0x678
 800444c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004450:	f002 f8a5 	bl	800659e <HAL_TIMEx_MasterConfigSynchronization>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 80d4 	bne.w	8004602 <main+0x696>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800445a:	2300      	movs	r3, #0
 800445c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800445e:	9310      	str	r3, [sp, #64]	@ 0x40
  htim7.Instance = TIM7;
 8004460:	f240 6030 	movw	r0, #1584	@ 0x630
 8004464:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004468:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800446c:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004470:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 239;
 8004472:	22ef      	movs	r2, #239	@ 0xef
 8004474:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004476:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 9999;
 8004478:	f242 720f 	movw	r2, #9999	@ 0x270f
 800447c:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800447e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004480:	f001 ffa0 	bl	80063c4 <HAL_TIM_Base_Init>
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 80be 	bne.w	8004606 <main+0x69a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800448a:	2320      	movs	r3, #32
 800448c:	930f      	str	r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004492:	a90f      	add	r1, sp, #60	@ 0x3c
 8004494:	f240 6030 	movw	r0, #1584	@ 0x630
 8004498:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800449c:	f002 f87f 	bl	800659e <HAL_TIMEx_MasterConfigSynchronization>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f040 80b2 	bne.w	800460a <main+0x69e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a6:	2300      	movs	r3, #0
 80044a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80044aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80044ac:	9311      	str	r3, [sp, #68]	@ 0x44
 80044ae:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044b2:	930b      	str	r3, [sp, #44]	@ 0x2c
  htim2.Instance = TIM2;
 80044b4:	f240 60c0 	movw	r0, #1728	@ 0x6c0
 80044b8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80044bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80044c0:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 2399;
 80044c2:	f640 125f 	movw	r2, #2399	@ 0x95f
 80044c6:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 999;
 80044ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044ce:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044d4:	f001 ff76 	bl	80063c4 <HAL_TIM_Base_Init>
 80044d8:	2800      	cmp	r0, #0
 80044da:	f040 8098 	bne.w	800460e <main+0x6a2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e2:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044e4:	a90f      	add	r1, sp, #60	@ 0x3c
 80044e6:	f240 60c0 	movw	r0, #1728	@ 0x6c0
 80044ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80044ee:	f001 ffa1 	bl	8006434 <HAL_TIM_ConfigClockSource>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	f040 808d 	bne.w	8004612 <main+0x6a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f8:	2300      	movs	r3, #0
 80044fa:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044fc:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044fe:	a90a      	add	r1, sp, #40	@ 0x28
 8004500:	f240 60c0 	movw	r0, #1728	@ 0x6c0
 8004504:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004508:	f002 f849 	bl	800659e <HAL_TIMEx_MasterConfigSynchronization>
 800450c:	4680      	mov	r8, r0
 800450e:	2800      	cmp	r0, #0
 8004510:	f040 8081 	bne.w	8004616 <main+0x6aa>
  adc_init();
 8004514:	f7fc fb08 	bl	8000b28 <adc_init>
  HAL_TIM_Base_Start(&htim3);
 8004518:	f240 6078 	movw	r0, #1656	@ 0x678
 800451c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004520:	f001 fd57 	bl	8005fd2 <HAL_TIM_Base_Start>
  LCD_Backlight(1);
 8004524:	2001      	movs	r0, #1
 8004526:	f7fc fc26 	bl	8000d76 <LCD_Backlight>
  LCD_Init();
 800452a:	f7fc fc31 	bl	8000d90 <LCD_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800452e:	f240 745c 	movw	r4, #1884	@ 0x75c
 8004532:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8004536:	2100      	movs	r1, #0
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fe47 	bl	80051cc <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800453e:	2110      	movs	r1, #16
 8004540:	4620      	mov	r0, r4
 8004542:	f000 fe43 	bl	80051cc <HAL_DAC_Start>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800454c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004550:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004554:	f001 f804 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 8004558:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800455c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004560:	2200      	movs	r2, #0
 8004562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004566:	4628      	mov	r0, r5
 8004568:	f000 fffa 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 800456c:	2200      	movs	r2, #0
 800456e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fff4 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8004578:	2300      	movs	r3, #0
 800457a:	461a      	mov	r2, r3
 800457c:	2110      	movs	r1, #16
 800457e:	4620      	mov	r0, r4
 8004580:	f000 fe5a 	bl	8005238 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8004584:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004588:	2200      	movs	r2, #0
 800458a:	4611      	mov	r1, r2
 800458c:	4620      	mov	r0, r4
 800458e:	f000 fe53 	bl	8005238 <HAL_DAC_SetValue>
  pageID = 0;
 8004592:	f240 54e2 	movw	r4, #1506	@ 0x5e2
 8004596:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800459a:	2600      	movs	r6, #0
 800459c:	7026      	strb	r6, [r4, #0]
  lcd_handle();
 800459e:	f7fc fd90 	bl	80010c2 <lcd_handle>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80045a2:	2201      	movs	r2, #1
 80045a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 ffd9 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80045ae:	20fa      	movs	r0, #250	@ 0xfa
 80045b0:	f000 fd77 	bl	80050a2 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80045b4:	4632      	mov	r2, r6
 80045b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045ba:	4628      	mov	r0, r5
 80045bc:	f000 ffd0 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 80045c0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80045c4:	f000 fd6d 	bl	80050a2 <HAL_Delay>
  pageID = 1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	7023      	strb	r3, [r4, #0]
	  switch(mainCounter)
 80045cc:	f240 54e3 	movw	r4, #1507	@ 0x5e3
 80045d0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
		  calculationTemp(adcTEMP);
 80045d4:	f240 1666 	movw	r6, #358	@ 0x166
 80045d8:	f2c2 0600 	movt	r6, #8192	@ 0x2000
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 80045dc:	f648 6539 	movw	r5, #36409	@ 0x8e39
 80045e0:	f6c3 05e3 	movt	r5, #14563	@ 0x38e3
 80045e4:	e0e5      	b.n	80047b2 <main+0x846>
  __ASM volatile ("cpsid i" : : : "memory");
 80045e6:	b672      	cpsid	i
  while (1)
 80045e8:	e7fe      	b.n	80045e8 <main+0x67c>
 80045ea:	b672      	cpsid	i
 80045ec:	e7fe      	b.n	80045ec <main+0x680>
 80045ee:	b672      	cpsid	i
 80045f0:	e7fe      	b.n	80045f0 <main+0x684>
 80045f2:	b672      	cpsid	i
 80045f4:	e7fe      	b.n	80045f4 <main+0x688>
 80045f6:	b672      	cpsid	i
 80045f8:	e7fe      	b.n	80045f8 <main+0x68c>
 80045fa:	b672      	cpsid	i
 80045fc:	e7fe      	b.n	80045fc <main+0x690>
 80045fe:	b672      	cpsid	i
 8004600:	e7fe      	b.n	8004600 <main+0x694>
 8004602:	b672      	cpsid	i
 8004604:	e7fe      	b.n	8004604 <main+0x698>
 8004606:	b672      	cpsid	i
 8004608:	e7fe      	b.n	8004608 <main+0x69c>
 800460a:	b672      	cpsid	i
 800460c:	e7fe      	b.n	800460c <main+0x6a0>
 800460e:	b672      	cpsid	i
 8004610:	e7fe      	b.n	8004610 <main+0x6a4>
 8004612:	b672      	cpsid	i
 8004614:	e7fe      	b.n	8004614 <main+0x6a8>
 8004616:	b672      	cpsid	i
 8004618:	e7fe      	b.n	8004618 <main+0x6ac>
	  switch(mainCounter)
 800461a:	4643      	mov	r3, r8
 800461c:	e0c8      	b.n	80047b0 <main+0x844>
		  adcTEMP = adcMeanSum[listTEMP - 1] >> SAMPLE_2N ;
 800461e:	f240 13cc 	movw	r3, #460	@ 0x1cc
 8004622:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	119b      	asrs	r3, r3, #6
 800462a:	8033      	strh	r3, [r6, #0]
		  break;
 800462c:	2301      	movs	r3, #1
 800462e:	e0bf      	b.n	80047b0 <main+0x844>
		  adcIDC = adcMeanSum[listIDC - 1] >> SAMPLE_2N ;
 8004630:	f240 1364 	movw	r3, #356	@ 0x164
 8004634:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004638:	f240 12cc 	movw	r2, #460	@ 0x1cc
 800463c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004640:	6852      	ldr	r2, [r2, #4]
 8004642:	1192      	asrs	r2, r2, #6
 8004644:	801a      	strh	r2, [r3, #0]
		  break;
 8004646:	2302      	movs	r3, #2
 8004648:	e0b2      	b.n	80047b0 <main+0x844>
		  adcVBAT1 = adcMeanSum[listVBAT1 - 1] >> SAMPLE_2N ;
 800464a:	f240 1362 	movw	r3, #354	@ 0x162
 800464e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004652:	f240 12cc 	movw	r2, #460	@ 0x1cc
 8004656:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	1192      	asrs	r2, r2, #6
 800465e:	801a      	strh	r2, [r3, #0]
		  break;
 8004660:	2303      	movs	r3, #3
 8004662:	e0a5      	b.n	80047b0 <main+0x844>
		  adcVDC1 = adcMeanSum[listVDC1 - 1] >> SAMPLE_2N ;
 8004664:	f240 1360 	movw	r3, #352	@ 0x160
 8004668:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800466c:	f240 12cc 	movw	r2, #460	@ 0x1cc
 8004670:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004674:	68d2      	ldr	r2, [r2, #12]
 8004676:	1192      	asrs	r2, r2, #6
 8004678:	801a      	strh	r2, [r3, #0]
		  break;
 800467a:	2304      	movs	r3, #4
 800467c:	e098      	b.n	80047b0 <main+0x844>
		  adcVDC2 = adcMeanSum[listVDC2 - 1] >> SAMPLE_2N ;
 800467e:	f240 135e 	movw	r3, #350	@ 0x15e
 8004682:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004686:	f240 12cc 	movw	r2, #460	@ 0x1cc
 800468a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800468e:	6912      	ldr	r2, [r2, #16]
 8004690:	1192      	asrs	r2, r2, #6
 8004692:	801a      	strh	r2, [r3, #0]
		  break;
 8004694:	2305      	movs	r3, #5
 8004696:	e08b      	b.n	80047b0 <main+0x844>
		  adcIDC2NoGain = adcMeanSum[listIDC2 - 1] >> SAMPLE_2N ;
 8004698:	f240 13cc 	movw	r3, #460	@ 0x1cc
 800469c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	1199      	asrs	r1, r3, #6
 80046a4:	f3c3 138f 	ubfx	r3, r3, #6, #16
 80046a8:	f240 125c 	movw	r2, #348	@ 0x15c
 80046ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80046b0:	8013      	strh	r3, [r2, #0]
		  if(adcIDC2NoGain <= 50)
 80046b2:	2b32      	cmp	r3, #50	@ 0x32
 80046b4:	d811      	bhi.n	80046da <main+0x76e>
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2]) >> 15);
 80046b6:	f240 1344 	movw	r3, #324	@ 0x144
 80046ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80046be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046c2:	b289      	uxth	r1, r1
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80046cc:	f240 125a 	movw	r2, #346	@ 0x15a
 80046d0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80046d4:	8013      	strh	r3, [r2, #0]
		  break;
 80046d6:	2306      	movs	r3, #6
 80046d8:	e06a      	b.n	80047b0 <main+0x844>
		  else if(adcIDC2NoGain <= 150)
 80046da:	2b96      	cmp	r3, #150	@ 0x96
 80046dc:	d80b      	bhi.n	80046f6 <main+0x78a>
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 1]) >> 15);
 80046de:	f240 1344 	movw	r3, #324	@ 0x144
 80046e2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80046e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80046ea:	b289      	uxth	r1, r1
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80046f4:	e7ea      	b.n	80046cc <main+0x760>
		  else if(adcIDC2NoGain <= 350)
 80046f6:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 2]) >> 15);
 80046fa:	f240 1344 	movw	r3, #324	@ 0x144
 80046fe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004702:	bf94      	ite	ls
 8004704:	f9b3 3010 	ldrshls.w	r3, [r3, #16]
			  adcIDC2 = (q15_t)(((int32_t)(adcIDC2NoGain) * adcGain[listIDC2 + 3]) >> 15);
 8004708:	f9b3 3012 	ldrshhi.w	r3, [r3, #18]
 800470c:	b289      	uxth	r1, r1
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8004716:	e7d9      	b.n	80046cc <main+0x760>
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8004718:	f240 1370 	movw	r3, #368	@ 0x170
 800471c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8004728:	f022 4340 	bic.w	r3, r2, #3221225472	@ 0xc0000000
 800472c:	0f90      	lsrs	r0, r2, #30
 800472e:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8004732:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 8004736:	4403      	add	r3, r0
 8004738:	eb03 7311 	add.w	r3, r3, r1, lsr #28
 800473c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004740:	fba5 7003 	umull	r7, r0, r5, r3
 8004744:	0840      	lsrs	r0, r0, #1
 8004746:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800474a:	1a1b      	subs	r3, r3, r0
 800474c:	f02c 0c07 	bic.w	ip, ip, #7
 8004750:	4463      	add	r3, ip
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 8004758:	f24e 338e 	movw	r3, #58254	@ 0xe38e
 800475c:	f6c8 6338 	movt	r3, #36408	@ 0x8e38
 8004760:	fb02 f303 	mul.w	r3, r2, r3
 8004764:	fb05 3301 	mla	r3, r5, r1, r3
 8004768:	fba2 2105 	umull	r2, r1, r2, r5
 800476c:	4419      	add	r1, r3
 800476e:	0fc8      	lsrs	r0, r1, #31
 8004770:	1880      	adds	r0, r0, r2
 8004772:	f141 0100 	adc.w	r1, r1, #0
 8004776:	0840      	lsrs	r0, r0, #1
 8004778:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800477c:	1049      	asrs	r1, r1, #1
 800477e:	f7fb fed5 	bl	800052c <__aeabi_l2d>
 8004782:	f002 f8e3 	bl	800694c <sqrt>
 8004786:	f240 1768 	movw	r7, #360	@ 0x168
 800478a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800478e:	f7fc f9ab 	bl	8000ae8 <__aeabi_d2uiz>
 8004792:	8038      	strh	r0, [r7, #0]
		  break;
 8004794:	2307      	movs	r3, #7
 8004796:	e00b      	b.n	80047b0 <main+0x844>
		  if(deviceOn == 1)
 8004798:	f240 7370 	movw	r3, #1904	@ 0x770
 800479c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d022      	beq.n	80047ec <main+0x880>
		  lcd_handle();
 80047a6:	f7fc fc8c 	bl	80010c2 <lcd_handle>
		  mainCounter++;
 80047aa:	7823      	ldrb	r3, [r4, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	b2db      	uxtb	r3, r3
		  mainCounter++;
 80047b0:	7023      	strb	r3, [r4, #0]
	  switch(mainCounter)
 80047b2:	7823      	ldrb	r3, [r4, #0]
 80047b4:	2b0a      	cmp	r3, #10
 80047b6:	f63f af30 	bhi.w	800461a <main+0x6ae>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <main+0x854>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	0800461f 	.word	0x0800461f
 80047c4:	08004631 	.word	0x08004631
 80047c8:	0800464b 	.word	0x0800464b
 80047cc:	08004665 	.word	0x08004665
 80047d0:	0800467f 	.word	0x0800467f
 80047d4:	08004699 	.word	0x08004699
 80047d8:	08004719 	.word	0x08004719
 80047dc:	08004799 	.word	0x08004799
 80047e0:	080047a7 	.word	0x080047a7
 80047e4:	080047f3 	.word	0x080047f3
 80047e8:	080047ff 	.word	0x080047ff
			  outCalculation();
 80047ec:	f000 f841 	bl	8004872 <outCalculation>
 80047f0:	e7d9      	b.n	80047a6 <main+0x83a>
		  button_handle();
 80047f2:	f7fd ffbf 	bl	8002774 <button_handle>
		  mainCounter++;
 80047f6:	7823      	ldrb	r3, [r4, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	b2db      	uxtb	r3, r3
		  break;
 80047fc:	e7d8      	b.n	80047b0 <main+0x844>
		  calculationTemp(adcTEMP);
 80047fe:	8830      	ldrh	r0, [r6, #0]
 8004800:	f7fc fa0c 	bl	8000c1c <calculationTemp>
		  mainCounter++;
 8004804:	7823      	ldrb	r3, [r4, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	b2db      	uxtb	r3, r3
		  break;
 800480a:	e7d1      	b.n	80047b0 <main+0x844>

0800480c <PID_Compute>:
    .chargeDay                  = 0,
    .chargeWeek                 = 0,
};

int PID_Compute(PIDController *pid, unsigned long setpoint, unsigned long measured)
{
 800480c:	b410      	push	{r4}
    pid->setpoint = setpoint;
 800480e:	60c1      	str	r1, [r0, #12]
    pid->measured = measured;
 8004810:	6102      	str	r2, [r0, #16]

    pid->error = pid->setpoint - pid->measured ;
 8004812:	1a89      	subs	r1, r1, r2
 8004814:	6141      	str	r1, [r0, #20]

    pid->integral += pid->error;
 8004816:	69c3      	ldr	r3, [r0, #28]
 8004818:	440b      	add	r3, r1
 800481a:	61c3      	str	r3, [r0, #28]
    pid->derivative = pid->error - pid->prevError;
 800481c:	6982      	ldr	r2, [r0, #24]
 800481e:	1a8a      	subs	r2, r1, r2
 8004820:	6202      	str	r2, [r0, #32]
    pid->prevError = pid->error;
 8004822:	6181      	str	r1, [r0, #24]


    if (pid->integral > PID_VOUT_INT_MAX)
 8004824:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004828:	dd15      	ble.n	8004856 <PID_Compute+0x4a>
        pid->integral = PID_VOUT_INT_MAX;
 800482a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800482e:	61c3      	str	r3, [r0, #28]
    else if (pid->integral < PID_VOUT_INT_MIN)
        pid->integral = PID_VOUT_INT_MIN;


    pid->output = pid->Kp * pid->error +
                  pid->Ki * pid->integral +
 8004830:	6843      	ldr	r3, [r0, #4]
    pid->output = pid->Kp * pid->error +
 8004832:	6804      	ldr	r4, [r0, #0]
 8004834:	fb04 f101 	mul.w	r1, r4, r1
 8004838:	69c4      	ldr	r4, [r0, #28]
 800483a:	fb04 1103 	mla	r1, r4, r3, r1
                  pid->Kd * pid->derivative;
 800483e:	6883      	ldr	r3, [r0, #8]
                  pid->Ki * pid->integral +
 8004840:	fb03 1102 	mla	r1, r3, r2, r1

    pid->output = pid->output >> 12;
 8004844:	1309      	asrs	r1, r1, #12
 8004846:	6241      	str	r1, [r0, #36]	@ 0x24

    if (pid->output > pid->outputMax)
 8004848:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800484a:	4299      	cmp	r1, r3
 800484c:	dd0c      	ble.n	8004868 <PID_Compute+0x5c>
        pid->output = pid->outputMax;
 800484e:	6243      	str	r3, [r0, #36]	@ 0x24
    else if (pid->output < pid->outputMin)
        pid->output = pid->outputMin;

    return pid->output;
}
 8004850:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004852:	bc10      	pop	{r4}
 8004854:	4770      	bx	lr
    else if (pid->integral < PID_VOUT_INT_MIN)
 8004856:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 800485a:	dae9      	bge.n	8004830 <PID_Compute+0x24>
        pid->integral = PID_VOUT_INT_MIN;
 800485c:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8004860:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8004864:	61c3      	str	r3, [r0, #28]
 8004866:	e7e3      	b.n	8004830 <PID_Compute+0x24>
    else if (pid->output < pid->outputMin)
 8004868:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800486a:	4299      	cmp	r1, r3
        pid->output = pid->outputMin;
 800486c:	bfb8      	it	lt
 800486e:	6243      	strlt	r3, [r0, #36]	@ 0x24
 8004870:	e7ee      	b.n	8004850 <PID_Compute+0x44>

08004872 <outCalculation>:

void outCalculation()
{
 8004872:	b510      	push	{r4, lr}
	if(operatingMode == MODE_SUPPLY)
 8004874:	f240 7372 	movw	r3, #1906	@ 0x772
 8004878:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d02d      	beq.n	80048de <outCalculation+0x6c>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
	}

	else
	{
		switch(batInfo.chargeState)
 8004882:	f240 0334 	movw	r3, #52	@ 0x34
 8004886:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800488a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800488e:	2b00      	cmp	r3, #0
 8004890:	d070      	beq.n	8004974 <outCalculation+0x102>
 8004892:	2b02      	cmp	r3, #2
 8004894:	d122      	bne.n	80048dc <outCalculation+0x6a>
				   batInfo.chargeState = STATE_ABSORPTION;
			   }
			break;

		case STATE_ABSORPTION:
			  dacValueV +=PID_Compute(&pidVout, batInfo.absorptionVoltage, adcBuffer[listVBAT1]);
 8004896:	f240 5264 	movw	r2, #1380	@ 0x564
 800489a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800489e:	f240 0334 	movw	r3, #52	@ 0x34
 80048a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80048a6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80048aa:	6959      	ldr	r1, [r3, #20]
 80048ac:	f240 0094 	movw	r0, #148	@ 0x94
 80048b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80048b4:	f7ff ffaa 	bl	800480c <PID_Compute>
			  if(dacValueV > 4095)
			  {
				  dacValueV = 4095;
 80048b8:	f240 0230 	movw	r2, #48	@ 0x30
 80048bc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
			  dacValueV +=PID_Compute(&pidVout, batInfo.absorptionVoltage, adcBuffer[listVBAT1]);
 80048c0:	8813      	ldrh	r3, [r2, #0]
 80048c2:	4403      	add	r3, r0
			  }
			  else if (dacValueV < 0)
 80048c4:	b21b      	sxth	r3, r3
				  dacValueV = 4095;
 80048c6:	f383 030c 	usat	r3, #12, r3
 80048ca:	8013      	strh	r3, [r2, #0]
			  {
				  dacValueV = 0;
			  }
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 80048cc:	2200      	movs	r2, #0
 80048ce:	2110      	movs	r1, #16
 80048d0:	f240 705c 	movw	r0, #1884	@ 0x75c
 80048d4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80048d8:	f000 fcae 	bl	8005238 <HAL_DAC_SetValue>
				//  batInfo.chargeState = STATE_FLOAT;
			  }
			  break;
		}
	}
}
 80048dc:	bd10      	pop	{r4, pc}
		  dacValueV +=PID_Compute(&pidVout, outputVSet_dV, adcBuffer[listVBAT1]);
 80048de:	f240 5264 	movw	r2, #1380	@ 0x564
 80048e2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80048e6:	f240 03c6 	movw	r3, #198	@ 0xc6
 80048ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80048ee:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80048f2:	8819      	ldrh	r1, [r3, #0]
 80048f4:	f240 0094 	movw	r0, #148	@ 0x94
 80048f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80048fc:	f7ff ff86 	bl	800480c <PID_Compute>
			  dacValueV = 4095;
 8004900:	f240 0230 	movw	r2, #48	@ 0x30
 8004904:	f2c2 0200 	movt	r2, #8192	@ 0x2000
		  dacValueV +=PID_Compute(&pidVout, outputVSet_dV, adcBuffer[listVBAT1]);
 8004908:	8813      	ldrh	r3, [r2, #0]
 800490a:	4403      	add	r3, r0
		  else if (dacValueV < 0)
 800490c:	b21b      	sxth	r3, r3
			  dacValueV = 4095;
 800490e:	f383 030c 	usat	r3, #12, r3
 8004912:	8013      	strh	r3, [r2, #0]
		  if (adcIDC2 > outputIMax_dA)
 8004914:	f240 125a 	movw	r2, #346	@ 0x15a
 8004918:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800491c:	f240 03c4 	movw	r3, #196	@ 0xc4
 8004920:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004924:	8812      	ldrh	r2, [r2, #0]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d80e      	bhi.n	800494a <outCalculation+0xd8>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 800492c:	f240 0330 	movw	r3, #48	@ 0x30
 8004930:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004938:	2200      	movs	r2, #0
 800493a:	2110      	movs	r1, #16
 800493c:	f240 705c 	movw	r0, #1884	@ 0x75c
 8004940:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004944:	f000 fc78 	bl	8005238 <HAL_DAC_SetValue>
 8004948:	e7c8      	b.n	80048dc <outCalculation+0x6a>
			  dacValueV = 0;
 800494a:	f240 0330 	movw	r3, #48	@ 0x30
 800494e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004952:	2400      	movs	r4, #0
 8004954:	801c      	strh	r4, [r3, #0]
			  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 8004956:	4622      	mov	r2, r4
 8004958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800495c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004960:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004964:	f000 fdfc 	bl	8005560 <HAL_GPIO_WritePin>
			  deviceOn = 0;
 8004968:	f240 7370 	movw	r3, #1904	@ 0x770
 800496c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004970:	701c      	strb	r4, [r3, #0]
 8004972:	e7db      	b.n	800492c <outCalculation+0xba>
			   dacValueV += PID_Compute(&pidIout, batInfo.bulkCurrent / 10, adcIDC2);
 8004974:	f240 135a 	movw	r3, #346	@ 0x15a
 8004978:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800497c:	f240 0434 	movw	r4, #52	@ 0x34
 8004980:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8004984:	68e1      	ldr	r1, [r4, #12]
 8004986:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 800498a:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 800498e:	fba2 2101 	umull	r2, r1, r2, r1
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	08c9      	lsrs	r1, r1, #3
 8004996:	f240 0064 	movw	r0, #100	@ 0x64
 800499a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800499e:	f7ff ff35 	bl	800480c <PID_Compute>
				   dacValueV = 4095;
 80049a2:	f240 0230 	movw	r2, #48	@ 0x30
 80049a6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
			   dacValueV += PID_Compute(&pidIout, batInfo.bulkCurrent / 10, adcIDC2);
 80049aa:	8813      	ldrh	r3, [r2, #0]
 80049ac:	4403      	add	r3, r0
			   else if (dacValueV < 0)
 80049ae:	b21b      	sxth	r3, r3
				   dacValueV = 4095;
 80049b0:	f383 030c 	usat	r3, #12, r3
 80049b4:	8013      	strh	r3, [r2, #0]
			   HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2110      	movs	r1, #16
 80049ba:	f240 705c 	movw	r0, #1884	@ 0x75c
 80049be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80049c2:	f000 fc39 	bl	8005238 <HAL_DAC_SetValue>
			   if(adcVBAT1 >= batInfo.absorptionVoltage)
 80049c6:	f240 1362 	movw	r3, #354	@ 0x162
 80049ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80049ce:	881a      	ldrh	r2, [r3, #0]
 80049d0:	6963      	ldr	r3, [r4, #20]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d382      	bcc.n	80048dc <outCalculation+0x6a>
				   batInfo.chargeState = STATE_ABSORPTION;
 80049d6:	2202      	movs	r2, #2
 80049d8:	f884 202b 	strb.w	r2, [r4, #43]	@ 0x2b
 80049dc:	e77e      	b.n	80048dc <outCalculation+0x6a>

080049de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049de:	b500      	push	{lr}
 80049e0:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049e6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	619a      	str	r2, [r3, #24]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	f002 0201 	and.w	r2, r2, #1
 80049f8:	9200      	str	r2, [sp, #0]
 80049fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004a02:	61da      	str	r2, [r3, #28]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4611      	mov	r1, r2
 8004a12:	2005      	movs	r0, #5
 8004a14:	f000 fb6c 	bl	80050f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004a18:	2005      	movs	r0, #5
 8004a1a:	f000 fba2 	bl	8005162 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004a24:	6853      	ldr	r3, [r2, #4]
 8004a26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004a2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a2e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a30:	b003      	add	sp, #12
 8004a32:	f85d fb04 	ldr.w	pc, [sp], #4

08004a36 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004a36:	b500      	push	{lr}
 8004a38:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9302      	str	r3, [sp, #8]
 8004a3e:	9303      	str	r3, [sp, #12]
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	9305      	str	r3, [sp, #20]
  if(hdac->Instance==DAC)
 8004a44:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 8004a48:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004a4c:	6802      	ldr	r2, [r0, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d002      	beq.n	8004a58 <HAL_DAC_MspInit+0x22>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8004a52:	b007      	add	sp, #28
 8004a54:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8004a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a5c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004a66:	61da      	str	r2, [r3, #28]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8004a6e:	9200      	str	r2, [sp, #0]
 8004a70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	f042 0204 	orr.w	r2, r2, #4
 8004a78:	619a      	str	r2, [r3, #24]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a84:	2330      	movs	r3, #48	@ 0x30
 8004a86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8c:	a902      	add	r1, sp, #8
 8004a8e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004a92:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004a96:	f000 fc19 	bl	80052cc <HAL_GPIO_Init>
}
 8004a9a:	e7da      	b.n	8004a52 <HAL_DAC_MspInit+0x1c>

08004a9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	9303      	str	r3, [sp, #12]
 8004aa6:	9304      	str	r3, [sp, #16]
 8004aa8:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8004aaa:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8004aae:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004ab2:	6802      	ldr	r2, [r0, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_I2C_MspInit+0x20>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004ab8:	b006      	add	sp, #24
 8004aba:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8004ac0:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 8004ac4:	69a3      	ldr	r3, [r4, #24]
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	61a3      	str	r3, [r4, #24]
 8004acc:	69a3      	ldr	r3, [r4, #24]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ad6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ada:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004adc:	2312      	movs	r3, #18
 8004ade:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae4:	a902      	add	r1, sp, #8
 8004ae6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004aea:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004aee:	f000 fbed 	bl	80052cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004af2:	2200      	movs	r2, #0
 8004af4:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004af8:	6853      	ldr	r3, [r2, #4]
 8004afa:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004afe:	f043 0302 	orr.w	r3, r3, #2
 8004b02:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b04:	69e3      	ldr	r3, [r4, #28]
 8004b06:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b0a:	61e3      	str	r3, [r4, #28]
 8004b0c:	69e3      	ldr	r3, [r4, #28]
 8004b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	9b01      	ldr	r3, [sp, #4]
}
 8004b16:	e7cf      	b.n	8004ab8 <HAL_I2C_MspInit+0x1c>

08004b18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b18:	b500      	push	{lr}
 8004b1a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	9305      	str	r3, [sp, #20]
 8004b22:	9306      	str	r3, [sp, #24]
 8004b24:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM2)
 8004b26:	6803      	ldr	r3, [r0, #0]
 8004b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2c:	d00e      	beq.n	8004b4c <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b32:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d03f      	beq.n	8004bba <HAL_TIM_Base_MspInit+0xa2>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004b3a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8004b3e:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04f      	beq.n	8004be6 <HAL_TIM_Base_MspInit+0xce>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004b46:	b009      	add	sp, #36	@ 0x24
 8004b48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b50:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b54:	69da      	ldr	r2, [r3, #28]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	61da      	str	r2, [r3, #28]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	f002 0201 	and.w	r2, r2, #1
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	f042 0204 	orr.w	r2, r2, #4
 8004b6c:	619a      	str	r2, [r3, #24]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004b78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b84:	a904      	add	r1, sp, #16
 8004b86:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004b8a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004b8e:	f000 fb9d 	bl	80052cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004b92:	2200      	movs	r2, #0
 8004b94:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004b98:	6853      	ldr	r3, [r2, #4]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4611      	mov	r1, r2
 8004bac:	201c      	movs	r0, #28
 8004bae:	f000 fa9f 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bb2:	201c      	movs	r0, #28
 8004bb4:	f000 fad5 	bl	8005162 <HAL_NVIC_EnableIRQ>
 8004bb8:	e7c5      	b.n	8004b46 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bbe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	f042 0202 	orr.w	r2, r2, #2
 8004bc8:	61da      	str	r2, [r3, #28]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	201d      	movs	r0, #29
 8004bda:	f000 fa89 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bde:	201d      	movs	r0, #29
 8004be0:	f000 fabf 	bl	8005162 <HAL_NVIC_EnableIRQ>
 8004be4:	e7af      	b.n	8004b46 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004be6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	f042 0220 	orr.w	r2, r2, #32
 8004bf4:	61da      	str	r2, [r3, #28]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	9303      	str	r3, [sp, #12]
 8004bfe:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004c00:	2200      	movs	r2, #0
 8004c02:	4611      	mov	r1, r2
 8004c04:	2037      	movs	r0, #55	@ 0x37
 8004c06:	f000 fa73 	bl	80050f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004c0a:	2037      	movs	r0, #55	@ 0x37
 8004c0c:	f000 faa9 	bl	8005162 <HAL_NVIC_EnableIRQ>
}
 8004c10:	e799      	b.n	8004b46 <HAL_TIM_Base_MspInit+0x2e>

08004c12 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c12:	b510      	push	{r4, lr}
 8004c14:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c16:	2300      	movs	r3, #0
 8004c18:	9302      	str	r3, [sp, #8]
 8004c1a:	9303      	str	r3, [sp, #12]
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8004c20:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004c24:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004c28:	6802      	ldr	r2, [r0, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d001      	beq.n	8004c32 <HAL_UART_MspInit+0x20>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004c2e:	b006      	add	sp, #24
 8004c30:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c36:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c40:	619a      	str	r2, [r3, #24]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004c48:	9200      	str	r2, [sp, #0]
 8004c4a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	619a      	str	r2, [r3, #24]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004c5e:	2340      	movs	r3, #64	@ 0x40
 8004c60:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c62:	2302      	movs	r3, #2
 8004c64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c66:	2303      	movs	r3, #3
 8004c68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c6a:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8004c6e:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8004c72:	a902      	add	r1, sp, #8
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 fb29 	bl	80052cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c7a:	2380      	movs	r3, #128	@ 0x80
 8004c7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c84:	a902      	add	r1, sp, #8
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 fb20 	bl	80052cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004c92:	6853      	ldr	r3, [r2, #4]
 8004c94:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	6053      	str	r3, [r2, #4]
}
 8004c9e:	e7c6      	b.n	8004c2e <HAL_UART_MspInit+0x1c>

08004ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004ca2:	f001 f8e3 	bl	8005e6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ca6:	e7fe      	b.n	8004ca6 <NMI_Handler+0x6>

08004ca8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ca8:	e7fe      	b.n	8004ca8 <HardFault_Handler>

08004caa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004caa:	e7fe      	b.n	8004caa <MemManage_Handler>

08004cac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cac:	e7fe      	b.n	8004cac <BusFault_Handler>

08004cae <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cae:	e7fe      	b.n	8004cae <UsageFault_Handler>

08004cb0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cb0:	4770      	bx	lr

08004cb2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cb2:	4770      	bx	lr

08004cb4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cb4:	4770      	bx	lr

08004cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cb6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb8:	f000 f9e0 	bl	800507c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cbc:	bd08      	pop	{r3, pc}

08004cbe <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004cbe:	4770      	bx	lr

08004cc0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8004cc2:	2004      	movs	r0, #4
 8004cc4:	f000 fc53 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 8004cc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ccc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004cd0:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8004cd2:	f240 51e1 	movw	r1, #1505	@ 0x5e1
 8004cd6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004cda:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004cde:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8004ce8:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004cec:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004cee:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004cf2:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8004cf6:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004cfa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8004cfe:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8004d02:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8004d06:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 8004d08:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8004d0c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8004d14:	f240 6030 	movw	r0, #1584	@ 0x630
 8004d18:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004d1c:	f001 f992 	bl	8006044 <HAL_TIM_Base_Start_IT>
	//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004d20:	bd08      	pop	{r3, pc}

08004d22 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d22:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */


	/* VAC */
	adcBuffer[listVAC] = (q15_t)(((int32_t)(adc1Buffer[listVAC] - dcOffset) * adcGain[listVAC]) >> 15);
 8004d24:	f240 5374 	movw	r3, #1396	@ 0x574
 8004d28:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d30:	f240 0200 	movw	r2, #0
 8004d34:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	f240 1244 	movw	r2, #324	@ 0x144
 8004d40:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004d44:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004d48:	fb02 f303 	mul.w	r3, r2, r3
 8004d4c:	f343 33cf 	sbfx	r3, r3, #15, #16
 8004d50:	f240 5264 	movw	r2, #1380	@ 0x564
 8004d54:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004d58:	8013      	strh	r3, [r2, #0]
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8004d5a:	f240 126a 	movw	r2, #362	@ 0x16a
 8004d5e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004d62:	7815      	ldrb	r5, [r2, #0]
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8004d64:	fb03 f303 	mul.w	r3, r3, r3
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8004d68:	f240 1170 	movw	r1, #368	@ 0x170
 8004d6c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004d70:	f240 1278 	movw	r2, #376	@ 0x178
 8004d74:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004d78:	f852 4025 	ldr.w	r4, [r2, r5, lsl #2]
 8004d7c:	680a      	ldr	r2, [r1, #0]
 8004d7e:	6848      	ldr	r0, [r1, #4]
 8004d80:	1b12      	subs	r2, r2, r4
 8004d82:	eb60 70e4 	sbc.w	r0, r0, r4, asr #31
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8004d86:	18d2      	adds	r2, r2, r3
 8004d88:	eb40 70e3 	adc.w	r0, r0, r3, asr #31
	adcRmsBufferPo++;
 8004d8c:	1c69      	adds	r1, r5, #1
 8004d8e:	b2c9      	uxtb	r1, r1
	if (adcRmsBufferPo >= ADC_RMS_BUFFER_SIZE)
 8004d90:	2914      	cmp	r1, #20
 8004d92:	bf28      	it	cs
 8004d94:	2100      	movcs	r1, #0
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8004d96:	f240 1478 	movw	r4, #376	@ 0x178
 8004d9a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8004d9e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8004da2:	f240 1370 	movw	r3, #368	@ 0x170
 8004da6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	6058      	str	r0, [r3, #4]
	adcRmsBufferPo++;
 8004dae:	f240 136a 	movw	r3, #362	@ 0x16a
 8004db2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004db6:	7019      	strb	r1, [r3, #0]
	{
		adcRmsBufferPo = 0;
	}

	/* TEMP */
	adcBuffer[listTEMP] = (q15_t)(((int32_t)(adc1Buffer[listTEMP]) * adcGain[listTEMP]) >> 15);
 8004db8:	f240 5e74 	movw	lr, #1396	@ 0x574
 8004dbc:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8004dc0:	f9be 0002 	ldrsh.w	r0, [lr, #2]
 8004dc4:	f240 1444 	movw	r4, #324	@ 0x144
 8004dc8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8004dcc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8004dd0:	fb03 f000 	mul.w	r0, r3, r0
 8004dd4:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004dd8:	f240 5c64 	movw	ip, #1380	@ 0x564
 8004ddc:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8004de0:	f8ac 0002 	strh.w	r0, [ip, #2]
	adcMeanSum[listTEMP - 1] = adcMeanSum[listTEMP - 1] - adcMeanBuffer[listTEMP - 1][adcMeanBufferPo];
 8004de4:	f240 13c8 	movw	r3, #456	@ 0x1c8
 8004de8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004dec:	7819      	ldrb	r1, [r3, #0]
 8004dee:	f240 13cc 	movw	r3, #460	@ 0x1cc
 8004df2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004df6:	f240 12e4 	movw	r2, #484	@ 0x1e4
 8004dfa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004dfe:	f932 6011 	ldrsh.w	r6, [r2, r1, lsl #1]
 8004e02:	681d      	ldr	r5, [r3, #0]
 8004e04:	1bad      	subs	r5, r5, r6
	adcMeanBuffer[listTEMP - 1][adcMeanBufferPo] = adcBuffer[listTEMP];
 8004e06:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
	adcMeanSum[listTEMP - 1] = adcMeanSum[listTEMP - 1] + adcMeanBuffer[listTEMP - 1][adcMeanBufferPo];
 8004e0a:	4428      	add	r0, r5
 8004e0c:	6018      	str	r0, [r3, #0]

	/* IDC */
	adcBuffer[listIDC] = (q15_t)(((int32_t)(adc1Buffer[listIDC]) * adcGain[listIDC]) >> 15);
 8004e0e:	f9be 0004 	ldrsh.w	r0, [lr, #4]
 8004e12:	f9b4 5004 	ldrsh.w	r5, [r4, #4]
 8004e16:	fb05 f000 	mul.w	r0, r5, r0
 8004e1a:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004e1e:	f8ac 0004 	strh.w	r0, [ip, #4]
	adcMeanSum[listIDC - 1] = adcMeanSum[listIDC - 1] - adcMeanBuffer[listIDC - 1][adcMeanBufferPo];
 8004e22:	f101 0640 	add.w	r6, r1, #64	@ 0x40
 8004e26:	f932 7016 	ldrsh.w	r7, [r2, r6, lsl #1]
 8004e2a:	685d      	ldr	r5, [r3, #4]
 8004e2c:	1bed      	subs	r5, r5, r7
	adcMeanBuffer[listIDC - 1][adcMeanBufferPo] = adcBuffer[listIDC];
 8004e2e:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listIDC - 1] = adcMeanSum[listIDC - 1] + adcMeanBuffer[listIDC - 1][adcMeanBufferPo];
 8004e32:	4428      	add	r0, r5
 8004e34:	6058      	str	r0, [r3, #4]

	/* VBAT */
	adcBuffer[listVBAT1] = (q15_t)(((int32_t)(adc1Buffer[listVBAT1]) * adcGain[listVBAT1]) >> 15);
 8004e36:	f9be 0006 	ldrsh.w	r0, [lr, #6]
 8004e3a:	f9b4 5006 	ldrsh.w	r5, [r4, #6]
 8004e3e:	fb05 f000 	mul.w	r0, r5, r0
 8004e42:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004e46:	f8ac 0006 	strh.w	r0, [ip, #6]
	adcMeanSum[listVBAT1 - 1] = adcMeanSum[listVBAT1 - 1] - adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo];
 8004e4a:	f101 0680 	add.w	r6, r1, #128	@ 0x80
 8004e4e:	f932 7016 	ldrsh.w	r7, [r2, r6, lsl #1]
 8004e52:	689d      	ldr	r5, [r3, #8]
 8004e54:	1bed      	subs	r5, r5, r7
	adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo] = adcBuffer[listVBAT1];
 8004e56:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listVBAT1 - 1] = adcMeanSum[listVBAT1 - 1] + adcMeanBuffer[listVBAT1 - 1][adcMeanBufferPo];
 8004e5a:	4428      	add	r0, r5
 8004e5c:	6098      	str	r0, [r3, #8]

	/* VDC1 */
	adcBuffer[listVDC1] = (q15_t)(((int32_t)(adc1Buffer[listVDC1]) * adcGain[listVDC1]) >> 15);
 8004e5e:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 8004e62:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8004e66:	fb05 f000 	mul.w	r0, r5, r0
 8004e6a:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004e6e:	f8ac 0008 	strh.w	r0, [ip, #8]
	adcMeanSum[listVDC1 - 1] = adcMeanSum[listVDC1 - 1] - adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo];
 8004e72:	f101 06c0 	add.w	r6, r1, #192	@ 0xc0
 8004e76:	f932 5016 	ldrsh.w	r5, [r2, r6, lsl #1]
 8004e7a:	68df      	ldr	r7, [r3, #12]
 8004e7c:	1b7d      	subs	r5, r7, r5
	adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo] = adcBuffer[listVDC1];
 8004e7e:	f822 0016 	strh.w	r0, [r2, r6, lsl #1]
	adcMeanSum[listVDC1 - 1] = adcMeanSum[listVDC1 - 1] + adcMeanBuffer[listVDC1 - 1][adcMeanBufferPo];
 8004e82:	4428      	add	r0, r5
 8004e84:	60d8      	str	r0, [r3, #12]

	/* VDC2 */
	adcBuffer[listVDC2] = (q15_t)(((int32_t)(adc1Buffer[listVDC2]) * adcGain[listVDC2]) >> 15);
 8004e86:	f9be 000a 	ldrsh.w	r0, [lr, #10]
 8004e8a:	f9b4 400a 	ldrsh.w	r4, [r4, #10]
 8004e8e:	fb04 f000 	mul.w	r0, r4, r0
 8004e92:	f340 30cf 	sbfx	r0, r0, #15, #16
 8004e96:	f8ac 000a 	strh.w	r0, [ip, #10]
	adcMeanSum[listVDC2 - 1] = adcMeanSum[listVDC2 - 1] - adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo];
 8004e9a:	f501 7580 	add.w	r5, r1, #256	@ 0x100
 8004e9e:	f932 6015 	ldrsh.w	r6, [r2, r5, lsl #1]
 8004ea2:	691c      	ldr	r4, [r3, #16]
 8004ea4:	1ba4      	subs	r4, r4, r6
	adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo] = adcBuffer[listVDC2];
 8004ea6:	f822 0015 	strh.w	r0, [r2, r5, lsl #1]
	adcMeanSum[listVDC2 - 1] = adcMeanSum[listVDC2 - 1] + adcMeanBuffer[listVDC2 - 1][adcMeanBufferPo];
 8004eaa:	4420      	add	r0, r4
 8004eac:	6118      	str	r0, [r3, #16]

	/* IDC2 */
	// adcBuffer[listIDC2] = (q15_t)(((int32_t)(adc1Buffer[listIDC2]) * adcGain[listIDC2]) >> 15);
	adcBuffer[listIDC2] = (q15_t)(int32_t)(adc1Buffer[listIDC2]);
 8004eae:	f9be 400c 	ldrsh.w	r4, [lr, #12]
 8004eb2:	f8ac 400c 	strh.w	r4, [ip, #12]
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] - adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 8004eb6:	f501 70a0 	add.w	r0, r1, #320	@ 0x140
 8004eba:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	1a12      	subs	r2, r2, r0
	adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo] = adcBuffer[listIDC2];
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] + adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 8004ec2:	4422      	add	r2, r4

	adcMeanBufferPo++;
 8004ec4:	1c4b      	adds	r3, r1, #1
 8004ec6:	b2db      	uxtb	r3, r3

	if (adcMeanBufferPo >= ADC_MEAN_BUFFER_SIZE)
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	bf28      	it	cs
 8004ecc:	2300      	movcs	r3, #0
	adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo] = adcBuffer[listIDC2];
 8004ece:	f240 10e4 	movw	r0, #484	@ 0x1e4
 8004ed2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004ed6:	f501 71a0 	add.w	r1, r1, #320	@ 0x140
 8004eda:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
	adcMeanSum[listIDC2 - 1] = adcMeanSum[listIDC2 - 1] + adcMeanBuffer[listIDC2 - 1][adcMeanBufferPo];
 8004ede:	f240 11cc 	movw	r1, #460	@ 0x1cc
 8004ee2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8004ee6:	614a      	str	r2, [r1, #20]
	adcMeanBufferPo++;
 8004ee8:	f240 12c8 	movw	r2, #456	@ 0x1c8
 8004eec:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8004ef0:	7013      	strb	r3, [r2, #0]
		adcMeanBufferPo = 0;
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f02 <ADC1_IRQHandler>:

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004f02:	4770      	bx	lr

08004f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f06:	f240 60c0 	movw	r0, #1728	@ 0x6c0
 8004f0a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004f0e:	f001 f8dc 	bl	80060ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f12:	bd08      	pop	{r3, pc}

08004f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f16:	f240 6078 	movw	r0, #1656	@ 0x678
 8004f1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004f1e:	f001 f8d4 	bl	80060ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f22:	bd08      	pop	{r3, pc}

08004f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8004f26:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004f2a:	f000 fb20 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8004f2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f32:	f000 fb1c 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004f36:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f3a:	f000 fb18 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8004f3e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004f42:	f000 fb14 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8004f46:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004f4a:	f000 fb10 	bl	800556e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    uint32_t idr = GPIOB->IDR;
 8004f4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f52:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8004f56:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8004f58:	f240 51e1 	movw	r1, #1505	@ 0x5e1
 8004f5c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004f60:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004f64:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8004f6e:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8004f72:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004f74:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8004f78:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8004f7c:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8004f80:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8004f84:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8004f88:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8004f8c:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 8004f8e:	f240 53e0 	movw	r3, #1504	@ 0x5e0
 8004f92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8004f9a:	f240 6030 	movw	r0, #1584	@ 0x630
 8004f9e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004fa2:	f001 f84f 	bl	8006044 <HAL_TIM_Base_Start_IT>
	//HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fa6:	bd08      	pop	{r3, pc}

08004fa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004fa8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8004faa:	2200      	movs	r2, #0
 8004fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fb0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004fb4:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8004fb8:	f000 fad2 	bl	8005560 <HAL_GPIO_WritePin>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004fbc:	f240 6030 	movw	r0, #1584	@ 0x630
 8004fc0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8004fc4:	f001 f881 	bl	80060ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004fc8:	bd08      	pop	{r3, pc}

08004fca <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fca:	4770      	bx	lr

08004fcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fcc:	f7ff fffd 	bl	8004fca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fd0:	480b      	ldr	r0, [pc, #44]	@ (8005000 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004fd2:	490c      	ldr	r1, [pc, #48]	@ (8005004 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fd8:	e002      	b.n	8004fe0 <LoopCopyDataInit>

08004fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fde:	3304      	adds	r3, #4

08004fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe4:	d3f9      	bcc.n	8004fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fe6:	4a09      	ldr	r2, [pc, #36]	@ (800500c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004fe8:	4c09      	ldr	r4, [pc, #36]	@ (8005010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fec:	e001      	b.n	8004ff2 <LoopFillZerobss>

08004fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff0:	3204      	adds	r2, #4

08004ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff4:	d3fb      	bcc.n	8004fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ff6:	f001 fc85 	bl	8006904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ffa:	f7fe ffb7 	bl	8003f6c <main>
  bx lr
 8004ffe:	4770      	bx	lr
  ldr r0, =_sdata
 8005000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005004:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8005008:	08007298 	.word	0x08007298
  ldr r2, =_sbss
 800500c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8005010:	200008b0 	.word	0x200008b0

08005014 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005014:	e7fe      	b.n	8005014 <CEC_IRQHandler>

08005016 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005016:	b510      	push	{r4, lr}
 8005018:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800501a:	f240 02cc 	movw	r2, #204	@ 0xcc
 800501e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8005022:	f240 03d0 	movw	r3, #208	@ 0xd0
 8005026:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800502a:	7819      	ldrb	r1, [r3, #0]
 800502c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005030:	fbb3 f3f1 	udiv	r3, r3, r1
 8005034:	6810      	ldr	r0, [r2, #0]
 8005036:	fbb0 f0f3 	udiv	r0, r0, r3
 800503a:	f000 f8a0 	bl	800517e <HAL_SYSTICK_Config>
 800503e:	b980      	cbnz	r0, 8005062 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005040:	2c0f      	cmp	r4, #15
 8005042:	d901      	bls.n	8005048 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8005044:	2001      	movs	r0, #1
 8005046:	e00d      	b.n	8005064 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005048:	2200      	movs	r2, #0
 800504a:	4621      	mov	r1, r4
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	f000 f84e 	bl	80050f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005054:	f240 03d4 	movw	r3, #212	@ 0xd4
 8005058:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800505c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505e:	2000      	movs	r0, #0
 8005060:	e000      	b.n	8005064 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8005062:	2001      	movs	r0, #1
}
 8005064:	bd10      	pop	{r4, pc}

08005066 <HAL_Init>:
{
 8005066:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005068:	2003      	movs	r0, #3
 800506a:	f000 f82e 	bl	80050ca <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800506e:	200f      	movs	r0, #15
 8005070:	f7ff ffd1 	bl	8005016 <HAL_InitTick>
  HAL_MspInit();
 8005074:	f7ff fcb3 	bl	80049de <HAL_MspInit>
}
 8005078:	2000      	movs	r0, #0
 800507a:	bd08      	pop	{r3, pc}

0800507c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800507c:	f240 7374 	movw	r3, #1908	@ 0x774
 8005080:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005084:	6819      	ldr	r1, [r3, #0]
 8005086:	f240 02d0 	movw	r2, #208	@ 0xd0
 800508a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	440a      	add	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	4770      	bx	lr

08005096 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005096:	f240 7374 	movw	r3, #1908	@ 0x774
 800509a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800509e:	6818      	ldr	r0, [r3, #0]
}
 80050a0:	4770      	bx	lr

080050a2 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a2:	b538      	push	{r3, r4, r5, lr}
 80050a4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050a6:	f7ff fff6 	bl	8005096 <HAL_GetTick>
 80050aa:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80050b0:	d005      	beq.n	80050be <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 80050b2:	f240 03d0 	movw	r3, #208	@ 0xd0
 80050b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050be:	f7ff ffea 	bl	8005096 <HAL_GetTick>
 80050c2:	1b40      	subs	r0, r0, r5
 80050c4:	42a0      	cmp	r0, r4
 80050c6:	d3fa      	bcc.n	80050be <HAL_Delay+0x1c>
  {
  }
}
 80050c8:	bd38      	pop	{r3, r4, r5, pc}

080050ca <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050ca:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 80050ce:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 80050d2:	68d1      	ldr	r1, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80050d4:	0203      	lsls	r3, r0, #8
 80050d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050da:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80050de:	0409      	lsls	r1, r1, #16
 80050e0:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e2:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 80050e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80050ec:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80050ee:	4770      	bx	lr

080050f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050f0:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050f2:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 80050f6:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005100:	f1c3 0c07 	rsb	ip, r3, #7
 8005104:	f1bc 0f04 	cmp.w	ip, #4
 8005108:	bf28      	it	cs
 800510a:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510e:	f103 0e04 	add.w	lr, r3, #4
 8005112:	f1be 0f06 	cmp.w	lr, #6
 8005116:	bf8c      	ite	hi
 8005118:	3b03      	subhi	r3, #3
 800511a:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800511c:	f04f 3eff 	mov.w	lr, #4294967295
 8005120:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005124:	ea21 010c 	bic.w	r1, r1, ip
 8005128:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800512a:	fa0e fe03 	lsl.w	lr, lr, r3
 800512e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005132:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005134:	2800      	cmp	r0, #0
 8005136:	db09      	blt.n	800514c <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005138:	0109      	lsls	r1, r1, #4
 800513a:	b2c9      	uxtb	r1, r1
 800513c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005140:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005144:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005148:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	f000 000f 	and.w	r0, r0, #15
 8005150:	0109      	lsls	r1, r1, #4
 8005152:	b2c9      	uxtb	r1, r1
 8005154:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 8005158:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800515c:	4403      	add	r3, r0
 800515e:	7619      	strb	r1, [r3, #24]
 8005160:	e7f2      	b.n	8005148 <HAL_NVIC_SetPriority+0x58>

08005162 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005162:	2800      	cmp	r0, #0
 8005164:	db0a      	blt.n	800517c <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	0941      	lsrs	r1, r0, #5
 8005168:	f000 001f 	and.w	r0, r0, #31
 800516c:	2301      	movs	r3, #1
 800516e:	4083      	lsls	r3, r0
 8005170:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005174:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8005178:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800517c:	4770      	bx	lr

0800517e <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800517e:	3801      	subs	r0, #1
 8005180:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005184:	d20e      	bcs.n	80051a4 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005186:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800518a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8005190:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8005194:	21f0      	movs	r1, #240	@ 0xf0
 8005196:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800519a:	2000      	movs	r0, #0
 800519c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800519e:	2207      	movs	r2, #7
 80051a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80051a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80051a6:	4770      	bx	lr

080051a8 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051a8:	b170      	cbz	r0, 80051c8 <HAL_DAC_Init+0x20>
{
 80051aa:	b510      	push	{r4, lr}
 80051ac:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051ae:	7903      	ldrb	r3, [r0, #4]
 80051b0:	b133      	cbz	r3, 80051c0 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051b6:	2000      	movs	r0, #0
 80051b8:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051ba:	2301      	movs	r3, #1
 80051bc:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80051be:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80051c0:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80051c2:	f7ff fc38 	bl	8004a36 <HAL_DAC_MspInit>
 80051c6:	e7f4      	b.n	80051b2 <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80051c8:	2001      	movs	r0, #1
}
 80051ca:	4770      	bx	lr

080051cc <HAL_DAC_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051cc:	b380      	cbz	r0, 8005230 <HAL_DAC_Start+0x64>
 80051ce:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80051d0:	7942      	ldrb	r2, [r0, #5]
 80051d2:	2a01      	cmp	r2, #1
 80051d4:	d02e      	beq.n	8005234 <HAL_DAC_Start+0x68>
{
 80051d6:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 80051d8:	2201      	movs	r2, #1
 80051da:	7142      	strb	r2, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80051dc:	2002      	movs	r0, #2
 80051de:	7118      	strb	r0, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	6804      	ldr	r4, [r0, #0]
 80051e4:	f001 0c10 	and.w	ip, r1, #16
 80051e8:	fa02 f20c 	lsl.w	r2, r2, ip
 80051ec:	4322      	orrs	r2, r4
 80051ee:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80051f0:	b981      	cbnz	r1, 8005214 <HAL_DAC_Start+0x48>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	680a      	ldr	r2, [r1, #0]
 80051f6:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80051fa:	2a3c      	cmp	r2, #60	@ 0x3c
 80051fc:	d005      	beq.n	800520a <HAL_DAC_Start+0x3e>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051fe:	2201      	movs	r2, #1
 8005200:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005202:	2000      	movs	r0, #0
 8005204:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8005206:	bc10      	pop	{r4}
 8005208:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800520a:	684a      	ldr	r2, [r1, #4]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	604a      	str	r2, [r1, #4]
 8005212:	e7f4      	b.n	80051fe <HAL_DAC_Start+0x32>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	6801      	ldr	r1, [r0, #0]
 8005218:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 800521c:	223c      	movs	r2, #60	@ 0x3c
 800521e:	fa02 f20c 	lsl.w	r2, r2, ip
 8005222:	4291      	cmp	r1, r2
 8005224:	d1eb      	bne.n	80051fe <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005226:	6842      	ldr	r2, [r0, #4]
 8005228:	f042 0202 	orr.w	r2, r2, #2
 800522c:	6042      	str	r2, [r0, #4]
 800522e:	e7e6      	b.n	80051fe <HAL_DAC_Start+0x32>
    return HAL_ERROR;
 8005230:	2001      	movs	r0, #1
 8005232:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8005234:	2002      	movs	r0, #2
}
 8005236:	4770      	bx	lr

08005238 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005238:	b410      	push	{r4}
 800523a:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 800523c:	2400      	movs	r4, #0
 800523e:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005240:	b188      	cbz	r0, 8005266 <HAL_DAC_SetValue+0x2e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005242:	6800      	ldr	r0, [r0, #0]
 8005244:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8005246:	b949      	cbnz	r1, 800525c <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005248:	9901      	ldr	r1, [sp, #4]
 800524a:	3108      	adds	r1, #8
 800524c:	440a      	add	r2, r1
 800524e:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005254:	2000      	movs	r0, #0
}
 8005256:	b003      	add	sp, #12
 8005258:	bc10      	pop	{r4}
 800525a:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800525c:	9901      	ldr	r1, [sp, #4]
 800525e:	3114      	adds	r1, #20
 8005260:	440a      	add	r2, r1
 8005262:	9201      	str	r2, [sp, #4]
 8005264:	e7f4      	b.n	8005250 <HAL_DAC_SetValue+0x18>
    return HAL_ERROR;
 8005266:	2001      	movs	r0, #1
 8005268:	e7f5      	b.n	8005256 <HAL_DAC_SetValue+0x1e>

0800526a <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800526a:	b348      	cbz	r0, 80052c0 <HAL_DAC_ConfigChannel+0x56>
 800526c:	4684      	mov	ip, r0
 800526e:	b349      	cbz	r1, 80052c4 <HAL_DAC_ConfigChannel+0x5a>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005270:	7943      	ldrb	r3, [r0, #5]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d028      	beq.n	80052c8 <HAL_DAC_ConfigChannel+0x5e>
{
 8005276:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8005278:	f04f 0e01 	mov.w	lr, #1
 800527c:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	7103      	strb	r3, [r0, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005284:	6804      	ldr	r4, [r0, #0]
 8005286:	6820      	ldr	r0, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8005288:	f002 0210 	and.w	r2, r2, #16
 800528c:	f640 73fe 	movw	r3, #4094	@ 0xffe
 8005290:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8005292:	ea20 0003 	bic.w	r0, r0, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005296:	680b      	ldr	r3, [r1, #0]
 8005298:	6849      	ldr	r1, [r1, #4]
 800529a:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800529c:	4093      	lsls	r3, r2
 800529e:	4303      	orrs	r3, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052a0:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80052a2:	f8dc 0000 	ldr.w	r0, [ip]
 80052a6:	6803      	ldr	r3, [r0, #0]
 80052a8:	21c0      	movs	r1, #192	@ 0xc0
 80052aa:	fa01 f202 	lsl.w	r2, r1, r2
 80052ae:	ea23 0302 	bic.w	r3, r3, r2
 80052b2:	6003      	str	r3, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052b4:	f88c e004 	strb.w	lr, [ip, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f88c 0005 	strb.w	r0, [ip, #5]

  /* Return function status */
  return status;
}
 80052be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052c0:	2001      	movs	r0, #1
 80052c2:	4770      	bx	lr
 80052c4:	2001      	movs	r0, #1
 80052c6:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80052c8:	2002      	movs	r0, #2
}
 80052ca:	4770      	bx	lr

080052cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052d2:	f8d1 9000 	ldr.w	r9, [r1]
 80052d6:	f1b9 0f00 	cmp.w	r9, #0
 80052da:	f000 8137 	beq.w	800554c <HAL_GPIO_Init+0x280>
 80052de:	4606      	mov	r6, r0
 80052e0:	2200      	movs	r2, #0
  uint32_t config = 0x00u;
 80052e2:	4617      	mov	r7, r2
  uint32_t position = 0x00u;
 80052e4:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80052e6:	f04f 0c01 	mov.w	ip, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80052ea:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 80052ee:	f2c4 0e02 	movt	lr, #16386	@ 0x4002
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80052f2:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80052f6:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80052fa:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 80052fe:	f2c4 0501 	movt	r5, #16385	@ 0x4001
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005302:	3004      	adds	r0, #4
 8005304:	9001      	str	r0, [sp, #4]
 8005306:	46a8      	mov	r8, r5
 8005308:	464d      	mov	r5, r9
 800530a:	e0d1      	b.n	80054b0 <HAL_GPIO_Init+0x1e4>
      switch (GPIO_Init->Mode)
 800530c:	f04f 0a00 	mov.w	sl, #0
 8005310:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 8005314:	4555      	cmp	r5, sl
 8005316:	d024      	beq.n	8005362 <HAL_GPIO_Init+0x96>
 8005318:	f04f 0a00 	mov.w	sl, #0
 800531c:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 8005320:	4555      	cmp	r5, sl
 8005322:	d812      	bhi.n	800534a <HAL_GPIO_Init+0x7e>
 8005324:	f04f 0a00 	mov.w	sl, #0
 8005328:	f2c1 0a12 	movt	sl, #4114	@ 0x1012
 800532c:	4555      	cmp	r5, sl
 800532e:	d018      	beq.n	8005362 <HAL_GPIO_Init+0x96>
 8005330:	f04f 0a00 	mov.w	sl, #0
 8005334:	f2c1 0a21 	movt	sl, #4129	@ 0x1021
 8005338:	4555      	cmp	r5, sl
 800533a:	d012      	beq.n	8005362 <HAL_GPIO_Init+0x96>
 800533c:	f04f 0a00 	mov.w	sl, #0
 8005340:	f2c1 0a11 	movt	sl, #4113	@ 0x1011
 8005344:	4555      	cmp	r5, sl
 8005346:	d119      	bne.n	800537c <HAL_GPIO_Init+0xb0>
 8005348:	e00b      	b.n	8005362 <HAL_GPIO_Init+0x96>
 800534a:	f04f 0a00 	mov.w	sl, #0
 800534e:	f2c1 0a31 	movt	sl, #4145	@ 0x1031
 8005352:	4555      	cmp	r5, sl
 8005354:	d005      	beq.n	8005362 <HAL_GPIO_Init+0x96>
 8005356:	f04f 0a00 	mov.w	sl, #0
 800535a:	f2c1 0a32 	movt	sl, #4146	@ 0x1032
 800535e:	4555      	cmp	r5, sl
 8005360:	d10c      	bne.n	800537c <HAL_GPIO_Init+0xb0>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005362:	688d      	ldr	r5, [r1, #8]
 8005364:	2d00      	cmp	r5, #0
 8005366:	f000 80e6 	beq.w	8005536 <HAL_GPIO_Init+0x26a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800536a:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 800536c:	bf0c      	ite	eq
 800536e:	f8c6 9010 	streq.w	r9, [r6, #16]
            GPIOx->BRR = ioposition;
 8005372:	f8c6 9014 	strne.w	r9, [r6, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005376:	2708      	movs	r7, #8
 8005378:	e000      	b.n	800537c <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800537a:	68cf      	ldr	r7, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800537c:	28ff      	cmp	r0, #255	@ 0xff
 800537e:	bf99      	ittee	ls
 8005380:	46b1      	movls	r9, r6
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005382:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005384:	f8dd 9004 	ldrhi.w	r9, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005388:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800538c:	f8d9 5000 	ldr.w	r5, [r9]
 8005390:	f04f 0b0f 	mov.w	fp, #15
 8005394:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005398:	ea25 050b 	bic.w	r5, r5, fp
 800539c:	fa07 fa0a 	lsl.w	sl, r7, sl
 80053a0:	ea45 050a 	orr.w	r5, r5, sl
 80053a4:	f8c9 5000 	str.w	r5, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053a8:	684d      	ldr	r5, [r1, #4]
 80053aa:	f015 5f80 	tst.w	r5, #268435456	@ 0x10000000
 80053ae:	d079      	beq.n	80054a4 <HAL_GPIO_Init+0x1d8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80053b0:	f8de 5018 	ldr.w	r5, [lr, #24]
 80053b4:	f045 0501 	orr.w	r5, r5, #1
 80053b8:	f8ce 5018 	str.w	r5, [lr, #24]
 80053bc:	f8de 5018 	ldr.w	r5, [lr, #24]
 80053c0:	f005 0501 	and.w	r5, r5, #1
 80053c4:	9503      	str	r5, [sp, #12]
 80053c6:	9d03      	ldr	r5, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 80053c8:	f023 0503 	bic.w	r5, r3, #3
 80053cc:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 80053d0:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80053d4:	f8d5 a008 	ldr.w	sl, [r5, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80053d8:	f003 0b03 	and.w	fp, r3, #3
 80053dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80053e0:	f04f 090f 	mov.w	r9, #15
 80053e4:	fa09 f90b 	lsl.w	r9, r9, fp
 80053e8:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80053ec:	42a6      	cmp	r6, r4
 80053ee:	f000 80a4 	beq.w	800553a <HAL_GPIO_Init+0x26e>
 80053f2:	4546      	cmp	r6, r8
 80053f4:	f000 80a4 	beq.w	8005540 <HAL_GPIO_Init+0x274>
 80053f8:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 80053fc:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 8005400:	454e      	cmp	r6, r9
 8005402:	f000 80a0 	beq.w	8005546 <HAL_GPIO_Init+0x27a>
 8005406:	f44f 59a0 	mov.w	r9, #5120	@ 0x1400
 800540a:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 800540e:	454e      	cmp	r6, r9
 8005410:	bf14      	ite	ne
 8005412:	f04f 0904 	movne.w	r9, #4
 8005416:	f04f 0903 	moveq.w	r9, #3
 800541a:	fa09 f90b 	lsl.w	r9, r9, fp
 800541e:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8005422:	f8c5 9008 	str.w	r9, [r5, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005426:	684d      	ldr	r5, [r1, #4]
 8005428:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800542c:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8005430:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8005434:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8005438:	bf14      	ite	ne
 800543a:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800543e:	ea29 0900 	biceq.w	r9, r9, r0
 8005442:	f8c5 9008 	str.w	r9, [r5, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005446:	684d      	ldr	r5, [r1, #4]
 8005448:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800544c:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8005450:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8005454:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8005458:	bf14      	ite	ne
 800545a:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800545e:	ea29 0900 	biceq.w	r9, r9, r0
 8005462:	f8c5 900c 	str.w	r9, [r5, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005466:	684d      	ldr	r5, [r1, #4]
 8005468:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800546c:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8005470:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8005474:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8005478:	bf14      	ite	ne
 800547a:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800547e:	ea29 0900 	biceq.w	r9, r9, r0
 8005482:	f8c5 9004 	str.w	r9, [r5, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005486:	684d      	ldr	r5, [r1, #4]
 8005488:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800548c:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 8005490:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8005494:	f8d5 9000 	ldr.w	r9, [r5]
 8005498:	bf14      	ite	ne
 800549a:	ea49 0000 	orrne.w	r0, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800549e:	ea29 0000 	biceq.w	r0, r9, r0
 80054a2:	6028      	str	r0, [r5, #0]
        }
      }
    }

	position++;
 80054a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054a6:	680d      	ldr	r5, [r1, #0]
 80054a8:	3204      	adds	r2, #4
 80054aa:	fa35 f003 	lsrs.w	r0, r5, r3
 80054ae:	d04d      	beq.n	800554c <HAL_GPIO_Init+0x280>
    ioposition = (0x01uL << position);
 80054b0:	fa0c f903 	lsl.w	r9, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054b4:	ea09 0005 	and.w	r0, r9, r5
    if (iocurrent == ioposition)
 80054b8:	ea39 0505 	bics.w	r5, r9, r5
 80054bc:	d1f2      	bne.n	80054a4 <HAL_GPIO_Init+0x1d8>
      switch (GPIO_Init->Mode)
 80054be:	684d      	ldr	r5, [r1, #4]
 80054c0:	2d12      	cmp	r5, #18
 80054c2:	f63f af23 	bhi.w	800530c <HAL_GPIO_Init+0x40>
 80054c6:	2d12      	cmp	r5, #18
 80054c8:	f63f af58 	bhi.w	800537c <HAL_GPIO_Init+0xb0>
 80054cc:	f20f 0a04 	addw	sl, pc, #4
 80054d0:	f85a f025 	ldr.w	pc, [sl, r5, lsl #2]
 80054d4:	08005363 	.word	0x08005363
 80054d8:	0800537b 	.word	0x0800537b
 80054dc:	08005527 	.word	0x08005527
 80054e0:	08005533 	.word	0x08005533
 80054e4:	0800537d 	.word	0x0800537d
 80054e8:	0800537d 	.word	0x0800537d
 80054ec:	0800537d 	.word	0x0800537d
 80054f0:	0800537d 	.word	0x0800537d
 80054f4:	0800537d 	.word	0x0800537d
 80054f8:	0800537d 	.word	0x0800537d
 80054fc:	0800537d 	.word	0x0800537d
 8005500:	0800537d 	.word	0x0800537d
 8005504:	0800537d 	.word	0x0800537d
 8005508:	0800537d 	.word	0x0800537d
 800550c:	0800537d 	.word	0x0800537d
 8005510:	0800537d 	.word	0x0800537d
 8005514:	0800537d 	.word	0x0800537d
 8005518:	08005521 	.word	0x08005521
 800551c:	0800552d 	.word	0x0800552d
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005520:	68cf      	ldr	r7, [r1, #12]
 8005522:	3704      	adds	r7, #4
          break;
 8005524:	e72a      	b.n	800537c <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005526:	68cf      	ldr	r7, [r1, #12]
 8005528:	3708      	adds	r7, #8
          break;
 800552a:	e727      	b.n	800537c <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800552c:	68cf      	ldr	r7, [r1, #12]
 800552e:	370c      	adds	r7, #12
          break;
 8005530:	e724      	b.n	800537c <HAL_GPIO_Init+0xb0>
      switch (GPIO_Init->Mode)
 8005532:	2700      	movs	r7, #0
 8005534:	e722      	b.n	800537c <HAL_GPIO_Init+0xb0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005536:	2704      	movs	r7, #4
 8005538:	e720      	b.n	800537c <HAL_GPIO_Init+0xb0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800553a:	f04f 0900 	mov.w	r9, #0
 800553e:	e76c      	b.n	800541a <HAL_GPIO_Init+0x14e>
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	e769      	b.n	800541a <HAL_GPIO_Init+0x14e>
 8005546:	f04f 0902 	mov.w	r9, #2
 800554a:	e766      	b.n	800541a <HAL_GPIO_Init+0x14e>
  }
}
 800554c:	b005      	add	sp, #20
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	bf00      	nop

08005554 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005554:	6883      	ldr	r3, [r0, #8]
 8005556:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005558:	bf14      	ite	ne
 800555a:	2001      	movne	r0, #1
 800555c:	2000      	moveq	r0, #0
 800555e:	4770      	bx	lr

08005560 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005560:	b10a      	cbz	r2, 8005566 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005562:	6101      	str	r1, [r0, #16]
 8005564:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005566:	0409      	lsls	r1, r1, #16
 8005568:	6101      	str	r1, [r0, #16]
  }
}
 800556a:	4770      	bx	lr

0800556c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800556c:	4770      	bx	lr

0800556e <HAL_GPIO_EXTI_IRQHandler>:
{
 800556e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005574:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	4203      	tst	r3, r0
 800557c:	d100      	bne.n	8005580 <HAL_GPIO_EXTI_IRQHandler+0x12>
}
 800557e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005584:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005588:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800558a:	f7ff ffef 	bl	800556c <HAL_GPIO_EXTI_Callback>
}
 800558e:	e7f6      	b.n	800557e <HAL_GPIO_EXTI_IRQHandler+0x10>

08005590 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005590:	2800      	cmp	r0, #0
 8005592:	f000 80c7 	beq.w	8005724 <HAL_I2C_Init+0x194>
{
 8005596:	b538      	push	{r3, r4, r5, lr}
 8005598:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8084 	beq.w	80056ac <HAL_I2C_Init+0x11c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a4:	2324      	movs	r3, #36	@ 0x24
 80055a6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	6813      	ldr	r3, [r2, #0]
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055bc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055c6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055c8:	f000 fc29 	bl	8005e1e <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055cc:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 80055d0:	f2c0 0301 	movt	r3, #1
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d86d      	bhi.n	80056b6 <HAL_I2C_Init+0x126>
 80055da:	f248 437f 	movw	r3, #33919	@ 0x847f
 80055de:	f2c0 031e 	movt	r3, #30
 80055e2:	4298      	cmp	r0, r3
 80055e4:	f240 80a0 	bls.w	8005728 <HAL_I2C_Init+0x198>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055e8:	f64d 6183 	movw	r1, #56963	@ 0xde83
 80055ec:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 80055f0:	fba1 3100 	umull	r3, r1, r1, r0
 80055f4:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	686a      	ldr	r2, [r5, #4]
 80055fa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80055fe:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8005602:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005604:	6821      	ldr	r1, [r4, #0]
 8005606:	6a0a      	ldr	r2, [r1, #32]
 8005608:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800560c:	f248 65a0 	movw	r5, #34464	@ 0x86a0
 8005610:	f2c0 0501 	movt	r5, #1
 8005614:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8005618:	45ac      	cmp	ip, r5
 800561a:	d854      	bhi.n	80056c6 <HAL_I2C_Init+0x136>
 800561c:	3301      	adds	r3, #1
 800561e:	4313      	orrs	r3, r2
 8005620:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	69ca      	ldr	r2, [r1, #28]
 8005626:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800562a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800562e:	6865      	ldr	r5, [r4, #4]
 8005630:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8005634:	f2c0 0301 	movt	r3, #1
 8005638:	429d      	cmp	r5, r3
 800563a:	d851      	bhi.n	80056e0 <HAL_I2C_Init+0x150>
 800563c:	1e43      	subs	r3, r0, #1
 800563e:	006d      	lsls	r5, r5, #1
 8005640:	fbb3 f3f5 	udiv	r3, r3, r5
 8005644:	3301      	adds	r3, #1
 8005646:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800564a:	4203      	tst	r3, r0
 800564c:	d064      	beq.n	8005718 <HAL_I2C_Init+0x188>
 800564e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005652:	431a      	orrs	r2, r3
 8005654:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	680a      	ldr	r2, [r1, #0]
 800565a:	69e3      	ldr	r3, [r4, #28]
 800565c:	6a20      	ldr	r0, [r4, #32]
 800565e:	4303      	orrs	r3, r0
 8005660:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005668:	6821      	ldr	r1, [r4, #0]
 800566a:	688a      	ldr	r2, [r1, #8]
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	68e0      	ldr	r0, [r4, #12]
 8005670:	4303      	orrs	r3, r0
 8005672:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8005676:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800567a:	4313      	orrs	r3, r2
 800567c:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	68ca      	ldr	r2, [r1, #12]
 8005682:	6963      	ldr	r3, [r4, #20]
 8005684:	69a0      	ldr	r0, [r4, #24]
 8005686:	4303      	orrs	r3, r0
 8005688:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800568c:	4313      	orrs	r3, r2
 800568e:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800569a:	2000      	movs	r0, #0
 800569c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800569e:	2320      	movs	r3, #32
 80056a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a6:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80056ac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80056b0:	f7ff f9f4 	bl	8004a9c <HAL_I2C_MspInit>
 80056b4:	e776      	b.n	80055a4 <HAL_I2C_Init+0x14>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056b6:	f640 03ff 	movw	r3, #2303	@ 0x8ff
 80056ba:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80056be:	4298      	cmp	r0, r3
 80056c0:	d892      	bhi.n	80055e8 <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 80056c2:	2001      	movs	r0, #1
 80056c4:	e7f1      	b.n	80056aa <HAL_I2C_Init+0x11a>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056c6:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80056ca:	fb05 f303 	mul.w	r3, r5, r3
 80056ce:	f644 55d3 	movw	r5, #19923	@ 0x4dd3
 80056d2:	f2c1 0562 	movt	r5, #4194	@ 0x1062
 80056d6:	fba5 5303 	umull	r5, r3, r5, r3
 80056da:	099b      	lsrs	r3, r3, #6
 80056dc:	3301      	adds	r3, #1
 80056de:	e79e      	b.n	800561e <HAL_I2C_Init+0x8e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056e0:	68a3      	ldr	r3, [r4, #8]
 80056e2:	b95b      	cbnz	r3, 80056fc <HAL_I2C_Init+0x16c>
 80056e4:	1e43      	subs	r3, r0, #1
 80056e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80056ee:	3301      	adds	r3, #1
 80056f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f4:	b193      	cbz	r3, 800571c <HAL_I2C_Init+0x18c>
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fa:	e7aa      	b.n	8005652 <HAL_I2C_Init+0xc2>
 80056fc:	1e43      	subs	r3, r0, #1
 80056fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005702:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005706:	fbb3 f3f5 	udiv	r3, r3, r5
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	b133      	cbz	r3, 8005720 <HAL_I2C_Init+0x190>
 8005712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005716:	e79c      	b.n	8005652 <HAL_I2C_Init+0xc2>
 8005718:	2304      	movs	r3, #4
 800571a:	e79a      	b.n	8005652 <HAL_I2C_Init+0xc2>
 800571c:	2301      	movs	r3, #1
 800571e:	e798      	b.n	8005652 <HAL_I2C_Init+0xc2>
 8005720:	2301      	movs	r3, #1
 8005722:	e796      	b.n	8005652 <HAL_I2C_Init+0xc2>
    return HAL_ERROR;
 8005724:	2001      	movs	r0, #1
}
 8005726:	4770      	bx	lr
    return HAL_ERROR;
 8005728:	2001      	movs	r0, #1
 800572a:	e7be      	b.n	80056aa <HAL_I2C_Init+0x11a>

0800572c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800572c:	2800      	cmp	r0, #0
 800572e:	f000 827a 	beq.w	8005c26 <HAL_RCC_OscConfig+0x4fa>
{
 8005732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573a:	6803      	ldr	r3, [r0, #0]
 800573c:	f013 0f01 	tst.w	r3, #1
 8005740:	d038      	beq.n	80057b4 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005746:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b04      	cmp	r3, #4
 8005752:	d023      	beq.n	800579c <HAL_RCC_OscConfig+0x70>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005758:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	d012      	beq.n	800578c <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800576c:	d054      	beq.n	8005818 <HAL_RCC_OscConfig+0xec>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d16e      	bne.n	8005850 <HAL_RCC_OscConfig+0x124>
 8005772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005776:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	e04d      	b.n	8005828 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800578c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005790:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800579a:	d0e4      	beq.n	8005766 <HAL_RCC_OscConfig+0x3a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057a0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80057aa:	d003      	beq.n	80057b4 <HAL_RCC_OscConfig+0x88>
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 823b 	beq.w	8005c2a <HAL_RCC_OscConfig+0x4fe>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f013 0f02 	tst.w	r3, #2
 80057ba:	f000 8097 	beq.w	80058ec <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057c2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f013 0f0c 	tst.w	r3, #12
 80057cc:	d077      	beq.n	80058be <HAL_RCC_OscConfig+0x192>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057d2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d066      	beq.n	80058ae <HAL_RCC_OscConfig+0x182>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80ae 	beq.w	8005944 <HAL_RCC_OscConfig+0x218>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f2:	f7ff fc50 	bl	8005096 <HAL_GetTick>
 80057f6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f8:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80057fc:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	f013 0f02 	tst.w	r3, #2
 8005806:	f040 8091 	bne.w	800592c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580a:	f7ff fc44 	bl	8005096 <HAL_GetTick>
 800580e:	1b40      	subs	r0, r0, r5
 8005810:	2802      	cmp	r0, #2
 8005812:	d9f5      	bls.n	8005800 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8005814:	2003      	movs	r0, #3
 8005816:	e20d      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800581c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005826:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	b373      	cbz	r3, 800588a <HAL_RCC_OscConfig+0x15e>
        tickstart = HAL_GetTick();
 800582c:	f7ff fc33 	bl	8005096 <HAL_GetTick>
 8005830:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005832:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005836:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005840:	d1b8      	bne.n	80057b4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005842:	f7ff fc28 	bl	8005096 <HAL_GetTick>
 8005846:	1b40      	subs	r0, r0, r5
 8005848:	2864      	cmp	r0, #100	@ 0x64
 800584a:	d9f6      	bls.n	800583a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800584c:	2003      	movs	r0, #3
 800584e:	e1f1      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005854:	d00c      	beq.n	8005870 <HAL_RCC_OscConfig+0x144>
 8005856:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800585a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e7db      	b.n	8005828 <HAL_RCC_OscConfig+0xfc>
 8005870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005874:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e7ce      	b.n	8005828 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 800588a:	f7ff fc04 	bl	8005096 <HAL_GetTick>
 800588e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005890:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005894:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8005898:	6833      	ldr	r3, [r6, #0]
 800589a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800589e:	d089      	beq.n	80057b4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a0:	f7ff fbf9 	bl	8005096 <HAL_GetTick>
 80058a4:	1b40      	subs	r0, r0, r5
 80058a6:	2864      	cmp	r0, #100	@ 0x64
 80058a8:	d9f6      	bls.n	8005898 <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 80058aa:	2003      	movs	r0, #3
 80058ac:	e1c2      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058b2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80058bc:	d190      	bne.n	80057e0 <HAL_RCC_OscConfig+0xb4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058c2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f013 0f02 	tst.w	r3, #2
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1aa>
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f040 81ac 	bne.w	8005c2e <HAL_RCC_OscConfig+0x502>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80058da:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80058de:	6813      	ldr	r3, [r2, #0]
 80058e0:	6961      	ldr	r1, [r4, #20]
 80058e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80058e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80058ea:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f013 0f08 	tst.w	r3, #8
 80058f2:	d051      	beq.n	8005998 <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f4:	69a3      	ldr	r3, [r4, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 8083 	beq.w	8005a02 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fc:	2300      	movs	r3, #0
 80058fe:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005902:	2201      	movs	r2, #1
 8005904:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005908:	f7ff fbc5 	bl	8005096 <HAL_GetTick>
 800590c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005912:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8005916:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005918:	f013 0f02 	tst.w	r3, #2
 800591c:	d129      	bne.n	8005972 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591e:	f7ff fbba 	bl	8005096 <HAL_GetTick>
 8005922:	1b40      	subs	r0, r0, r5
 8005924:	2802      	cmp	r0, #2
 8005926:	d9f6      	bls.n	8005916 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8005928:	2003      	movs	r0, #3
 800592a:	e183      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005930:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	6961      	ldr	r1, [r4, #20]
 8005938:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800593c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e7d3      	b.n	80058ec <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8005944:	2300      	movs	r3, #0
 8005946:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800594e:	f7ff fba2 	bl	8005096 <HAL_GetTick>
 8005952:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005954:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005958:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800595c:	6833      	ldr	r3, [r6, #0]
 800595e:	f013 0f02 	tst.w	r3, #2
 8005962:	d0c3      	beq.n	80058ec <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005964:	f7ff fb97 	bl	8005096 <HAL_GetTick>
 8005968:	1b40      	subs	r0, r0, r5
 800596a:	2802      	cmp	r0, #2
 800596c:	d9f6      	bls.n	800595c <HAL_RCC_OscConfig+0x230>
            return HAL_TIMEOUT;
 800596e:	2003      	movs	r0, #3
 8005970:	e160      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005972:	f240 03cc 	movw	r3, #204	@ 0xcc
 8005976:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8005980:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	0a5b      	lsrs	r3, r3, #9
 800598a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800598c:	bf00      	nop
  }
  while (Delay --);
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	9201      	str	r2, [sp, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f9      	bne.n	800598c <HAL_RCC_OscConfig+0x260>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f013 0f04 	tst.w	r3, #4
 800599e:	f000 80b3 	beq.w	8005b08 <HAL_RCC_OscConfig+0x3dc>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059a6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80059b0:	d13f      	bne.n	8005a32 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059b6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80059c0:	61da      	str	r2, [r3, #28]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80059cc:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ce:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80059d2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80059dc:	d02b      	beq.n	8005a36 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059de:	68e3      	ldr	r3, [r4, #12]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d042      	beq.n	8005a6a <HAL_RCC_OscConfig+0x33e>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d15e      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x37a>
 80059e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	621a      	str	r2, [r3, #32]
 80059f8:	6a1a      	ldr	r2, [r3, #32]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	621a      	str	r2, [r3, #32]
 8005a00:	e03b      	b.n	8005a7a <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_LSI_DISABLE();
 8005a02:	2300      	movs	r3, #0
 8005a04:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005a0e:	f7ff fb42 	bl	8005096 <HAL_GetTick>
 8005a12:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a14:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005a18:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8005a1c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005a1e:	f013 0f02 	tst.w	r3, #2
 8005a22:	d0b9      	beq.n	8005998 <HAL_RCC_OscConfig+0x26c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a24:	f7ff fb37 	bl	8005096 <HAL_GetTick>
 8005a28:	1b40      	subs	r0, r0, r5
 8005a2a:	2802      	cmp	r0, #2
 8005a2c:	d9f6      	bls.n	8005a1c <HAL_RCC_OscConfig+0x2f0>
          return HAL_TIMEOUT;
 8005a2e:	2003      	movs	r0, #3
 8005a30:	e100      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
    FlagStatus       pwrclkchanged = RESET;
 8005a32:	2500      	movs	r5, #0
 8005a34:	e7cb      	b.n	80059ce <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a36:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8005a3a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a44:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005a46:	f7ff fb26 	bl	8005096 <HAL_GetTick>
 8005a4a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8005a50:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005a5a:	d1c0      	bne.n	80059de <HAL_RCC_OscConfig+0x2b2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a5c:	f7ff fb1b 	bl	8005096 <HAL_GetTick>
 8005a60:	1b80      	subs	r0, r0, r6
 8005a62:	2864      	cmp	r0, #100	@ 0x64
 8005a64:	d9f6      	bls.n	8005a54 <HAL_RCC_OscConfig+0x328>
          return HAL_TIMEOUT;
 8005a66:	2003      	movs	r0, #3
 8005a68:	e0e4      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a6e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	f042 0201 	orr.w	r2, r2, #1
 8005a78:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	b37b      	cbz	r3, 8005ade <HAL_RCC_OscConfig+0x3b2>
      tickstart = HAL_GetTick();
 8005a7e:	f7ff fb0a 	bl	8005096 <HAL_GetTick>
 8005a82:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8005a88:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f013 0f02 	tst.w	r3, #2
 8005a96:	d136      	bne.n	8005b06 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7ff fafd 	bl	8005096 <HAL_GetTick>
 8005a9c:	1b80      	subs	r0, r0, r6
 8005a9e:	4540      	cmp	r0, r8
 8005aa0:	d9f6      	bls.n	8005a90 <HAL_RCC_OscConfig+0x364>
          return HAL_TIMEOUT;
 8005aa2:	2003      	movs	r0, #3
 8005aa4:	e0c6      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	d00c      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x398>
 8005aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005aae:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	f022 0201 	bic.w	r2, r2, #1
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	f022 0204 	bic.w	r2, r2, #4
 8005ac0:	621a      	str	r2, [r3, #32]
 8005ac2:	e7da      	b.n	8005a7a <HAL_RCC_OscConfig+0x34e>
 8005ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ac8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005acc:	6a1a      	ldr	r2, [r3, #32]
 8005ace:	f042 0204 	orr.w	r2, r2, #4
 8005ad2:	621a      	str	r2, [r3, #32]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	621a      	str	r2, [r3, #32]
 8005adc:	e7cd      	b.n	8005a7a <HAL_RCC_OscConfig+0x34e>
      tickstart = HAL_GetTick();
 8005ade:	f7ff fada 	bl	8005096 <HAL_GetTick>
 8005ae2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae4:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8005ae8:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aec:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f013 0f02 	tst.w	r3, #2
 8005af6:	d006      	beq.n	8005b06 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af8:	f7ff facd 	bl	8005096 <HAL_GetTick>
 8005afc:	1b80      	subs	r0, r0, r6
 8005afe:	4540      	cmp	r0, r8
 8005b00:	d9f6      	bls.n	8005af0 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 8005b02:	2003      	movs	r0, #3
 8005b04:	e096      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
    if (pwrclkchanged == SET)
 8005b06:	bb2d      	cbnz	r5, 8005b54 <HAL_RCC_OscConfig+0x428>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b08:	69e3      	ldr	r3, [r4, #28]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8091 	beq.w	8005c32 <HAL_RCC_OscConfig+0x506>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005b14:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005b18:	6852      	ldr	r2, [r2, #4]
 8005b1a:	f002 020c 	and.w	r2, r2, #12
 8005b1e:	2a08      	cmp	r2, #8
 8005b20:	d06e      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d01f      	beq.n	8005b66 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005b30:	f7ff fab1 	bl	8005096 <HAL_GetTick>
 8005b34:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b36:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005b3a:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005b44:	d05a      	beq.n	8005bfc <HAL_RCC_OscConfig+0x4d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b46:	f7ff faa6 	bl	8005096 <HAL_GetTick>
 8005b4a:	1b00      	subs	r0, r0, r4
 8005b4c:	2802      	cmp	r0, #2
 8005b4e:	d9f6      	bls.n	8005b3e <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8005b50:	2003      	movs	r0, #3
 8005b52:	e06f      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b58:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005b5c:	69da      	ldr	r2, [r3, #28]
 8005b5e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005b62:	61da      	str	r2, [r3, #28]
 8005b64:	e7d0      	b.n	8005b08 <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_PLL_DISABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005b70:	f7ff fa91 	bl	8005096 <HAL_GetTick>
 8005b74:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b76:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005b7a:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8005b7e:	6833      	ldr	r3, [r6, #0]
 8005b80:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005b84:	d006      	beq.n	8005b94 <HAL_RCC_OscConfig+0x468>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b86:	f7ff fa86 	bl	8005096 <HAL_GetTick>
 8005b8a:	1b40      	subs	r0, r0, r5
 8005b8c:	2802      	cmp	r0, #2
 8005b8e:	d9f6      	bls.n	8005b7e <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8005b90:	2003      	movs	r0, #3
 8005b92:	e04f      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b94:	6a23      	ldr	r3, [r4, #32]
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9a:	d022      	beq.n	8005be2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005ba0:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005ba4:	6851      	ldr	r1, [r2, #4]
 8005ba6:	6a23      	ldr	r3, [r4, #32]
 8005ba8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005baa:	4303      	orrs	r3, r0
 8005bac:	f421 1174 	bic.w	r1, r1, #3997696	@ 0x3d0000
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005bba:	2201      	movs	r2, #1
 8005bbc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005bbe:	f7ff fa6a 	bl	8005096 <HAL_GetTick>
 8005bc2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc4:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8005bc8:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005bd2:	d111      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd4:	f7ff fa5f 	bl	8005096 <HAL_GetTick>
 8005bd8:	1b00      	subs	r0, r0, r4
 8005bda:	2802      	cmp	r0, #2
 8005bdc:	d9f6      	bls.n	8005bcc <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8005bde:	2003      	movs	r0, #3
 8005be0:	e028      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005be2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005be6:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005bea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005bec:	f023 030f 	bic.w	r3, r3, #15
 8005bf0:	68a1      	ldr	r1, [r4, #8]
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bf6:	e7d1      	b.n	8005b9c <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e01b      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e019      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d01a      	beq.n	8005c3a <HAL_RCC_OscConfig+0x50e>
        pll_config = RCC->CFGR;
 8005c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c08:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005c0c:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0e:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8005c12:	6a22      	ldr	r2, [r4, #32]
 8005c14:	4291      	cmp	r1, r2
 8005c16:	d112      	bne.n	8005c3e <HAL_RCC_OscConfig+0x512>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c18:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005c1e:	1a18      	subs	r0, r3, r0
 8005c20:	bf18      	it	ne
 8005c22:	2001      	movne	r0, #1
 8005c24:	e006      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
    return HAL_ERROR;
 8005c26:	2001      	movs	r0, #1
}
 8005c28:	4770      	bx	lr
        return HAL_ERROR;
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	e002      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
        return HAL_ERROR;
 8005c2e:	2001      	movs	r0, #1
 8005c30:	e000      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
  return HAL_OK;
 8005c32:	2000      	movs	r0, #0
}
 8005c34:	b002      	add	sp, #8
 8005c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8005c3a:	2001      	movs	r0, #1
 8005c3c:	e7fa      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>
          return HAL_ERROR;
 8005c3e:	2001      	movs	r0, #1
 8005c40:	e7f8      	b.n	8005c34 <HAL_RCC_OscConfig+0x508>

08005c42 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8005c48:	2201      	movs	r2, #1
 8005c4a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005c4c:	4770      	bx	lr

08005c4e <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c52:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005c56:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005c58:	f003 020c 	and.w	r2, r3, #12
 8005c5c:	2a04      	cmp	r2, #4
 8005c5e:	d027      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x62>
 8005c60:	2a08      	cmp	r2, #8
 8005c62:	d12a      	bne.n	8005cba <HAL_RCC_GetSysClockFreq+0x6c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c64:	f247 2270 	movw	r2, #29296	@ 0x7270
 8005c68:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8005c6c:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8005c70:	5c50      	ldrb	r0, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c72:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005c76:	d014      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x54>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c7c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c82:	f44f 5258 	mov.w	r2, #13824	@ 0x3600
 8005c86:	f2c0 126e 	movt	r2, #366	@ 0x16e
 8005c8a:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005c8e:	f247 2260 	movw	r2, #29280	@ 0x7260
 8005c92:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005ca0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ca2:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005ca6:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8005caa:	fb03 f000 	mul.w	r0, r3, r0
 8005cae:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005cb0:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8005cb4:	f2c0 106e 	movt	r0, #366	@ 0x16e
 8005cb8:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8005cba:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8005cbe:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f000 80a6 	beq.w	8005e16 <HAL_RCC_ClockConfig+0x152>
{
 8005cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ccc:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	f013 0f02 	tst.w	r3, #2
 8005cd4:	d020      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x54>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd6:	f013 0f04 	tst.w	r3, #4
 8005cda:	d007      	beq.n	8005cec <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ce0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005cea:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f013 0f08 	tst.w	r3, #8
 8005cf2:	d007      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cf8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8005d02:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005d08:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005d0c:	6853      	ldr	r3, [r2, #4]
 8005d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d12:	68a1      	ldr	r1, [r4, #8]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	f013 0f01 	tst.w	r3, #1
 8005d1e:	d040      	beq.n	8005da2 <HAL_RCC_ClockConfig+0xde>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	2a01      	cmp	r2, #1
 8005d24:	d029      	beq.n	8005d7a <HAL_RCC_ClockConfig+0xb6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d26:	2a02      	cmp	r2, #2
 8005d28:	d031      	beq.n	8005d8e <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d2e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f013 0f02 	tst.w	r3, #2
 8005d38:	d06f      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005d3e:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8005d42:	684b      	ldr	r3, [r1, #4]
 8005d44:	f023 0303 	bic.w	r3, r3, #3
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005d4c:	f7ff f9a3 	bl	8005096 <HAL_GetTick>
 8005d50:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d52:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8005d56:	f2c4 0602 	movt	r6, #16386	@ 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5a:	f241 3788 	movw	r7, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	6873      	ldr	r3, [r6, #4]
 8005d60:	f003 030c 	and.w	r3, r3, #12
 8005d64:	6862      	ldr	r2, [r4, #4]
 8005d66:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005d6a:	d01a      	beq.n	8005da2 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7ff f993 	bl	8005096 <HAL_GetTick>
 8005d70:	1b40      	subs	r0, r0, r5
 8005d72:	42b8      	cmp	r0, r7
 8005d74:	d9f3      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8005d76:	2003      	movs	r0, #3
 8005d78:	e04c      	b.n	8005e14 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d7e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005d88:	d1d7      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	e042      	b.n	8005e14 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005d92:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d9c:	d1cd      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	e038      	b.n	8005e14 <HAL_RCC_ClockConfig+0x150>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	f013 0f04 	tst.w	r3, #4
 8005da8:	d009      	beq.n	8005dbe <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005daa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005dae:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005db2:	6853      	ldr	r3, [r2, #4]
 8005db4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005db8:	68e1      	ldr	r1, [r4, #12]
 8005dba:	430b      	orrs	r3, r1
 8005dbc:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	f013 0f08 	tst.w	r3, #8
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005dca:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005dce:	6853      	ldr	r3, [r2, #4]
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005dd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005dda:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ddc:	f7ff ff37 	bl	8005c4e <HAL_RCC_GetSysClockFreq>
 8005de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005de4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	f240 03cc 	movw	r3, #204	@ 0xcc
 8005dee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005df2:	f247 2150 	movw	r1, #29264	@ 0x7250
 8005df6:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8005dfa:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005dfe:	5c8a      	ldrb	r2, [r1, r2]
 8005e00:	40d0      	lsrs	r0, r2
 8005e02:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005e04:	f240 03d4 	movw	r3, #212	@ 0xd4
 8005e08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f7ff f902 	bl	8005016 <HAL_InitTick>
  return HAL_OK;
 8005e12:	2000      	movs	r0, #0
}
 8005e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005e16:	2001      	movs	r0, #1
}
 8005e18:	4770      	bx	lr
        return HAL_ERROR;
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e7fa      	b.n	8005e14 <HAL_RCC_ClockConfig+0x150>

08005e1e <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e22:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005e26:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8005e28:	f240 03cc 	movw	r3, #204	@ 0xcc
 8005e2c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e30:	f247 2148 	movw	r1, #29256	@ 0x7248
 8005e34:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8005e38:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005e3c:	5c8a      	ldrb	r2, [r1, r2]
 8005e3e:	6818      	ldr	r0, [r3, #0]
}
 8005e40:	40d0      	lsrs	r0, r2
 8005e42:	4770      	bx	lr

08005e44 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e48:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005e4c:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8005e4e:	f240 03cc 	movw	r3, #204	@ 0xcc
 8005e52:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e56:	f247 2148 	movw	r1, #29256	@ 0x7248
 8005e5a:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8005e5e:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8005e62:	5c8a      	ldrb	r2, [r1, r2]
 8005e64:	6818      	ldr	r0, [r3, #0]
}
 8005e66:	40d0      	lsrs	r0, r2
 8005e68:	4770      	bx	lr

08005e6a <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_RCC_NMI_IRQHandler>:
{
 8005e6c:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e72:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e7c:	d100      	bne.n	8005e80 <HAL_RCC_NMI_IRQHandler+0x14>
}
 8005e7e:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8005e80:	f7ff fff3 	bl	8005e6a <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e88:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	729a      	strb	r2, [r3, #10]
}
 8005e90:	e7f5      	b.n	8005e7e <HAL_RCC_NMI_IRQHandler+0x12>

08005e92 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e9a:	6803      	ldr	r3, [r0, #0]
 8005e9c:	f013 0f01 	tst.w	r3, #1
 8005ea0:	d04a      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ea6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8005eb0:	d152      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005eb6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005ec0:	61da      	str	r2, [r3, #28]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005ecc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ece:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8005ed2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005edc:	d03e      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xca>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ee2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ee8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005eec:	d018      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8005eee:	6862      	ldr	r2, [r4, #4]
 8005ef0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d013      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005efc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005f00:	6a19      	ldr	r1, [r3, #32]
 8005f02:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f06:	2200      	movs	r2, #0
 8005f08:	f2c4 2242 	movt	r2, #16962	@ 0x4242
 8005f0c:	2601      	movs	r6, #1
 8005f0e:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f12:	2600      	movs	r6, #0
 8005f14:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f18:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f1a:	f011 0f01 	tst.w	r1, #1
 8005f1e:	d137      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f24:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005f28:	6a13      	ldr	r3, [r2, #32]
 8005f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f2e:	6861      	ldr	r1, [r4, #4]
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	d13f      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	f013 0f02 	tst.w	r3, #2
 8005f3e:	d044      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f44:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8005f48:	6853      	ldr	r3, [r2, #4]
 8005f4a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f4e:	68a1      	ldr	r1, [r4, #8]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	6053      	str	r3, [r2, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f54:	2000      	movs	r0, #0
 8005f56:	e039      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus pwrclkchanged = RESET;
 8005f58:	2500      	movs	r5, #0
 8005f5a:	e7b8      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x3c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8005f60:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005f6c:	f7ff f893 	bl	8005096 <HAL_GetTick>
 8005f70:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f72:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8005f76:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005f80:	d1ad      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f82:	f7ff f888 	bl	8005096 <HAL_GetTick>
 8005f86:	1b80      	subs	r0, r0, r6
 8005f88:	2864      	cmp	r0, #100	@ 0x64
 8005f8a:	d9f6      	bls.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xe8>
          return HAL_TIMEOUT;
 8005f8c:	2003      	movs	r0, #3
 8005f8e:	e01d      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8005f90:	f7ff f881 	bl	8005096 <HAL_GetTick>
 8005f94:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8005f9a:	f2c4 0702 	movt	r7, #16386	@ 0x4002
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	f013 0f02 	tst.w	r3, #2
 8005fa8:	d1ba      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7ff f874 	bl	8005096 <HAL_GetTick>
 8005fae:	1b80      	subs	r0, r0, r6
 8005fb0:	4540      	cmp	r0, r8
 8005fb2:	d9f6      	bls.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
 8005fb4:	2003      	movs	r0, #3
 8005fb6:	e009      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fbc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8005fc0:	69da      	ldr	r2, [r3, #28]
 8005fc2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005fc6:	61da      	str	r2, [r3, #28]
 8005fc8:	e7b6      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  return HAL_OK;
 8005fca:	2000      	movs	r0, #0
}
 8005fcc:	b002      	add	sp, #8
 8005fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fd2 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d12f      	bne.n	800603c <HAL_TIM_Base_Start+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	6803      	ldr	r3, [r0, #0]
 8005fe4:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8005fe8:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01a      	beq.n	8006026 <HAL_TIM_Base_Start+0x54>
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d017      	beq.n	8006026 <HAL_TIM_Base_Start+0x54>
 8005ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ffa:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d011      	beq.n	8006026 <HAL_TIM_Base_Start+0x54>
 8006002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006006:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800600a:	4293      	cmp	r3, r2
 800600c:	d00b      	beq.n	8006026 <HAL_TIM_Base_Start+0x54>
 800600e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006012:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8006016:	4293      	cmp	r3, r2
 8006018:	d005      	beq.n	8006026 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f042 0201 	orr.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006022:	2000      	movs	r0, #0
 8006024:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602c:	2a06      	cmp	r2, #6
 800602e:	d007      	beq.n	8006040 <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006038:	2000      	movs	r0, #0
 800603a:	4770      	bx	lr
    return HAL_ERROR;
 800603c:	2001      	movs	r0, #1
 800603e:	4770      	bx	lr
  return HAL_OK;
 8006040:	2000      	movs	r0, #0
}
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b01      	cmp	r3, #1
 800604c:	d134      	bne.n	80060b8 <HAL_TIM_Base_Start_IT+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604e:	2302      	movs	r3, #2
 8006050:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006054:	6802      	ldr	r2, [r0, #0]
 8006056:	68d3      	ldr	r3, [r2, #12]
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605e:	6803      	ldr	r3, [r0, #0]
 8006060:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8006064:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8006068:	4293      	cmp	r3, r2
 800606a:	d01a      	beq.n	80060a2 <HAL_TIM_Base_Start_IT+0x5e>
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006070:	d017      	beq.n	80060a2 <HAL_TIM_Base_Start_IT+0x5e>
 8006072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006076:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800607a:	4293      	cmp	r3, r2
 800607c:	d011      	beq.n	80060a2 <HAL_TIM_Base_Start_IT+0x5e>
 800607e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006082:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <HAL_TIM_Base_Start_IT+0x5e>
 800608a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800608e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8006092:	4293      	cmp	r3, r2
 8006094:	d005      	beq.n	80060a2 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800609e:	2000      	movs	r0, #0
 80060a0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	2a06      	cmp	r2, #6
 80060aa:	d007      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80060b4:	2000      	movs	r0, #0
 80060b6:	4770      	bx	lr
    return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	4770      	bx	lr
  return HAL_OK;
 80060bc:	2000      	movs	r0, #0
}
 80060be:	4770      	bx	lr

080060c0 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_IRQHandler>:
{
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80060ce:	6803      	ldr	r3, [r0, #0]
 80060d0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060d2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060d4:	f015 0f02 	tst.w	r5, #2
 80060d8:	d010      	beq.n	80060fc <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060da:	f016 0f02 	tst.w	r6, #2
 80060de:	d00d      	beq.n	80060fc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	2301      	movs	r3, #1
 80060e8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ea:	6803      	ldr	r3, [r0, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f013 0f03 	tst.w	r3, #3
 80060f2:	d05e      	beq.n	80061b2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80060f4:	f7ff ffe6 	bl	80060c4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f8:	2300      	movs	r3, #0
 80060fa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060fc:	f015 0f04 	tst.w	r5, #4
 8006100:	d012      	beq.n	8006128 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006102:	f016 0f04 	tst.w	r6, #4
 8006106:	d00f      	beq.n	8006128 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	f06f 0204 	mvn.w	r2, #4
 800610e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006110:	2302      	movs	r3, #2
 8006112:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800611c:	d04f      	beq.n	80061be <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	4620      	mov	r0, r4
 8006120:	f7ff ffd0 	bl	80060c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	2300      	movs	r3, #0
 8006126:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006128:	f015 0f08 	tst.w	r5, #8
 800612c:	d012      	beq.n	8006154 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800612e:	f016 0f08 	tst.w	r6, #8
 8006132:	d00f      	beq.n	8006154 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	f06f 0208 	mvn.w	r2, #8
 800613a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800613c:	2304      	movs	r3, #4
 800613e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f013 0f03 	tst.w	r3, #3
 8006148:	d040      	beq.n	80061cc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff ffba 	bl	80060c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006150:	2300      	movs	r3, #0
 8006152:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006154:	f015 0f10 	tst.w	r5, #16
 8006158:	d012      	beq.n	8006180 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800615a:	f016 0f10 	tst.w	r6, #16
 800615e:	d00f      	beq.n	8006180 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	f06f 0210 	mvn.w	r2, #16
 8006166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006168:	2308      	movs	r3, #8
 800616a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006174:	d031      	beq.n	80061da <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	4620      	mov	r0, r4
 8006178:	f7ff ffa4 	bl	80060c4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617c:	2300      	movs	r3, #0
 800617e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006180:	f015 0f01 	tst.w	r5, #1
 8006184:	d002      	beq.n	800618c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006186:	f016 0f01 	tst.w	r6, #1
 800618a:	d12d      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800618c:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8006190:	d002      	beq.n	8006198 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006192:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006196:	d12f      	bne.n	80061f8 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006198:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800619c:	d002      	beq.n	80061a4 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800619e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80061a2:	d131      	bne.n	8006208 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061a4:	f015 0f20 	tst.w	r5, #32
 80061a8:	d002      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061aa:	f016 0f20 	tst.w	r6, #32
 80061ae:	d133      	bne.n	8006218 <HAL_TIM_IRQHandler+0x14e>
}
 80061b0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	f7ff ff86 	bl	80060c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b6:	4620      	mov	r0, r4
 80061b8:	f7ff ff85 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80061bc:	e79c      	b.n	80060f8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	4620      	mov	r0, r4
 80061c0:	f7ff ff7f 	bl	80060c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	4620      	mov	r0, r4
 80061c6:	f7ff ff7e 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80061ca:	e7ab      	b.n	8006124 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff ff78 	bl	80060c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d2:	4620      	mov	r0, r4
 80061d4:	f7ff ff77 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80061d8:	e7ba      	b.n	8006150 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061da:	4620      	mov	r0, r4
 80061dc:	f7ff ff71 	bl	80060c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e0:	4620      	mov	r0, r4
 80061e2:	f7ff ff70 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
 80061e6:	e7c9      	b.n	800617c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f06f 0201 	mvn.w	r2, #1
 80061ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff ff65 	bl	80060c0 <HAL_TIM_PeriodElapsedCallback>
 80061f6:	e7c9      	b.n	800618c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fa0c 	bl	800661e <HAL_TIMEx_BreakCallback>
 8006206:	e7c7      	b.n	8006198 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800620e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006210:	4620      	mov	r0, r4
 8006212:	f7ff ff59 	bl	80060c8 <HAL_TIM_TriggerCallback>
 8006216:	e7c5      	b.n	80061a4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f06f 0220 	mvn.w	r2, #32
 800621e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006220:	4620      	mov	r0, r4
 8006222:	f000 f9fb 	bl	800661c <HAL_TIMEx_CommutCallback>
}
 8006226:	e7c3      	b.n	80061b0 <HAL_TIM_IRQHandler+0xe6>

08006228 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006228:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800622e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8006232:	4290      	cmp	r0, r2
 8006234:	f000 8095 	beq.w	8006362 <TIM_Base_SetConfig+0x13a>
 8006238:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800623c:	f000 80af 	beq.w	800639e <TIM_Base_SetConfig+0x176>
 8006240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006244:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8006248:	4290      	cmp	r0, r2
 800624a:	f000 8085 	beq.w	8006358 <TIM_Base_SetConfig+0x130>
 800624e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006252:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8006256:	4290      	cmp	r0, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800625e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8006262:	4290      	cmp	r0, r2
 8006264:	d06a      	beq.n	800633c <TIM_Base_SetConfig+0x114>
 8006266:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800626a:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800626e:	4290      	cmp	r0, r2
 8006270:	d048      	beq.n	8006304 <TIM_Base_SetConfig+0xdc>
 8006272:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8006276:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800627a:	4290      	cmp	r0, r2
 800627c:	d050      	beq.n	8006320 <TIM_Base_SetConfig+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800627e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006282:	694a      	ldr	r2, [r1, #20]
 8006284:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006286:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	688b      	ldr	r3, [r1, #8]
 800628a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800628c:	680b      	ldr	r3, [r1, #0]
 800628e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	e07a      	b.n	8006388 <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006296:	684a      	ldr	r2, [r1, #4]
 8006298:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800629e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80062a2:	4290      	cmp	r0, r2
 80062a4:	d061      	beq.n	800636a <TIM_Base_SetConfig+0x142>
 80062a6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80062aa:	d07c      	beq.n	80063a6 <TIM_Base_SetConfig+0x17e>
 80062ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062b0:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80062b4:	4290      	cmp	r0, r2
 80062b6:	d076      	beq.n	80063a6 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062bc:	68ca      	ldr	r2, [r1, #12]
 80062be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c4:	694a      	ldr	r2, [r1, #20]
 80062c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80062c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062ca:	688b      	ldr	r3, [r1, #8]
 80062cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062ce:	680b      	ldr	r3, [r1, #0]
 80062d0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d2:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80062d6:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80062da:	4298      	cmp	r0, r3
 80062dc:	d052      	beq.n	8006384 <TIM_Base_SetConfig+0x15c>
 80062de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80062e2:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80062e6:	4298      	cmp	r0, r3
 80062e8:	d04c      	beq.n	8006384 <TIM_Base_SetConfig+0x15c>
 80062ea:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80062ee:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80062f2:	4298      	cmp	r0, r3
 80062f4:	d046      	beq.n	8006384 <TIM_Base_SetConfig+0x15c>
 80062f6:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80062fa:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80062fe:	4298      	cmp	r0, r3
 8006300:	d040      	beq.n	8006384 <TIM_Base_SetConfig+0x15c>
 8006302:	e041      	b.n	8006388 <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006308:	68ca      	ldr	r2, [r1, #12]
 800630a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800630c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006310:	694a      	ldr	r2, [r1, #20]
 8006312:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006314:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006316:	688b      	ldr	r3, [r1, #8]
 8006318:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800631e:	e031      	b.n	8006384 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006324:	68ca      	ldr	r2, [r1, #12]
 8006326:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800632c:	694a      	ldr	r2, [r1, #20]
 800632e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006330:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006332:	688b      	ldr	r3, [r1, #8]
 8006334:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006336:	680b      	ldr	r3, [r1, #0]
 8006338:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800633a:	e023      	b.n	8006384 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800633c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006340:	68ca      	ldr	r2, [r1, #12]
 8006342:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006348:	694a      	ldr	r2, [r1, #20]
 800634a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800634c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800634e:	688b      	ldr	r3, [r1, #8]
 8006350:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006352:	680b      	ldr	r3, [r1, #0]
 8006354:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006356:	e015      	b.n	8006384 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800635c:	684a      	ldr	r2, [r1, #4]
 800635e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006360:	e021      	b.n	80063a6 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006366:	684a      	ldr	r2, [r1, #4]
 8006368:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800636a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800636e:	68ca      	ldr	r2, [r1, #12]
 8006370:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006376:	694a      	ldr	r2, [r1, #20]
 8006378:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800637a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800637c:	688b      	ldr	r3, [r1, #8]
 800637e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006384:	690b      	ldr	r3, [r1, #16]
 8006386:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006388:	2301      	movs	r3, #1
 800638a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800638c:	6903      	ldr	r3, [r0, #16]
 800638e:	f013 0f01 	tst.w	r3, #1
 8006392:	d016      	beq.n	80063c2 <TIM_Base_SetConfig+0x19a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006394:	6903      	ldr	r3, [r0, #16]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	6103      	str	r3, [r0, #16]
  }
}
 800639c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800639e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80063a2:	684a      	ldr	r2, [r1, #4]
 80063a4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	68ca      	ldr	r2, [r1, #12]
 80063ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b2:	694a      	ldr	r2, [r1, #20]
 80063b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80063b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063b8:	688b      	ldr	r3, [r1, #8]
 80063ba:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063c0:	e7e2      	b.n	8006388 <TIM_Base_SetConfig+0x160>
}
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80063c4:	b340      	cbz	r0, 8006418 <HAL_TIM_Base_Init+0x54>
{
 80063c6:	b510      	push	{r4, lr}
 80063c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80063ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80063ce:	b1f3      	cbz	r3, 800640e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80063d0:	2302      	movs	r3, #2
 80063d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d6:	4621      	mov	r1, r4
 80063d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80063dc:	f7ff ff24 	bl	8006228 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80063ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80063ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80063f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006402:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006406:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800640a:	2000      	movs	r0, #0
}
 800640c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800640e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006412:	f7fe fb81 	bl	8004b18 <HAL_TIM_Base_MspInit>
 8006416:	e7db      	b.n	80063d0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006418:	2001      	movs	r0, #1
}
 800641a:	4770      	bx	lr

0800641c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800641c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006420:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006424:	430a      	orrs	r2, r1
 8006426:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800642a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642e:	6082      	str	r2, [r0, #8]
}
 8006430:	bc10      	pop	{r4}
 8006432:	4770      	bx	lr

08006434 <HAL_TIM_ConfigClockSource>:
{
 8006434:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006436:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800643a:	2b01      	cmp	r3, #1
 800643c:	f000 80ad 	beq.w	800659a <HAL_TIM_ConfigClockSource+0x166>
 8006440:	4604      	mov	r4, r0
 8006442:	2301      	movs	r3, #1
 8006444:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	2302      	movs	r3, #2
 800644a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800644e:	6802      	ldr	r2, [r0, #0]
 8006450:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006456:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800645a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800645c:	680b      	ldr	r3, [r1, #0]
 800645e:	2b60      	cmp	r3, #96	@ 0x60
 8006460:	d060      	beq.n	8006524 <HAL_TIM_ConfigClockSource+0xf0>
 8006462:	d837      	bhi.n	80064d4 <HAL_TIM_ConfigClockSource+0xa0>
 8006464:	2b40      	cmp	r3, #64	@ 0x40
 8006466:	d079      	beq.n	800655c <HAL_TIM_ConfigClockSource+0x128>
 8006468:	d815      	bhi.n	8006496 <HAL_TIM_ConfigClockSource+0x62>
 800646a:	2b20      	cmp	r3, #32
 800646c:	d007      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x4a>
 800646e:	d804      	bhi.n	800647a <HAL_TIM_ConfigClockSource+0x46>
 8006470:	f033 0210 	bics.w	r2, r3, #16
 8006474:	d003      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x4a>
 8006476:	2001      	movs	r0, #1
 8006478:	e040      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
 800647a:	2b30      	cmp	r3, #48	@ 0x30
 800647c:	d109      	bne.n	8006492 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800647e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006480:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006482:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006486:	4313      	orrs	r3, r2
 8006488:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800648c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2000      	movs	r0, #0
}
 8006490:	e034      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8006492:	2001      	movs	r0, #1
 8006494:	e032      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
 8006496:	2b50      	cmp	r3, #80	@ 0x50
 8006498:	d11a      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800649c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800649e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80064a0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a2:	6a1a      	ldr	r2, [r3, #32]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064aa:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ac:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064b0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80064b8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064be:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80064c0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80064c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c6:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80064ca:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064cc:	2000      	movs	r0, #0
}
 80064ce:	e015      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80064d0:	2001      	movs	r0, #1
 80064d2:	e013      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d8:	d05b      	beq.n	8006592 <HAL_TIM_ConfigClockSource+0x15e>
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064de:	d014      	beq.n	800650a <HAL_TIM_ConfigClockSource+0xd6>
 80064e0:	2b70      	cmp	r3, #112	@ 0x70
 80064e2:	d158      	bne.n	8006596 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 80064e4:	68cb      	ldr	r3, [r1, #12]
 80064e6:	684a      	ldr	r2, [r1, #4]
 80064e8:	6889      	ldr	r1, [r1, #8]
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	f7ff ff96 	bl	800641c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80064f8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006502:	2300      	movs	r3, #0
 8006504:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006508:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800650a:	68cb      	ldr	r3, [r1, #12]
 800650c:	684a      	ldr	r2, [r1, #4]
 800650e:	6889      	ldr	r1, [r1, #8]
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	f7ff ff83 	bl	800641c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006516:	6822      	ldr	r2, [r4, #0]
 8006518:	6893      	ldr	r3, [r2, #8]
 800651a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800651e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006520:	2000      	movs	r0, #0
      break;
 8006522:	e7eb      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006524:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8006526:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006528:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800652a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652c:	6a19      	ldr	r1, [r3, #32]
 800652e:	f021 0110 	bic.w	r1, r1, #16
 8006532:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006534:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006536:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800653a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006542:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006546:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800654a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800654c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006552:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006556:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006558:	2000      	movs	r0, #0
}
 800655a:	e7cf      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800655c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800655e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006560:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006562:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800656c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800656e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006572:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006576:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800657a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800657c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800657e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006580:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006582:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006588:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800658c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2000      	movs	r0, #0
}
 8006590:	e7b4      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2000      	movs	r0, #0
 8006594:	e7b2      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8006596:	2001      	movs	r0, #1
 8006598:	e7b0      	b.n	80064fc <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800659a:	2002      	movs	r0, #2
 800659c:	e7b4      	b.n	8006508 <HAL_TIM_ConfigClockSource+0xd4>

0800659e <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80065a2:	2a01      	cmp	r2, #1
 80065a4:	d038      	beq.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
{
 80065a6:	b430      	push	{r4, r5}
 80065a8:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80065aa:	2201      	movs	r2, #1
 80065ac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	2202      	movs	r2, #2
 80065b2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065b6:	6804      	ldr	r4, [r0, #0]
 80065b8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ba:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065c0:	680d      	ldr	r5, [r1, #0]
 80065c2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c4:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	f44f 5430 	mov.w	r4, #11264	@ 0x2c00
 80065cc:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80065d0:	42a2      	cmp	r2, r4
 80065d2:	d014      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80065d4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80065d8:	d011      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80065da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80065de:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 80065e2:	42a2      	cmp	r2, r4
 80065e4:	d00b      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80065e6:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80065ea:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 80065ee:	42a2      	cmp	r2, r4
 80065f0:	d005      	beq.n	80065fe <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80065f2:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80065f6:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80065fa:	42a2      	cmp	r2, r4
 80065fc:	d104      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065fe:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006602:	6849      	ldr	r1, [r1, #4]
 8006604:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006606:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800660e:	2000      	movs	r0, #0
 8006610:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006614:	bc30      	pop	{r4, r5}
 8006616:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006618:	2002      	movs	r0, #2
}
 800661a:	4770      	bx	lr

0800661c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800661c:	4770      	bx	lr

0800661e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800661e:	4770      	bx	lr

08006620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006620:	b510      	push	{r4, lr}
 8006622:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006624:	6802      	ldr	r2, [r0, #0]
 8006626:	6913      	ldr	r3, [r2, #16]
 8006628:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800662c:	68c1      	ldr	r1, [r0, #12]
 800662e:	430b      	orrs	r3, r1
 8006630:	6113      	str	r3, [r2, #16]
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8006632:	6801      	ldr	r1, [r0, #0]
 8006634:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006636:	6883      	ldr	r3, [r0, #8]
 8006638:	6900      	ldr	r0, [r0, #16]
 800663a:	4303      	orrs	r3, r0
 800663c:	6960      	ldr	r0, [r4, #20]
 800663e:	4303      	orrs	r3, r0
 8006640:	69e0      	ldr	r0, [r4, #28]
 8006642:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8006644:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8006648:	f022 020c 	bic.w	r2, r2, #12
 800664c:	4313      	orrs	r3, r2
 800664e:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	6953      	ldr	r3, [r2, #20]
 8006654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006658:	69a1      	ldr	r1, [r4, #24]
 800665a:	430b      	orrs	r3, r1
 800665c:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800665e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8006662:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d021      	beq.n	80066b0 <UART_SetConfig+0x90>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800666c:	f7ff fbd7 	bl	8005e1e <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006676:	d01e      	beq.n	80066b6 <UART_SetConfig+0x96>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006678:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800667c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	fbb3 f3f2 	udiv	r3, r3, r2
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	f248 511f 	movw	r1, #34079	@ 0x851f
 800668e:	f2c5 11eb 	movt	r1, #20971	@ 0x51eb
 8006692:	fba1 4203 	umull	r4, r2, r1, r3
 8006696:	0952      	lsrs	r2, r2, #5
 8006698:	2464      	movs	r4, #100	@ 0x64
 800669a:	fb04 3312 	mls	r3, r4, r2, r3
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	3332      	adds	r3, #50	@ 0x32
 80066a2:	fba1 1303 	umull	r1, r3, r1, r3
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80066ac:	6082      	str	r2, [r0, #8]
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 80066ae:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7ff fbc8 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 80066b4:	e7dc      	b.n	8006670 <UART_SetConfig+0x50>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c6:	f248 521f 	movw	r2, #34079	@ 0x851f
 80066ca:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 80066ce:	fba2 0103 	umull	r0, r1, r2, r3
 80066d2:	0949      	lsrs	r1, r1, #5
 80066d4:	2064      	movs	r0, #100	@ 0x64
 80066d6:	fb00 3311 	mls	r3, r0, r1, r3
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	3332      	adds	r3, #50	@ 0x32
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	6820      	ldr	r0, [r4, #0]
 80066e4:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80066e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f2:	4413      	add	r3, r2
 80066f4:	6083      	str	r3, [r0, #8]
 80066f6:	e7da      	b.n	80066ae <UART_SetConfig+0x8e>

080066f8 <HAL_UART_Init>:
  if (huart == NULL)
 80066f8:	b360      	cbz	r0, 8006754 <HAL_UART_Init+0x5c>
{
 80066fa:	b510      	push	{r4, lr}
 80066fc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80066fe:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8006702:	b313      	cbz	r3, 800674a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8006704:	2324      	movs	r3, #36	@ 0x24
 8006706:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	68d3      	ldr	r3, [r2, #12]
 800670e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006712:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff ff83 	bl	8006620 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	6913      	ldr	r3, [r2, #16]
 800671e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006722:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	6953      	ldr	r3, [r2, #20]
 8006728:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800672c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	68d3      	ldr	r3, [r2, #12]
 8006732:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006736:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	2000      	movs	r0, #0
 800673a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800673c:	2320      	movs	r3, #32
 800673e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006742:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006746:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006748:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800674a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800674e:	f7fe fa60 	bl	8004c12 <HAL_UART_MspInit>
 8006752:	e7d7      	b.n	8006704 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006754:	2001      	movs	r0, #1
}
 8006756:	4770      	bx	lr

08006758 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8006758:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800675a:	f013 0f01 	tst.w	r3, #1
 800675e:	d10d      	bne.n	800677c <LL_ADC_Init+0x24>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8006760:	6843      	ldr	r3, [r0, #4]
 8006762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006766:	684a      	ldr	r2, [r1, #4]
 8006768:	4313      	orrs	r3, r2
 800676a:	6043      	str	r3, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800676c:	6883      	ldr	r3, [r0, #8]
 800676e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006772:	680a      	ldr	r2, [r1, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8006778:	2000      	movs	r0, #0
 800677a:	4770      	bx	lr

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800677c:	2001      	movs	r0, #1
  }
  return status;
}
 800677e:	4770      	bx	lr

08006780 <LL_ADC_REG_Init>:
 8006780:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8006782:	f013 0f01 	tst.w	r3, #1
 8006786:	d121      	bne.n	80067cc <LL_ADC_REG_Init+0x4c>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8006788:	684a      	ldr	r2, [r1, #4]
 800678a:	b1d2      	cbz	r2, 80067c2 <LL_ADC_REG_Init+0x42>
    {
      MODIFY_REG(ADCx->CR1,
 800678c:	6843      	ldr	r3, [r0, #4]
 800678e:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 8006792:	4313      	orrs	r3, r2
 8006794:	688a      	ldr	r2, [r1, #8]
 8006796:	4313      	orrs	r3, r2
 8006798:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800679a:	6883      	ldr	r3, [r0, #8]
 800679c:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80067a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80067a4:	680a      	ldr	r2, [r1, #0]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	68ca      	ldr	r2, [r1, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	690a      	ldr	r2, [r1, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80067b2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80067b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067b8:	684a      	ldr	r2, [r1, #4]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  ErrorStatus status = SUCCESS;
 80067be:	2000      	movs	r0, #0
}
 80067c0:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 80067c2:	6843      	ldr	r3, [r0, #4]
 80067c4:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 80067c8:	6043      	str	r3, [r0, #4]
 80067ca:	e7e6      	b.n	800679a <LL_ADC_REG_Init+0x1a>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80067cc:	2001      	movs	r0, #1
  }
  return status;
}
 80067ce:	4770      	bx	lr

080067d0 <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80067d0:	680b      	ldr	r3, [r1, #0]
 80067d2:	f3c3 2c0f 	ubfx	ip, r3, #8, #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	fa9c f2ac 	rbit	r2, ip
  pinpos = POSITION_VAL(pinmask);
 80067da:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80067de:	fa3c f302 	lsrs.w	r3, ip, r2
 80067e2:	f000 8087 	beq.w	80068f4 <LL_GPIO_Init+0x124>
{
 80067e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80067ea:	f04f 0e01 	mov.w	lr, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80067ee:	240f      	movs	r4, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80067f0:	f04f 0803 	mov.w	r8, #3
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80067f4:	f04f 1501 	mov.w	r5, #65537	@ 0x10001
        currentpin = (0x00000101uL << pinpos);
 80067f8:	f240 1701 	movw	r7, #257	@ 0x101
 80067fc:	46e1      	mov	r9, ip
 80067fe:	e025      	b.n	800684c <LL_GPIO_Init+0x7c>
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8006800:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8006804:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8006808:	faba fa8a 	clz	sl, sl
 800680c:	fa93 fba3 	rbit	fp, r3
 8006810:	fabb fb8b 	clz	fp, fp
 8006814:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006818:	fa04 fa0a 	lsl.w	sl, r4, sl
 800681c:	f850 600c 	ldr.w	r6, [r0, ip]
 8006820:	ea26 0a0a 	bic.w	sl, r6, sl
 8006824:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8006828:	684e      	ldr	r6, [r1, #4]
 800682a:	fa06 f60b 	lsl.w	r6, r6, fp
 800682e:	ea4a 0606 	orr.w	r6, sl, r6
 8006832:	f840 600c 	str.w	r6, [r0, ip]
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006836:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800683a:	f02a 0a08 	bic.w	sl, sl, #8
 800683e:	f1ba 0f01 	cmp.w	sl, #1
 8006842:	d025      	beq.n	8006890 <LL_GPIO_Init+0xc0>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8006844:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0u)
 8006846:	fa39 f302 	lsrs.w	r3, r9, r2
 800684a:	d050      	beq.n	80068ee <LL_GPIO_Init+0x11e>
    if ((pinmask & (1u << pinpos)) != 0u)
 800684c:	fa0e f302 	lsl.w	r3, lr, r2
 8006850:	ea13 0f09 	tst.w	r3, r9
 8006854:	d0f6      	beq.n	8006844 <LL_GPIO_Init+0x74>
      if (pinpos < GPIO_PIN_MASK_POS)
 8006856:	2a07      	cmp	r2, #7
        currentpin = (0x00000101uL << pinpos);
 8006858:	bf91      	iteee	ls
 800685a:	fa07 f302 	lslls.w	r3, r7, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800685e:	f1a2 0308 	subhi.w	r3, r2, #8
 8006862:	fa05 f303 	lslhi.w	r3, r5, r3
 8006866:	f043 6380 	orrhi.w	r3, r3, #67108864	@ 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800686a:	684e      	ldr	r6, [r1, #4]
 800686c:	2e08      	cmp	r6, #8
 800686e:	d1c7      	bne.n	8006800 <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8006870:	68c6      	ldr	r6, [r0, #12]
 8006872:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8006876:	fa9c faac 	rbit	sl, ip
 800687a:	faba fa8a 	clz	sl, sl
 800687e:	ea26 0c0c 	bic.w	ip, r6, ip
 8006882:	690e      	ldr	r6, [r1, #16]
 8006884:	fa06 f60a 	lsl.w	r6, r6, sl
 8006888:	ea4c 0606 	orr.w	r6, ip, r6
 800688c:	60c6      	str	r6, [r0, #12]
}
 800688e:	e7b7      	b.n	8006800 <LL_GPIO_Init+0x30>
 8006890:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8006894:	faba fa8a 	clz	sl, sl
 8006898:	fa93 fba3 	rbit	fp, r3
 800689c:	fabb fb8b 	clz	fp, fp
 80068a0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80068a4:	fa08 fa0a 	lsl.w	sl, r8, sl
 80068a8:	ea26 0a0a 	bic.w	sl, r6, sl
 80068ac:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80068b0:	688e      	ldr	r6, [r1, #8]
 80068b2:	fa06 f60b 	lsl.w	r6, r6, fp
 80068b6:	ea4a 0606 	orr.w	r6, sl, r6
 80068ba:	f840 600c 	str.w	r6, [r0, ip]
 80068be:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80068c2:	faba fa8a 	clz	sl, sl
 80068c6:	fa93 f3a3 	rbit	r3, r3
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80068d2:	f04f 0b04 	mov.w	fp, #4
 80068d6:	fa0b fa0a 	lsl.w	sl, fp, sl
 80068da:	ea26 0a0a 	bic.w	sl, r6, sl
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	68ce      	ldr	r6, [r1, #12]
 80068e2:	409e      	lsls	r6, r3
 80068e4:	ea4a 0606 	orr.w	r6, sl, r6
 80068e8:	f840 600c 	str.w	r6, [r0, ip]
}
 80068ec:	e7aa      	b.n	8006844 <LL_GPIO_Init+0x74>
  }
  return (SUCCESS);
}
 80068ee:	2000      	movs	r0, #0
 80068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f4:	2000      	movs	r0, #0
 80068f6:	4770      	bx	lr

080068f8 <__errno>:
 80068f8:	4b01      	ldr	r3, [pc, #4]	@ (8006900 <__errno+0x8>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	200000d8 	.word	0x200000d8

08006904 <__libc_init_array>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	2600      	movs	r6, #0
 8006908:	4d0c      	ldr	r5, [pc, #48]	@ (800693c <__libc_init_array+0x38>)
 800690a:	4c0d      	ldr	r4, [pc, #52]	@ (8006940 <__libc_init_array+0x3c>)
 800690c:	1b64      	subs	r4, r4, r5
 800690e:	10a4      	asrs	r4, r4, #2
 8006910:	42a6      	cmp	r6, r4
 8006912:	d109      	bne.n	8006928 <__libc_init_array+0x24>
 8006914:	f000 f910 	bl	8006b38 <_init>
 8006918:	2600      	movs	r6, #0
 800691a:	4d0a      	ldr	r5, [pc, #40]	@ (8006944 <__libc_init_array+0x40>)
 800691c:	4c0a      	ldr	r4, [pc, #40]	@ (8006948 <__libc_init_array+0x44>)
 800691e:	1b64      	subs	r4, r4, r5
 8006920:	10a4      	asrs	r4, r4, #2
 8006922:	42a6      	cmp	r6, r4
 8006924:	d105      	bne.n	8006932 <__libc_init_array+0x2e>
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	f855 3b04 	ldr.w	r3, [r5], #4
 800692c:	4798      	blx	r3
 800692e:	3601      	adds	r6, #1
 8006930:	e7ee      	b.n	8006910 <__libc_init_array+0xc>
 8006932:	f855 3b04 	ldr.w	r3, [r5], #4
 8006936:	4798      	blx	r3
 8006938:	3601      	adds	r6, #1
 800693a:	e7f2      	b.n	8006922 <__libc_init_array+0x1e>
 800693c:	08007290 	.word	0x08007290
 8006940:	08007290 	.word	0x08007290
 8006944:	08007290 	.word	0x08007290
 8006948:	08007294 	.word	0x08007294

0800694c <sqrt>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	4606      	mov	r6, r0
 8006950:	460f      	mov	r7, r1
 8006952:	f000 f81f 	bl	8006994 <__ieee754_sqrt>
 8006956:	4632      	mov	r2, r6
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	463b      	mov	r3, r7
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7fa f8ab 	bl	8000abc <__aeabi_dcmpun>
 8006966:	b990      	cbnz	r0, 800698e <sqrt+0x42>
 8006968:	2200      	movs	r2, #0
 800696a:	2300      	movs	r3, #0
 800696c:	4630      	mov	r0, r6
 800696e:	4639      	mov	r1, r7
 8006970:	f7fa f87c 	bl	8000a6c <__aeabi_dcmplt>
 8006974:	b158      	cbz	r0, 800698e <sqrt+0x42>
 8006976:	f7ff ffbf 	bl	80068f8 <__errno>
 800697a:	2321      	movs	r3, #33	@ 0x21
 800697c:	2200      	movs	r2, #0
 800697e:	6003      	str	r3, [r0, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	4610      	mov	r0, r2
 8006984:	4619      	mov	r1, r3
 8006986:	f7f9 ff29 	bl	80007dc <__aeabi_ddiv>
 800698a:	4604      	mov	r4, r0
 800698c:	460d      	mov	r5, r1
 800698e:	4620      	mov	r0, r4
 8006990:	4629      	mov	r1, r5
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006994 <__ieee754_sqrt>:
 8006994:	4a65      	ldr	r2, [pc, #404]	@ (8006b2c <__ieee754_sqrt+0x198>)
 8006996:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	438a      	bics	r2, r1
 800699c:	4606      	mov	r6, r0
 800699e:	460f      	mov	r7, r1
 80069a0:	460b      	mov	r3, r1
 80069a2:	4604      	mov	r4, r0
 80069a4:	d10e      	bne.n	80069c4 <__ieee754_sqrt+0x30>
 80069a6:	4602      	mov	r2, r0
 80069a8:	f7f9 fdee 	bl	8000588 <__aeabi_dmul>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7f9 fc32 	bl	800021c <__adddf3>
 80069b8:	4606      	mov	r6, r0
 80069ba:	460f      	mov	r7, r1
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c4:	2900      	cmp	r1, #0
 80069c6:	dc0c      	bgt.n	80069e2 <__ieee754_sqrt+0x4e>
 80069c8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80069cc:	4302      	orrs	r2, r0
 80069ce:	d0f5      	beq.n	80069bc <__ieee754_sqrt+0x28>
 80069d0:	b189      	cbz	r1, 80069f6 <__ieee754_sqrt+0x62>
 80069d2:	4602      	mov	r2, r0
 80069d4:	f7f9 fc20 	bl	8000218 <__aeabi_dsub>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	f7f9 fefe 	bl	80007dc <__aeabi_ddiv>
 80069e0:	e7ea      	b.n	80069b8 <__ieee754_sqrt+0x24>
 80069e2:	150a      	asrs	r2, r1, #20
 80069e4:	d115      	bne.n	8006a12 <__ieee754_sqrt+0x7e>
 80069e6:	2100      	movs	r1, #0
 80069e8:	e009      	b.n	80069fe <__ieee754_sqrt+0x6a>
 80069ea:	0ae3      	lsrs	r3, r4, #11
 80069ec:	3a15      	subs	r2, #21
 80069ee:	0564      	lsls	r4, r4, #21
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0fa      	beq.n	80069ea <__ieee754_sqrt+0x56>
 80069f4:	e7f7      	b.n	80069e6 <__ieee754_sqrt+0x52>
 80069f6:	460a      	mov	r2, r1
 80069f8:	e7fa      	b.n	80069f0 <__ieee754_sqrt+0x5c>
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	3101      	adds	r1, #1
 80069fe:	02d8      	lsls	r0, r3, #11
 8006a00:	d5fb      	bpl.n	80069fa <__ieee754_sqrt+0x66>
 8006a02:	1e48      	subs	r0, r1, #1
 8006a04:	1a12      	subs	r2, r2, r0
 8006a06:	f1c1 0020 	rsb	r0, r1, #32
 8006a0a:	fa24 f000 	lsr.w	r0, r4, r0
 8006a0e:	4303      	orrs	r3, r0
 8006a10:	408c      	lsls	r4, r1
 8006a12:	2700      	movs	r7, #0
 8006a14:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8006a18:	2116      	movs	r1, #22
 8006a1a:	07d2      	lsls	r2, r2, #31
 8006a1c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006a20:	463a      	mov	r2, r7
 8006a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a2a:	bf5c      	itt	pl
 8006a2c:	005b      	lslpl	r3, r3, #1
 8006a2e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006a32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a36:	bf58      	it	pl
 8006a38:	0064      	lslpl	r4, r4, #1
 8006a3a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006a3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a42:	0064      	lsls	r4, r4, #1
 8006a44:	1815      	adds	r5, r2, r0
 8006a46:	429d      	cmp	r5, r3
 8006a48:	bfde      	ittt	le
 8006a4a:	182a      	addle	r2, r5, r0
 8006a4c:	1b5b      	suble	r3, r3, r5
 8006a4e:	183f      	addle	r7, r7, r0
 8006a50:	0fe5      	lsrs	r5, r4, #31
 8006a52:	3901      	subs	r1, #1
 8006a54:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006a58:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006a5c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006a60:	d1f0      	bne.n	8006a44 <__ieee754_sqrt+0xb0>
 8006a62:	460d      	mov	r5, r1
 8006a64:	2620      	movs	r6, #32
 8006a66:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	eb00 0c01 	add.w	ip, r0, r1
 8006a70:	dc02      	bgt.n	8006a78 <__ieee754_sqrt+0xe4>
 8006a72:	d113      	bne.n	8006a9c <__ieee754_sqrt+0x108>
 8006a74:	45a4      	cmp	ip, r4
 8006a76:	d811      	bhi.n	8006a9c <__ieee754_sqrt+0x108>
 8006a78:	f1bc 0f00 	cmp.w	ip, #0
 8006a7c:	eb0c 0100 	add.w	r1, ip, r0
 8006a80:	da3e      	bge.n	8006b00 <__ieee754_sqrt+0x16c>
 8006a82:	2900      	cmp	r1, #0
 8006a84:	db3c      	blt.n	8006b00 <__ieee754_sqrt+0x16c>
 8006a86:	f102 0e01 	add.w	lr, r2, #1
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	4672      	mov	r2, lr
 8006a8e:	45a4      	cmp	ip, r4
 8006a90:	bf88      	it	hi
 8006a92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006a96:	eba4 040c 	sub.w	r4, r4, ip
 8006a9a:	4405      	add	r5, r0
 8006a9c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006aa0:	3e01      	subs	r6, #1
 8006aa2:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006aa6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006aaa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006aae:	d1dc      	bne.n	8006a6a <__ieee754_sqrt+0xd6>
 8006ab0:	431c      	orrs	r4, r3
 8006ab2:	d01a      	beq.n	8006aea <__ieee754_sqrt+0x156>
 8006ab4:	4c1e      	ldr	r4, [pc, #120]	@ (8006b30 <__ieee754_sqrt+0x19c>)
 8006ab6:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006b34 <__ieee754_sqrt+0x1a0>
 8006aba:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006abe:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ac2:	f7f9 fba9 	bl	8000218 <__aeabi_dsub>
 8006ac6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4650      	mov	r0, sl
 8006ad0:	4659      	mov	r1, fp
 8006ad2:	f7f9 ffd5 	bl	8000a80 <__aeabi_dcmple>
 8006ad6:	b140      	cbz	r0, 8006aea <__ieee754_sqrt+0x156>
 8006ad8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006adc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ae0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ae4:	d10e      	bne.n	8006b04 <__ieee754_sqrt+0x170>
 8006ae6:	4635      	mov	r5, r6
 8006ae8:	3701      	adds	r7, #1
 8006aea:	107b      	asrs	r3, r7, #1
 8006aec:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006af0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006af4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006af8:	086b      	lsrs	r3, r5, #1
 8006afa:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8006afe:	e75b      	b.n	80069b8 <__ieee754_sqrt+0x24>
 8006b00:	4696      	mov	lr, r2
 8006b02:	e7c2      	b.n	8006a8a <__ieee754_sqrt+0xf6>
 8006b04:	f7f9 fb8a 	bl	800021c <__adddf3>
 8006b08:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4650      	mov	r0, sl
 8006b12:	4659      	mov	r1, fp
 8006b14:	f7f9 ffaa 	bl	8000a6c <__aeabi_dcmplt>
 8006b18:	b120      	cbz	r0, 8006b24 <__ieee754_sqrt+0x190>
 8006b1a:	1cab      	adds	r3, r5, #2
 8006b1c:	bf08      	it	eq
 8006b1e:	3701      	addeq	r7, #1
 8006b20:	3502      	adds	r5, #2
 8006b22:	e7e2      	b.n	8006aea <__ieee754_sqrt+0x156>
 8006b24:	1c6b      	adds	r3, r5, #1
 8006b26:	f023 0501 	bic.w	r5, r3, #1
 8006b2a:	e7de      	b.n	8006aea <__ieee754_sqrt+0x156>
 8006b2c:	7ff00000 	.word	0x7ff00000
 8006b30:	08007288 	.word	0x08007288
 8006b34:	08007280 	.word	0x08007280

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
