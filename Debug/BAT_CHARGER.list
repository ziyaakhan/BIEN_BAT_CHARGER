
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003a38  08003a38  00004a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb8  08003bb8  00005064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003bb8  08003bb8  00005064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003bb8  08003bb8  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00004bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003bc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000068  08003c24  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08003c24  0000549c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188f3  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c7  00000000  00000000  0001d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d899  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  0002e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbc  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e2c  00000000  00000000  0002fff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc0b  00000000  00000000  00044e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b1f6  00000000  00000000  00060a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dbc21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002df8  00000000  00000000  000dbc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000dea5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a1c 	.word	0x08003a1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003a1c 	.word	0x08003a1c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <adc_init>:
uint16_t adcIDC2 = 0;

int16_t adcGain[ADC1_CHANNEL_COUNT];

void adc_init(void)
{
 8000b28:	b082      	sub	sp, #8
	adcGain[listVAC]   = 9100;
 8000b2a:	f240 0384 	movw	r3, #132	@ 0x84
 8000b2e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b32:	f242 328c 	movw	r2, #9100	@ 0x238c
 8000b36:	801a      	strh	r2, [r3, #0]
	adcGain[listTEMP]  = Q15(1);
 8000b38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000b3c:	805a      	strh	r2, [r3, #2]
	adcGain[listIDC]   = 2500;
 8000b3e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b42:	8099      	strh	r1, [r3, #4]
	adcGain[listVBAT1] = 2490;
 8000b44:	f640 10ba 	movw	r0, #2490	@ 0x9ba
 8000b48:	80d8      	strh	r0, [r3, #6]
	adcGain[listVDC1]  = Q15(1);
 8000b4a:	811a      	strh	r2, [r3, #8]
	adcGain[listVDC2]  = Q15(1);
 8000b4c:	815a      	strh	r2, [r3, #10]
	adcGain[listIDC2]  = 2500;
 8000b4e:	8199      	strh	r1, [r3, #12]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	609a      	str	r2, [r3, #8]
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000b5e:	f242 424c 	movw	r2, #9292	@ 0x244c
 8000b62:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8000b66:	611a      	str	r2, [r3, #16]

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
    LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)adc1Buffer);
 8000b68:	f240 220c 	movw	r2, #524	@ 0x20c
 8000b6c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000b70:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	f36f 020f 	bfc	r2, #0, #16
 8000b78:	f042 0207 	orr.w	r2, r2, #7
 8000b7c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b84:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b8c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b98:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000ba0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ba4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	f042 0220 	orr.w	r2, r2, #32
 8000bac:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000bb4:	f022 0210 	bic.w	r2, r2, #16
 8000bb8:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	f042 0202 	orr.w	r2, r2, #2
 8000bc0:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	f042 0201 	orr.w	r2, r2, #1
 8000bc8:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000bca:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000bce:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	f042 0201 	orr.w	r2, r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1); // opsiyonel: NVIC enable da yap
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);

    LL_ADC_Enable(ADC1);
    for (volatile int i = 0; i < 1000; i++) { __asm volatile("nop"); } // kısa gecikme
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	9b01      	ldr	r3, [sp, #4]
 8000be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000be4:	da07      	bge.n	8000bf6 <adc_init+0xce>
 8000be6:	bf00      	nop
 8000be8:	9b01      	ldr	r3, [sp, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bf4:	dbf7      	blt.n	8000be6 <adc_init+0xbe>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bf6:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000bfa:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c04:	609a      	str	r2, [r3, #8]

    LL_ADC_REG_StartConversionSWStart(ADC1);
}
 8000c06:	b002      	add	sp, #8
 8000c08:	4770      	bx	lr

08000c0a <lcd_delay_us>:
static void lcd_send(uint8_t value, uint8_t is_data);

/* Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK.
 * This is approximate; HD44780 is tolerant. For safety we overshoot. */
static void lcd_delay_us(uint16_t micros)
{
 8000c0a:	b530      	push	{r4, r5, lr}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	4604      	mov	r4, r0
    if (micros >= 1000u) {
 8000c10:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000c14:	d20f      	bcs.n	8000c36 <lcd_delay_us+0x2c>
        HAL_Delay(micros / 1000u);
        micros = (uint16_t)(micros % 1000u);
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 8000c16:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000c1a:	00e4      	lsls	r4, r4, #3
 8000c1c:	9401      	str	r4, [sp, #4]
    while (count--) {
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	b12b      	cbz	r3, 8000c32 <lcd_delay_us+0x28>
        __asm volatile ("nop");
 8000c26:	bf00      	nop
    while (count--) {
 8000c28:	9b01      	ldr	r3, [sp, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	9201      	str	r2, [sp, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f9      	bne.n	8000c26 <lcd_delay_us+0x1c>
    }
}
 8000c32:	b003      	add	sp, #12
 8000c34:	bd30      	pop	{r4, r5, pc}
        HAL_Delay(micros / 1000u);
 8000c36:	f644 50d3 	movw	r0, #19923	@ 0x4dd3
 8000c3a:	f2c1 0062 	movt	r0, #4194	@ 0x1062
 8000c3e:	fba0 3004 	umull	r3, r0, r0, r4
 8000c42:	0985      	lsrs	r5, r0, #6
 8000c44:	4628      	mov	r0, r5
 8000c46:	f001 f99a 	bl	8001f7e <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fb03 4415 	mls	r4, r3, r5, r4
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	e7df      	b.n	8000c16 <lcd_delay_us+0xc>

08000c56 <lcd_write4>:
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
    lcd_delay_us(50); /* enable cycle time */
}

static void lcd_write4(uint8_t nibble)
{
 8000c56:	b538      	push	{r3, r4, r5, lr}
 8000c58:	4604      	mov	r4, r0
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c5a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8000c5e:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000c62:	f000 0201 	and.w	r2, r0, #1
 8000c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f001 fbe0 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c70:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8000c74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c78:	4628      	mov	r0, r5
 8000c7a:	f001 fbd9 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c7e:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8000c82:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c86:	4628      	mov	r0, r5
 8000c88:	f001 fbd2 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c8c:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8000c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c94:	4628      	mov	r0, r5
 8000c96:	f001 fbcb 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000c9a:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000c9e:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f001 fbc2 	bl	8002430 <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ffac 	bl	8000c0a <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f001 fbba 	bl	8002430 <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 8000cbc:	2032      	movs	r0, #50	@ 0x32
 8000cbe:	f7ff ffa4 	bl	8000c0a <lcd_delay_us>
    lcd_pulse_enable();
}
 8000cc2:	bd38      	pop	{r3, r4, r5, pc}

08000cc4 <lcd_send>:

static void lcd_send(uint8_t value, uint8_t is_data)
{
 8000cc4:	b510      	push	{r4, lr}
 8000cc6:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cc8:	1e0a      	subs	r2, r1, #0
 8000cca:	bf18      	it	ne
 8000ccc:	2201      	movne	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000cd4:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000cd8:	f001 fbaa 	bl	8002430 <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 8000cdc:	0920      	lsrs	r0, r4, #4
 8000cde:	f7ff ffba 	bl	8000c56 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 8000ce2:	f004 000f 	and.w	r0, r4, #15
 8000ce6:	f7ff ffb6 	bl	8000c56 <lcd_write4>
}
 8000cea:	bd10      	pop	{r4, pc}

08000cec <LCD_Backlight>:

/* Public API */
void LCD_Backlight(uint8_t on)
{
 8000cec:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cee:	1e02      	subs	r2, r0, #0
 8000cf0:	bf18      	it	ne
 8000cf2:	2201      	movne	r2, #1
 8000cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf8:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000cfc:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d00:	f001 fb96 	bl	8002430 <HAL_GPIO_WritePin>
}
 8000d04:	bd08      	pop	{r3, pc}

08000d06 <LCD_Init>:

void LCD_Init(void)
{
 8000d06:	b510      	push	{r4, lr}
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d08:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d0c:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d10:	2200      	movs	r2, #0
 8000d12:	2110      	movs	r1, #16
 8000d14:	4620      	mov	r0, r4
 8000d16:	f001 fb8b 	bl	8002430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f001 fb86 	bl	8002430 <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 8000d24:	2028      	movs	r0, #40	@ 0x28
 8000d26:	f001 f92a 	bl	8001f7e <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f7ff ff93 	bl	8000c56 <lcd_write4>
    HAL_Delay(5);
 8000d30:	2005      	movs	r0, #5
 8000d32:	f001 f924 	bl	8001f7e <HAL_Delay>
    lcd_write4(0x03);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f7ff ff8d 	bl	8000c56 <lcd_write4>
    lcd_delay_us(150);
 8000d3c:	2096      	movs	r0, #150	@ 0x96
 8000d3e:	f7ff ff64 	bl	8000c0a <lcd_delay_us>
    lcd_write4(0x03);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f7ff ff87 	bl	8000c56 <lcd_write4>
    lcd_delay_us(150);
 8000d48:	2096      	movs	r0, #150	@ 0x96
 8000d4a:	f7ff ff5e 	bl	8000c0a <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 8000d4e:	2002      	movs	r0, #2
 8000d50:	f7ff ff81 	bl	8000c56 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 8000d54:	2100      	movs	r1, #0
 8000d56:	2028      	movs	r0, #40	@ 0x28
 8000d58:	f7ff ffb4 	bl	8000cc4 <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2008      	movs	r0, #8
 8000d60:	f7ff ffb0 	bl	8000cc4 <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 8000d64:	2100      	movs	r1, #0
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff ffac 	bl	8000cc4 <lcd_send>
    HAL_Delay(2);
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f001 f906 	bl	8001f7e <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 8000d72:	2100      	movs	r1, #0
 8000d74:	2006      	movs	r0, #6
 8000d76:	f7ff ffa5 	bl	8000cc4 <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	200c      	movs	r0, #12
 8000d7e:	f7ff ffa1 	bl	8000cc4 <lcd_send>
}
 8000d82:	bd10      	pop	{r4, pc}

08000d84 <LCD_Clear>:

void LCD_Clear(void)
{
 8000d84:	b508      	push	{r3, lr}
    lcd_send(0x01, 0);
 8000d86:	2100      	movs	r1, #0
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ff9b 	bl	8000cc4 <lcd_send>
    HAL_Delay(2);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f001 f8f5 	bl	8001f7e <HAL_Delay>
}
 8000d94:	bd08      	pop	{r3, pc}

08000d96 <LCD_SetCursor>:
    lcd_send(0x02, 0);
    HAL_Delay(2);
}

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8000d96:	b508      	push	{r3, lr}
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 8000d98:	f643 2338 	movw	r3, #14904	@ 0x3a38
 8000d9c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000da0:	2903      	cmp	r1, #3
 8000da2:	bf28      	it	cs
 8000da4:	2103      	movcs	r1, #3
 8000da6:	5c5b      	ldrb	r3, [r3, r1]
 8000da8:	4418      	add	r0, r3
 8000daa:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8000dae:	2100      	movs	r1, #0
 8000db0:	b2c0      	uxtb	r0, r0
 8000db2:	f7ff ff87 	bl	8000cc4 <lcd_send>
}
 8000db6:	bd08      	pop	{r3, pc}

08000db8 <LCD_WriteChar>:

void LCD_WriteChar(char c)
{
 8000db8:	b508      	push	{r3, lr}
    lcd_send((uint8_t)c, 1);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	f7ff ff82 	bl	8000cc4 <lcd_send>
}
 8000dc0:	bd08      	pop	{r3, pc}

08000dc2 <LCD_Print>:

void LCD_Print(const char *str)
{
    if (str == NULL) return;
 8000dc2:	b150      	cbz	r0, 8000dda <LCD_Print+0x18>
{
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	4604      	mov	r4, r0
    while (*str) {
 8000dc8:	7800      	ldrb	r0, [r0, #0]
 8000dca:	b128      	cbz	r0, 8000dd8 <LCD_Print+0x16>
        LCD_WriteChar(*str++);
 8000dcc:	f7ff fff4 	bl	8000db8 <LCD_WriteChar>
    while (*str) {
 8000dd0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d1f9      	bne.n	8000dcc <LCD_Print+0xa>
    }
}
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	4770      	bx	lr

08000ddc <LCD_PrintUInt16>:
    buf[idx] = '\0';
    LCD_Print(buf);
}

void LCD_PrintUInt16(uint16_t value)
{
 8000ddc:	b500      	push	{lr}
 8000dde:	b083      	sub	sp, #12
    char buf[6]; /* max 65535 */
    int idx = 0;
    
    /* Handle thousands */
    if (value >= 10000) {
 8000de0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000de4:	4298      	cmp	r0, r3
 8000de6:	d963      	bls.n	8000eb0 <LCD_PrintUInt16+0xd4>
        buf[idx++] = (char)('0' + (value / 10000));
 8000de8:	f241 7359 	movw	r3, #5977	@ 0x1759
 8000dec:	f2cd 13b7 	movt	r3, #53687	@ 0xd1b7
 8000df0:	fba3 2300 	umull	r2, r3, r3, r0
 8000df4:	0b5b      	lsrs	r3, r3, #13
 8000df6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000dfa:	f88d 2000 	strb.w	r2, [sp]
        value = (uint16_t)(value % 10000);
 8000dfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e02:	fb02 0313 	mls	r3, r2, r3, r0
 8000e06:	b298      	uxth	r0, r3
        buf[idx++] = (char)('0' + (value / 10000));
 8000e08:	2301      	movs	r3, #1
    }
    if (value >= 1000) {
 8000e0a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e0e:	d314      	bcc.n	8000e3a <LCD_PrintUInt16+0x5e>
        buf[idx++] = (char)('0' + (value / 1000));
 8000e10:	f103 0208 	add.w	r2, r3, #8
 8000e14:	eb0d 0102 	add.w	r1, sp, r2
 8000e18:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8000e1c:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8000e20:	fba2 c200 	umull	ip, r2, r2, r0
 8000e24:	0992      	lsrs	r2, r2, #6
 8000e26:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e2a:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 1000);
 8000e2e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e32:	fb01 0212 	mls	r2, r1, r2, r0
 8000e36:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 1000));
 8000e38:	3301      	adds	r3, #1
    }
    if (value >= 100) {
 8000e3a:	2863      	cmp	r0, #99	@ 0x63
 8000e3c:	d913      	bls.n	8000e66 <LCD_PrintUInt16+0x8a>
        buf[idx++] = (char)('0' + (value / 100));
 8000e3e:	f103 0208 	add.w	r2, r3, #8
 8000e42:	eb0d 0102 	add.w	r1, sp, r2
 8000e46:	f248 521f 	movw	r2, #34079	@ 0x851f
 8000e4a:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8000e4e:	fba2 c200 	umull	ip, r2, r2, r0
 8000e52:	0952      	lsrs	r2, r2, #5
 8000e54:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e58:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 100);
 8000e5c:	2164      	movs	r1, #100	@ 0x64
 8000e5e:	fb01 0212 	mls	r2, r1, r2, r0
 8000e62:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 100));
 8000e64:	3301      	adds	r3, #1
    }
    if (value >= 10) {
 8000e66:	2809      	cmp	r0, #9
 8000e68:	d914      	bls.n	8000e94 <LCD_PrintUInt16+0xb8>
        buf[idx++] = (char)('0' + (value / 10));
 8000e6a:	f103 0208 	add.w	r2, r3, #8
 8000e6e:	eb0d 0102 	add.w	r1, sp, r2
 8000e72:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8000e76:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8000e7a:	fba2 c200 	umull	ip, r2, r2, r0
 8000e7e:	08d2      	lsrs	r2, r2, #3
 8000e80:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e84:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 10);
 8000e88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e8c:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8000e90:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 10));
 8000e92:	3301      	adds	r3, #1
    }
    buf[idx++] = (char)('0' + value);
 8000e94:	3308      	adds	r3, #8
 8000e96:	446b      	add	r3, sp
 8000e98:	3030      	adds	r0, #48	@ 0x30
 8000e9a:	f803 0c08 	strb.w	r0, [r3, #-8]
    buf[idx] = '\0';
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f803 2c07 	strb.w	r2, [r3, #-7]
    LCD_Print(buf);
 8000ea4:	4668      	mov	r0, sp
 8000ea6:	f7ff ff8c 	bl	8000dc2 <LCD_Print>
}
 8000eaa:	b003      	add	sp, #12
 8000eac:	f85d fb04 	ldr.w	pc, [sp], #4
    int idx = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e7aa      	b.n	8000e0a <LCD_PrintUInt16+0x2e>

08000eb4 <lcd_menu_set_language>:
	pageID = page;
	LCD_Clear();
}

void lcd_menu_set_language(uint8_t lang_id)
{
 8000eb4:	b508      	push	{r3, lr}
	lcdLangId = (lang_id != 0) ? 1u : 0u;
 8000eb6:	f240 231a 	movw	r3, #538	@ 0x21a
 8000eba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000ebe:	3800      	subs	r0, #0
 8000ec0:	bf18      	it	ne
 8000ec2:	2001      	movne	r0, #1
 8000ec4:	7018      	strb	r0, [r3, #0]
	LCD_Clear();
 8000ec6:	f7ff ff5d 	bl	8000d84 <LCD_Clear>
}
 8000eca:	bd08      	pop	{r3, pc}

08000ecc <lcd_handle>:

void lcd_handle(void)
{
 8000ecc:	b538      	push	{r3, r4, r5, lr}
	/* Clear once when page changes to avoid leftovers */
	if (pageID != prevPageID) {
 8000ece:	f240 221c 	movw	r2, #540	@ 0x21c
 8000ed2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000ed6:	f240 0300 	movw	r3, #0
 8000eda:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d165      	bne.n	8000fb2 <lcd_handle+0xe6>
		LCD_Clear();
		prevPageID = pageID;
	}

	switch(pageID)
 8000ee6:	f240 231c 	movw	r3, #540	@ 0x21c
 8000eea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d06b      	beq.n	8000fcc <lcd_handle+0x100>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	f040 8095 	bne.w	8001024 <lcd_handle+0x158>
	}
		break;

	case PAGE_MAIN:
	{
		const char * title = (lcdLangId == 0) ? MAIN_TITLE_EN : MAIN_TITLE_TR;
 8000efa:	f240 231a 	movw	r3, #538	@ 0x21a
 8000efe:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	f643 2350 	movw	r3, #14928	@ 0x3a50
 8000f08:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000f0c:	f643 223c 	movw	r2, #14908	@ 0x3a3c
 8000f10:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f14:	2900      	cmp	r1, #0
 8000f16:	bf0c      	ite	eq
 8000f18:	461d      	moveq	r5, r3
 8000f1a:	4615      	movne	r5, r2
 8000f1c:	f643 3434 	movw	r4, #15156	@ 0x3b34
 8000f20:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8000f24:	f643 3318 	movw	r3, #15128	@ 0x3b18
 8000f28:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	bf18      	it	ne
 8000f30:	461c      	movne	r4, r3
		const char * const * labels = (lcdLangId == 0) ? LABELS_EN : LABELS_TR;

		/* Title */
		LCD_SetCursor(0, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4608      	mov	r0, r1
 8000f36:	f7ff ff2e 	bl	8000d96 <LCD_SetCursor>
		LCD_Print(title);
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f7ff ff41 	bl	8000dc2 <LCD_Print>

		/* Row 1: IDC2 and VBAT */
		LCD_SetCursor(0, 1);
 8000f40:	2101      	movs	r1, #1
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ff27 	bl	8000d96 <LCD_SetCursor>
		LCD_Print(labels[3]); /* IDC2 */
 8000f48:	68e0      	ldr	r0, [r4, #12]
 8000f4a:	f7ff ff3a 	bl	8000dc2 <LCD_Print>
		LCD_PrintUInt16(adcIDC2);
 8000f4e:	f240 0392 	movw	r3, #146	@ 0x92
 8000f52:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f56:	8818      	ldrh	r0, [r3, #0]
 8000f58:	f7ff ff40 	bl	8000ddc <LCD_PrintUInt16>
		LCD_SetCursor(10, 1);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f7ff ff19 	bl	8000d96 <LCD_SetCursor>
		LCD_Print(labels[0]); /* VBAT */
 8000f64:	6820      	ldr	r0, [r4, #0]
 8000f66:	f7ff ff2c 	bl	8000dc2 <LCD_Print>
		LCD_PrintUInt16(adcVBAT1);
 8000f6a:	f240 0398 	movw	r3, #152	@ 0x98
 8000f6e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f72:	8818      	ldrh	r0, [r3, #0]
 8000f74:	f7ff ff32 	bl	8000ddc <LCD_PrintUInt16>

		/* Row 2: VAC */
		LCD_SetCursor(0, 2);
 8000f78:	2102      	movs	r1, #2
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff ff0b 	bl	8000d96 <LCD_SetCursor>
		LCD_Print(labels[1]); /* VAC */
 8000f80:	6860      	ldr	r0, [r4, #4]
 8000f82:	f7ff ff1e 	bl	8000dc2 <LCD_Print>
		LCD_PrintUInt16(adcVAC);
 8000f86:	f240 039e 	movw	r3, #158	@ 0x9e
 8000f8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f8e:	8818      	ldrh	r0, [r3, #0]
 8000f90:	f7ff ff24 	bl	8000ddc <LCD_PrintUInt16>

		/* Row 3: TEMP */
		LCD_SetCursor(0, 3);
 8000f94:	2103      	movs	r1, #3
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fefd 	bl	8000d96 <LCD_SetCursor>
		LCD_Print(labels[6]); /* TEMP */
 8000f9c:	69a0      	ldr	r0, [r4, #24]
 8000f9e:	f7ff ff10 	bl	8000dc2 <LCD_Print>
		LCD_PrintUInt16(adcTEMP);
 8000fa2:	f240 039c 	movw	r3, #156	@ 0x9c
 8000fa6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000faa:	8818      	ldrh	r0, [r3, #0]
 8000fac:	f7ff ff16 	bl	8000ddc <LCD_PrintUInt16>

	default:
		break;
	}

}
 8000fb0:	e038      	b.n	8001024 <lcd_handle+0x158>
		LCD_Clear();
 8000fb2:	f7ff fee7 	bl	8000d84 <LCD_Clear>
		prevPageID = pageID;
 8000fb6:	f240 0300 	movw	r3, #0
 8000fba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fbe:	f240 221c 	movw	r2, #540	@ 0x21c
 8000fc2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e78c      	b.n	8000ee6 <lcd_handle+0x1a>
		const char * const * lines = (lcdLangId == 0) ? LOADING_EN : LOADING_TR; /* pointer-to-pointer selector */
 8000fcc:	f240 231a 	movw	r3, #538	@ 0x21a
 8000fd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	f643 3450 	movw	r4, #15184	@ 0x3b50
 8000fda:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8000fde:	f643 3360 	movw	r3, #15200	@ 0x3b60
 8000fe2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	bf08      	it	eq
 8000fea:	461c      	moveq	r4, r3
		LCD_SetCursor(0, 0); LCD_Print(lines[0]);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4608      	mov	r0, r1
 8000ff0:	f7ff fed1 	bl	8000d96 <LCD_SetCursor>
 8000ff4:	6820      	ldr	r0, [r4, #0]
 8000ff6:	f7ff fee4 	bl	8000dc2 <LCD_Print>
		LCD_SetCursor(0, 1); LCD_Print(lines[1]);
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff feca 	bl	8000d96 <LCD_SetCursor>
 8001002:	6860      	ldr	r0, [r4, #4]
 8001004:	f7ff fedd 	bl	8000dc2 <LCD_Print>
		LCD_SetCursor(0, 2); LCD_Print(lines[2]);
 8001008:	2102      	movs	r1, #2
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fec3 	bl	8000d96 <LCD_SetCursor>
 8001010:	68a0      	ldr	r0, [r4, #8]
 8001012:	f7ff fed6 	bl	8000dc2 <LCD_Print>
		LCD_SetCursor(0, 3); LCD_Print(lines[3]);
 8001016:	2103      	movs	r1, #3
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff febc 	bl	8000d96 <LCD_SetCursor>
 800101e:	68e0      	ldr	r0, [r4, #12]
 8001020:	f7ff fecf 	bl	8000dc2 <LCD_Print>
}
 8001024:	bd38      	pop	{r3, r4, r5, pc}

08001026 <button_handle>:

void button_handle(void)
{
 8001026:	b508      	push	{r3, lr}
	if (buttonState == 0) {
 8001028:	f240 231b 	movw	r3, #539	@ 0x21b
 800102c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d046      	beq.n	80010c4 <button_handle+0x9e>
		return;
	}

	/* Button order: Left, On, Up, Down, Right, Off */
	/* Left: previous page */
	if (buttonState & BUT_LEFT_M) {
 8001036:	f013 0f01 	tst.w	r3, #1
 800103a:	d00f      	beq.n	800105c <button_handle+0x36>
		if (pageID == PAGE_MAIN) {
 800103c:	f240 231c 	movw	r3, #540	@ 0x21c
 8001040:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b01      	cmp	r3, #1
	pageID = page;
 8001048:	f240 231c 	movw	r3, #540	@ 0x21c
 800104c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001050:	bf0c      	ite	eq
 8001052:	2200      	moveq	r2, #0
 8001054:	2201      	movne	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
	LCD_Clear();
 8001058:	f7ff fe94 	bl	8000d84 <LCD_Clear>
		} else {
			lcd_menu_set_page(PAGE_MAIN);
		}
	}
	/* On: set SHUTDOWN2 = 1 */
	if (buttonState & BUT_ON_M) {
 800105c:	f240 231b 	movw	r3, #539	@ 0x21b
 8001060:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f013 0f02 	tst.w	r3, #2
 800106a:	d12c      	bne.n	80010c6 <button_handle+0xa0>
		HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
	}
	/* Up: toggle language EN/TR */
	if (buttonState & BUT_UP_M) {
 800106c:	f240 231b 	movw	r3, #539	@ 0x21b
 8001070:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f013 0f04 	tst.w	r3, #4
 800107a:	d12e      	bne.n	80010da <button_handle+0xb4>
		lcd_menu_set_language((uint8_t)(lcdLangId ^ 1u));
	}
	/* Down: no action */
	/* Right: next page */
	if (buttonState & BUT_RIGHT_M) {
 800107c:	f240 231b 	movw	r3, #539	@ 0x21b
 8001080:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	f013 0f10 	tst.w	r3, #16
 800108a:	d00d      	beq.n	80010a8 <button_handle+0x82>
		if (pageID == PAGE_LOADING) {
 800108c:	f240 231c 	movw	r3, #540	@ 0x21c
 8001090:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	bb53      	cbnz	r3, 80010ee <button_handle+0xc8>
	pageID = page;
 8001098:	f240 231c 	movw	r3, #540	@ 0x21c
 800109c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
	LCD_Clear();
 80010a4:	f7ff fe6e 	bl	8000d84 <LCD_Clear>
		} else {
			lcd_menu_set_page(PAGE_LOADING);
		}
	}
	/* Off: set SHUTDOWN2 = 0 */
	if (buttonState & BUT_OFF_M) {
 80010a8:	f240 231b 	movw	r3, #539	@ 0x21b
 80010ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f013 0f20 	tst.w	r3, #32
 80010b6:	d123      	bne.n	8001100 <button_handle+0xda>
		HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
	}

	buttonState = 0;
 80010b8:	f240 231b 	movw	r3, #539	@ 0x21b
 80010bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80010d0:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80010d4:	f001 f9ac 	bl	8002430 <HAL_GPIO_WritePin>
 80010d8:	e7c8      	b.n	800106c <button_handle+0x46>
		lcd_menu_set_language((uint8_t)(lcdLangId ^ 1u));
 80010da:	f240 231a 	movw	r3, #538	@ 0x21a
 80010de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010e2:	7818      	ldrb	r0, [r3, #0]
 80010e4:	f080 0001 	eor.w	r0, r0, #1
 80010e8:	f7ff fee4 	bl	8000eb4 <lcd_menu_set_language>
 80010ec:	e7c6      	b.n	800107c <button_handle+0x56>
	pageID = page;
 80010ee:	f240 231c 	movw	r3, #540	@ 0x21c
 80010f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	LCD_Clear();
 80010fa:	f7ff fe43 	bl	8000d84 <LCD_Clear>
}
 80010fe:	e7d3      	b.n	80010a8 <button_handle+0x82>
		HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001106:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800110a:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800110e:	f001 f98f 	bl	8002430 <HAL_GPIO_WritePin>
 8001112:	e7d1      	b.n	80010b8 <button_handle+0x92>

08001114 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	f1c0 0c07 	rsb	ip, r0, #7
 800111c:	f1bc 0f04 	cmp.w	ip, #4
 8001120:	bf28      	it	cs
 8001122:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	1d03      	adds	r3, r0, #4
 8001128:	2b06      	cmp	r3, #6
 800112a:	bf8c      	ite	hi
 800112c:	1ec3      	subhi	r3, r0, #3
 800112e:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	fa00 fc0c 	lsl.w	ip, r0, ip
 8001138:	ea21 010c 	bic.w	r1, r1, ip
 800113c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113e:	4098      	lsls	r0, r3
 8001140:	ea22 0000 	bic.w	r0, r2, r0
         );
}
 8001144:	4308      	orrs	r0, r1
 8001146:	4770      	bx	lr

08001148 <LL_ADC_SetChannelSamplingTime>:
{
 8001148:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800114e:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	f001 7e00 	and.w	lr, r1, #33554432	@ 0x2000000
 800115a:	fa2e fe03 	lsr.w	lr, lr, r3
 800115e:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 8001160:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8001164:	f001 71f8 	and.w	r1, r1, #32505856	@ 0x1f00000
 8001168:	f04f 73f8 	mov.w	r3, #32505856	@ 0x1f00000
 800116c:	fa93 fca3 	rbit	ip, r3
 8001170:	fabc fc8c 	clz	ip, ip
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001180:	2507      	movs	r5, #7
 8001182:	fa05 fc0c 	lsl.w	ip, r5, ip
 8001186:	ea24 0c0c 	bic.w	ip, r4, ip
 800118a:	40d9      	lsrs	r1, r3
 800118c:	408a      	lsls	r2, r1
 800118e:	ea4c 0202 	orr.w	r2, ip, r2
 8001192:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
}
 8001196:	bd30      	pop	{r4, r5, pc}

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b500      	push	{lr}
 800119a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119c:	2300      	movs	r3, #0
 800119e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80011a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80011a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80011a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80011a6:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	9303      	str	r3, [sp, #12]
 80011aa:	9304      	str	r3, [sp, #16]
 80011ac:	9305      	str	r3, [sp, #20]
 80011ae:	9306      	str	r3, [sp, #24]
 80011b0:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2201      	movs	r2, #1
 80011ba:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011c2:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c4:	2202      	movs	r2, #2
 80011c6:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	a808      	add	r0, sp, #32
 80011cc:	f001 fa1f 	bl	800260e <HAL_RCC_OscConfig>
 80011d0:	b9c0      	cbnz	r0, 8001204 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d2:	230f      	movs	r3, #15
 80011d4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d6:	2302      	movs	r3, #2
 80011d8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011da:	2100      	movs	r1, #0
 80011dc:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011de:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e2:	a803      	add	r0, sp, #12
 80011e4:	f001 fcdf 	bl	8002ba6 <HAL_RCC_ClockConfig>
 80011e8:	b970      	cbnz	r0, 8001208 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ea:	2302      	movs	r3, #2
 80011ec:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011ee:	2300      	movs	r3, #0
 80011f0:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f2:	4668      	mov	r0, sp
 80011f4:	f001 fdbe 	bl	8002d74 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	b940      	cbnz	r0, 800120c <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011fa:	f001 fc93 	bl	8002b24 <HAL_RCC_EnableCSS>
}
 80011fe:	b013      	add	sp, #76	@ 0x4c
 8001200:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001206:	e7fe      	b.n	8001206 <SystemClock_Config+0x6e>
 8001208:	b672      	cpsid	i
 800120a:	e7fe      	b.n	800120a <SystemClock_Config+0x72>
 800120c:	b672      	cpsid	i
 800120e:	e7fe      	b.n	800120e <SystemClock_Config+0x76>

08001210 <main>:
{
 8001210:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001214:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 8001216:	f000 fe94 	bl	8001f42 <HAL_Init>
  SystemClock_Config();
 800121a:	f7ff ffbd 	bl	8001198 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2400      	movs	r4, #0
 8001220:	940f      	str	r4, [sp, #60]	@ 0x3c
 8001222:	9410      	str	r4, [sp, #64]	@ 0x40
 8001224:	9411      	str	r4, [sp, #68]	@ 0x44
 8001226:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800122c:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8001230:	69ab      	ldr	r3, [r5, #24]
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	61ab      	str	r3, [r5, #24]
 8001238:	69ab      	ldr	r3, [r5, #24]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	9304      	str	r3, [sp, #16]
 8001240:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	69ab      	ldr	r3, [r5, #24]
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	61ab      	str	r3, [r5, #24]
 800124a:	69ab      	ldr	r3, [r5, #24]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	9305      	str	r3, [sp, #20]
 8001252:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	69ab      	ldr	r3, [r5, #24]
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	61ab      	str	r3, [r5, #24]
 800125c:	69ab      	ldr	r3, [r5, #24]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	9306      	str	r3, [sp, #24]
 8001264:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	69ab      	ldr	r3, [r5, #24]
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	61ab      	str	r3, [r5, #24]
 800126e:	69ab      	ldr	r3, [r5, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	9307      	str	r3, [sp, #28]
 8001276:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001278:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
 800127c:	f2c4 0b01 	movt	fp, #16385	@ 0x4001
 8001280:	4622      	mov	r2, r4
 8001282:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001286:	4658      	mov	r0, fp
 8001288:	f001 f8d2 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800128c:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8001290:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 8001294:	2201      	movs	r2, #1
 8001296:	2108      	movs	r1, #8
 8001298:	4640      	mov	r0, r8
 800129a:	f001 f8c9 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 800129e:	f44f 6940 	mov.w	r9, #3072	@ 0xc00
 80012a2:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 80012a6:	4622      	mov	r2, r4
 80012a8:	f248 0138 	movw	r1, #32824	@ 0x8038
 80012ac:	4648      	mov	r0, r9
 80012ae:	f001 f8bf 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 80012b2:	4622      	mov	r2, r4
 80012b4:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80012b8:	4640      	mov	r0, r8
 80012ba:	f001 f8b9 	bl	8002430 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 80012be:	f44f 4760 	mov.w	r7, #57344	@ 0xe000
 80012c2:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	f04f 0a01 	mov.w	sl, #1
 80012c8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2602      	movs	r6, #2
 80012d0:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	a90f      	add	r1, sp, #60	@ 0x3c
 80012d4:	4658      	mov	r0, fp
 80012d6:	f000 ff67 	bl	80021a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 80012da:	f641 6308 	movw	r3, #7688	@ 0x1e08
 80012de:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	a90f      	add	r1, sp, #60	@ 0x3c
 80012ea:	4640      	mov	r0, r8
 80012ec:	f000 ff5c 	bl	80021a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 80012f0:	f647 4304 	movw	r3, #31748	@ 0x7c04
 80012f4:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	4623      	mov	r3, r4
 80012f8:	f2c1 0311 	movt	r3, #4113	@ 0x1011
 80012fc:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	a90f      	add	r1, sp, #60	@ 0x3c
 8001302:	4648      	mov	r0, r9
 8001304:	f000 ff50 	bl	80021a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 8001308:	f248 0338 	movw	r3, #32824	@ 0x8038
 800130c:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	a90f      	add	r1, sp, #60	@ 0x3c
 8001318:	4648      	mov	r0, r9
 800131a:	f000 ff45 	bl	80021a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 800131e:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001322:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	a90f      	add	r1, sp, #60	@ 0x3c
 800132a:	4640      	mov	r0, r8
 800132c:	f000 ff3c 	bl	80021a8 <HAL_GPIO_Init>
  __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001330:	4622      	mov	r2, r4
 8001332:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800133c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001344:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 8001346:	4622      	mov	r2, r4
 8001348:	210f      	movs	r1, #15
 800134a:	2008      	movs	r0, #8
 800134c:	f000 fe3e 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001350:	2008      	movs	r0, #8
 8001352:	f000 fe74 	bl	800203e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001356:	4622      	mov	r2, r4
 8001358:	210f      	movs	r1, #15
 800135a:	2028      	movs	r0, #40	@ 0x28
 800135c:	f000 fe36 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001360:	2028      	movs	r0, #40	@ 0x28
 8001362:	f000 fe6c 	bl	800203e <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001366:	696b      	ldr	r3, [r5, #20]
 8001368:	ea43 030a 	orr.w	r3, r3, sl
 800136c:	616b      	str	r3, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800136e:	696b      	ldr	r3, [r5, #20]
 8001370:	ea03 030a 	and.w	r3, r3, sl
 8001374:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001376:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800137c:	f367 431f 	bfi	r3, r7, #16, #16
 8001380:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001382:	4622      	mov	r2, r4
 8001384:	4621      	mov	r1, r4
 8001386:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800138a:	f7ff fec3 	bl	8001114 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	0103      	lsls	r3, r0, #4
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001396:	f367 421f 	bfi	r2, r7, #16, #16
 800139a:	f882 330b 	strb.w	r3, [r2, #779]	@ 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80013a2:	f367 431f 	bfi	r3, r7, #16, #16
 80013a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013aa:	601a      	str	r2, [r3, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80013ac:	9408      	str	r4, [sp, #32]
 80013ae:	9409      	str	r4, [sp, #36]	@ 0x24
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80013b0:	940a      	str	r4, [sp, #40]	@ 0x28
 80013b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80013b4:	940c      	str	r4, [sp, #48]	@ 0x30
 80013b6:	940d      	str	r4, [sp, #52]	@ 0x34
 80013b8:	940e      	str	r4, [sp, #56]	@ 0x38
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	9410      	str	r4, [sp, #64]	@ 0x40
 80013bc:	9411      	str	r4, [sp, #68]	@ 0x44
 80013be:	9412      	str	r4, [sp, #72]	@ 0x48
 80013c0:	9413      	str	r4, [sp, #76]	@ 0x4c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c2:	69ab      	ldr	r3, [r5, #24]
 80013c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c8:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013ca:	69ab      	ldr	r3, [r5, #24]
 80013cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013d0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80013d2:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013d4:	69ab      	ldr	r3, [r5, #24]
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013dc:	69ab      	ldr	r3, [r5, #24]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80013e4:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013e6:	69ab      	ldr	r3, [r5, #24]
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013ee:	69ab      	ldr	r3, [r5, #24]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80013f6:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_6
 80013f8:	f24c 73c7 	movw	r3, #51143	@ 0xc7c7
 80013fc:	930f      	str	r3, [sp, #60]	@ 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	a90f      	add	r1, sp, #60	@ 0x3c
 8001400:	4640      	mov	r0, r8
 8001402:	f002 f956 	bl	80036b2 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001406:	f240 3303 	movw	r3, #771	@ 0x303
 800140a:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800140c:	9410      	str	r4, [sp, #64]	@ 0x40
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001410:	4648      	mov	r0, r9
 8001412:	f002 f94e 	bl	80036b2 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001416:	4623      	mov	r3, r4
 8001418:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001422:	f022 0210 	bic.w	r2, r2, #16
 8001426:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 800142e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800143e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001446:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800144e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001452:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800145a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800145e:	609a      	str	r2, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8001464:	f367 431f 	bfi	r3, r7, #16, #16
 8001468:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(ADC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800146a:	4622      	mov	r2, r4
 800146c:	4621      	mov	r1, r4
 800146e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001472:	f7ff fe4f 	bl	8001114 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	0103      	lsls	r3, r0, #4
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800147e:	f367 421f 	bfi	r2, r7, #16, #16
 8001482:	f882 3312 	strb.w	r3, [r2, #786]	@ 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800148a:	f367 431f 	bfi	r3, r7, #16, #16
 800148e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001492:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001494:	9408      	str	r4, [sp, #32]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001496:	f44f 7980 	mov.w	r9, #256	@ 0x100
 800149a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800149e:	f44f 5810 	mov.w	r8, #9216	@ 0x2400
 80014a2:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 80014a6:	a908      	add	r1, sp, #32
 80014a8:	4640      	mov	r0, r8
 80014aa:	f002 f8c6 	bl	800363a <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 80014ae:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80014b2:	930a      	str	r3, [sp, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 80014b4:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 80014b8:	930b      	str	r3, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80014ba:	940c      	str	r4, [sp, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80014bc:	940d      	str	r4, [sp, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80014be:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80014c2:	a90a      	add	r1, sp, #40	@ 0x28
 80014c4:	4640      	mov	r0, r8
 80014c6:	f002 f8cc 	bl	8003662 <LL_ADC_REG_Init>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f44f 7740 	mov.w	r7, #768	@ 0x300
 80014ce:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 80014da:	fa2a f303 	lsr.w	r3, sl, r3
 80014de:	f242 452c 	movw	r5, #9260	@ 0x242c
 80014e2:	f2c4 0501 	movt	r5, #16385	@ 0x4001
  MODIFY_REG(*preg,
 80014e6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80014ea:	f022 021f 	bic.w	r2, r2, #31
 80014ee:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80014f2:	4632      	mov	r2, r6
 80014f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80014f8:	4640      	mov	r0, r8
 80014fa:	f7ff fe25 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 80014fe:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 800150a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800150e:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8001512:	f042 0220 	orr.w	r2, r2, #32
 8001516:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800151a:	4632      	mov	r2, r6
 800151c:	2101      	movs	r1, #1
 800151e:	f2c0 2130 	movt	r1, #560	@ 0x230
 8001522:	4640      	mov	r0, r8
 8001524:	f7ff fe10 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 8001528:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8001534:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8001538:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 800153c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001540:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001544:	4632      	mov	r2, r6
 8001546:	4631      	mov	r1, r6
 8001548:	f2c0 2160 	movt	r1, #608	@ 0x260
 800154c:	4640      	mov	r0, r8
 800154e:	f7ff fdfb 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 8001552:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 800155e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8001562:	f422 2278 	bic.w	r2, r2, #1015808	@ 0xf8000
 8001566:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800156a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800156e:	4632      	mov	r2, r6
 8001570:	2106      	movs	r1, #6
 8001572:	f2c0 3120 	movt	r1, #800	@ 0x320
 8001576:	4640      	mov	r0, r8
 8001578:	f7ff fde6 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 800157c:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8001588:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800158c:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8001590:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 8001594:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8001598:	4632      	mov	r2, r6
 800159a:	2107      	movs	r1, #7
 800159c:	f2c0 3150 	movt	r1, #848	@ 0x350
 80015a0:	4640      	mov	r0, r8
 80015a2:	f7ff fdd1 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 80015a6:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80015aa:	fab3 f383 	clz	r3, r3
 80015ae:	fa2a fa03 	lsr.w	sl, sl, r3
  MODIFY_REG(*preg,
 80015b2:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 80015b6:	f023 5378 	bic.w	r3, r3, #1040187392	@ 0x3e000000
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015be:	f845 302a 	str.w	r3, [r5, sl, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80015c2:	4632      	mov	r2, r6
 80015c4:	2108      	movs	r1, #8
 80015c6:	f2c0 3180 	movt	r1, #896	@ 0x380
 80015ca:	4640      	mov	r0, r8
 80015cc:	f7ff fdbc 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
 80015d0:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	fa29 f903 	lsr.w	r9, r9, r3
  MODIFY_REG(*preg,
 80015dc:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 80015e0:	f023 031f 	bic.w	r3, r3, #31
 80015e4:	f043 0309 	orr.w	r3, r3, #9
 80015e8:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80015ec:	4632      	mov	r2, r6
 80015ee:	2109      	movs	r1, #9
 80015f0:	f2c0 31b0 	movt	r1, #944	@ 0x3b0
 80015f4:	4640      	mov	r0, r8
 80015f6:	f7ff fda7 	bl	8001148 <LL_ADC_SetChannelSamplingTime>
  DAC_ChannelConfTypeDef sConfig = {0};
 80015fa:	940f      	str	r4, [sp, #60]	@ 0x3c
 80015fc:	9410      	str	r4, [sp, #64]	@ 0x40
  hdac.Instance = DAC;
 80015fe:	f240 304c 	movw	r0, #844	@ 0x34c
 8001602:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001606:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 800160a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800160e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001610:	f000 fd38 	bl	8002084 <HAL_DAC_Init>
 8001614:	2800      	cmp	r0, #0
 8001616:	f040 810f 	bne.w	8001838 <main+0x628>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800161a:	2200      	movs	r2, #0
 800161c:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800161e:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001620:	a90f      	add	r1, sp, #60	@ 0x3c
 8001622:	f240 304c 	movw	r0, #844	@ 0x34c
 8001626:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800162a:	f000 fd8c 	bl	8002146 <HAL_DAC_ConfigChannel>
 800162e:	2800      	cmp	r0, #0
 8001630:	f040 8104 	bne.w	800183c <main+0x62c>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001634:	2210      	movs	r2, #16
 8001636:	a90f      	add	r1, sp, #60	@ 0x3c
 8001638:	f240 304c 	movw	r0, #844	@ 0x34c
 800163c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001640:	f000 fd81 	bl	8002146 <HAL_DAC_ConfigChannel>
 8001644:	2800      	cmp	r0, #0
 8001646:	f040 80fb 	bne.w	8001840 <main+0x630>
  hi2c1.Instance = I2C1;
 800164a:	f240 20f8 	movw	r0, #760	@ 0x2f8
 800164e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001652:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8001656:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800165a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165c:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8001660:	f2c0 0301 	movt	r3, #1
 8001664:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001666:	2300      	movs	r3, #0
 8001668:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001670:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001672:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001674:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001678:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167a:	f000 fefa 	bl	8002472 <HAL_I2C_Init>
 800167e:	2800      	cmp	r0, #0
 8001680:	f040 80e0 	bne.w	8001844 <main+0x634>
  huart1.Instance = USART1;
 8001684:	f240 2020 	movw	r0, #544	@ 0x220
 8001688:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800168c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001690:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001694:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800169a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169c:	2300      	movs	r3, #0
 800169e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a0:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016a4:	220c      	movs	r2, #12
 80016a6:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a8:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016aa:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ac:	f001 ff95 	bl	80035da <HAL_UART_Init>
 80016b0:	2800      	cmp	r0, #0
 80016b2:	f040 80c9 	bne.w	8001848 <main+0x638>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	2300      	movs	r3, #0
 80016b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80016ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80016bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80016be:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80016c2:	930b      	str	r3, [sp, #44]	@ 0x2c
  htim3.Instance = TIM3;
 80016c4:	f240 20b0 	movw	r0, #688	@ 0x2b0
 80016c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80016cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d0:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80016d4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 80016d6:	2217      	movs	r2, #23
 80016d8:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 80016dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016e0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e6:	f001 fdde 	bl	80032a6 <HAL_TIM_Base_Init>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f040 80ae 	bne.w	800184c <main+0x63c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f6:	a90f      	add	r1, sp, #60	@ 0x3c
 80016f8:	f240 20b0 	movw	r0, #688	@ 0x2b0
 80016fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001700:	f001 fe09 	bl	8003316 <HAL_TIM_ConfigClockSource>
 8001704:	2800      	cmp	r0, #0
 8001706:	f040 80a3 	bne.w	8001850 <main+0x640>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800170a:	2320      	movs	r3, #32
 800170c:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001712:	a90a      	add	r1, sp, #40	@ 0x28
 8001714:	f240 20b0 	movw	r0, #688	@ 0x2b0
 8001718:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800171c:	f001 feb0 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	2800      	cmp	r0, #0
 8001722:	f040 8097 	bne.w	8001854 <main+0x644>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	2300      	movs	r3, #0
 8001728:	930f      	str	r3, [sp, #60]	@ 0x3c
 800172a:	9310      	str	r3, [sp, #64]	@ 0x40
  htim7.Instance = TIM7;
 800172c:	f240 2068 	movw	r0, #616	@ 0x268
 8001730:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001734:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8001738:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800173c:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 239;
 800173e:	22ef      	movs	r2, #239	@ 0xef
 8001740:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 9999;
 8001744:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001748:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800174c:	f001 fdab 	bl	80032a6 <HAL_TIM_Base_Init>
 8001750:	2800      	cmp	r0, #0
 8001752:	f040 8081 	bne.w	8001858 <main+0x648>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001756:	2320      	movs	r3, #32
 8001758:	930f      	str	r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800175e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001760:	f240 2068 	movw	r0, #616	@ 0x268
 8001764:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001768:	f001 fe8a 	bl	8003480 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4680      	mov	r8, r0
 800176e:	2800      	cmp	r0, #0
 8001770:	d174      	bne.n	800185c <main+0x64c>
  adc_init();
 8001772:	f7ff f9d9 	bl	8000b28 <adc_init>
  HAL_TIM_Base_Start(&htim3);
 8001776:	f240 20b0 	movw	r0, #688	@ 0x2b0
 800177a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800177e:	f001 fb99 	bl	8002eb4 <HAL_TIM_Base_Start>
  LCD_Backlight(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fab2 	bl	8000cec <LCD_Backlight>
  LCD_Init();
 8001788:	f7ff fabd 	bl	8000d06 <LCD_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800178c:	f240 354c 	movw	r5, #844	@ 0x34c
 8001790:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001794:	2100      	movs	r1, #0
 8001796:	4628      	mov	r0, r5
 8001798:	f000 fc86 	bl	80020a8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800179c:	2110      	movs	r1, #16
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 fc82 	bl	80020a8 <HAL_DAC_Start>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017aa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80017ae:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80017b2:	f000 fe3d 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 80017b6:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80017ba:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c4:	4620      	mov	r0, r4
 80017c6:	f000 fe33 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d0:	4620      	mov	r0, r4
 80017d2:	f000 fe2d 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 80017d6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80017da:	2200      	movs	r2, #0
 80017dc:	4611      	mov	r1, r2
 80017de:	4628      	mov	r0, r5
 80017e0:	f000 fc98 	bl	8002114 <HAL_DAC_SetValue>
  pageID = 0;
 80017e4:	f240 251c 	movw	r5, #540	@ 0x21c
 80017e8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80017ec:	2600      	movs	r6, #0
 80017ee:	702e      	strb	r6, [r5, #0]
  lcd_handle();
 80017f0:	f7ff fb6c 	bl	8000ecc <lcd_handle>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017fa:	4620      	mov	r0, r4
 80017fc:	f000 fe18 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8001800:	20fa      	movs	r0, #250	@ 0xfa
 8001802:	f000 fbbc 	bl	8001f7e <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001806:	4632      	mov	r2, r6
 8001808:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800180c:	4620      	mov	r0, r4
 800180e:	f000 fe0f 	bl	8002430 <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 8001812:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001816:	f000 fbb2 	bl	8001f7e <HAL_Delay>
  pageID = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	702b      	strb	r3, [r5, #0]
	  switch(mainCounter)
 800181e:	f240 251d 	movw	r5, #541	@ 0x21d
 8001822:	f2c2 0500 	movt	r5, #8192	@ 0x2000
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8001826:	f648 6739 	movw	r7, #36409	@ 0x8e39
 800182a:	f6c3 07e3 	movt	r7, #14563	@ 0x38e3
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800182e:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8001832:	f2c4 0601 	movt	r6, #16385	@ 0x4001
 8001836:	e03c      	b.n	80018b2 <main+0x6a2>
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
  while (1)
 800183a:	e7fe      	b.n	800183a <main+0x62a>
 800183c:	b672      	cpsid	i
 800183e:	e7fe      	b.n	800183e <main+0x62e>
 8001840:	b672      	cpsid	i
 8001842:	e7fe      	b.n	8001842 <main+0x632>
 8001844:	b672      	cpsid	i
 8001846:	e7fe      	b.n	8001846 <main+0x636>
 8001848:	b672      	cpsid	i
 800184a:	e7fe      	b.n	800184a <main+0x63a>
 800184c:	b672      	cpsid	i
 800184e:	e7fe      	b.n	800184e <main+0x63e>
 8001850:	b672      	cpsid	i
 8001852:	e7fe      	b.n	8001852 <main+0x642>
 8001854:	b672      	cpsid	i
 8001856:	e7fe      	b.n	8001856 <main+0x646>
 8001858:	b672      	cpsid	i
 800185a:	e7fe      	b.n	800185a <main+0x64a>
 800185c:	b672      	cpsid	i
 800185e:	e7fe      	b.n	800185e <main+0x64e>
		  adcTEMP = adcMeanSum[listTEMP - 1] >> SAMPLE_2N ;
 8001860:	f240 039c 	movw	r3, #156	@ 0x9c
 8001864:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001868:	f240 1204 	movw	r2, #260	@ 0x104
 800186c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	1112      	asrs	r2, r2, #4
 8001874:	801a      	strh	r2, [r3, #0]
		  break;
 8001876:	2301      	movs	r3, #1
		  mainCounter++;
 8001878:	702b      	strb	r3, [r5, #0]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 800187a:	f240 0304 	movw	r3, #4
 800187e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001882:	f240 344c 	movw	r4, #844	@ 0x34c
 8001886:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	2110      	movs	r1, #16
 8001890:	4620      	mov	r0, r4
 8001892:	f000 fc3f 	bl	8002114 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValueI);
 8001896:	f240 0302 	movw	r3, #2
 800189a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4611      	mov	r1, r2
 80018a4:	4620      	mov	r0, r4
 80018a6:	f000 fc35 	bl	8002114 <HAL_DAC_SetValue>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80018aa:	2108      	movs	r1, #8
 80018ac:	4630      	mov	r0, r6
 80018ae:	f000 fdc5 	bl	800243c <HAL_GPIO_TogglePin>
	  switch(mainCounter)
 80018b2:	782b      	ldrb	r3, [r5, #0]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	f200 80a1 	bhi.w	80019fc <main+0x7ec>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <main+0x6b0>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	08001861 	.word	0x08001861
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018ff 	.word	0x080018ff
 80018cc:	08001919 	.word	0x08001919
 80018d0:	08001933 	.word	0x08001933
 80018d4:	0800194d 	.word	0x0800194d
 80018d8:	08001967 	.word	0x08001967
 80018dc:	080019e5 	.word	0x080019e5
 80018e0:	080019f1 	.word	0x080019f1
		  adcIDC = adcMeanSum[listIDC - 1] >> SAMPLE_2N ;
 80018e4:	f240 039a 	movw	r3, #154	@ 0x9a
 80018e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018ec:	f240 1204 	movw	r2, #260	@ 0x104
 80018f0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80018f4:	6852      	ldr	r2, [r2, #4]
 80018f6:	1112      	asrs	r2, r2, #4
 80018f8:	801a      	strh	r2, [r3, #0]
		  break;
 80018fa:	2302      	movs	r3, #2
 80018fc:	e7bc      	b.n	8001878 <main+0x668>
		  adcVBAT1 = adcMeanSum[listVBAT1 - 1] >> SAMPLE_2N ;
 80018fe:	f240 0398 	movw	r3, #152	@ 0x98
 8001902:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001906:	f240 1204 	movw	r2, #260	@ 0x104
 800190a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800190e:	6892      	ldr	r2, [r2, #8]
 8001910:	1112      	asrs	r2, r2, #4
 8001912:	801a      	strh	r2, [r3, #0]
		  break;
 8001914:	2303      	movs	r3, #3
 8001916:	e7af      	b.n	8001878 <main+0x668>
		  adcVDC1 = adcMeanSum[listVDC1 - 1] >> SAMPLE_2N ;
 8001918:	f240 0396 	movw	r3, #150	@ 0x96
 800191c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001920:	f240 1204 	movw	r2, #260	@ 0x104
 8001924:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001928:	68d2      	ldr	r2, [r2, #12]
 800192a:	1112      	asrs	r2, r2, #4
 800192c:	801a      	strh	r2, [r3, #0]
		  break;
 800192e:	2304      	movs	r3, #4
 8001930:	e7a2      	b.n	8001878 <main+0x668>
		  adcVDC2 = adcMeanSum[listVDC2 - 1] >> SAMPLE_2N ;
 8001932:	f240 0394 	movw	r3, #148	@ 0x94
 8001936:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800193a:	f240 1204 	movw	r2, #260	@ 0x104
 800193e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001942:	6912      	ldr	r2, [r2, #16]
 8001944:	1112      	asrs	r2, r2, #4
 8001946:	801a      	strh	r2, [r3, #0]
		  break;
 8001948:	2305      	movs	r3, #5
 800194a:	e795      	b.n	8001878 <main+0x668>
		  adcIDC2 = adcMeanSum[listIDC2 - 1] >> SAMPLE_2N ;
 800194c:	f240 0392 	movw	r3, #146	@ 0x92
 8001950:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001954:	f240 1204 	movw	r2, #260	@ 0x104
 8001958:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800195c:	6952      	ldr	r2, [r2, #20]
 800195e:	1112      	asrs	r2, r2, #4
 8001960:	801a      	strh	r2, [r3, #0]
		  break;
 8001962:	2306      	movs	r3, #6
 8001964:	e788      	b.n	8001878 <main+0x668>
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8001966:	f240 03a8 	movw	r3, #168	@ 0xa8
 800196a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	17cc      	asrs	r4, r1, #31
 8001974:	f022 4340 	bic.w	r3, r2, #3221225472	@ 0xc0000000
 8001978:	0f90      	lsrs	r0, r2, #30
 800197a:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 800197e:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 8001982:	4403      	add	r3, r0
 8001984:	eb03 7311 	add.w	r3, r3, r1, lsr #28
 8001988:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800198c:	fba7 c003 	umull	ip, r0, r7, r3
 8001990:	0840      	lsrs	r0, r0, #1
 8001992:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8001996:	1a1b      	subs	r3, r3, r0
 8001998:	f024 0407 	bic.w	r4, r4, #7
 800199c:	4423      	add	r3, r4
 800199e:	1ad2      	subs	r2, r2, r3
 80019a0:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80019a4:	f24e 338e 	movw	r3, #58254	@ 0xe38e
 80019a8:	f6c8 6338 	movt	r3, #36408	@ 0x8e38
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	fb07 3301 	mla	r3, r7, r1, r3
 80019b4:	fba2 2107 	umull	r2, r1, r2, r7
 80019b8:	4419      	add	r1, r3
 80019ba:	0fc8      	lsrs	r0, r1, #31
 80019bc:	1880      	adds	r0, r0, r2
 80019be:	f141 0100 	adc.w	r1, r1, #0
 80019c2:	0840      	lsrs	r0, r0, #1
 80019c4:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 80019c8:	1049      	asrs	r1, r1, #1
 80019ca:	f7fe fdaf 	bl	800052c <__aeabi_l2d>
 80019ce:	f001 ff2f 	bl	8003830 <sqrt>
 80019d2:	f240 049e 	movw	r4, #158	@ 0x9e
 80019d6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80019da:	f7ff f885 	bl	8000ae8 <__aeabi_d2uiz>
 80019de:	8020      	strh	r0, [r4, #0]
		  break;
 80019e0:	2307      	movs	r3, #7
 80019e2:	e749      	b.n	8001878 <main+0x668>
		  lcd_handle();
 80019e4:	f7ff fa72 	bl	8000ecc <lcd_handle>
		  mainCounter++;
 80019e8:	782b      	ldrb	r3, [r5, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2db      	uxtb	r3, r3
		  break;
 80019ee:	e743      	b.n	8001878 <main+0x668>
		  button_handle();
 80019f0:	f7ff fb19 	bl	8001026 <button_handle>
		  mainCounter++;
 80019f4:	782b      	ldrb	r3, [r5, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2db      	uxtb	r3, r3
		  break;
 80019fa:	e73d      	b.n	8001878 <main+0x668>
	  switch(mainCounter)
 80019fc:	4643      	mov	r3, r8
 80019fe:	e73b      	b.n	8001878 <main+0x668>

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b500      	push	{lr}
 8001a02:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a08:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	f002 0201 	and.w	r2, r2, #1
 8001a1a:	9200      	str	r2, [sp, #0]
 8001a1c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	4611      	mov	r1, r2
 8001a34:	2005      	movs	r0, #5
 8001a36:	f000 fac9 	bl	8001fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001a3a:	2005      	movs	r0, #5
 8001a3c:	f000 faff 	bl	800203e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a40:	2200      	movs	r2, #0
 8001a42:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001a46:	6853      	ldr	r3, [r2, #4]
 8001a48:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	b003      	add	sp, #12
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4

08001a58 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a58:	b500      	push	{lr}
 8001a5a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	9303      	str	r3, [sp, #12]
 8001a62:	9304      	str	r3, [sp, #16]
 8001a64:	9305      	str	r3, [sp, #20]
  if(hdac->Instance==DAC)
 8001a66:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 8001a6a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001a6e:	6802      	ldr	r2, [r0, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d002      	beq.n	8001a7a <HAL_DAC_MspInit+0x22>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001a74:	b007      	add	sp, #28
 8001a76:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001a82:	69da      	ldr	r2, [r3, #28]
 8001a84:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001a88:	61da      	str	r2, [r3, #28]
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	f042 0204 	orr.w	r2, r2, #4
 8001a9a:	619a      	str	r2, [r3, #24]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001aa6:	2330      	movs	r3, #48	@ 0x30
 8001aa8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	a902      	add	r1, sp, #8
 8001ab0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ab4:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001ab8:	f000 fb76 	bl	80021a8 <HAL_GPIO_Init>
}
 8001abc:	e7da      	b.n	8001a74 <HAL_DAC_MspInit+0x1c>

08001abe <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001abe:	b510      	push	{r4, lr}
 8001ac0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	9304      	str	r3, [sp, #16]
 8001aca:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001acc:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8001ad0:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001ad4:	6802      	ldr	r2, [r0, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_MspInit+0x20>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ada:	b006      	add	sp, #24
 8001adc:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8001ae2:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 8001ae6:	69a3      	ldr	r3, [r4, #24]
 8001ae8:	f043 0308 	orr.w	r3, r3, #8
 8001aec:	61a3      	str	r3, [r4, #24]
 8001aee:	69a3      	ldr	r3, [r4, #24]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001af8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001afc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afe:	2312      	movs	r3, #18
 8001b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	a902      	add	r1, sp, #8
 8001b08:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001b0c:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001b10:	f000 fb4a 	bl	80021a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b14:	2200      	movs	r2, #0
 8001b16:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001b1a:	6853      	ldr	r3, [r2, #4]
 8001b1c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b26:	69e3      	ldr	r3, [r4, #28]
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b2c:	61e3      	str	r3, [r4, #28]
 8001b2e:	69e3      	ldr	r3, [r4, #28]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	9b01      	ldr	r3, [sp, #4]
}
 8001b38:	e7cf      	b.n	8001ada <HAL_I2C_MspInit+0x1c>

08001b3a <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3a:	b500      	push	{lr}
 8001b3c:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b44:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d008      	beq.n	8001b5e <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001b4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b50:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d018      	beq.n	8001b8a <HAL_TIM_Base_MspInit+0x50>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b58:	b003      	add	sp, #12
 8001b5a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b62:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	f042 0202 	orr.w	r2, r2, #2
 8001b6c:	61da      	str	r2, [r3, #28]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	201d      	movs	r0, #29
 8001b7e:	f000 fa25 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b82:	201d      	movs	r0, #29
 8001b84:	f000 fa5b 	bl	800203e <HAL_NVIC_EnableIRQ>
 8001b88:	e7e6      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b8e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001b92:	69da      	ldr	r2, [r3, #28]
 8001b94:	f042 0220 	orr.w	r2, r2, #32
 8001b98:	61da      	str	r2, [r3, #28]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	2037      	movs	r0, #55	@ 0x37
 8001baa:	f000 fa0f 	bl	8001fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bae:	2037      	movs	r0, #55	@ 0x37
 8001bb0:	f000 fa45 	bl	800203e <HAL_NVIC_EnableIRQ>
}
 8001bb4:	e7d0      	b.n	8001b58 <HAL_TIM_Base_MspInit+0x1e>

08001bb6 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb6:	b510      	push	{r4, lr}
 8001bb8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8001bc4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001bc8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001bcc:	6802      	ldr	r2, [r0, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_UART_MspInit+0x20>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bda:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001bec:	9200      	str	r2, [sp, #0]
 8001bee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c02:	2340      	movs	r3, #64	@ 0x40
 8001c04:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8001c12:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8001c16:	a902      	add	r1, sp, #8
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f000 fac5 	bl	80021a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	a902      	add	r1, sp, #8
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 fabc 	bl	80021a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001c30:	2200      	movs	r2, #0
 8001c32:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001c36:	6853      	ldr	r3, [r2, #4]
 8001c38:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6053      	str	r3, [r2, #4]
}
 8001c42:	e7c6      	b.n	8001bd2 <HAL_UART_MspInit+0x1c>

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001c46:	f001 f882 	bl	8002d4e <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c4a:	e7fe      	b.n	8001c4a <NMI_Handler+0x6>

08001c4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <HardFault_Handler>

08001c4e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <MemManage_Handler>

08001c50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <BusFault_Handler>

08001c52 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <UsageFault_Handler>

08001c54 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	4770      	bx	lr

08001c58 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c58:	4770      	bx	lr

08001c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 f97c 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bd08      	pop	{r3, pc}

08001c62 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c62:	4770      	bx	lr

08001c64 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8001c66:	2004      	movs	r0, #4
 8001c68:	f000 fbf2 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 8001c6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c70:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001c74:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8001c76:	f240 211b 	movw	r1, #539	@ 0x21b
 8001c7a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001c7e:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8001c82:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8001c8c:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001c90:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8001c92:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8001c96:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8001c9a:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8001c9e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8001ca2:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8001ca6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8001caa:	700b      	strb	r3, [r1, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8001cac:	f240 2068 	movw	r0, #616	@ 0x268
 8001cb0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001cb4:	f001 f937 	bl	8002f26 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cbe:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cc2:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001cc6:	f000 fbb3 	bl	8002430 <HAL_GPIO_WritePin>
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cca:	bd08      	pop	{r3, pc}

08001ccc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ccc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t adcChannelCounter = 0;
	uint16_t dcOffset = 1985;

	adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter] - dcOffset)
 8001cce:	f240 11fc 	movw	r1, #508	@ 0x1fc
 8001cd2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001cd6:	f240 2e0c 	movw	lr, #524	@ 0x20c
 8001cda:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8001cde:	f9be 3000 	ldrsh.w	r3, [lr]
 8001ce2:	f2a3 73c1 	subw	r3, r3, #1985	@ 0x7c1
			* adcGain[adcChannelCounter]) >> 15);
 8001ce6:	f240 0084 	movw	r0, #132	@ 0x84
 8001cea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001cee:	f9b0 2000 	ldrsh.w	r2, [r0]
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	13db      	asrs	r3, r3, #15
	adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter] - dcOffset)
 8001cf8:	800b      	strh	r3, [r1, #0]
	adcChannelCounter++;

	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8001cfa:	4672      	mov	r2, lr
 8001cfc:	468c      	mov	ip, r1
 8001cfe:	f10e 0e0c 	add.w	lr, lr, #12
	{
		adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter]) * adcGain[adcChannelCounter]) >> 15);
 8001d02:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8001d06:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 8001d0a:	fb04 f303 	mul.w	r3, r4, r3
 8001d0e:	13db      	asrs	r3, r3, #15
 8001d10:	f821 3f02 	strh.w	r3, [r1, #2]!
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8001d14:	4572      	cmp	r2, lr
 8001d16:	d1f4      	bne.n	8001d02 <DMA1_Channel1_IRQHandler+0x36>
		adcChannelCounter++;
	}
	adcChannelCounter = 1;
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
	{
		adcMeanSum[adcChannelCounter - 1] = adcMeanSum[adcChannelCounter - 1] - adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo];
 8001d18:	f240 1300 	movw	r3, #256	@ 0x100
 8001d1c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d20:	781c      	ldrb	r4, [r3, #0]
 8001d22:	f240 1004 	movw	r0, #260	@ 0x104
 8001d26:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001d2a:	f240 1e1c 	movw	lr, #284	@ 0x11c
 8001d2e:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8001d32:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
 8001d36:	2300      	movs	r3, #0
 8001d38:	6802      	ldr	r2, [r0, #0]
 8001d3a:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
 8001d3e:	1a51      	subs	r1, r2, r1
		adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo] = adcBuffer[adcChannelCounter];
 8001d40:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
 8001d44:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
		adcMeanSum[adcChannelCounter - 1] = adcMeanSum[adcChannelCounter - 1] + adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo];
 8001d48:	440a      	add	r2, r1
 8001d4a:	f840 2b04 	str.w	r2, [r0], #4
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8001d4e:	3310      	adds	r3, #16
 8001d50:	2b60      	cmp	r3, #96	@ 0x60
 8001d52:	d1f1      	bne.n	8001d38 <DMA1_Channel1_IRQHandler+0x6c>
		adcChannelCounter++;
	}

	adcMeanBufferPo++;
 8001d54:	1c63      	adds	r3, r4, #1
 8001d56:	b2db      	uxtb	r3, r3
	if (adcMeanBufferPo >= ADC_MEAN_BUFFER_SIZE)
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	bf28      	it	cs
 8001d5c:	2300      	movcs	r3, #0
	adcMeanBufferPo++;
 8001d5e:	f240 1200 	movw	r2, #256	@ 0x100
 8001d62:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d66:	7013      	strb	r3, [r2, #0]
	{
		adcMeanBufferPo = 0;
	}

	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8001d68:	f240 03a0 	movw	r3, #160	@ 0xa0
 8001d6c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d70:	f893 c000 	ldrb.w	ip, [r3]
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8001d74:	f240 13fc 	movw	r3, #508	@ 0x1fc
 8001d78:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d80:	fb02 f202 	mul.w	r2, r2, r2
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8001d84:	f240 01a8 	movw	r1, #168	@ 0xa8
 8001d88:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8001d8c:	f240 03b0 	movw	r3, #176	@ 0xb0
 8001d90:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d94:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
 8001d98:	680b      	ldr	r3, [r1, #0]
 8001d9a:	6848      	ldr	r0, [r1, #4]
 8001d9c:	1b1b      	subs	r3, r3, r4
 8001d9e:	eb60 70e4 	sbc.w	r0, r0, r4, asr #31
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	eb40 70e2 	adc.w	r0, r0, r2, asr #31
	adcRmsBufferPo++;
 8001da8:	f10c 0101 	add.w	r1, ip, #1
 8001dac:	b2c9      	uxtb	r1, r1
	if (adcRmsBufferPo >= ADC_RMS_BUFFER_SIZE)
 8001dae:	2914      	cmp	r1, #20
 8001db0:	bf28      	it	cs
 8001db2:	2100      	movcs	r1, #0
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8001db4:	f240 04b0 	movw	r4, #176	@ 0xb0
 8001db8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8001dbc:	f844 202c 	str.w	r2, [r4, ip, lsl #2]
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8001dc0:	f240 02a8 	movw	r2, #168	@ 0xa8
 8001dc4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	6050      	str	r0, [r2, #4]
	adcRmsBufferPo++;
 8001dcc:	f240 03a0 	movw	r3, #160	@ 0xa0
 8001dd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001dd4:	7019      	strb	r1, [r3, #0]
		adcRmsBufferPo = 0;
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001de4:	bd10      	pop	{r4, pc}

08001de6 <ADC1_IRQHandler>:

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001de6:	4770      	bx	lr

08001de8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dea:	f240 20b0 	movw	r0, #688	@ 0x2b0
 8001dee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001df2:	f001 f8db 	bl	8002fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df6:	bd08      	pop	{r3, pc}

08001df8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8001dfa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dfe:	f000 fb27 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8001e02:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e06:	f000 fb23 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e0a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e0e:	f000 fb1f 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001e12:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e16:	f000 fb1b 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001e1a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e1e:	f000 fb17 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    uint32_t idr = GPIOB->IDR;
 8001e22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e26:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001e2a:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8001e2c:	f240 211b 	movw	r1, #539	@ 0x21b
 8001e30:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001e34:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8001e38:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8001e42:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8001e46:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8001e48:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8001e4c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8001e50:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8001e54:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8001e58:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8001e5c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8001e60:	700b      	strb	r3, [r1, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8001e62:	f240 2068 	movw	r0, #616	@ 0x268
 8001e66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e6a:	f001 f85c 	bl	8002f26 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e74:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e78:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001e7c:	f000 fad8 	bl	8002430 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e80:	bd08      	pop	{r3, pc}

08001e82 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e82:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e8a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e8e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001e92:	f000 facd 	bl	8002430 <HAL_GPIO_WritePin>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e96:	f240 2068 	movw	r0, #616	@ 0x268
 8001e9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8001e9e:	f001 f885 	bl	8002fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ea2:	bd08      	pop	{r3, pc}

08001ea4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7ff fffc 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480b      	ldr	r0, [pc, #44]	@ (8001edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eae:	490c      	ldr	r1, [pc, #48]	@ (8001ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ec4:	4c09      	ldr	r4, [pc, #36]	@ (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f001 fc89 	bl	80037e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7ff f99b 	bl	8001210 <main>
  bx lr
 8001eda:	4770      	bx	lr
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ee4:	08003bc0 	.word	0x08003bc0
  ldr r2, =_sbss
 8001ee8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001eec:	2000049c 	.word	0x2000049c

08001ef0 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <CEC_IRQHandler>

08001ef2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef6:	f240 0208 	movw	r2, #8
 8001efa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001efe:	f240 030c 	movw	r3, #12
 8001f02:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f06:	7819      	ldrb	r1, [r3, #0]
 8001f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f10:	6810      	ldr	r0, [r2, #0]
 8001f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f16:	f000 f8a0 	bl	800205a <HAL_SYSTICK_Config>
 8001f1a:	b980      	cbnz	r0, 8001f3e <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1c:	2c0f      	cmp	r4, #15
 8001f1e:	d901      	bls.n	8001f24 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
 8001f22:	e00d      	b.n	8001f40 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	4621      	mov	r1, r4
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f000 f84e 	bl	8001fcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f30:	f240 0310 	movw	r3, #16
 8001f34:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f38:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
}
 8001f40:	bd10      	pop	{r4, pc}

08001f42 <HAL_Init>:
{
 8001f42:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f82e 	bl	8001fa6 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	200f      	movs	r0, #15
 8001f4c:	f7ff ffd1 	bl	8001ef2 <HAL_InitTick>
  HAL_MspInit();
 8001f50:	f7ff fd56 	bl	8001a00 <HAL_MspInit>
}
 8001f54:	2000      	movs	r0, #0
 8001f56:	bd08      	pop	{r3, pc}

08001f58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f58:	f240 3360 	movw	r3, #864	@ 0x360
 8001f5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	f240 020c 	movw	r2, #12
 8001f66:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	440a      	add	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	4770      	bx	lr

08001f72 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f72:	f240 3360 	movw	r3, #864	@ 0x360
 8001f76:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f7a:	6818      	ldr	r0, [r3, #0]
}
 8001f7c:	4770      	bx	lr

08001f7e <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7e:	b538      	push	{r3, r4, r5, lr}
 8001f80:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f82:	f7ff fff6 	bl	8001f72 <HAL_GetTick>
 8001f86:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	f240 030c 	movw	r3, #12
 8001f92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9a:	f7ff ffea 	bl	8001f72 <HAL_GetTick>
 8001f9e:	1b40      	subs	r0, r0, r5
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	d3fa      	bcc.n	8001f9a <HAL_Delay+0x1c>
  {
  }
}
 8001fa4:	bd38      	pop	{r3, r4, r5, pc}

08001fa6 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa6:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8001faa:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8001fae:	68d1      	ldr	r1, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb0:	0203      	lsls	r3, r0, #8
 8001fb2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb6:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8001fba:	0409      	lsls	r1, r1, #16
 8001fbc:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbe:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001fc8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fca:	4770      	bx	lr

08001fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fcc:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fce:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8001fd2:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fdc:	f1c3 0c07 	rsb	ip, r3, #7
 8001fe0:	f1bc 0f04 	cmp.w	ip, #4
 8001fe4:	bf28      	it	cs
 8001fe6:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fea:	f103 0e04 	add.w	lr, r3, #4
 8001fee:	f1be 0f06 	cmp.w	lr, #6
 8001ff2:	bf8c      	ite	hi
 8001ff4:	3b03      	subhi	r3, #3
 8001ff6:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 3eff 	mov.w	lr, #4294967295
 8001ffc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002000:	ea21 010c 	bic.w	r1, r1, ip
 8002004:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002006:	fa0e fe03 	lsl.w	lr, lr, r3
 800200a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200e:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002010:	2800      	cmp	r0, #0
 8002012:	db09      	blt.n	8002028 <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	0109      	lsls	r1, r1, #4
 8002016:	b2c9      	uxtb	r1, r1
 8002018:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800201c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002020:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002024:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	f000 000f 	and.w	r0, r0, #15
 800202c:	0109      	lsls	r1, r1, #4
 800202e:	b2c9      	uxtb	r1, r1
 8002030:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 8002034:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8002038:	4403      	add	r3, r0
 800203a:	7619      	strb	r1, [r3, #24]
 800203c:	e7f2      	b.n	8002024 <HAL_NVIC_SetPriority+0x58>

0800203e <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800203e:	2800      	cmp	r0, #0
 8002040:	db0a      	blt.n	8002058 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	0941      	lsrs	r1, r0, #5
 8002044:	f000 001f 	and.w	r0, r0, #31
 8002048:	2301      	movs	r3, #1
 800204a:	4083      	lsls	r3, r0
 800204c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002050:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8002054:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002058:	4770      	bx	lr

0800205a <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205a:	3801      	subs	r0, #1
 800205c:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002060:	d20e      	bcs.n	8002080 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002066:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 800206c:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8002070:	21f0      	movs	r1, #240	@ 0xf0
 8002072:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002076:	2000      	movs	r0, #0
 8002078:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	2207      	movs	r2, #7
 800207c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002080:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002082:	4770      	bx	lr

08002084 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002084:	b170      	cbz	r0, 80020a4 <HAL_DAC_Init+0x20>
{
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800208a:	7903      	ldrb	r3, [r0, #4]
 800208c:	b133      	cbz	r3, 800209c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002092:	2000      	movs	r0, #0
 8002094:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002096:	2301      	movs	r3, #1
 8002098:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800209a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800209c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800209e:	f7ff fcdb 	bl	8001a58 <HAL_DAC_MspInit>
 80020a2:	e7f4      	b.n	800208e <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
}
 80020a6:	4770      	bx	lr

080020a8 <HAL_DAC_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020a8:	b380      	cbz	r0, 800210c <HAL_DAC_Start+0x64>
 80020aa:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020ac:	7942      	ldrb	r2, [r0, #5]
 80020ae:	2a01      	cmp	r2, #1
 80020b0:	d02e      	beq.n	8002110 <HAL_DAC_Start+0x68>
{
 80020b2:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 80020b4:	2201      	movs	r2, #1
 80020b6:	7142      	strb	r2, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020b8:	2002      	movs	r0, #2
 80020ba:	7118      	strb	r0, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	6804      	ldr	r4, [r0, #0]
 80020c0:	f001 0c10 	and.w	ip, r1, #16
 80020c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80020c8:	4322      	orrs	r2, r4
 80020ca:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 80020cc:	b981      	cbnz	r1, 80020f0 <HAL_DAC_Start+0x48>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	680a      	ldr	r2, [r1, #0]
 80020d2:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80020d6:	2a3c      	cmp	r2, #60	@ 0x3c
 80020d8:	d005      	beq.n	80020e6 <HAL_DAC_Start+0x3e>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020da:	2201      	movs	r2, #1
 80020dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020de:	2000      	movs	r0, #0
 80020e0:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 80020e2:	bc10      	pop	{r4}
 80020e4:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020e6:	684a      	ldr	r2, [r1, #4]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	604a      	str	r2, [r1, #4]
 80020ee:	e7f4      	b.n	80020da <HAL_DAC_Start+0x32>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	6801      	ldr	r1, [r0, #0]
 80020f4:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 80020f8:	223c      	movs	r2, #60	@ 0x3c
 80020fa:	fa02 f20c 	lsl.w	r2, r2, ip
 80020fe:	4291      	cmp	r1, r2
 8002100:	d1eb      	bne.n	80020da <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002102:	6842      	ldr	r2, [r0, #4]
 8002104:	f042 0202 	orr.w	r2, r2, #2
 8002108:	6042      	str	r2, [r0, #4]
 800210a:	e7e6      	b.n	80020da <HAL_DAC_Start+0x32>
    return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
 800210e:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8002110:	2002      	movs	r0, #2
}
 8002112:	4770      	bx	lr

08002114 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002114:	b410      	push	{r4}
 8002116:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002118:	2400      	movs	r4, #0
 800211a:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800211c:	b188      	cbz	r0, 8002142 <HAL_DAC_SetValue+0x2e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800211e:	6800      	ldr	r0, [r0, #0]
 8002120:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8002122:	b949      	cbnz	r1, 8002138 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002124:	9901      	ldr	r1, [sp, #4]
 8002126:	3108      	adds	r1, #8
 8002128:	440a      	add	r2, r1
 800212a:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800212c:	9a01      	ldr	r2, [sp, #4]
 800212e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002130:	2000      	movs	r0, #0
}
 8002132:	b003      	add	sp, #12
 8002134:	bc10      	pop	{r4}
 8002136:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002138:	9901      	ldr	r1, [sp, #4]
 800213a:	3114      	adds	r1, #20
 800213c:	440a      	add	r2, r1
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	e7f4      	b.n	800212c <HAL_DAC_SetValue+0x18>
    return HAL_ERROR;
 8002142:	2001      	movs	r0, #1
 8002144:	e7f5      	b.n	8002132 <HAL_DAC_SetValue+0x1e>

08002146 <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002146:	b348      	cbz	r0, 800219c <HAL_DAC_ConfigChannel+0x56>
 8002148:	4684      	mov	ip, r0
 800214a:	b349      	cbz	r1, 80021a0 <HAL_DAC_ConfigChannel+0x5a>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800214c:	7943      	ldrb	r3, [r0, #5]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d028      	beq.n	80021a4 <HAL_DAC_ConfigChannel+0x5e>
{
 8002152:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 8002154:	f04f 0e01 	mov.w	lr, #1
 8002158:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800215c:	2302      	movs	r3, #2
 800215e:	7103      	strb	r3, [r0, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002160:	6804      	ldr	r4, [r0, #0]
 8002162:	6820      	ldr	r0, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002164:	f002 0210 	and.w	r2, r2, #16
 8002168:	f640 73fe 	movw	r3, #4094	@ 0xffe
 800216c:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800216e:	ea20 0003 	bic.w	r0, r0, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002172:	680b      	ldr	r3, [r1, #0]
 8002174:	6849      	ldr	r1, [r1, #4]
 8002176:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002178:	4093      	lsls	r3, r2
 800217a:	4303      	orrs	r3, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800217c:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800217e:	f8dc 0000 	ldr.w	r0, [ip]
 8002182:	6803      	ldr	r3, [r0, #0]
 8002184:	21c0      	movs	r1, #192	@ 0xc0
 8002186:	fa01 f202 	lsl.w	r2, r1, r2
 800218a:	ea23 0302 	bic.w	r3, r3, r2
 800218e:	6003      	str	r3, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002190:	f88c e004 	strb.w	lr, [ip, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002194:	2000      	movs	r0, #0
 8002196:	f88c 0005 	strb.w	r0, [ip, #5]

  /* Return function status */
  return status;
}
 800219a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800219c:	2001      	movs	r0, #1
 800219e:	4770      	bx	lr
 80021a0:	2001      	movs	r0, #1
 80021a2:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80021a4:	2002      	movs	r0, #2
}
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ae:	f8d1 9000 	ldr.w	r9, [r1]
 80021b2:	f1b9 0f00 	cmp.w	r9, #0
 80021b6:	f000 8137 	beq.w	8002428 <HAL_GPIO_Init+0x280>
 80021ba:	4606      	mov	r6, r0
 80021bc:	2200      	movs	r2, #0
  uint32_t config = 0x00u;
 80021be:	4617      	mov	r7, r2
  uint32_t position = 0x00u;
 80021c0:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c2:	f04f 0c01 	mov.w	ip, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c6:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 80021ca:	f2c4 0e02 	movt	lr, #16386	@ 0x4002
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ce:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80021d2:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80021d6:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 80021da:	f2c4 0501 	movt	r5, #16385	@ 0x4001
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021de:	3004      	adds	r0, #4
 80021e0:	9001      	str	r0, [sp, #4]
 80021e2:	46a8      	mov	r8, r5
 80021e4:	464d      	mov	r5, r9
 80021e6:	e0d1      	b.n	800238c <HAL_GPIO_Init+0x1e4>
      switch (GPIO_Init->Mode)
 80021e8:	f04f 0a00 	mov.w	sl, #0
 80021ec:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 80021f0:	4555      	cmp	r5, sl
 80021f2:	d024      	beq.n	800223e <HAL_GPIO_Init+0x96>
 80021f4:	f04f 0a00 	mov.w	sl, #0
 80021f8:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 80021fc:	4555      	cmp	r5, sl
 80021fe:	d812      	bhi.n	8002226 <HAL_GPIO_Init+0x7e>
 8002200:	f04f 0a00 	mov.w	sl, #0
 8002204:	f2c1 0a12 	movt	sl, #4114	@ 0x1012
 8002208:	4555      	cmp	r5, sl
 800220a:	d018      	beq.n	800223e <HAL_GPIO_Init+0x96>
 800220c:	f04f 0a00 	mov.w	sl, #0
 8002210:	f2c1 0a21 	movt	sl, #4129	@ 0x1021
 8002214:	4555      	cmp	r5, sl
 8002216:	d012      	beq.n	800223e <HAL_GPIO_Init+0x96>
 8002218:	f04f 0a00 	mov.w	sl, #0
 800221c:	f2c1 0a11 	movt	sl, #4113	@ 0x1011
 8002220:	4555      	cmp	r5, sl
 8002222:	d119      	bne.n	8002258 <HAL_GPIO_Init+0xb0>
 8002224:	e00b      	b.n	800223e <HAL_GPIO_Init+0x96>
 8002226:	f04f 0a00 	mov.w	sl, #0
 800222a:	f2c1 0a31 	movt	sl, #4145	@ 0x1031
 800222e:	4555      	cmp	r5, sl
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x96>
 8002232:	f04f 0a00 	mov.w	sl, #0
 8002236:	f2c1 0a32 	movt	sl, #4146	@ 0x1032
 800223a:	4555      	cmp	r5, sl
 800223c:	d10c      	bne.n	8002258 <HAL_GPIO_Init+0xb0>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800223e:	688d      	ldr	r5, [r1, #8]
 8002240:	2d00      	cmp	r5, #0
 8002242:	f000 80e6 	beq.w	8002412 <HAL_GPIO_Init+0x26a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002246:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8002248:	bf0c      	ite	eq
 800224a:	f8c6 9010 	streq.w	r9, [r6, #16]
            GPIOx->BRR = ioposition;
 800224e:	f8c6 9014 	strne.w	r9, [r6, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002252:	2708      	movs	r7, #8
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002256:	68cf      	ldr	r7, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	28ff      	cmp	r0, #255	@ 0xff
 800225a:	bf99      	ittee	ls
 800225c:	46b1      	movls	r9, r6
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800225e:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002260:	f8dd 9004 	ldrhi.w	r9, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002264:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002268:	f8d9 5000 	ldr.w	r5, [r9]
 800226c:	f04f 0b0f 	mov.w	fp, #15
 8002270:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002274:	ea25 050b 	bic.w	r5, r5, fp
 8002278:	fa07 fa0a 	lsl.w	sl, r7, sl
 800227c:	ea45 050a 	orr.w	r5, r5, sl
 8002280:	f8c9 5000 	str.w	r5, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002284:	684d      	ldr	r5, [r1, #4]
 8002286:	f015 5f80 	tst.w	r5, #268435456	@ 0x10000000
 800228a:	d079      	beq.n	8002380 <HAL_GPIO_Init+0x1d8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800228c:	f8de 5018 	ldr.w	r5, [lr, #24]
 8002290:	f045 0501 	orr.w	r5, r5, #1
 8002294:	f8ce 5018 	str.w	r5, [lr, #24]
 8002298:	f8de 5018 	ldr.w	r5, [lr, #24]
 800229c:	f005 0501 	and.w	r5, r5, #1
 80022a0:	9503      	str	r5, [sp, #12]
 80022a2:	9d03      	ldr	r5, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 80022a4:	f023 0503 	bic.w	r5, r3, #3
 80022a8:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 80022ac:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80022b0:	f8d5 a008 	ldr.w	sl, [r5, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022b4:	f003 0b03 	and.w	fp, r3, #3
 80022b8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80022bc:	f04f 090f 	mov.w	r9, #15
 80022c0:	fa09 f90b 	lsl.w	r9, r9, fp
 80022c4:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022c8:	42a6      	cmp	r6, r4
 80022ca:	f000 80a4 	beq.w	8002416 <HAL_GPIO_Init+0x26e>
 80022ce:	4546      	cmp	r6, r8
 80022d0:	f000 80a4 	beq.w	800241c <HAL_GPIO_Init+0x274>
 80022d4:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 80022d8:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 80022dc:	454e      	cmp	r6, r9
 80022de:	f000 80a0 	beq.w	8002422 <HAL_GPIO_Init+0x27a>
 80022e2:	f44f 59a0 	mov.w	r9, #5120	@ 0x1400
 80022e6:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 80022ea:	454e      	cmp	r6, r9
 80022ec:	bf14      	ite	ne
 80022ee:	f04f 0904 	movne.w	r9, #4
 80022f2:	f04f 0903 	moveq.w	r9, #3
 80022f6:	fa09 f90b 	lsl.w	r9, r9, fp
 80022fa:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 80022fe:	f8c5 9008 	str.w	r9, [r5, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002302:	684d      	ldr	r5, [r1, #4]
 8002304:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002308:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800230c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8002310:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8002314:	bf14      	ite	ne
 8002316:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800231a:	ea29 0900 	biceq.w	r9, r9, r0
 800231e:	f8c5 9008 	str.w	r9, [r5, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002322:	684d      	ldr	r5, [r1, #4]
 8002324:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002328:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800232c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8002330:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8002334:	bf14      	ite	ne
 8002336:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800233a:	ea29 0900 	biceq.w	r9, r9, r0
 800233e:	f8c5 900c 	str.w	r9, [r5, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002342:	684d      	ldr	r5, [r1, #4]
 8002344:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002348:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800234c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8002350:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8002354:	bf14      	ite	ne
 8002356:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235a:	ea29 0900 	biceq.w	r9, r9, r0
 800235e:	f8c5 9004 	str.w	r9, [r5, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002362:	684d      	ldr	r5, [r1, #4]
 8002364:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002368:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800236c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8002370:	f8d5 9000 	ldr.w	r9, [r5]
 8002374:	bf14      	ite	ne
 8002376:	ea49 0000 	orrne.w	r0, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237a:	ea29 0000 	biceq.w	r0, r9, r0
 800237e:	6028      	str	r0, [r5, #0]
        }
      }
    }

	position++;
 8002380:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002382:	680d      	ldr	r5, [r1, #0]
 8002384:	3204      	adds	r2, #4
 8002386:	fa35 f003 	lsrs.w	r0, r5, r3
 800238a:	d04d      	beq.n	8002428 <HAL_GPIO_Init+0x280>
    ioposition = (0x01uL << position);
 800238c:	fa0c f903 	lsl.w	r9, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002390:	ea09 0005 	and.w	r0, r9, r5
    if (iocurrent == ioposition)
 8002394:	ea39 0505 	bics.w	r5, r9, r5
 8002398:	d1f2      	bne.n	8002380 <HAL_GPIO_Init+0x1d8>
      switch (GPIO_Init->Mode)
 800239a:	684d      	ldr	r5, [r1, #4]
 800239c:	2d12      	cmp	r5, #18
 800239e:	f63f af23 	bhi.w	80021e8 <HAL_GPIO_Init+0x40>
 80023a2:	2d12      	cmp	r5, #18
 80023a4:	f63f af58 	bhi.w	8002258 <HAL_GPIO_Init+0xb0>
 80023a8:	f20f 0a04 	addw	sl, pc, #4
 80023ac:	f85a f025 	ldr.w	pc, [sl, r5, lsl #2]
 80023b0:	0800223f 	.word	0x0800223f
 80023b4:	08002257 	.word	0x08002257
 80023b8:	08002403 	.word	0x08002403
 80023bc:	0800240f 	.word	0x0800240f
 80023c0:	08002259 	.word	0x08002259
 80023c4:	08002259 	.word	0x08002259
 80023c8:	08002259 	.word	0x08002259
 80023cc:	08002259 	.word	0x08002259
 80023d0:	08002259 	.word	0x08002259
 80023d4:	08002259 	.word	0x08002259
 80023d8:	08002259 	.word	0x08002259
 80023dc:	08002259 	.word	0x08002259
 80023e0:	08002259 	.word	0x08002259
 80023e4:	08002259 	.word	0x08002259
 80023e8:	08002259 	.word	0x08002259
 80023ec:	08002259 	.word	0x08002259
 80023f0:	08002259 	.word	0x08002259
 80023f4:	080023fd 	.word	0x080023fd
 80023f8:	08002409 	.word	0x08002409
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023fc:	68cf      	ldr	r7, [r1, #12]
 80023fe:	3704      	adds	r7, #4
          break;
 8002400:	e72a      	b.n	8002258 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002402:	68cf      	ldr	r7, [r1, #12]
 8002404:	3708      	adds	r7, #8
          break;
 8002406:	e727      	b.n	8002258 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002408:	68cf      	ldr	r7, [r1, #12]
 800240a:	370c      	adds	r7, #12
          break;
 800240c:	e724      	b.n	8002258 <HAL_GPIO_Init+0xb0>
      switch (GPIO_Init->Mode)
 800240e:	2700      	movs	r7, #0
 8002410:	e722      	b.n	8002258 <HAL_GPIO_Init+0xb0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002412:	2704      	movs	r7, #4
 8002414:	e720      	b.n	8002258 <HAL_GPIO_Init+0xb0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002416:	f04f 0900 	mov.w	r9, #0
 800241a:	e76c      	b.n	80022f6 <HAL_GPIO_Init+0x14e>
 800241c:	f04f 0901 	mov.w	r9, #1
 8002420:	e769      	b.n	80022f6 <HAL_GPIO_Init+0x14e>
 8002422:	f04f 0902 	mov.w	r9, #2
 8002426:	e766      	b.n	80022f6 <HAL_GPIO_Init+0x14e>
  }
}
 8002428:	b005      	add	sp, #20
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800242e:	bf00      	nop

08002430 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002430:	b10a      	cbz	r2, 8002436 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	6101      	str	r1, [r0, #16]
 8002434:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002436:	0409      	lsls	r1, r1, #16
 8002438:	6101      	str	r1, [r0, #16]
  }
}
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800243c:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800243e:	ea01 0203 	and.w	r2, r1, r3
 8002442:	ea21 0103 	bic.w	r1, r1, r3
 8002446:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800244a:	6101      	str	r1, [r0, #16]
}
 800244c:	4770      	bx	lr

0800244e <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800244e:	4770      	bx	lr

08002450 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002450:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002456:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4203      	tst	r3, r0
 800245e:	d100      	bne.n	8002462 <HAL_GPIO_EXTI_IRQHandler+0x12>
}
 8002460:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002466:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800246a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800246c:	f7ff ffef 	bl	800244e <HAL_GPIO_EXTI_Callback>
}
 8002470:	e7f6      	b.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x10>

08002472 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002472:	2800      	cmp	r0, #0
 8002474:	f000 80c7 	beq.w	8002606 <HAL_I2C_Init+0x194>
{
 8002478:	b538      	push	{r3, r4, r5, lr}
 800247a:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8084 	beq.w	800258e <HAL_I2C_Init+0x11c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002486:	2324      	movs	r3, #36	@ 0x24
 8002488:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002496:	6822      	ldr	r2, [r4, #0]
 8002498:	6813      	ldr	r3, [r2, #0]
 800249a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800249e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80024a8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024aa:	f000 fc29 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ae:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 80024b2:	f2c0 0301 	movt	r3, #1
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d86d      	bhi.n	8002598 <HAL_I2C_Init+0x126>
 80024bc:	f248 437f 	movw	r3, #33919	@ 0x847f
 80024c0:	f2c0 031e 	movt	r3, #30
 80024c4:	4298      	cmp	r0, r3
 80024c6:	f240 80a0 	bls.w	800260a <HAL_I2C_Init+0x198>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ca:	f64d 6183 	movw	r1, #56963	@ 0xde83
 80024ce:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 80024d2:	fba1 3100 	umull	r3, r1, r1, r0
 80024d6:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d8:	6825      	ldr	r5, [r4, #0]
 80024da:	686a      	ldr	r2, [r5, #4]
 80024dc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80024e0:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80024e4:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	6821      	ldr	r1, [r4, #0]
 80024e8:	6a0a      	ldr	r2, [r1, #32]
 80024ea:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80024ee:	f248 65a0 	movw	r5, #34464	@ 0x86a0
 80024f2:	f2c0 0501 	movt	r5, #1
 80024f6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80024fa:	45ac      	cmp	ip, r5
 80024fc:	d854      	bhi.n	80025a8 <HAL_I2C_Init+0x136>
 80024fe:	3301      	adds	r3, #1
 8002500:	4313      	orrs	r3, r2
 8002502:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	69ca      	ldr	r2, [r1, #28]
 8002508:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800250c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002510:	6865      	ldr	r5, [r4, #4]
 8002512:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8002516:	f2c0 0301 	movt	r3, #1
 800251a:	429d      	cmp	r5, r3
 800251c:	d851      	bhi.n	80025c2 <HAL_I2C_Init+0x150>
 800251e:	1e43      	subs	r3, r0, #1
 8002520:	006d      	lsls	r5, r5, #1
 8002522:	fbb3 f3f5 	udiv	r3, r3, r5
 8002526:	3301      	adds	r3, #1
 8002528:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800252c:	4203      	tst	r3, r0
 800252e:	d064      	beq.n	80025fa <HAL_I2C_Init+0x188>
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	431a      	orrs	r2, r3
 8002536:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	6821      	ldr	r1, [r4, #0]
 800253a:	680a      	ldr	r2, [r1, #0]
 800253c:	69e3      	ldr	r3, [r4, #28]
 800253e:	6a20      	ldr	r0, [r4, #32]
 8002540:	4303      	orrs	r3, r0
 8002542:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800254a:	6821      	ldr	r1, [r4, #0]
 800254c:	688a      	ldr	r2, [r1, #8]
 800254e:	6923      	ldr	r3, [r4, #16]
 8002550:	68e0      	ldr	r0, [r4, #12]
 8002552:	4303      	orrs	r3, r0
 8002554:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 8002558:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002560:	6821      	ldr	r1, [r4, #0]
 8002562:	68ca      	ldr	r2, [r1, #12]
 8002564:	6963      	ldr	r3, [r4, #20]
 8002566:	69a0      	ldr	r0, [r4, #24]
 8002568:	4303      	orrs	r3, r0
 800256a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	6813      	ldr	r3, [r2, #0]
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	2000      	movs	r0, #0
 800257e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002580:	2320      	movs	r3, #32
 8002582:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002586:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 800258c:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002592:	f7ff fa94 	bl	8001abe <HAL_I2C_MspInit>
 8002596:	e776      	b.n	8002486 <HAL_I2C_Init+0x14>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002598:	f640 03ff 	movw	r3, #2303	@ 0x8ff
 800259c:	f2c0 033d 	movt	r3, #61	@ 0x3d
 80025a0:	4298      	cmp	r0, r3
 80025a2:	d892      	bhi.n	80024ca <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
 80025a6:	e7f1      	b.n	800258c <HAL_I2C_Init+0x11a>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025a8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80025ac:	fb05 f303 	mul.w	r3, r5, r3
 80025b0:	f644 55d3 	movw	r5, #19923	@ 0x4dd3
 80025b4:	f2c1 0562 	movt	r5, #4194	@ 0x1062
 80025b8:	fba5 5303 	umull	r5, r3, r5, r3
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	3301      	adds	r3, #1
 80025c0:	e79e      	b.n	8002500 <HAL_I2C_Init+0x8e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	b95b      	cbnz	r3, 80025de <HAL_I2C_Init+0x16c>
 80025c6:	1e43      	subs	r3, r0, #1
 80025c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025cc:	fbb3 f3f5 	udiv	r3, r3, r5
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	b193      	cbz	r3, 80025fe <HAL_I2C_Init+0x18c>
 80025d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025dc:	e7aa      	b.n	8002534 <HAL_I2C_Init+0xc2>
 80025de:	1e43      	subs	r3, r0, #1
 80025e0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025e8:	fbb3 f3f5 	udiv	r3, r3, r5
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	b133      	cbz	r3, 8002602 <HAL_I2C_Init+0x190>
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f8:	e79c      	b.n	8002534 <HAL_I2C_Init+0xc2>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e79a      	b.n	8002534 <HAL_I2C_Init+0xc2>
 80025fe:	2301      	movs	r3, #1
 8002600:	e798      	b.n	8002534 <HAL_I2C_Init+0xc2>
 8002602:	2301      	movs	r3, #1
 8002604:	e796      	b.n	8002534 <HAL_I2C_Init+0xc2>
    return HAL_ERROR;
 8002606:	2001      	movs	r0, #1
}
 8002608:	4770      	bx	lr
    return HAL_ERROR;
 800260a:	2001      	movs	r0, #1
 800260c:	e7be      	b.n	800258c <HAL_I2C_Init+0x11a>

0800260e <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260e:	2800      	cmp	r0, #0
 8002610:	f000 827a 	beq.w	8002b08 <HAL_RCC_OscConfig+0x4fa>
{
 8002614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	f013 0f01 	tst.w	r3, #1
 8002622:	d038      	beq.n	8002696 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002628:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d023      	beq.n	800267e <HAL_RCC_OscConfig+0x70>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d012      	beq.n	800266e <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264e:	d054      	beq.n	80026fa <HAL_RCC_OscConfig+0xec>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d16e      	bne.n	8002732 <HAL_RCC_OscConfig+0x124>
 8002654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002658:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e04d      	b.n	800270a <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800266e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002672:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800267c:	d0e4      	beq.n	8002648 <HAL_RCC_OscConfig+0x3a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002682:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800268c:	d003      	beq.n	8002696 <HAL_RCC_OscConfig+0x88>
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 823b 	beq.w	8002b0c <HAL_RCC_OscConfig+0x4fe>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	f013 0f02 	tst.w	r3, #2
 800269c:	f000 8097 	beq.w	80027ce <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f013 0f0c 	tst.w	r3, #12
 80026ae:	d077      	beq.n	80027a0 <HAL_RCC_OscConfig+0x192>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026b4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d066      	beq.n	8002790 <HAL_RCC_OscConfig+0x182>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80ae 	beq.w	8002826 <HAL_RCC_OscConfig+0x218>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fc4d 	bl	8001f72 <HAL_GetTick>
 80026d8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80026de:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80026e2:	6833      	ldr	r3, [r6, #0]
 80026e4:	f013 0f02 	tst.w	r3, #2
 80026e8:	f040 8091 	bne.w	800280e <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7ff fc41 	bl	8001f72 <HAL_GetTick>
 80026f0:	1b40      	subs	r0, r0, r5
 80026f2:	2802      	cmp	r0, #2
 80026f4:	d9f5      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80026f6:	2003      	movs	r0, #3
 80026f8:	e20d      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002708:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270a:	6863      	ldr	r3, [r4, #4]
 800270c:	b373      	cbz	r3, 800276c <HAL_RCC_OscConfig+0x15e>
        tickstart = HAL_GetTick();
 800270e:	f7ff fc30 	bl	8001f72 <HAL_GetTick>
 8002712:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002714:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002718:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800271c:	6833      	ldr	r3, [r6, #0]
 800271e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002722:	d1b8      	bne.n	8002696 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fc25 	bl	8001f72 <HAL_GetTick>
 8002728:	1b40      	subs	r0, r0, r5
 800272a:	2864      	cmp	r0, #100	@ 0x64
 800272c:	d9f6      	bls.n	800271c <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e1f1      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002736:	d00c      	beq.n	8002752 <HAL_RCC_OscConfig+0x144>
 8002738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e7db      	b.n	800270a <HAL_RCC_OscConfig+0xfc>
 8002752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002756:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e7ce      	b.n	800270a <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 800276c:	f7ff fc01 	bl	8001f72 <HAL_GetTick>
 8002770:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002776:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800277a:	6833      	ldr	r3, [r6, #0]
 800277c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002780:	d089      	beq.n	8002696 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002782:	f7ff fbf6 	bl	8001f72 <HAL_GetTick>
 8002786:	1b40      	subs	r0, r0, r5
 8002788:	2864      	cmp	r0, #100	@ 0x64
 800278a:	d9f6      	bls.n	800277a <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 800278c:	2003      	movs	r0, #3
 800278e:	e1c2      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002794:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800279e:	d190      	bne.n	80026c2 <HAL_RCC_OscConfig+0xb4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f013 0f02 	tst.w	r3, #2
 80027ae:	d003      	beq.n	80027b8 <HAL_RCC_OscConfig+0x1aa>
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	f040 81ac 	bne.w	8002b10 <HAL_RCC_OscConfig+0x502>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027bc:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	6961      	ldr	r1, [r4, #20]
 80027c4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80027c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027cc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	f013 0f08 	tst.w	r3, #8
 80027d4:	d051      	beq.n	800287a <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d6:	69a3      	ldr	r3, [r4, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8083 	beq.w	80028e4 <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80027e4:	2201      	movs	r2, #1
 80027e6:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ea:	f7ff fbc2 	bl	8001f72 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80027f4:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80027f8:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80027fa:	f013 0f02 	tst.w	r3, #2
 80027fe:	d129      	bne.n	8002854 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fbb7 	bl	8001f72 <HAL_GetTick>
 8002804:	1b40      	subs	r0, r0, r5
 8002806:	2802      	cmp	r0, #2
 8002808:	d9f6      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 800280a:	2003      	movs	r0, #3
 800280c:	e183      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002812:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	6961      	ldr	r1, [r4, #20]
 800281a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800281e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e7d3      	b.n	80027ce <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002830:	f7ff fb9f 	bl	8001f72 <HAL_GetTick>
 8002834:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800283a:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800283e:	6833      	ldr	r3, [r6, #0]
 8002840:	f013 0f02 	tst.w	r3, #2
 8002844:	d0c3      	beq.n	80027ce <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff fb94 	bl	8001f72 <HAL_GetTick>
 800284a:	1b40      	subs	r0, r0, r5
 800284c:	2802      	cmp	r0, #2
 800284e:	d9f6      	bls.n	800283e <HAL_RCC_OscConfig+0x230>
            return HAL_TIMEOUT;
 8002850:	2003      	movs	r0, #3
 8002852:	e160      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002854:	f240 0308 	movw	r3, #8
 8002858:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8002862:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0a5b      	lsrs	r3, r3, #9
 800286c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800286e:	bf00      	nop
  }
  while (Delay --);
 8002870:	9b01      	ldr	r3, [sp, #4]
 8002872:	1e5a      	subs	r2, r3, #1
 8002874:	9201      	str	r2, [sp, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f9      	bne.n	800286e <HAL_RCC_OscConfig+0x260>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	f013 0f04 	tst.w	r3, #4
 8002880:	f000 80b3 	beq.w	80029ea <HAL_RCC_OscConfig+0x3dc>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002888:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002892:	d13f      	bne.n	8002914 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002898:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028a2:	61da      	str	r2, [r3, #28]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80028ae:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80028b4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80028be:	d02b      	beq.n	8002918 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	68e3      	ldr	r3, [r4, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d042      	beq.n	800294c <HAL_RCC_OscConfig+0x33e>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d15e      	bne.n	8002988 <HAL_RCC_OscConfig+0x37a>
 80028ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ce:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	621a      	str	r2, [r3, #32]
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	f022 0204 	bic.w	r2, r2, #4
 80028e0:	621a      	str	r2, [r3, #32]
 80028e2:	e03b      	b.n	800295c <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_LSI_DISABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80028f0:	f7ff fb3f 	bl	8001f72 <HAL_GetTick>
 80028f4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80028fa:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80028fe:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002900:	f013 0f02 	tst.w	r3, #2
 8002904:	d0b9      	beq.n	800287a <HAL_RCC_OscConfig+0x26c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002906:	f7ff fb34 	bl	8001f72 <HAL_GetTick>
 800290a:	1b40      	subs	r0, r0, r5
 800290c:	2802      	cmp	r0, #2
 800290e:	d9f6      	bls.n	80028fe <HAL_RCC_OscConfig+0x2f0>
          return HAL_TIMEOUT;
 8002910:	2003      	movs	r0, #3
 8002912:	e100      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
    FlagStatus       pwrclkchanged = RESET;
 8002914:	2500      	movs	r5, #0
 8002916:	e7cb      	b.n	80028b0 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002918:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800291c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002928:	f7ff fb23 	bl	8001f72 <HAL_GetTick>
 800292c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8002932:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800293c:	d1c0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2b2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7ff fb18 	bl	8001f72 <HAL_GetTick>
 8002942:	1b80      	subs	r0, r0, r6
 8002944:	2864      	cmp	r0, #100	@ 0x64
 8002946:	d9f6      	bls.n	8002936 <HAL_RCC_OscConfig+0x328>
          return HAL_TIMEOUT;
 8002948:	2003      	movs	r0, #3
 800294a:	e0e4      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002950:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	68e3      	ldr	r3, [r4, #12]
 800295e:	b37b      	cbz	r3, 80029c0 <HAL_RCC_OscConfig+0x3b2>
      tickstart = HAL_GetTick();
 8002960:	f7ff fb07 	bl	8001f72 <HAL_GetTick>
 8002964:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800296a:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f013 0f02 	tst.w	r3, #2
 8002978:	d136      	bne.n	80029e8 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7ff fafa 	bl	8001f72 <HAL_GetTick>
 800297e:	1b80      	subs	r0, r0, r6
 8002980:	4540      	cmp	r0, r8
 8002982:	d9f6      	bls.n	8002972 <HAL_RCC_OscConfig+0x364>
          return HAL_TIMEOUT;
 8002984:	2003      	movs	r0, #3
 8002986:	e0c6      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	2b05      	cmp	r3, #5
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x398>
 800298c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002990:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	621a      	str	r2, [r3, #32]
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	621a      	str	r2, [r3, #32]
 80029a4:	e7da      	b.n	800295c <HAL_RCC_OscConfig+0x34e>
 80029a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029aa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	f042 0204 	orr.w	r2, r2, #4
 80029b4:	621a      	str	r2, [r3, #32]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	e7cd      	b.n	800295c <HAL_RCC_OscConfig+0x34e>
      tickstart = HAL_GetTick();
 80029c0:	f7ff fad7 	bl	8001f72 <HAL_GetTick>
 80029c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 80029ca:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f013 0f02 	tst.w	r3, #2
 80029d8:	d006      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7ff faca 	bl	8001f72 <HAL_GetTick>
 80029de:	1b80      	subs	r0, r0, r6
 80029e0:	4540      	cmp	r0, r8
 80029e2:	d9f6      	bls.n	80029d2 <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 80029e4:	2003      	movs	r0, #3
 80029e6:	e096      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
    if (pwrclkchanged == SET)
 80029e8:	bb2d      	cbnz	r5, 8002a36 <HAL_RCC_OscConfig+0x428>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	69e3      	ldr	r3, [r4, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8091 	beq.w	8002b14 <HAL_RCC_OscConfig+0x506>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029f6:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80029fa:	6852      	ldr	r2, [r2, #4]
 80029fc:	f002 020c 	and.w	r2, r2, #12
 8002a00:	2a08      	cmp	r2, #8
 8002a02:	d06e      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d01f      	beq.n	8002a48 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002a0e:	2200      	movs	r2, #0
 8002a10:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002a12:	f7ff faae 	bl	8001f72 <HAL_GetTick>
 8002a16:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a18:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8002a1c:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a26:	d05a      	beq.n	8002ade <HAL_RCC_OscConfig+0x4d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff faa3 	bl	8001f72 <HAL_GetTick>
 8002a2c:	1b00      	subs	r0, r0, r4
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	d9f6      	bls.n	8002a20 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
 8002a34:	e06f      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002a44:	61da      	str	r2, [r3, #28]
 8002a46:	e7d0      	b.n	80029ea <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_PLL_DISABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002a4e:	2200      	movs	r2, #0
 8002a50:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002a52:	f7ff fa8e 	bl	8001f72 <HAL_GetTick>
 8002a56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002a5c:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8002a60:	6833      	ldr	r3, [r6, #0]
 8002a62:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002a66:	d006      	beq.n	8002a76 <HAL_RCC_OscConfig+0x468>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7ff fa83 	bl	8001f72 <HAL_GetTick>
 8002a6c:	1b40      	subs	r0, r0, r5
 8002a6e:	2802      	cmp	r0, #2
 8002a70:	d9f6      	bls.n	8002a60 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8002a72:	2003      	movs	r0, #3
 8002a74:	e04f      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a76:	6a23      	ldr	r3, [r4, #32]
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7c:	d022      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a82:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002a86:	6851      	ldr	r1, [r2, #4]
 8002a88:	6a23      	ldr	r3, [r4, #32]
 8002a8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002a8c:	4303      	orrs	r3, r0
 8002a8e:	f421 1174 	bic.w	r1, r1, #3997696	@ 0x3d0000
 8002a92:	430b      	orrs	r3, r1
 8002a94:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fa67 	bl	8001f72 <HAL_GetTick>
 8002aa4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8002aaa:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002ab4:	d111      	bne.n	8002ada <HAL_RCC_OscConfig+0x4cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7ff fa5c 	bl	8001f72 <HAL_GetTick>
 8002aba:	1b00      	subs	r0, r0, r4
 8002abc:	2802      	cmp	r0, #2
 8002abe:	d9f6      	bls.n	8002aae <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	e028      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ac4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ac8:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002acc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	68a1      	ldr	r1, [r4, #8]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002ad8:	e7d1      	b.n	8002a7e <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8002ada:	2000      	movs	r0, #0
 8002adc:	e01b      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e019      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d01a      	beq.n	8002b1c <HAL_RCC_OscConfig+0x50e>
        pll_config = RCC->CFGR;
 8002ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002aee:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8002af4:	6a22      	ldr	r2, [r4, #32]
 8002af6:	4291      	cmp	r1, r2
 8002af8:	d112      	bne.n	8002b20 <HAL_RCC_OscConfig+0x512>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afa:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002b00:	1a18      	subs	r0, r3, r0
 8002b02:	bf18      	it	ne
 8002b04:	2001      	movne	r0, #1
 8002b06:	e006      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
    return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
}
 8002b0a:	4770      	bx	lr
        return HAL_ERROR;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
        return HAL_ERROR;
 8002b10:	2001      	movs	r0, #1
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
  return HAL_OK;
 8002b14:	2000      	movs	r0, #0
}
 8002b16:	b002      	add	sp, #8
 8002b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	e7fa      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>
          return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e7f8      	b.n	8002b16 <HAL_RCC_OscConfig+0x508>

08002b24 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b34:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002b38:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002b3a:	f003 020c 	and.w	r2, r3, #12
 8002b3e:	2a04      	cmp	r2, #4
 8002b40:	d027      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x62>
 8002b42:	2a08      	cmp	r2, #8
 8002b44:	d12a      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x6c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b46:	f643 3298 	movw	r2, #15256	@ 0x3b98
 8002b4a:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8002b4e:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8002b52:	5c50      	ldrb	r0, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b54:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002b58:	d014      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x54>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b64:	f44f 5258 	mov.w	r2, #13824	@ 0x3600
 8002b68:	f2c0 126e 	movt	r2, #366	@ 0x16e
 8002b6c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002b70:	f643 3288 	movw	r2, #15240	@ 0x3b88
 8002b74:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b82:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b84:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002b88:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8002b8c:	fb03 f000 	mul.w	r0, r3, r0
 8002b90:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002b92:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002b96:	f2c0 106e 	movt	r0, #366	@ 0x16e
 8002b9a:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8002b9c:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8002ba0:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	f000 80a6 	beq.w	8002cf8 <HAL_RCC_ClockConfig+0x152>
{
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	6803      	ldr	r3, [r0, #0]
 8002bb2:	f013 0f02 	tst.w	r3, #2
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x54>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	f013 0f04 	tst.w	r3, #4
 8002bbc:	d007      	beq.n	8002bce <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bc2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002bcc:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	f013 0f08 	tst.w	r3, #8
 8002bd4:	d007      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bda:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8002be4:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bea:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002bee:	6853      	ldr	r3, [r2, #4]
 8002bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bf4:	68a1      	ldr	r1, [r4, #8]
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	f013 0f01 	tst.w	r3, #1
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0xde>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	6862      	ldr	r2, [r4, #4]
 8002c04:	2a01      	cmp	r2, #1
 8002c06:	d029      	beq.n	8002c5c <HAL_RCC_ClockConfig+0xb6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c08:	2a02      	cmp	r2, #2
 8002c0a:	d031      	beq.n	8002c70 <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c10:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f013 0f02 	tst.w	r3, #2
 8002c1a:	d06f      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c20:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8002c24:	684b      	ldr	r3, [r1, #4]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002c2e:	f7ff f9a0 	bl	8001f72 <HAL_GetTick>
 8002c32:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c34:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002c38:	f2c4 0602 	movt	r6, #16386	@ 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f241 3788 	movw	r7, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	6873      	ldr	r3, [r6, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c4c:	d01a      	beq.n	8002c84 <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7ff f990 	bl	8001f72 <HAL_GetTick>
 8002c52:	1b40      	subs	r0, r0, r5
 8002c54:	42b8      	cmp	r0, r7
 8002c56:	d9f3      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002c58:	2003      	movs	r0, #3
 8002c5a:	e04c      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c60:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002c6a:	d1d7      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	e042      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c74:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002c7e:	d1cd      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8002c80:	2001      	movs	r0, #1
 8002c82:	e038      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x150>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	f013 0f04 	tst.w	r3, #4
 8002c8a:	d009      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c90:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002c94:	6853      	ldr	r3, [r2, #4]
 8002c96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c9a:	68e1      	ldr	r1, [r4, #12]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	f013 0f08 	tst.w	r3, #8
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ca8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cac:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002cb0:	6853      	ldr	r3, [r2, #4]
 8002cb2:	6921      	ldr	r1, [r4, #16]
 8002cb4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002cb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cbc:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cbe:	f7ff ff37 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	f240 0308 	movw	r3, #8
 8002cd0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cd4:	f643 3178 	movw	r1, #15224	@ 0x3b78
 8002cd8:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8002cdc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002ce0:	5c8a      	ldrb	r2, [r1, r2]
 8002ce2:	40d0      	lsrs	r0, r2
 8002ce4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002ce6:	f240 0310 	movw	r3, #16
 8002cea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	f7ff f8ff 	bl	8001ef2 <HAL_InitTick>
  return HAL_OK;
 8002cf4:	2000      	movs	r0, #0
}
 8002cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
}
 8002cfa:	4770      	bx	lr
        return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7fa      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x150>

08002d00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d04:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d08:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8002d0a:	f240 0308 	movw	r3, #8
 8002d0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d12:	f643 3170 	movw	r1, #15216	@ 0x3b70
 8002d16:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8002d1a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8002d1e:	5c8a      	ldrb	r2, [r1, r2]
 8002d20:	6818      	ldr	r0, [r3, #0]
}
 8002d22:	40d0      	lsrs	r0, r2
 8002d24:	4770      	bx	lr

08002d26 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d2a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d2e:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8002d30:	f240 0308 	movw	r3, #8
 8002d34:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d38:	f643 3170 	movw	r1, #15216	@ 0x3b70
 8002d3c:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8002d40:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8002d44:	5c8a      	ldrb	r2, [r1, r2]
 8002d46:	6818      	ldr	r0, [r3, #0]
}
 8002d48:	40d0      	lsrs	r0, r2
 8002d4a:	4770      	bx	lr

08002d4c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002d4c:	4770      	bx	lr

08002d4e <HAL_RCC_NMI_IRQHandler>:
{
 8002d4e:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d54:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d5e:	d100      	bne.n	8002d62 <HAL_RCC_NMI_IRQHandler+0x14>
}
 8002d60:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8002d62:	f7ff fff3 	bl	8002d4c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d6e:	2280      	movs	r2, #128	@ 0x80
 8002d70:	729a      	strb	r2, [r3, #10]
}
 8002d72:	e7f5      	b.n	8002d60 <HAL_RCC_NMI_IRQHandler+0x12>

08002d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d7c:	6803      	ldr	r3, [r0, #0]
 8002d7e:	f013 0f01 	tst.w	r3, #1
 8002d82:	d04a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d88:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002d92:	d152      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d98:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002da2:	61da      	str	r2, [r3, #28]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002dae:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002db4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002dbe:	d03e      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xca>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dca:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002dce:	d018      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d013      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dde:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002de8:	2200      	movs	r2, #0
 8002dea:	f2c4 2242 	movt	r2, #16962	@ 0x4242
 8002dee:	2601      	movs	r6, #1
 8002df0:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df4:	2600      	movs	r6, #0
 8002df6:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dfa:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dfc:	f011 0f01 	tst.w	r1, #1
 8002e00:	d137      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e06:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002e0a:	6a13      	ldr	r3, [r2, #32]
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e10:	6861      	ldr	r1, [r4, #4]
 8002e12:	430b      	orrs	r3, r1
 8002e14:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e16:	2d00      	cmp	r5, #0
 8002e18:	d13f      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	f013 0f02 	tst.w	r3, #2
 8002e20:	d044      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e26:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8002e2a:	6853      	ldr	r3, [r2, #4]
 8002e2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002e30:	68a1      	ldr	r1, [r4, #8]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6053      	str	r3, [r2, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e039      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus pwrclkchanged = RESET;
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	e7b8      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002e42:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f890 	bl	8001f72 <HAL_GetTick>
 8002e52:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8002e58:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002e62:	d1ad      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f7ff f885 	bl	8001f72 <HAL_GetTick>
 8002e68:	1b80      	subs	r0, r0, r6
 8002e6a:	2864      	cmp	r0, #100	@ 0x64
 8002e6c:	d9f6      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          return HAL_TIMEOUT;
 8002e6e:	2003      	movs	r0, #3
 8002e70:	e01d      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002e72:	f7ff f87e 	bl	8001f72 <HAL_GetTick>
 8002e76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8002e7c:	f2c4 0702 	movt	r7, #16386	@ 0x4002
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f013 0f02 	tst.w	r3, #2
 8002e8a:	d1ba      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7ff f871 	bl	8001f72 <HAL_GetTick>
 8002e90:	1b80      	subs	r0, r0, r6
 8002e92:	4540      	cmp	r0, r8
 8002e94:	d9f6      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
 8002e96:	2003      	movs	r0, #3
 8002e98:	e009      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e9e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002ea8:	61da      	str	r2, [r3, #28]
 8002eaa:	e7b6      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xa6>
  return HAL_OK;
 8002eac:	2000      	movs	r0, #0
}
 8002eae:	b002      	add	sp, #8
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002eb4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eb4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12f      	bne.n	8002f1e <HAL_TIM_Base_Start+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec4:	6803      	ldr	r3, [r0, #0]
 8002ec6:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8002eca:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01a      	beq.n	8002f08 <HAL_TIM_Base_Start+0x54>
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed6:	d017      	beq.n	8002f08 <HAL_TIM_Base_Start+0x54>
 8002ed8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002edc:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d011      	beq.n	8002f08 <HAL_TIM_Base_Start+0x54>
 8002ee4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ee8:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <HAL_TIM_Base_Start+0x54>
 8002ef0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ef4:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d005      	beq.n	8002f08 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
 8002f06:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	2a06      	cmp	r2, #6
 8002f10:	d007      	beq.n	8002f22 <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	4770      	bx	lr
    return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	4770      	bx	lr
  return HAL_OK;
 8002f22:	2000      	movs	r0, #0
}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f26:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d134      	bne.n	8002f9a <HAL_TIM_Base_Start_IT+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	2302      	movs	r3, #2
 8002f32:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f36:	6802      	ldr	r2, [r0, #0]
 8002f38:	68d3      	ldr	r3, [r2, #12]
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	6803      	ldr	r3, [r0, #0]
 8002f42:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8002f46:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01a      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x5e>
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f52:	d017      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x5e>
 8002f54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f58:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d011      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x5e>
 8002f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f64:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x5e>
 8002f6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f70:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d005      	beq.n	8002f84 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f80:	2000      	movs	r0, #0
 8002f82:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	2a06      	cmp	r2, #6
 8002f8c:	d007      	beq.n	8002f9e <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f96:	2000      	movs	r0, #0
 8002f98:	4770      	bx	lr
    return HAL_ERROR;
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	4770      	bx	lr
  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_IRQHandler>:
{
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fb4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fb6:	f015 0f02 	tst.w	r5, #2
 8002fba:	d010      	beq.n	8002fde <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fbc:	f016 0f02 	tst.w	r6, #2
 8002fc0:	d00d      	beq.n	8002fde <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fc2:	f06f 0202 	mvn.w	r2, #2
 8002fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fcc:	6803      	ldr	r3, [r0, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f013 0f03 	tst.w	r3, #3
 8002fd4:	d05e      	beq.n	8003094 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	f7ff ffe6 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fde:	f015 0f04 	tst.w	r5, #4
 8002fe2:	d012      	beq.n	800300a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fe4:	f016 0f04 	tst.w	r6, #4
 8002fe8:	d00f      	beq.n	800300a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f06f 0204 	mvn.w	r2, #4
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002ffe:	d04f      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ffd0 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	2300      	movs	r3, #0
 8003008:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800300a:	f015 0f08 	tst.w	r5, #8
 800300e:	d012      	beq.n	8003036 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003010:	f016 0f08 	tst.w	r6, #8
 8003014:	d00f      	beq.n	8003036 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	2304      	movs	r3, #4
 8003020:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f013 0f03 	tst.w	r3, #3
 800302a:	d040      	beq.n	80030ae <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff ffba 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	2300      	movs	r3, #0
 8003034:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003036:	f015 0f10 	tst.w	r5, #16
 800303a:	d012      	beq.n	8003062 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303c:	f016 0f10 	tst.w	r6, #16
 8003040:	d00f      	beq.n	8003062 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304a:	2308      	movs	r3, #8
 800304c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003056:	d031      	beq.n	80030bc <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff ffa4 	bl	8002fa6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	2300      	movs	r3, #0
 8003060:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003062:	f015 0f01 	tst.w	r5, #1
 8003066:	d002      	beq.n	800306e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003068:	f016 0f01 	tst.w	r6, #1
 800306c:	d12d      	bne.n	80030ca <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800306e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8003072:	d002      	beq.n	800307a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003074:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8003078:	d12f      	bne.n	80030da <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800307a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800307e:	d002      	beq.n	8003086 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003080:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003084:	d131      	bne.n	80030ea <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003086:	f015 0f20 	tst.w	r5, #32
 800308a:	d002      	beq.n	8003092 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800308c:	f016 0f20 	tst.w	r6, #32
 8003090:	d133      	bne.n	80030fa <HAL_TIM_IRQHandler+0x14e>
}
 8003092:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003094:	f7ff ff86 	bl	8002fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff ff85 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
 800309e:	e79c      	b.n	8002fda <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ff7f 	bl	8002fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a6:	4620      	mov	r0, r4
 80030a8:	f7ff ff7e 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
 80030ac:	e7ab      	b.n	8003006 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff ff78 	bl	8002fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ff77 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
 80030ba:	e7ba      	b.n	8003032 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	4620      	mov	r0, r4
 80030be:	f7ff ff71 	bl	8002fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	4620      	mov	r0, r4
 80030c4:	f7ff ff70 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
 80030c8:	e7c9      	b.n	800305e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	f06f 0201 	mvn.w	r2, #1
 80030d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff ff65 	bl	8002fa2 <HAL_TIM_PeriodElapsedCallback>
 80030d8:	e7c9      	b.n	800306e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f000 fa0c 	bl	8003500 <HAL_TIMEx_BreakCallback>
 80030e8:	e7c7      	b.n	800307a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f7ff ff59 	bl	8002faa <HAL_TIM_TriggerCallback>
 80030f8:	e7c5      	b.n	8003086 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f06f 0220 	mvn.w	r2, #32
 8003100:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003102:	4620      	mov	r0, r4
 8003104:	f000 f9fb 	bl	80034fe <HAL_TIMEx_CommutCallback>
}
 8003108:	e7c3      	b.n	8003092 <HAL_TIM_IRQHandler+0xe6>

0800310a <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8003110:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003114:	4290      	cmp	r0, r2
 8003116:	f000 8095 	beq.w	8003244 <TIM_Base_SetConfig+0x13a>
 800311a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800311e:	f000 80af 	beq.w	8003280 <TIM_Base_SetConfig+0x176>
 8003122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003126:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800312a:	4290      	cmp	r0, r2
 800312c:	f000 8085 	beq.w	800323a <TIM_Base_SetConfig+0x130>
 8003130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003134:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8003138:	4290      	cmp	r0, r2
 800313a:	d01b      	beq.n	8003174 <TIM_Base_SetConfig+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003140:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003144:	4290      	cmp	r0, r2
 8003146:	d06a      	beq.n	800321e <TIM_Base_SetConfig+0x114>
 8003148:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 800314c:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003150:	4290      	cmp	r0, r2
 8003152:	d048      	beq.n	80031e6 <TIM_Base_SetConfig+0xdc>
 8003154:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 8003158:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800315c:	4290      	cmp	r0, r2
 800315e:	d050      	beq.n	8003202 <TIM_Base_SetConfig+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003164:	694a      	ldr	r2, [r1, #20]
 8003166:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003168:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316a:	688b      	ldr	r3, [r1, #8]
 800316c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800316e:	680b      	ldr	r3, [r1, #0]
 8003170:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003172:	e07a      	b.n	800326a <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003178:	684a      	ldr	r2, [r1, #4]
 800317a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317c:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8003180:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003184:	4290      	cmp	r0, r2
 8003186:	d061      	beq.n	800324c <TIM_Base_SetConfig+0x142>
 8003188:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800318c:	d07c      	beq.n	8003288 <TIM_Base_SetConfig+0x17e>
 800318e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003192:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8003196:	4290      	cmp	r0, r2
 8003198:	d076      	beq.n	8003288 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~TIM_CR1_CKD;
 800319a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319e:	68ca      	ldr	r2, [r1, #12]
 80031a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a6:	694a      	ldr	r2, [r1, #20]
 80031a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ac:	688b      	ldr	r3, [r1, #8]
 80031ae:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031b0:	680b      	ldr	r3, [r1, #0]
 80031b2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80031b8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80031bc:	4298      	cmp	r0, r3
 80031be:	d052      	beq.n	8003266 <TIM_Base_SetConfig+0x15c>
 80031c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031c4:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80031c8:	4298      	cmp	r0, r3
 80031ca:	d04c      	beq.n	8003266 <TIM_Base_SetConfig+0x15c>
 80031cc:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 80031d0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80031d4:	4298      	cmp	r0, r3
 80031d6:	d046      	beq.n	8003266 <TIM_Base_SetConfig+0x15c>
 80031d8:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 80031dc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80031e0:	4298      	cmp	r0, r3
 80031e2:	d040      	beq.n	8003266 <TIM_Base_SetConfig+0x15c>
 80031e4:	e041      	b.n	800326a <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	68ca      	ldr	r2, [r1, #12]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f2:	694a      	ldr	r2, [r1, #20]
 80031f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	688b      	ldr	r3, [r1, #8]
 80031fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031fc:	680b      	ldr	r3, [r1, #0]
 80031fe:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003200:	e031      	b.n	8003266 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	68ca      	ldr	r2, [r1, #12]
 8003208:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800320e:	694a      	ldr	r2, [r1, #20]
 8003210:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003212:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	688b      	ldr	r3, [r1, #8]
 8003216:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003218:	680b      	ldr	r3, [r1, #0]
 800321a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	e023      	b.n	8003266 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800321e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003222:	68ca      	ldr	r2, [r1, #12]
 8003224:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800322a:	694a      	ldr	r2, [r1, #20]
 800322c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800322e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003230:	688b      	ldr	r3, [r1, #8]
 8003232:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003234:	680b      	ldr	r3, [r1, #0]
 8003236:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003238:	e015      	b.n	8003266 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800323e:	684a      	ldr	r2, [r1, #4]
 8003240:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	e021      	b.n	8003288 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003248:	684a      	ldr	r2, [r1, #4]
 800324a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800324c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003250:	68ca      	ldr	r2, [r1, #12]
 8003252:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003258:	694a      	ldr	r2, [r1, #20]
 800325a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800325c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800325e:	688b      	ldr	r3, [r1, #8]
 8003260:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003262:	680b      	ldr	r3, [r1, #0]
 8003264:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003266:	690b      	ldr	r3, [r1, #16]
 8003268:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326a:	2301      	movs	r3, #1
 800326c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326e:	6903      	ldr	r3, [r0, #16]
 8003270:	f013 0f01 	tst.w	r3, #1
 8003274:	d016      	beq.n	80032a4 <TIM_Base_SetConfig+0x19a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003276:	6903      	ldr	r3, [r0, #16]
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6103      	str	r3, [r0, #16]
  }
}
 800327e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003284:	684a      	ldr	r2, [r1, #4]
 8003286:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328c:	68ca      	ldr	r2, [r1, #12]
 800328e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003294:	694a      	ldr	r2, [r1, #20]
 8003296:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003298:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329a:	688b      	ldr	r3, [r1, #8]
 800329c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800329e:	680b      	ldr	r3, [r1, #0]
 80032a0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a2:	e7e2      	b.n	800326a <TIM_Base_SetConfig+0x160>
}
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80032a6:	b340      	cbz	r0, 80032fa <HAL_TIM_Base_Init+0x54>
{
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80032ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80032b0:	b1f3      	cbz	r3, 80032f0 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	4621      	mov	r1, r4
 80032ba:	f851 0b04 	ldr.w	r0, [r1], #4
 80032be:	f7ff ff24 	bl	800310a <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80032cc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80032d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80032d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032e0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80032e4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80032ec:	2000      	movs	r0, #0
}
 80032ee:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032f0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80032f4:	f7fe fc21 	bl	8001b3a <HAL_TIM_Base_MspInit>
 80032f8:	e7db      	b.n	80032b2 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
}
 80032fc:	4770      	bx	lr

080032fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032fe:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003300:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003302:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003306:	430a      	orrs	r2, r1
 8003308:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800330c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003310:	6082      	str	r2, [r0, #8]
}
 8003312:	bc10      	pop	{r4}
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_ConfigClockSource>:
{
 8003316:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003318:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	f000 80ad 	beq.w	800347c <HAL_TIM_ConfigClockSource+0x166>
 8003322:	4604      	mov	r4, r0
 8003324:	2301      	movs	r3, #1
 8003326:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003330:	6802      	ldr	r2, [r0, #0]
 8003332:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003338:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800333c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800333e:	680b      	ldr	r3, [r1, #0]
 8003340:	2b60      	cmp	r3, #96	@ 0x60
 8003342:	d060      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xf0>
 8003344:	d837      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0xa0>
 8003346:	2b40      	cmp	r3, #64	@ 0x40
 8003348:	d079      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x128>
 800334a:	d815      	bhi.n	8003378 <HAL_TIM_ConfigClockSource+0x62>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d007      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0x4a>
 8003350:	d804      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x46>
 8003352:	f033 0210 	bics.w	r2, r3, #16
 8003356:	d003      	beq.n	8003360 <HAL_TIM_ConfigClockSource+0x4a>
 8003358:	2001      	movs	r0, #1
 800335a:	e040      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
 800335c:	2b30      	cmp	r3, #48	@ 0x30
 800335e:	d109      	bne.n	8003374 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003360:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003362:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003364:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003368:	4313      	orrs	r3, r2
 800336a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800336e:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2000      	movs	r0, #0
}
 8003372:	e034      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8003374:	2001      	movs	r0, #1
 8003376:	e032      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
 8003378:	2b50      	cmp	r3, #80	@ 0x50
 800337a:	d11a      	bne.n	80033b2 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800337e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003380:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003382:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800338c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003392:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003396:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800339a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800339c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800339e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80033a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a8:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80033ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033ae:	2000      	movs	r0, #0
}
 80033b0:	e015      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80033b2:	2001      	movs	r0, #1
 80033b4:	e013      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ba:	d05b      	beq.n	8003474 <HAL_TIM_ConfigClockSource+0x15e>
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c0:	d014      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0xd6>
 80033c2:	2b70      	cmp	r3, #112	@ 0x70
 80033c4:	d158      	bne.n	8003478 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	68cb      	ldr	r3, [r1, #12]
 80033c8:	684a      	ldr	r2, [r1, #4]
 80033ca:	6889      	ldr	r1, [r1, #8]
 80033cc:	6800      	ldr	r0, [r0, #0]
 80033ce:	f7ff ff96 	bl	80032fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80033da:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033de:	2301      	movs	r3, #1
 80033e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80033e4:	2300      	movs	r3, #0
 80033e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	68cb      	ldr	r3, [r1, #12]
 80033ee:	684a      	ldr	r2, [r1, #4]
 80033f0:	6889      	ldr	r1, [r1, #8]
 80033f2:	6800      	ldr	r0, [r0, #0]
 80033f4:	f7ff ff83 	bl	80032fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	6893      	ldr	r3, [r2, #8]
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003400:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2000      	movs	r0, #0
      break;
 8003404:	e7eb      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003406:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8003408:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800340c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340e:	6a19      	ldr	r1, [r3, #32]
 8003410:	f021 0110 	bic.w	r1, r1, #16
 8003414:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003416:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003418:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800341c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003420:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003424:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003428:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800342a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800342c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800342e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003434:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003438:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2000      	movs	r0, #0
}
 800343c:	e7cf      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8003440:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003444:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	f022 0201 	bic.w	r2, r2, #1
 800344c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800344e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003450:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003454:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003458:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800345c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003462:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003464:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800346e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2000      	movs	r0, #0
}
 8003472:	e7b4      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2000      	movs	r0, #0
 8003476:	e7b2      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8003478:	2001      	movs	r0, #1
 800347a:	e7b0      	b.n	80033de <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 800347c:	2002      	movs	r0, #2
 800347e:	e7b4      	b.n	80033ea <HAL_TIM_ConfigClockSource+0xd4>

08003480 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003480:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003484:	2a01      	cmp	r2, #1
 8003486:	d038      	beq.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
{
 8003488:	b430      	push	{r4, r5}
 800348a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800348c:	2201      	movs	r2, #1
 800348e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	2202      	movs	r2, #2
 8003494:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003498:	6804      	ldr	r4, [r0, #0]
 800349a:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a2:	680d      	ldr	r5, [r1, #0]
 80034a4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a6:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f44f 5430 	mov.w	r4, #11264	@ 0x2c00
 80034ae:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80034b2:	42a2      	cmp	r2, r4
 80034b4:	d014      	beq.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80034b6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80034ba:	d011      	beq.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80034bc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80034c0:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 80034c4:	42a2      	cmp	r2, r4
 80034c6:	d00b      	beq.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80034c8:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80034cc:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 80034d0:	42a2      	cmp	r2, r4
 80034d2:	d005      	beq.n	80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80034d4:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80034d8:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80034dc:	42a2      	cmp	r2, r4
 80034de:	d104      	bne.n	80034ea <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e0:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034e4:	6849      	ldr	r1, [r1, #4]
 80034e6:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e8:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80034f6:	bc30      	pop	{r4, r5}
 80034f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80034fa:	2002      	movs	r0, #2
}
 80034fc:	4770      	bx	lr

080034fe <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034fe:	4770      	bx	lr

08003500 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003500:	4770      	bx	lr

08003502 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003502:	b510      	push	{r4, lr}
 8003504:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003506:	6802      	ldr	r2, [r0, #0]
 8003508:	6913      	ldr	r3, [r2, #16]
 800350a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800350e:	68c1      	ldr	r1, [r0, #12]
 8003510:	430b      	orrs	r3, r1
 8003512:	6113      	str	r3, [r2, #16]
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8003514:	6801      	ldr	r1, [r0, #0]
 8003516:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003518:	6883      	ldr	r3, [r0, #8]
 800351a:	6900      	ldr	r0, [r0, #16]
 800351c:	4303      	orrs	r3, r0
 800351e:	6960      	ldr	r0, [r4, #20]
 8003520:	4303      	orrs	r3, r0
 8003522:	69e0      	ldr	r0, [r4, #28]
 8003524:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003526:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 800352a:	f022 020c 	bic.w	r2, r2, #12
 800352e:	4313      	orrs	r3, r2
 8003530:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003532:	6822      	ldr	r2, [r4, #0]
 8003534:	6953      	ldr	r3, [r2, #20]
 8003536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353a:	69a1      	ldr	r1, [r4, #24]
 800353c:	430b      	orrs	r3, r1
 800353e:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003540:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003544:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d021      	beq.n	8003592 <UART_SetConfig+0x90>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800354e:	f7ff fbd7 	bl	8002d00 <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003552:	69e3      	ldr	r3, [r4, #28]
 8003554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003558:	d01e      	beq.n	8003598 <UART_SetConfig+0x96>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800355a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800355e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003562:	6862      	ldr	r2, [r4, #4]
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	f248 511f 	movw	r1, #34079	@ 0x851f
 8003570:	f2c5 11eb 	movt	r1, #20971	@ 0x51eb
 8003574:	fba1 4203 	umull	r4, r2, r1, r3
 8003578:	0952      	lsrs	r2, r2, #5
 800357a:	2464      	movs	r4, #100	@ 0x64
 800357c:	fb04 3312 	mls	r3, r4, r2, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	@ 0x32
 8003584:	fba1 1303 	umull	r1, r3, r1, r3
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 800358e:	6082      	str	r2, [r0, #8]
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8003590:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003592:	f7ff fbc8 	bl	8002d26 <HAL_RCC_GetPCLK2Freq>
 8003596:	e7dc      	b.n	8003552 <UART_SetConfig+0x50>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003598:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800359c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a8:	f248 521f 	movw	r2, #34079	@ 0x851f
 80035ac:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 80035b0:	fba2 0103 	umull	r0, r1, r2, r3
 80035b4:	0949      	lsrs	r1, r1, #5
 80035b6:	2064      	movs	r0, #100	@ 0x64
 80035b8:	fb00 3311 	mls	r3, r0, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	3332      	adds	r3, #50	@ 0x32
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80035ca:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035d4:	4413      	add	r3, r2
 80035d6:	6083      	str	r3, [r0, #8]
 80035d8:	e7da      	b.n	8003590 <UART_SetConfig+0x8e>

080035da <HAL_UART_Init>:
  if (huart == NULL)
 80035da:	b360      	cbz	r0, 8003636 <HAL_UART_Init+0x5c>
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80035e0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80035e4:	b313      	cbz	r3, 800362c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80035e6:	2324      	movs	r3, #36	@ 0x24
 80035e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	68d3      	ldr	r3, [r2, #12]
 80035f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80035f6:	4620      	mov	r0, r4
 80035f8:	f7ff ff83 	bl	8003502 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6913      	ldr	r3, [r2, #16]
 8003600:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003604:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	6953      	ldr	r3, [r2, #20]
 800360a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800360e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	68d3      	ldr	r3, [r2, #12]
 8003614:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003618:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361a:	2000      	movs	r0, #0
 800361c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800361e:	2320      	movs	r3, #32
 8003620:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003628:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800362a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800362c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003630:	f7fe fac1 	bl	8001bb6 <HAL_UART_MspInit>
 8003634:	e7d7      	b.n	80035e6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003636:	2001      	movs	r0, #1
}
 8003638:	4770      	bx	lr

0800363a <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800363a:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800363c:	f013 0f01 	tst.w	r3, #1
 8003640:	d10d      	bne.n	800365e <LL_ADC_Init+0x24>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003642:	6843      	ldr	r3, [r0, #4]
 8003644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003648:	684a      	ldr	r2, [r1, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	6043      	str	r3, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800364e:	6883      	ldr	r3, [r0, #8]
 8003650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003654:	680a      	ldr	r2, [r1, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 800365a:	2000      	movs	r0, #0
 800365c:	4770      	bx	lr

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800365e:	2001      	movs	r0, #1
  }
  return status;
}
 8003660:	4770      	bx	lr

08003662 <LL_ADC_REG_Init>:
 8003662:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003664:	f013 0f01 	tst.w	r3, #1
 8003668:	d121      	bne.n	80036ae <LL_ADC_REG_Init+0x4c>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800366a:	684a      	ldr	r2, [r1, #4]
 800366c:	b1d2      	cbz	r2, 80036a4 <LL_ADC_REG_Init+0x42>
    {
      MODIFY_REG(ADCx->CR1,
 800366e:	6843      	ldr	r3, [r0, #4]
 8003670:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 8003674:	4313      	orrs	r3, r2
 8003676:	688a      	ldr	r2, [r1, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800367c:	6883      	ldr	r3, [r0, #8]
 800367e:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8003682:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003686:	680a      	ldr	r2, [r1, #0]
 8003688:	4313      	orrs	r3, r2
 800368a:	68ca      	ldr	r2, [r1, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	690a      	ldr	r2, [r1, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003694:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003696:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800369a:	684a      	ldr	r2, [r1, #4]
 800369c:	4313      	orrs	r3, r2
 800369e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  ErrorStatus status = SUCCESS;
 80036a0:	2000      	movs	r0, #0
}
 80036a2:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 80036a4:	6843      	ldr	r3, [r0, #4]
 80036a6:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 80036aa:	6043      	str	r3, [r0, #4]
 80036ac:	e7e6      	b.n	800367c <LL_ADC_REG_Init+0x1a>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036ae:	2001      	movs	r0, #1
  }
  return status;
}
 80036b0:	4770      	bx	lr

080036b2 <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80036b2:	680b      	ldr	r3, [r1, #0]
 80036b4:	f3c3 2c0f 	ubfx	ip, r3, #8, #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	fa9c f2ac 	rbit	r2, ip
  pinpos = POSITION_VAL(pinmask);
 80036bc:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80036c0:	fa3c f302 	lsrs.w	r3, ip, r2
 80036c4:	f000 8087 	beq.w	80037d6 <LL_GPIO_Init+0x124>
{
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80036cc:	f04f 0e01 	mov.w	lr, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80036d0:	240f      	movs	r4, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80036d2:	f04f 0803 	mov.w	r8, #3
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80036d6:	f04f 1501 	mov.w	r5, #65537	@ 0x10001
        currentpin = (0x00000101uL << pinpos);
 80036da:	f240 1701 	movw	r7, #257	@ 0x101
 80036de:	46e1      	mov	r9, ip
 80036e0:	e025      	b.n	800372e <LL_GPIO_Init+0x7c>
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80036e2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80036e6:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80036ea:	faba fa8a 	clz	sl, sl
 80036ee:	fa93 fba3 	rbit	fp, r3
 80036f2:	fabb fb8b 	clz	fp, fp
 80036f6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80036fa:	fa04 fa0a 	lsl.w	sl, r4, sl
 80036fe:	f850 600c 	ldr.w	r6, [r0, ip]
 8003702:	ea26 0a0a 	bic.w	sl, r6, sl
 8003706:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800370a:	684e      	ldr	r6, [r1, #4]
 800370c:	fa06 f60b 	lsl.w	r6, r6, fp
 8003710:	ea4a 0606 	orr.w	r6, sl, r6
 8003714:	f840 600c 	str.w	r6, [r0, ip]
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003718:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800371c:	f02a 0a08 	bic.w	sl, sl, #8
 8003720:	f1ba 0f01 	cmp.w	sl, #1
 8003724:	d025      	beq.n	8003772 <LL_GPIO_Init+0xc0>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8003726:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0u)
 8003728:	fa39 f302 	lsrs.w	r3, r9, r2
 800372c:	d050      	beq.n	80037d0 <LL_GPIO_Init+0x11e>
    if ((pinmask & (1u << pinpos)) != 0u)
 800372e:	fa0e f302 	lsl.w	r3, lr, r2
 8003732:	ea13 0f09 	tst.w	r3, r9
 8003736:	d0f6      	beq.n	8003726 <LL_GPIO_Init+0x74>
      if (pinpos < GPIO_PIN_MASK_POS)
 8003738:	2a07      	cmp	r2, #7
        currentpin = (0x00000101uL << pinpos);
 800373a:	bf91      	iteee	ls
 800373c:	fa07 f302 	lslls.w	r3, r7, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003740:	f1a2 0308 	subhi.w	r3, r2, #8
 8003744:	fa05 f303 	lslhi.w	r3, r5, r3
 8003748:	f043 6380 	orrhi.w	r3, r3, #67108864	@ 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800374c:	684e      	ldr	r6, [r1, #4]
 800374e:	2e08      	cmp	r6, #8
 8003750:	d1c7      	bne.n	80036e2 <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003752:	68c6      	ldr	r6, [r0, #12]
 8003754:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8003758:	fa9c faac 	rbit	sl, ip
 800375c:	faba fa8a 	clz	sl, sl
 8003760:	ea26 0c0c 	bic.w	ip, r6, ip
 8003764:	690e      	ldr	r6, [r1, #16]
 8003766:	fa06 f60a 	lsl.w	r6, r6, sl
 800376a:	ea4c 0606 	orr.w	r6, ip, r6
 800376e:	60c6      	str	r6, [r0, #12]
}
 8003770:	e7b7      	b.n	80036e2 <LL_GPIO_Init+0x30>
 8003772:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003776:	faba fa8a 	clz	sl, sl
 800377a:	fa93 fba3 	rbit	fp, r3
 800377e:	fabb fb8b 	clz	fp, fp
 8003782:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003786:	fa08 fa0a 	lsl.w	sl, r8, sl
 800378a:	ea26 0a0a 	bic.w	sl, r6, sl
 800378e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003792:	688e      	ldr	r6, [r1, #8]
 8003794:	fa06 f60b 	lsl.w	r6, r6, fp
 8003798:	ea4a 0606 	orr.w	r6, sl, r6
 800379c:	f840 600c 	str.w	r6, [r0, ip]
 80037a0:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80037a4:	faba fa8a 	clz	sl, sl
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80037b4:	f04f 0b04 	mov.w	fp, #4
 80037b8:	fa0b fa0a 	lsl.w	sl, fp, sl
 80037bc:	ea26 0a0a 	bic.w	sl, r6, sl
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	68ce      	ldr	r6, [r1, #12]
 80037c4:	409e      	lsls	r6, r3
 80037c6:	ea4a 0606 	orr.w	r6, sl, r6
 80037ca:	f840 600c 	str.w	r6, [r0, ip]
}
 80037ce:	e7aa      	b.n	8003726 <LL_GPIO_Init+0x74>
  }
  return (SUCCESS);
}
 80037d0:	2000      	movs	r0, #0
 80037d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d6:	2000      	movs	r0, #0
 80037d8:	4770      	bx	lr
	...

080037dc <__errno>:
 80037dc:	4b01      	ldr	r3, [pc, #4]	@ (80037e4 <__errno+0x8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	20000014 	.word	0x20000014

080037e8 <__libc_init_array>:
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	2600      	movs	r6, #0
 80037ec:	4d0c      	ldr	r5, [pc, #48]	@ (8003820 <__libc_init_array+0x38>)
 80037ee:	4c0d      	ldr	r4, [pc, #52]	@ (8003824 <__libc_init_array+0x3c>)
 80037f0:	1b64      	subs	r4, r4, r5
 80037f2:	10a4      	asrs	r4, r4, #2
 80037f4:	42a6      	cmp	r6, r4
 80037f6:	d109      	bne.n	800380c <__libc_init_array+0x24>
 80037f8:	f000 f910 	bl	8003a1c <_init>
 80037fc:	2600      	movs	r6, #0
 80037fe:	4d0a      	ldr	r5, [pc, #40]	@ (8003828 <__libc_init_array+0x40>)
 8003800:	4c0a      	ldr	r4, [pc, #40]	@ (800382c <__libc_init_array+0x44>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	42a6      	cmp	r6, r4
 8003808:	d105      	bne.n	8003816 <__libc_init_array+0x2e>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003810:	4798      	blx	r3
 8003812:	3601      	adds	r6, #1
 8003814:	e7ee      	b.n	80037f4 <__libc_init_array+0xc>
 8003816:	f855 3b04 	ldr.w	r3, [r5], #4
 800381a:	4798      	blx	r3
 800381c:	3601      	adds	r6, #1
 800381e:	e7f2      	b.n	8003806 <__libc_init_array+0x1e>
 8003820:	08003bb8 	.word	0x08003bb8
 8003824:	08003bb8 	.word	0x08003bb8
 8003828:	08003bb8 	.word	0x08003bb8
 800382c:	08003bbc 	.word	0x08003bbc

08003830 <sqrt>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	4606      	mov	r6, r0
 8003834:	460f      	mov	r7, r1
 8003836:	f000 f81f 	bl	8003878 <__ieee754_sqrt>
 800383a:	4632      	mov	r2, r6
 800383c:	4604      	mov	r4, r0
 800383e:	460d      	mov	r5, r1
 8003840:	463b      	mov	r3, r7
 8003842:	4630      	mov	r0, r6
 8003844:	4639      	mov	r1, r7
 8003846:	f7fd f939 	bl	8000abc <__aeabi_dcmpun>
 800384a:	b990      	cbnz	r0, 8003872 <sqrt+0x42>
 800384c:	2200      	movs	r2, #0
 800384e:	2300      	movs	r3, #0
 8003850:	4630      	mov	r0, r6
 8003852:	4639      	mov	r1, r7
 8003854:	f7fd f90a 	bl	8000a6c <__aeabi_dcmplt>
 8003858:	b158      	cbz	r0, 8003872 <sqrt+0x42>
 800385a:	f7ff ffbf 	bl	80037dc <__errno>
 800385e:	2321      	movs	r3, #33	@ 0x21
 8003860:	2200      	movs	r2, #0
 8003862:	6003      	str	r3, [r0, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	f7fc ffb7 	bl	80007dc <__aeabi_ddiv>
 800386e:	4604      	mov	r4, r0
 8003870:	460d      	mov	r5, r1
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003878 <__ieee754_sqrt>:
 8003878:	4a65      	ldr	r2, [pc, #404]	@ (8003a10 <__ieee754_sqrt+0x198>)
 800387a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387e:	438a      	bics	r2, r1
 8003880:	4606      	mov	r6, r0
 8003882:	460f      	mov	r7, r1
 8003884:	460b      	mov	r3, r1
 8003886:	4604      	mov	r4, r0
 8003888:	d10e      	bne.n	80038a8 <__ieee754_sqrt+0x30>
 800388a:	4602      	mov	r2, r0
 800388c:	f7fc fe7c 	bl	8000588 <__aeabi_dmul>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4630      	mov	r0, r6
 8003896:	4639      	mov	r1, r7
 8003898:	f7fc fcc0 	bl	800021c <__adddf3>
 800389c:	4606      	mov	r6, r0
 800389e:	460f      	mov	r7, r1
 80038a0:	4630      	mov	r0, r6
 80038a2:	4639      	mov	r1, r7
 80038a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a8:	2900      	cmp	r1, #0
 80038aa:	dc0c      	bgt.n	80038c6 <__ieee754_sqrt+0x4e>
 80038ac:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80038b0:	4302      	orrs	r2, r0
 80038b2:	d0f5      	beq.n	80038a0 <__ieee754_sqrt+0x28>
 80038b4:	b189      	cbz	r1, 80038da <__ieee754_sqrt+0x62>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f7fc fcae 	bl	8000218 <__aeabi_dsub>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	f7fc ff8c 	bl	80007dc <__aeabi_ddiv>
 80038c4:	e7ea      	b.n	800389c <__ieee754_sqrt+0x24>
 80038c6:	150a      	asrs	r2, r1, #20
 80038c8:	d115      	bne.n	80038f6 <__ieee754_sqrt+0x7e>
 80038ca:	2100      	movs	r1, #0
 80038cc:	e009      	b.n	80038e2 <__ieee754_sqrt+0x6a>
 80038ce:	0ae3      	lsrs	r3, r4, #11
 80038d0:	3a15      	subs	r2, #21
 80038d2:	0564      	lsls	r4, r4, #21
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0fa      	beq.n	80038ce <__ieee754_sqrt+0x56>
 80038d8:	e7f7      	b.n	80038ca <__ieee754_sqrt+0x52>
 80038da:	460a      	mov	r2, r1
 80038dc:	e7fa      	b.n	80038d4 <__ieee754_sqrt+0x5c>
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	3101      	adds	r1, #1
 80038e2:	02d8      	lsls	r0, r3, #11
 80038e4:	d5fb      	bpl.n	80038de <__ieee754_sqrt+0x66>
 80038e6:	1e48      	subs	r0, r1, #1
 80038e8:	1a12      	subs	r2, r2, r0
 80038ea:	f1c1 0020 	rsb	r0, r1, #32
 80038ee:	fa24 f000 	lsr.w	r0, r4, r0
 80038f2:	4303      	orrs	r3, r0
 80038f4:	408c      	lsls	r4, r1
 80038f6:	2700      	movs	r7, #0
 80038f8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 80038fc:	2116      	movs	r1, #22
 80038fe:	07d2      	lsls	r2, r2, #31
 8003900:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003904:	463a      	mov	r2, r7
 8003906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390e:	bf5c      	itt	pl
 8003910:	005b      	lslpl	r3, r3, #1
 8003912:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003916:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800391a:	bf58      	it	pl
 800391c:	0064      	lslpl	r4, r4, #1
 800391e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003922:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003926:	0064      	lsls	r4, r4, #1
 8003928:	1815      	adds	r5, r2, r0
 800392a:	429d      	cmp	r5, r3
 800392c:	bfde      	ittt	le
 800392e:	182a      	addle	r2, r5, r0
 8003930:	1b5b      	suble	r3, r3, r5
 8003932:	183f      	addle	r7, r7, r0
 8003934:	0fe5      	lsrs	r5, r4, #31
 8003936:	3901      	subs	r1, #1
 8003938:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800393c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003940:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003944:	d1f0      	bne.n	8003928 <__ieee754_sqrt+0xb0>
 8003946:	460d      	mov	r5, r1
 8003948:	2620      	movs	r6, #32
 800394a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800394e:	4293      	cmp	r3, r2
 8003950:	eb00 0c01 	add.w	ip, r0, r1
 8003954:	dc02      	bgt.n	800395c <__ieee754_sqrt+0xe4>
 8003956:	d113      	bne.n	8003980 <__ieee754_sqrt+0x108>
 8003958:	45a4      	cmp	ip, r4
 800395a:	d811      	bhi.n	8003980 <__ieee754_sqrt+0x108>
 800395c:	f1bc 0f00 	cmp.w	ip, #0
 8003960:	eb0c 0100 	add.w	r1, ip, r0
 8003964:	da3e      	bge.n	80039e4 <__ieee754_sqrt+0x16c>
 8003966:	2900      	cmp	r1, #0
 8003968:	db3c      	blt.n	80039e4 <__ieee754_sqrt+0x16c>
 800396a:	f102 0e01 	add.w	lr, r2, #1
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	4672      	mov	r2, lr
 8003972:	45a4      	cmp	ip, r4
 8003974:	bf88      	it	hi
 8003976:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800397a:	eba4 040c 	sub.w	r4, r4, ip
 800397e:	4405      	add	r5, r0
 8003980:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8003984:	3e01      	subs	r6, #1
 8003986:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800398a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800398e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8003992:	d1dc      	bne.n	800394e <__ieee754_sqrt+0xd6>
 8003994:	431c      	orrs	r4, r3
 8003996:	d01a      	beq.n	80039ce <__ieee754_sqrt+0x156>
 8003998:	4c1e      	ldr	r4, [pc, #120]	@ (8003a14 <__ieee754_sqrt+0x19c>)
 800399a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8003a18 <__ieee754_sqrt+0x1a0>
 800399e:	e9d4 0100 	ldrd	r0, r1, [r4]
 80039a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80039a6:	f7fc fc37 	bl	8000218 <__aeabi_dsub>
 80039aa:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4650      	mov	r0, sl
 80039b4:	4659      	mov	r1, fp
 80039b6:	f7fd f863 	bl	8000a80 <__aeabi_dcmple>
 80039ba:	b140      	cbz	r0, 80039ce <__ieee754_sqrt+0x156>
 80039bc:	e9d4 0100 	ldrd	r0, r1, [r4]
 80039c0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80039c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80039c8:	d10e      	bne.n	80039e8 <__ieee754_sqrt+0x170>
 80039ca:	4635      	mov	r5, r6
 80039cc:	3701      	adds	r7, #1
 80039ce:	107b      	asrs	r3, r7, #1
 80039d0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80039d4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80039d8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 80039dc:	086b      	lsrs	r3, r5, #1
 80039de:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 80039e2:	e75b      	b.n	800389c <__ieee754_sqrt+0x24>
 80039e4:	4696      	mov	lr, r2
 80039e6:	e7c2      	b.n	800396e <__ieee754_sqrt+0xf6>
 80039e8:	f7fc fc18 	bl	800021c <__adddf3>
 80039ec:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4650      	mov	r0, sl
 80039f6:	4659      	mov	r1, fp
 80039f8:	f7fd f838 	bl	8000a6c <__aeabi_dcmplt>
 80039fc:	b120      	cbz	r0, 8003a08 <__ieee754_sqrt+0x190>
 80039fe:	1cab      	adds	r3, r5, #2
 8003a00:	bf08      	it	eq
 8003a02:	3701      	addeq	r7, #1
 8003a04:	3502      	adds	r5, #2
 8003a06:	e7e2      	b.n	80039ce <__ieee754_sqrt+0x156>
 8003a08:	1c6b      	adds	r3, r5, #1
 8003a0a:	f023 0501 	bic.w	r5, r3, #1
 8003a0e:	e7de      	b.n	80039ce <__ieee754_sqrt+0x156>
 8003a10:	7ff00000 	.word	0x7ff00000
 8003a14:	08003bb0 	.word	0x08003bb0
 8003a18:	08003ba8 	.word	0x08003ba8

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
