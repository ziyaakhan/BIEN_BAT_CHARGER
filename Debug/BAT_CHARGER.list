
BAT_CHARGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080059a0  080059a0  000069a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  000070e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005e28  08005e28  000070e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005e28  08005e28  000070e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e28  08005e28  00006e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08005e30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  200000e8  08005f14  000070e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08005f14  00007560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b647  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339d  00000000  00000000  00022754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e3e7  00000000  00000000  00025af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f90  00000000  00000000  00033ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e79  00000000  00000000  00034e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001525d  00000000  00000000  00035ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e225  00000000  00000000  0004af3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b9ad  00000000  00000000  00069163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e4b10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e88  00000000  00000000  000e4b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000e79dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005984 	.word	0x08005984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08005984 	.word	0x08005984

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpun>:
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x10>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d10a      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x20>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_dcmpun+0x26>
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0001 	mov.w	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <adc_init>:
uint16_t adcIDC2 = 0;

int16_t adcGain[ADC1_CHANNEL_COUNT];

void adc_init(void)
{
 8000b28:	b082      	sub	sp, #8
	adcGain[listVAC]   = 9100;
 8000b2a:	f240 1304 	movw	r3, #260	@ 0x104
 8000b2e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000b32:	f242 328c 	movw	r2, #9100	@ 0x238c
 8000b36:	801a      	strh	r2, [r3, #0]
	adcGain[listTEMP]  = 100;
 8000b38:	2264      	movs	r2, #100	@ 0x64
 8000b3a:	805a      	strh	r2, [r3, #2]
	adcGain[listIDC]   = 2500;
 8000b3c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000b40:	809a      	strh	r2, [r3, #4]
	adcGain[listVBAT1] = 2490;
 8000b42:	f640 11ba 	movw	r1, #2490	@ 0x9ba
 8000b46:	80d9      	strh	r1, [r3, #6]
	adcGain[listVDC1]  = Q15(1);
 8000b48:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000b4c:	8119      	strh	r1, [r3, #8]
	adcGain[listVDC2]  = Q15(1);
 8000b4e:	8159      	strh	r1, [r3, #10]
	adcGain[listIDC2]  = 2500;
 8000b50:	819a      	strh	r2, [r3, #12]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000b52:	2300      	movs	r3, #0
 8000b54:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	609a      	str	r2, [r3, #8]
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000b60:	f242 424c 	movw	r2, #9292	@ 0x244c
 8000b64:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8000b68:	611a      	str	r2, [r3, #16]

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_1);
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
    LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)adc1Buffer);
 8000b6a:	f240 228c 	movw	r2, #652	@ 0x28c
 8000b6e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000b72:	615a      	str	r2, [r3, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	f36f 020f 	bfc	r2, #0, #16
 8000b7a:	f042 0207 	orr.w	r2, r2, #7
 8000b7e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b86:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b8e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000b96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b9a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8000ba2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ba6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	f042 0220 	orr.w	r2, r2, #32
 8000bae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000bb6:	f022 0210 	bic.w	r2, r2, #16
 8000bba:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	f042 0202 	orr.w	r2, r2, #2
 8000bc2:	609a      	str	r2, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	f042 0201 	orr.w	r2, r2, #1
 8000bca:	609a      	str	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000bcc:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000bd0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000bd4:	689a      	ldr	r2, [r3, #8]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	609a      	str	r2, [r3, #8]
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1); // opsiyonel: NVIC enable da yap
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);

    LL_ADC_Enable(ADC1);
    for (volatile int i = 0; i < 1000; i++) { __asm volatile("nop"); } // kısa gecikme
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	9b01      	ldr	r3, [sp, #4]
 8000be2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000be6:	da07      	bge.n	8000bf8 <adc_init+0xd0>
 8000be8:	bf00      	nop
 8000bea:	9b01      	ldr	r3, [sp, #4]
 8000bec:	3301      	adds	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bf6:	dbf7      	blt.n	8000be8 <adc_init+0xc0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bf8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000bfc:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c06:	609a      	str	r2, [r3, #8]

    LL_ADC_REG_StartConversionSWStart(ADC1);
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	4770      	bx	lr

08000c0c <lcd_delay_us>:
/**
 * @brief Minimal microsecond delay using busy loop scaled for 24 MHz SYSCLK
 * @details This is approximate; HD44780 is tolerant. For safety we overshoot.
 * @param micros Number of microseconds to delay
 */
static void lcd_delay_us(uint16_t micros) {
 8000c0c:	b530      	push	{r4, r5, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	4604      	mov	r4, r0
    if (micros >= 1000u) {
 8000c12:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000c16:	d20f      	bcs.n	8000c38 <lcd_delay_us+0x2c>
        HAL_Delay(micros / 1000u);
        micros = (uint16_t)(micros % 1000u);
    }
    volatile uint32_t count = (uint32_t)micros * 40u; /* generous for 24 MHz */
 8000c18:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000c1c:	00e4      	lsls	r4, r4, #3
 8000c1e:	9401      	str	r4, [sp, #4]
    while (count--) {
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	9201      	str	r2, [sp, #4]
 8000c26:	b12b      	cbz	r3, 8000c34 <lcd_delay_us+0x28>
        __asm volatile ("nop");
 8000c28:	bf00      	nop
    while (count--) {
 8000c2a:	9b01      	ldr	r3, [sp, #4]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	9201      	str	r2, [sp, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f9      	bne.n	8000c28 <lcd_delay_us+0x1c>
    }
}
 8000c34:	b003      	add	sp, #12
 8000c36:	bd30      	pop	{r4, r5, pc}
        HAL_Delay(micros / 1000u);
 8000c38:	f644 50d3 	movw	r0, #19923	@ 0x4dd3
 8000c3c:	f2c1 0062 	movt	r0, #4194	@ 0x1062
 8000c40:	fba0 3004 	umull	r3, r0, r0, r4
 8000c44:	0985      	lsrs	r5, r0, #6
 8000c46:	4628      	mov	r0, r5
 8000c48:	f003 f951 	bl	8003eee <HAL_Delay>
        micros = (uint16_t)(micros % 1000u);
 8000c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c50:	fb03 4415 	mls	r4, r3, r5, r4
 8000c54:	b2a4      	uxth	r4, r4
 8000c56:	e7df      	b.n	8000c18 <lcd_delay_us+0xc>

08000c58 <lcd_write4>:

/**
 * @brief Write 4-bit nibble to LCD data pins
 * @param nibble 4-bit value to write (lower 4 bits used)
 */
static void lcd_write4(uint8_t nibble) {
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4604      	mov	r4, r0
    /* Map nibble bit0..bit3 to LCD_D0..LCD_D3 pins */
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, (nibble & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c5c:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8000c60:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000c64:	f000 0201 	and.w	r2, r0, #1
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	f003 fb9d 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, (nibble & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c72:	f3c4 0240 	ubfx	r2, r4, #1, #1
 8000c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	f003 fb96 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, (nibble & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c80:	f3c4 0280 	ubfx	r2, r4, #2, #1
 8000c84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f003 fb8f 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, (nibble & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c8e:	f3c4 02c0 	ubfx	r2, r4, #3, #1
 8000c92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c96:	4628      	mov	r0, r5
 8000c98:	f003 fb88 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000c9c:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000ca0:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f003 fb7f 	bl	80043ac <HAL_GPIO_WritePin>
    lcd_delay_us(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff ffac 	bl	8000c0c <lcd_delay_us>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f003 fb77 	bl	80043ac <HAL_GPIO_WritePin>
    lcd_delay_us(50); /* enable cycle time */
 8000cbe:	2032      	movs	r0, #50	@ 0x32
 8000cc0:	f7ff ffa4 	bl	8000c0c <lcd_delay_us>
    lcd_pulse_enable();
}
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}

08000cc6 <lcd_send>:
/**
 * @brief Send 8-bit value to LCD (command or data)
 * @param value 8-bit value to send
 * @param is_data 1 for data, 0 for command
 */
static void lcd_send(uint8_t value, uint8_t is_data) {
 8000cc6:	b510      	push	{r4, lr}
 8000cc8:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, is_data ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cca:	1e0a      	subs	r2, r1, #0
 8000ccc:	bf18      	it	ne
 8000cce:	2201      	movne	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000cd6:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000cda:	f003 fb67 	bl	80043ac <HAL_GPIO_WritePin>
    lcd_write4((uint8_t)(value >> 4));
 8000cde:	0920      	lsrs	r0, r4, #4
 8000ce0:	f7ff ffba 	bl	8000c58 <lcd_write4>
    lcd_write4((uint8_t)(value & 0x0F));
 8000ce4:	f004 000f 	and.w	r0, r4, #15
 8000ce8:	f7ff ffb6 	bl	8000c58 <lcd_write4>
}
 8000cec:	bd10      	pop	{r4, pc}

08000cee <LCD_Backlight>:

/**
 * @brief Control LCD backlight
 * @param on 1 to turn on, 0 to turn off
 */
void LCD_Backlight(uint8_t on) {
 8000cee:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000cf0:	1e02      	subs	r2, r0, #0
 8000cf2:	bf18      	it	ne
 8000cf4:	2201      	movne	r2, #1
 8000cf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cfa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000cfe:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000d02:	f003 fb53 	bl	80043ac <HAL_GPIO_WritePin>
}
 8000d06:	bd08      	pop	{r3, pc}

08000d08 <LCD_Init>:

/**
 * @brief Initialize the LCD display
 * @details Performs 4-bit initialization sequence per HD44780 datasheet
 */
void LCD_Init(void) {
 8000d08:	b510      	push	{r4, lr}
    /* Ensure control lines default */
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d0a:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000d0e:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	4620      	mov	r0, r4
 8000d18:	f003 fb48 	bl	80043ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2108      	movs	r1, #8
 8000d20:	4620      	mov	r0, r4
 8000d22:	f003 fb43 	bl	80043ac <HAL_GPIO_WritePin>

    /* Wait for LCD power up */
    HAL_Delay(40);
 8000d26:	2028      	movs	r0, #40	@ 0x28
 8000d28:	f003 f8e1 	bl	8003eee <HAL_Delay>

    /* 4-bit init sequence per HD44780 datasheet */
    lcd_write4(0x03);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff ff93 	bl	8000c58 <lcd_write4>
    HAL_Delay(5);
 8000d32:	2005      	movs	r0, #5
 8000d34:	f003 f8db 	bl	8003eee <HAL_Delay>
    lcd_write4(0x03);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f7ff ff8d 	bl	8000c58 <lcd_write4>
    lcd_delay_us(150);
 8000d3e:	2096      	movs	r0, #150	@ 0x96
 8000d40:	f7ff ff64 	bl	8000c0c <lcd_delay_us>
    lcd_write4(0x03);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f7ff ff87 	bl	8000c58 <lcd_write4>
    lcd_delay_us(150);
 8000d4a:	2096      	movs	r0, #150	@ 0x96
 8000d4c:	f7ff ff5e 	bl	8000c0c <lcd_delay_us>
    lcd_write4(0x02); /* set 4-bit mode */
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff ff81 	bl	8000c58 <lcd_write4>

    /* Function set: 4-bit, 2-line (20x4 uses 2-line controller), 5x8 dots */
    lcd_send(0x28, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2028      	movs	r0, #40	@ 0x28
 8000d5a:	f7ff ffb4 	bl	8000cc6 <lcd_send>
    /* Display OFF */
    lcd_send(0x08, 0);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2008      	movs	r0, #8
 8000d62:	f7ff ffb0 	bl	8000cc6 <lcd_send>
    /* Clear display */
    lcd_send(0x01, 0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ffac 	bl	8000cc6 <lcd_send>
    HAL_Delay(2);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f003 f8bd 	bl	8003eee <HAL_Delay>
    /* Entry mode: increment, no shift */
    lcd_send(0x06, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2006      	movs	r0, #6
 8000d78:	f7ff ffa5 	bl	8000cc6 <lcd_send>
    /* Display ON, cursor off, blink off */
    lcd_send(0x0C, 0);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	200c      	movs	r0, #12
 8000d80:	f7ff ffa1 	bl	8000cc6 <lcd_send>
}
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <LCD_Clear>:

/**
 * @brief Clear the entire LCD display
 */
void LCD_Clear(void) {
 8000d86:	b508      	push	{r3, lr}
    lcd_send(0x01, 0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff9b 	bl	8000cc6 <lcd_send>
    HAL_Delay(2);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f003 f8ac 	bl	8003eee <HAL_Delay>
}
 8000d96:	bd08      	pop	{r3, pc}

08000d98 <LCD_SetCursor>:
/**
 * @brief Set cursor position
 * @param col Column position (0-19 for 20x4 display)
 * @param row Row position (0-3 for 20x4 display)
 */
void LCD_SetCursor(uint8_t col, uint8_t row) {
 8000d98:	b508      	push	{r3, lr}
    /* JHD204A 20x4 DDRAM mapping */
    static const uint8_t row_offsets[4] = {0x00, 0x40, 0x14, 0x54};
    if (row > 3) row = 3;
    lcd_send((uint8_t)(0x80 | (row_offsets[row] + col)), 0);
 8000d9a:	f645 13a0 	movw	r3, #22944	@ 0x59a0
 8000d9e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000da2:	2903      	cmp	r1, #3
 8000da4:	bf28      	it	cs
 8000da6:	2103      	movcs	r1, #3
 8000da8:	5c5b      	ldrb	r3, [r3, r1]
 8000daa:	4418      	add	r0, r3
 8000dac:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 8000db0:	2100      	movs	r1, #0
 8000db2:	b2c0      	uxtb	r0, r0
 8000db4:	f7ff ff87 	bl	8000cc6 <lcd_send>
}
 8000db8:	bd08      	pop	{r3, pc}

08000dba <LCD_WriteChar>:

/**
 * @brief Write a single character
 * @param c Character to write
 */
void LCD_WriteChar(char c) {
 8000dba:	b508      	push	{r3, lr}
    lcd_send((uint8_t)c, 1);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f7ff ff82 	bl	8000cc6 <lcd_send>
}
 8000dc2:	bd08      	pop	{r3, pc}

08000dc4 <LCD_Print>:
/**
 * @brief Print a null-terminated string
 * @param str String to print (NULL-safe)
 */
void LCD_Print(const char *str) {
    if (str == NULL) return;
 8000dc4:	b150      	cbz	r0, 8000ddc <LCD_Print+0x18>
void LCD_Print(const char *str) {
 8000dc6:	b510      	push	{r4, lr}
 8000dc8:	4604      	mov	r4, r0
    while (*str) {
 8000dca:	7800      	ldrb	r0, [r0, #0]
 8000dcc:	b128      	cbz	r0, 8000dda <LCD_Print+0x16>
        LCD_WriteChar(*str++);
 8000dce:	f7ff fff4 	bl	8000dba <LCD_WriteChar>
    while (*str) {
 8000dd2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d1f9      	bne.n	8000dce <LCD_Print+0xa>
    }
}
 8000dda:	bd10      	pop	{r4, pc}
 8000ddc:	4770      	bx	lr

08000dde <LCD_PrintUInt16>:

/**
 * @brief Print a 16-bit unsigned integer
 * @param value Value to print (0-65535)
 */
void LCD_PrintUInt16(uint16_t value) {
 8000dde:	b500      	push	{lr}
 8000de0:	b083      	sub	sp, #12
    char buf[6]; /* max 65535 */
    int idx = 0;
    
    /* Handle thousands */
    if (value >= 10000) {
 8000de2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d963      	bls.n	8000eb2 <LCD_PrintUInt16+0xd4>
        buf[idx++] = (char)('0' + (value / 10000));
 8000dea:	f241 7359 	movw	r3, #5977	@ 0x1759
 8000dee:	f2cd 13b7 	movt	r3, #53687	@ 0xd1b7
 8000df2:	fba3 2300 	umull	r2, r3, r3, r0
 8000df6:	0b5b      	lsrs	r3, r3, #13
 8000df8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000dfc:	f88d 2000 	strb.w	r2, [sp]
        value = (uint16_t)(value % 10000);
 8000e00:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e04:	fb02 0313 	mls	r3, r2, r3, r0
 8000e08:	b298      	uxth	r0, r3
        buf[idx++] = (char)('0' + (value / 10000));
 8000e0a:	2301      	movs	r3, #1
    }
    if (value >= 1000) {
 8000e0c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000e10:	d314      	bcc.n	8000e3c <LCD_PrintUInt16+0x5e>
        buf[idx++] = (char)('0' + (value / 1000));
 8000e12:	f103 0208 	add.w	r2, r3, #8
 8000e16:	eb0d 0102 	add.w	r1, sp, r2
 8000e1a:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8000e1e:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8000e22:	fba2 c200 	umull	ip, r2, r2, r0
 8000e26:	0992      	lsrs	r2, r2, #6
 8000e28:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e2c:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 1000);
 8000e30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e34:	fb01 0212 	mls	r2, r1, r2, r0
 8000e38:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 1000));
 8000e3a:	3301      	adds	r3, #1
    }
    if (value >= 100) {
 8000e3c:	2863      	cmp	r0, #99	@ 0x63
 8000e3e:	d913      	bls.n	8000e68 <LCD_PrintUInt16+0x8a>
        buf[idx++] = (char)('0' + (value / 100));
 8000e40:	f103 0208 	add.w	r2, r3, #8
 8000e44:	eb0d 0102 	add.w	r1, sp, r2
 8000e48:	f248 521f 	movw	r2, #34079	@ 0x851f
 8000e4c:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8000e50:	fba2 c200 	umull	ip, r2, r2, r0
 8000e54:	0952      	lsrs	r2, r2, #5
 8000e56:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e5a:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 100);
 8000e5e:	2164      	movs	r1, #100	@ 0x64
 8000e60:	fb01 0212 	mls	r2, r1, r2, r0
 8000e64:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 100));
 8000e66:	3301      	adds	r3, #1
    }
    if (value >= 10) {
 8000e68:	2809      	cmp	r0, #9
 8000e6a:	d914      	bls.n	8000e96 <LCD_PrintUInt16+0xb8>
        buf[idx++] = (char)('0' + (value / 10));
 8000e6c:	f103 0208 	add.w	r2, r3, #8
 8000e70:	eb0d 0102 	add.w	r1, sp, r2
 8000e74:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8000e78:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8000e7c:	fba2 c200 	umull	ip, r2, r2, r0
 8000e80:	08d2      	lsrs	r2, r2, #3
 8000e82:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8000e86:	f801 cc08 	strb.w	ip, [r1, #-8]
        value = (uint16_t)(value % 10);
 8000e8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000e8e:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8000e92:	b290      	uxth	r0, r2
        buf[idx++] = (char)('0' + (value / 10));
 8000e94:	3301      	adds	r3, #1
    }
    buf[idx++] = (char)('0' + value);
 8000e96:	3308      	adds	r3, #8
 8000e98:	446b      	add	r3, sp
 8000e9a:	3030      	adds	r0, #48	@ 0x30
 8000e9c:	f803 0c08 	strb.w	r0, [r3, #-8]
    buf[idx] = '\0';
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f803 2c07 	strb.w	r2, [r3, #-7]
    LCD_Print(buf);
 8000ea6:	4668      	mov	r0, sp
 8000ea8:	f7ff ff8c 	bl	8000dc4 <LCD_Print>
}
 8000eac:	b003      	add	sp, #12
 8000eae:	f85d fb04 	ldr.w	pc, [sp], #4
    int idx = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e7aa      	b.n	8000e0c <LCD_PrintUInt16+0x2e>

08000eb6 <LCD_PrintUInt16_1dp>:
/**
 * @brief Print a 16-bit value with 1 decimal place
 * @details Input value is multiplied by 10, output shows 1 decimal place
 * @param value_times_10 Value multiplied by 10 (e.g., 194 for 19.4)
 */
void LCD_PrintUInt16_1dp(uint16_t value_times_10) {
 8000eb6:	b538      	push	{r3, r4, r5, lr}
    uint16_t integer = value_times_10 / 10u;
 8000eb8:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8000ebc:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8000ec0:	fba2 3200 	umull	r3, r2, r2, r0
 8000ec4:	08d3      	lsrs	r3, r2, #3
 8000ec6:	461d      	mov	r5, r3
    uint16_t frac = value_times_10 % 10u;
 8000ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ecc:	eba0 0443 	sub.w	r4, r0, r3, lsl #1
 8000ed0:	b2a4      	uxth	r4, r4
    /* Pad to fixed width 4: " 9.0" or "19.4" */
    if (integer < 10u) {
 8000ed2:	2863      	cmp	r0, #99	@ 0x63
 8000ed4:	d90b      	bls.n	8000eee <LCD_PrintUInt16_1dp+0x38>
        LCD_WriteChar(' ');
    }
    LCD_PrintUInt16(integer);
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	f7ff ff81 	bl	8000dde <LCD_PrintUInt16>
    LCD_WriteChar('.');
 8000edc:	202e      	movs	r0, #46	@ 0x2e
 8000ede:	f7ff ff6c 	bl	8000dba <LCD_WriteChar>
    LCD_WriteChar((char)('0' + frac));
 8000ee2:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8000ee6:	b2c0      	uxtb	r0, r0
 8000ee8:	f7ff ff67 	bl	8000dba <LCD_WriteChar>
}
 8000eec:	bd38      	pop	{r3, r4, r5, pc}
        LCD_WriteChar(' ');
 8000eee:	2020      	movs	r0, #32
 8000ef0:	f7ff ff63 	bl	8000dba <LCD_WriteChar>
 8000ef4:	e7ef      	b.n	8000ed6 <LCD_PrintUInt16_1dp+0x20>

08000ef6 <ui_assign_language>:
{
    return UI_STR_TABLE[lcdLangId][id];
}

static void ui_assign_language(void)
{
 8000ef6:	b570      	push	{r4, r5, r6, lr}
    const char * const * T = UI_STR_TABLE[lcdLangId];
 8000ef8:	f240 031d 	movw	r3, #29
 8000efc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f645 42c4 	movw	r2, #23748	@ 0x5cc4
 8000f06:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    STR_BATV     = T[UI_LBL_BATV];
 8000f0e:	f240 21b8 	movw	r1, #696	@ 0x2b8
 8000f12:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000f16:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8000f18:	6008      	str	r0, [r1, #0]
    STR_CAPACITY = T[UI_LBL_CAPACITY];
 8000f1a:	f240 21b4 	movw	r1, #692	@ 0x2b4
 8000f1e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8000f22:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
 8000f24:	6008      	str	r0, [r1, #0]
    STR_COUNT    = T[UI_LBL_COUNT];
 8000f26:	6c16      	ldr	r6, [r2, #64]	@ 0x40
    if (lcdLangId == 0) {
 8000f28:	f645 55ac 	movw	r5, #23980	@ 0x5dac
 8000f2c:	f6c0 0500 	movt	r5, #2048	@ 0x800
 8000f30:	f645 529c 	movw	r2, #23964	@ 0x5d9c
 8000f34:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf18      	it	ne
 8000f3c:	4615      	movne	r5, r2
 8000f3e:	f645 40b4 	movw	r0, #23732	@ 0x5cb4
 8000f42:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8000f46:	f645 42a4 	movw	r2, #23716	@ 0x5ca4
 8000f4a:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf18      	it	ne
 8000f52:	4610      	movne	r0, r2
 8000f54:	f645 11a4 	movw	r1, #22948	@ 0x59a4
 8000f58:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8000f5c:	f645 12a8 	movw	r2, #22952	@ 0x59a8
 8000f60:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf18      	it	ne
 8000f68:	4611      	movne	r1, r2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf0b      	itete	eq
 8000f6e:	2449      	moveq	r4, #73	@ 0x49
 8000f70:	2441      	movne	r4, #65	@ 0x41
 8000f72:	f04f 0e0f 	moveq.w	lr, #15
 8000f76:	f04f 0e0e 	movne.w	lr, #14
 8000f7a:	bf0c      	ite	eq
 8000f7c:	f04f 0c0b 	moveq.w	ip, #11
 8000f80:	f04f 0c0c 	movne.w	ip, #12
    STR_COUNT    = T[UI_LBL_COUNT];
 8000f84:	f240 23b0 	movw	r3, #688	@ 0x2b0
 8000f88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000f8c:	601e      	str	r6, [r3, #0]
        STR_LOAD_BORDER_TOP    = strEN_LOADING_LINE0;
 8000f8e:	f240 22ac 	movw	r2, #684	@ 0x2ac
 8000f92:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000f96:	f645 13ac 	movw	r3, #22956	@ 0x59ac
 8000f9a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8000f9e:	6013      	str	r3, [r2, #0]
        STR_LOAD_BORDER_BOTTOM = strEN_LOADING_LINE3;
 8000fa0:	f240 22a8 	movw	r2, #680	@ 0x2a8
 8000fa4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000fa8:	6013      	str	r3, [r2, #0]
        STR_LABELS_SHORT       = LABELS_EN_SHORT;
 8000faa:	f240 23a4 	movw	r3, #676	@ 0x2a4
 8000fae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fb2:	601d      	str	r5, [r3, #0]
        STR_MENU_ITEMS         = MENU_ITEMS_EN;
 8000fb4:	f240 23a0 	movw	r3, #672	@ 0x2a0
 8000fb8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fbc:	6018      	str	r0, [r3, #0]
        STR_LANG_VAL           = "EN";
 8000fbe:	f240 239c 	movw	r3, #668	@ 0x29c
 8000fc2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fc6:	6019      	str	r1, [r3, #0]
        CH_CURR                = 'I';
 8000fc8:	f240 0302 	movw	r3, #2
 8000fcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fd0:	701c      	strb	r4, [r3, #0]
        STATUS_COL             = 15u;
 8000fd2:	f240 0301 	movw	r3, #1
 8000fd6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fda:	f883 e000 	strb.w	lr, [r3]
        TEMP_COL               = 11u;
 8000fde:	f240 0300 	movw	r3, #0
 8000fe2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000fe6:	f883 c000 	strb.w	ip, [r3]
        STR_LANG_VAL           = "TR";
        CH_CURR                = 'A';
        STATUS_COL             = 14u;
        TEMP_COL               = 12u;
    }
}
 8000fea:	bd70      	pop	{r4, r5, r6, pc}

08000fec <lcd_menu_set_language>:

/**
 * @brief Set the display language
 * @param lang_id Language ID (0: English, 1: Turkish)
 */
void lcd_menu_set_language(uint8_t lang_id) {
 8000fec:	b508      	push	{r3, lr}
    if (lang_id != 0u) {
 8000fee:	f240 031d 	movw	r3, #29
 8000ff2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000ff6:	3800      	subs	r0, #0
 8000ff8:	bf18      	it	ne
 8000ffa:	2001      	movne	r0, #1
 8000ffc:	7018      	strb	r0, [r3, #0]
        lcdLangId = 1u;
    } else {
        lcdLangId = 0u;
    }
    ui_assign_language();
 8000ffe:	f7ff ff7a 	bl	8000ef6 <ui_assign_language>
    LCD_Clear();
 8001002:	f7ff fec0 	bl	8000d86 <LCD_Clear>
}
 8001006:	bd08      	pop	{r3, pc}

08001008 <lcd_handle>:

/**
 * @brief Handle LCD display rendering
 * @details Renders the current page based on pageID and language
 */
void lcd_handle(void) {
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	b087      	sub	sp, #28
    /* Clear once when page changes or explicitly requested */
    if (pageID != prevPageID || uiNeedsClear) {
 800100c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001010:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001014:	f240 031c 	movw	r3, #28
 8001018:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d105      	bne.n	8001030 <lcd_handle+0x28>
 8001024:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8001028:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b18b      	cbz	r3, 8001054 <lcd_handle+0x4c>
        LCD_Clear();
 8001030:	f7ff fea9 	bl	8000d86 <LCD_Clear>
        prevPageID = pageID;
 8001034:	f240 031c 	movw	r3, #28
 8001038:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800103c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8001040:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]
        uiNeedsClear = 0;
 8001048:	f240 23d7 	movw	r3, #727	@ 0x2d7
 800104c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
    }

    /* Ensure language strings are assigned even if init wasn't called */
    if (STR_BATV == 0 || STR_CAPACITY == 0 || STR_COUNT == 0) {
 8001054:	f240 23b8 	movw	r3, #696	@ 0x2b8
 8001058:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b15b      	cbz	r3, 8001078 <lcd_handle+0x70>
 8001060:	f240 23b4 	movw	r3, #692	@ 0x2b4
 8001064:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b12b      	cbz	r3, 8001078 <lcd_handle+0x70>
 800106c:	f240 23b0 	movw	r3, #688	@ 0x2b0
 8001070:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b90b      	cbnz	r3, 800107c <lcd_handle+0x74>
        ui_assign_language();
 8001078:	f7ff ff3d 	bl	8000ef6 <ui_assign_language>
    }

    /* Edit mode is entered with Right press in button_handle; no long-press */

    switch(pageID) {
 800107c:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8001080:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b08      	cmp	r3, #8
 8001088:	f200 8172 	bhi.w	8001370 <lcd_handle+0x368>
 800108c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001090:	00bf0009 	.word	0x00bf0009
 8001094:	01f80192 	.word	0x01f80192
 8001098:	066c053e 	.word	0x066c053e
 800109c:	0827070d 	.word	0x0827070d
 80010a0:	08e3      	.short	0x08e3
    case PAGE_LOADING: {
        /* Dynamic line 2 content per operating mode */
        LCD_SetCursor(0, 0); 
 80010a2:	2100      	movs	r1, #0
 80010a4:	4608      	mov	r0, r1
 80010a6:	f7ff fe77 	bl	8000d98 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_TOP);
 80010aa:	f240 23ac 	movw	r3, #684	@ 0x2ac
 80010ae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f7ff fe86 	bl	8000dc4 <LCD_Print>
        /* Center company name */
        LCD_SetCursor(0, 1);
 80010b8:	2101      	movs	r1, #1
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fe6c 	bl	8000d98 <LCD_SetCursor>
        {
            char line[21];
            const char *name = companyName;
 80010c0:	f240 0318 	movw	r3, #24
 80010c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80010c8:	6819      	ldr	r1, [r3, #0]
            int len = 0; while (name[len] && len < 20) len++;
 80010ca:	780b      	ldrb	r3, [r1, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d05c      	beq.n	800118a <lcd_handle+0x182>
 80010d0:	460b      	mov	r3, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	3201      	adds	r2, #1
 80010d6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80010da:	b118      	cbz	r0, 80010e4 <lcd_handle+0xdc>
 80010dc:	2a14      	cmp	r2, #20
 80010de:	d1f9      	bne.n	80010d4 <lcd_handle+0xcc>
            int pad = (20 - len) / 2;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e010      	b.n	8001106 <lcd_handle+0xfe>
 80010e4:	f1c2 0014 	rsb	r0, r2, #20
 80010e8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80010ec:	105b      	asrs	r3, r3, #1
            for (int i=0;i<pad;i++) line[i] = ' ';
 80010ee:	2801      	cmp	r0, #1
 80010f0:	dd09      	ble.n	8001106 <lcd_handle+0xfe>
 80010f2:	466c      	mov	r4, sp
 80010f4:	2000      	movs	r0, #0
 80010f6:	2520      	movs	r5, #32
 80010f8:	f804 5b01 	strb.w	r5, [r4], #1
 80010fc:	3001      	adds	r0, #1
 80010fe:	4298      	cmp	r0, r3
 8001100:	dbfa      	blt.n	80010f8 <lcd_handle+0xf0>
            for (int i=0;i<len;i++) line[pad+i] = name[i];
 8001102:	2a00      	cmp	r2, #0
 8001104:	dd0b      	ble.n	800111e <lcd_handle+0x116>
 8001106:	3901      	subs	r1, #1
 8001108:	f103 0018 	add.w	r0, r3, #24
 800110c:	4468      	add	r0, sp
 800110e:	3819      	subs	r0, #25
 8001110:	188d      	adds	r5, r1, r2
 8001112:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001116:	f800 4f01 	strb.w	r4, [r0, #1]!
 800111a:	42a9      	cmp	r1, r5
 800111c:	d1f9      	bne.n	8001112 <lcd_handle+0x10a>
            for (int i=pad+len;i<20;i++) line[i] = ' ';
 800111e:	4413      	add	r3, r2
 8001120:	2b13      	cmp	r3, #19
 8001122:	dc09      	bgt.n	8001138 <lcd_handle+0x130>
 8001124:	3318      	adds	r3, #24
 8001126:	446b      	add	r3, sp
 8001128:	3b19      	subs	r3, #25
 800112a:	f10d 0113 	add.w	r1, sp, #19
 800112e:	2220      	movs	r2, #32
 8001130:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001134:	428b      	cmp	r3, r1
 8001136:	d1fb      	bne.n	8001130 <lcd_handle+0x128>
            line[20] = '\0';
 8001138:	2400      	movs	r4, #0
 800113a:	f88d 4014 	strb.w	r4, [sp, #20]
            LCD_Print(line);
 800113e:	4668      	mov	r0, sp
 8001140:	f7ff fe40 	bl	8000dc4 <LCD_Print>
        }
        LCD_SetCursor(0, 2);
 8001144:	2102      	movs	r1, #2
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff fe26 	bl	8000d98 <LCD_SetCursor>
        {
            const char *dev = DEVICE_NAMES_LANG[lcdLangId][operatingMode];
 800114c:	f240 030c 	movw	r3, #12
 8001150:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001154:	f240 021d 	movw	r2, #29
 8001158:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800115c:	7811      	ldrb	r1, [r2, #0]
 800115e:	f240 4222 	movw	r2, #1058	@ 0x422
 8001162:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001166:	7812      	ldrb	r2, [r2, #0]
 8001168:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800116c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            char buf[21];
            int len=0; while (dev[len] && len<20) len++;
 8001170:	7813      	ldrb	r3, [r2, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d048      	beq.n	8001208 <lcd_handle+0x200>
 8001176:	4611      	mov	r1, r2
 8001178:	4623      	mov	r3, r4
 800117a:	3301      	adds	r3, #1
 800117c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8001180:	b130      	cbz	r0, 8001190 <lcd_handle+0x188>
 8001182:	2b14      	cmp	r3, #20
 8001184:	d1f9      	bne.n	800117a <lcd_handle+0x172>
            int pad = (20 - len) / 2;
 8001186:	2400      	movs	r4, #0
 8001188:	e013      	b.n	80011b2 <lcd_handle+0x1aa>
            int len = 0; while (name[len] && len < 20) len++;
 800118a:	2200      	movs	r2, #0
            int pad = (20 - len) / 2;
 800118c:	230a      	movs	r3, #10
 800118e:	e7b0      	b.n	80010f2 <lcd_handle+0xea>
            int pad = (20 - len) / 2;
 8001190:	f1c3 0114 	rsb	r1, r3, #20
 8001194:	eb01 74d1 	add.w	r4, r1, r1, lsr #31
 8001198:	1064      	asrs	r4, r4, #1
            for (int i=0;i<pad;i++) buf[i]=' ';
 800119a:	2901      	cmp	r1, #1
 800119c:	dd09      	ble.n	80011b2 <lcd_handle+0x1aa>
 800119e:	4668      	mov	r0, sp
 80011a0:	2100      	movs	r1, #0
 80011a2:	2520      	movs	r5, #32
 80011a4:	f800 5b01 	strb.w	r5, [r0], #1
 80011a8:	3101      	adds	r1, #1
 80011aa:	42a1      	cmp	r1, r4
 80011ac:	dbfa      	blt.n	80011a4 <lcd_handle+0x19c>
            for (int i=0;i<len;i++) buf[pad+i]=dev[i];
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dd0b      	ble.n	80011ca <lcd_handle+0x1c2>
 80011b2:	3a01      	subs	r2, #1
 80011b4:	f104 0118 	add.w	r1, r4, #24
 80011b8:	4469      	add	r1, sp
 80011ba:	3919      	subs	r1, #25
 80011bc:	18d5      	adds	r5, r2, r3
 80011be:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80011c2:	f801 0f01 	strb.w	r0, [r1, #1]!
 80011c6:	42aa      	cmp	r2, r5
 80011c8:	d1f9      	bne.n	80011be <lcd_handle+0x1b6>
            for (int i=pad+len;i<20;i++) buf[i]=' ';
 80011ca:	4423      	add	r3, r4
 80011cc:	2b13      	cmp	r3, #19
 80011ce:	dc09      	bgt.n	80011e4 <lcd_handle+0x1dc>
 80011d0:	3318      	adds	r3, #24
 80011d2:	446b      	add	r3, sp
 80011d4:	3b19      	subs	r3, #25
 80011d6:	f10d 0113 	add.w	r1, sp, #19
 80011da:	2220      	movs	r2, #32
 80011dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011e0:	4299      	cmp	r1, r3
 80011e2:	d1fb      	bne.n	80011dc <lcd_handle+0x1d4>
            buf[20]='\0';
 80011e4:	2400      	movs	r4, #0
 80011e6:	f88d 4014 	strb.w	r4, [sp, #20]
            LCD_Print(buf);
 80011ea:	4668      	mov	r0, sp
 80011ec:	f7ff fdea 	bl	8000dc4 <LCD_Print>
        }
        LCD_SetCursor(0, 3); 
 80011f0:	2103      	movs	r1, #3
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fdd0 	bl	8000d98 <LCD_SetCursor>
		LCD_Print(STR_LOAD_BORDER_BOTTOM);
 80011f8:	f240 23a8 	movw	r3, #680	@ 0x2a8
 80011fc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f7ff fddf 	bl	8000dc4 <LCD_Print>
    }
        break;
 8001206:	e0b3      	b.n	8001370 <lcd_handle+0x368>
            int len=0; while (dev[len] && len<20) len++;
 8001208:	2300      	movs	r3, #0
            int pad = (20 - len) / 2;
 800120a:	240a      	movs	r4, #10
 800120c:	e7c7      	b.n	800119e <lcd_handle+0x196>

    case PAGE_MAIN: {
        const char * titleShort = TITLE_NAMES_LANG[lcdLangId][operatingMode];
 800120e:	f240 0304 	movw	r3, #4
 8001212:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001216:	f240 021d 	movw	r2, #29
 800121a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800121e:	7811      	ldrb	r1, [r2, #0]
 8001220:	f240 4222 	movw	r2, #1058	@ 0x422
 8001224:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800122e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        const char * const * labelsShort = STR_LABELS_SHORT;
 8001232:	f240 23a4 	movw	r3, #676	@ 0x2a4
 8001236:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800123a:	681c      	ldr	r4, [r3, #0]

        /* Title (row 0) */
		LCD_SetCursor(0, 0);
 800123c:	2100      	movs	r1, #0
 800123e:	4608      	mov	r0, r1
 8001240:	f7ff fdaa 	bl	8000d98 <LCD_SetCursor>
        /* Compose: COMPANY + space + titleShort (ensure <=20) */
        {
            char line[21];
            int idx = 0;
            const char *a = companyName; while (*a && idx < 20) line[idx++] = *a++;
 8001244:	f240 0318 	movw	r3, #24
 8001248:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	780a      	ldrb	r2, [r1, #0]
 8001250:	2a00      	cmp	r2, #0
 8001252:	f000 80ad 	beq.w	80013b0 <lcd_handle+0x3a8>
 8001256:	4668      	mov	r0, sp
            int idx = 0;
 8001258:	2300      	movs	r3, #0
            const char *a = companyName; while (*a && idx < 20) line[idx++] = *a++;
 800125a:	3301      	adds	r3, #1
 800125c:	f800 2b01 	strb.w	r2, [r0], #1
 8001260:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001264:	2a00      	cmp	r2, #0
 8001266:	f000 8085 	beq.w	8001374 <lcd_handle+0x36c>
 800126a:	2b14      	cmp	r3, #20
 800126c:	d1f5      	bne.n	800125a <lcd_handle+0x252>
            if (idx < 20) line[idx++] = ' ';
            const char *b = titleShort; while (*b && idx < 20) line[idx++] = *b++;
 800126e:	782a      	ldrb	r2, [r5, #0]
 8001270:	b95a      	cbnz	r2, 800128a <lcd_handle+0x282>
            while (idx < 20) line[idx++] = ' ';
 8001272:	2b13      	cmp	r3, #19
 8001274:	dc09      	bgt.n	800128a <lcd_handle+0x282>
 8001276:	3318      	adds	r3, #24
 8001278:	446b      	add	r3, sp
 800127a:	3b19      	subs	r3, #25
 800127c:	f10d 0113 	add.w	r1, sp, #19
 8001280:	2220      	movs	r2, #32
 8001282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001286:	428b      	cmp	r3, r1
 8001288:	d1fb      	bne.n	8001282 <lcd_handle+0x27a>
            line[20] = '\0';
 800128a:	2500      	movs	r5, #0
 800128c:	f88d 5014 	strb.w	r5, [sp, #20]
            LCD_Print(line);
 8001290:	4668      	mov	r0, sp
 8001292:	f7ff fd97 	bl	8000dc4 <LCD_Print>
        }

        /* Row 1 (index 1): Iout / Cikis I */
		LCD_SetCursor(0, 1);
 8001296:	2101      	movs	r1, #1
 8001298:	4628      	mov	r0, r5
 800129a:	f7ff fd7d 	bl	8000d98 <LCD_SetCursor>
        LCD_Print(labelsShort[0]);
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f7ff fd90 	bl	8000dc4 <LCD_Print>
        LCD_PrintUInt16_1dp(adcIDC2);
 80012a4:	f240 1312 	movw	r3, #274	@ 0x112
 80012a8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012ac:	8818      	ldrh	r0, [r3, #0]
 80012ae:	f7ff fe02 	bl	8000eb6 <LCD_PrintUInt16_1dp>
        LCD_WriteChar(CH_CURR);
 80012b2:	f240 0302 	movw	r3, #2
 80012b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	f7ff fd7d 	bl	8000dba <LCD_WriteChar>

        /* Row 2 (index 2): Vout / Cikis V */
		LCD_SetCursor(0, 2);
 80012c0:	2102      	movs	r1, #2
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff fd68 	bl	8000d98 <LCD_SetCursor>
        LCD_Print(labelsShort[1]);
 80012c8:	6860      	ldr	r0, [r4, #4]
 80012ca:	f7ff fd7b 	bl	8000dc4 <LCD_Print>
        LCD_PrintUInt16_1dp(adcVBAT1);
 80012ce:	f240 1318 	movw	r3, #280	@ 0x118
 80012d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012d6:	8818      	ldrh	r0, [r3, #0]
 80012d8:	f7ff fded 	bl	8000eb6 <LCD_PrintUInt16_1dp>
        LCD_WriteChar('V');
 80012dc:	2056      	movs	r0, #86	@ 0x56
 80012de:	f7ff fd6c 	bl	8000dba <LCD_WriteChar>

        /* Status moved one row down: right side of row 1 */
        {
            LCD_SetCursor(STATUS_COL, 1);
 80012e2:	f240 0301 	movw	r3, #1
 80012e6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80012ea:	2101      	movs	r1, #1
 80012ec:	7818      	ldrb	r0, [r3, #0]
 80012ee:	f7ff fd53 	bl	8000d98 <LCD_SetCursor>
            if (HAL_GPIO_ReadPin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin) == GPIO_PIN_SET) {
 80012f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80012fa:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80012fe:	f003 f84f 	bl	80043a0 <HAL_GPIO_ReadPin>
 8001302:	2801      	cmp	r0, #1
    return UI_STR_TABLE[lcdLangId][id];
 8001304:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001308:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800130c:	f240 021d 	movw	r2, #29
 8001310:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_OPEN));
 800131a:	bf0c      	ite	eq
 800131c:	6c58      	ldreq	r0, [r3, #68]	@ 0x44
            } else {
                LCD_Print(ui_get(UI_STR_CLOSE));
 800131e:	6c98      	ldrne	r0, [r3, #72]	@ 0x48
 8001320:	f7ff fd50 	bl	8000dc4 <LCD_Print>
            }
        }

        /* Row 3: Mains/Sebeke and Temp/Sic split across the line */
		LCD_SetCursor(0, 3);
 8001324:	2103      	movs	r1, #3
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fd36 	bl	8000d98 <LCD_SetCursor>
        LCD_Print(labelsShort[2]); /* Sebeke/Mains */
 800132c:	68a0      	ldr	r0, [r4, #8]
 800132e:	f7ff fd49 	bl	8000dc4 <LCD_Print>
        LCD_PrintUInt16(adcVAC);
 8001332:	f240 131e 	movw	r3, #286	@ 0x11e
 8001336:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800133a:	8818      	ldrh	r0, [r3, #0]
 800133c:	f7ff fd4f 	bl	8000dde <LCD_PrintUInt16>
        LCD_WriteChar('V');
 8001340:	2056      	movs	r0, #86	@ 0x56
 8001342:	f7ff fd3a 	bl	8000dba <LCD_WriteChar>
        LCD_SetCursor(TEMP_COL, 3);
 8001346:	f240 0300 	movw	r3, #0
 800134a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800134e:	2103      	movs	r1, #3
 8001350:	7818      	ldrb	r0, [r3, #0]
 8001352:	f7ff fd21 	bl	8000d98 <LCD_SetCursor>
        LCD_Print(labelsShort[3]); /* Temp/Sic */
 8001356:	68e0      	ldr	r0, [r4, #12]
 8001358:	f7ff fd34 	bl	8000dc4 <LCD_Print>
        LCD_PrintUInt16(adcTEMP);
 800135c:	f240 131c 	movw	r3, #284	@ 0x11c
 8001360:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001364:	8818      	ldrh	r0, [r3, #0]
 8001366:	f7ff fd3a 	bl	8000dde <LCD_PrintUInt16>
        LCD_WriteChar('C');
 800136a:	2043      	movs	r0, #67	@ 0x43
 800136c:	f7ff fd25 	bl	8000dba <LCD_WriteChar>
    /* duplicate blocks removed */

    default:
        break;
    }
}
 8001370:	b007      	add	sp, #28
 8001372:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (idx < 20) line[idx++] = ' ';
 8001374:	2b13      	cmp	r3, #19
 8001376:	f73f af7a 	bgt.w	800126e <lcd_handle+0x266>
 800137a:	4619      	mov	r1, r3
 800137c:	1c4b      	adds	r3, r1, #1
 800137e:	2020      	movs	r0, #32
 8001380:	f101 0218 	add.w	r2, r1, #24
 8001384:	446a      	add	r2, sp
 8001386:	f802 0c18 	strb.w	r0, [r2, #-24]
            const char *b = titleShort; while (*b && idx < 20) line[idx++] = *b++;
 800138a:	782a      	ldrb	r2, [r5, #0]
 800138c:	2a00      	cmp	r2, #0
 800138e:	f43f af70 	beq.w	8001272 <lcd_handle+0x26a>
 8001392:	2b13      	cmp	r3, #19
 8001394:	f73f af79 	bgt.w	800128a <lcd_handle+0x282>
 8001398:	4469      	add	r1, sp
 800139a:	3301      	adds	r3, #1
 800139c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80013a0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	f43f af64 	beq.w	8001272 <lcd_handle+0x26a>
 80013aa:	2b14      	cmp	r3, #20
 80013ac:	d1f5      	bne.n	800139a <lcd_handle+0x392>
 80013ae:	e76c      	b.n	800128a <lcd_handle+0x282>
            int idx = 0;
 80013b0:	2100      	movs	r1, #0
 80013b2:	e7e3      	b.n	800137c <lcd_handle+0x374>
    return UI_STR_TABLE[lcdLangId][id];
 80013b4:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80013b8:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80013bc:	f240 021d 	movw	r2, #29
 80013c0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	681c      	ldr	r4, [r3, #0]
        const char * const * items = STR_MENU_ITEMS;
 80013cc:	f240 23a0 	movw	r3, #672	@ 0x2a0
 80013d0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013d4:	681d      	ldr	r5, [r3, #0]
        LCD_SetCursor(1, 0);
 80013d6:	2100      	movs	r1, #0
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fcdd 	bl	8000d98 <LCD_SetCursor>
            while (*t) {
 80013de:	7820      	ldrb	r0, [r4, #0]
 80013e0:	b160      	cbz	r0, 80013fc <lcd_handle+0x3f4>
                if (c >= 'a' && c <= 'z') {
 80013e2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 80013ea:	bf9c      	itt	ls
 80013ec:	3820      	subls	r0, #32
 80013ee:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 80013f0:	f7ff fce3 	bl	8000dba <LCD_WriteChar>
            while (*t) {
 80013f4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d1f2      	bne.n	80013e2 <lcd_handle+0x3da>
        uint8_t sel = (uint8_t)(menuIndex % total);
 80013fc:	f240 23d6 	movw	r3, #726	@ 0x2d6
 8001400:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001404:	781c      	ldrb	r4, [r3, #0]
 8001406:	f004 0403 	and.w	r4, r4, #3
        uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 800140a:	1ce7      	adds	r7, r4, #3
 800140c:	f007 0703 	and.w	r7, r7, #3
        uint8_t next = (uint8_t)((sel + 1u) % total);
 8001410:	1c66      	adds	r6, r4, #1
 8001412:	f006 0603 	and.w	r6, r6, #3
        LCD_SetCursor(1, 1);
 8001416:	2101      	movs	r1, #1
 8001418:	4608      	mov	r0, r1
 800141a:	f7ff fcbd 	bl	8000d98 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + prev));
 800141e:	f107 0031 	add.w	r0, r7, #49	@ 0x31
 8001422:	f7ff fcca 	bl	8000dba <LCD_WriteChar>
        LCD_WriteChar('.');
 8001426:	202e      	movs	r0, #46	@ 0x2e
 8001428:	f7ff fcc7 	bl	8000dba <LCD_WriteChar>
        LCD_Print(items[prev]);
 800142c:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8001430:	f7ff fcc8 	bl	8000dc4 <LCD_Print>
        LCD_SetCursor(0, 2);
 8001434:	2102      	movs	r1, #2
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fcae 	bl	8000d98 <LCD_SetCursor>
        LCD_WriteChar('>');
 800143c:	203e      	movs	r0, #62	@ 0x3e
 800143e:	f7ff fcbc 	bl	8000dba <LCD_WriteChar>
        LCD_SetCursor(1, 2);
 8001442:	2102      	movs	r1, #2
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fca7 	bl	8000d98 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + sel));
 800144a:	f104 0031 	add.w	r0, r4, #49	@ 0x31
 800144e:	f7ff fcb4 	bl	8000dba <LCD_WriteChar>
        LCD_WriteChar('.');
 8001452:	202e      	movs	r0, #46	@ 0x2e
 8001454:	f7ff fcb1 	bl	8000dba <LCD_WriteChar>
        LCD_Print(items[sel]);
 8001458:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800145c:	f7ff fcb2 	bl	8000dc4 <LCD_Print>
        LCD_SetCursor(1, 3);
 8001460:	2103      	movs	r1, #3
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff fc98 	bl	8000d98 <LCD_SetCursor>
        LCD_WriteChar((char)('1' + next));
 8001468:	f106 0031 	add.w	r0, r6, #49	@ 0x31
 800146c:	f7ff fca5 	bl	8000dba <LCD_WriteChar>
        LCD_WriteChar('.');
 8001470:	202e      	movs	r0, #46	@ 0x2e
 8001472:	f7ff fca2 	bl	8000dba <LCD_WriteChar>
        LCD_Print(items[next]);
 8001476:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800147a:	f7ff fca3 	bl	8000dc4 <LCD_Print>
        break;
 800147e:	e777      	b.n	8001370 <lcd_handle+0x368>
        LCD_SetCursor(1, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fc88 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001488:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800148c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001490:	f240 021d 	movw	r2, #29
 8001494:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	685c      	ldr	r4, [r3, #4]
            while (*t) 
 80014a0:	7820      	ldrb	r0, [r4, #0]
 80014a2:	b160      	cbz	r0, 80014be <lcd_handle+0x4b6>
                if (c >= 'a' && c <= 'z') 
 80014a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 80014ac:	bf9c      	itt	ls
 80014ae:	3820      	subls	r0, #32
 80014b0:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 80014b2:	f7ff fc82 	bl	8000dba <LCD_WriteChar>
            while (*t) 
 80014b6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1f2      	bne.n	80014a4 <lcd_handle+0x49c>
        if (operatingMode == MODE_CHARGER) {
 80014be:	f240 4322 	movw	r3, #1058	@ 0x422
 80014c2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f040 826c 	bne.w	80019a6 <lcd_handle+0x99e>
            uint8_t sel = (uint8_t)(subIndex % total);
 80014ce:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80014d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80014d6:	781d      	ldrb	r5, [r3, #0]
 80014d8:	f64a 24ab 	movw	r4, #43691	@ 0xaaab
 80014dc:	f6ca 24aa 	movt	r4, #43690	@ 0xaaaa
 80014e0:	fba4 2305 	umull	r2, r3, r4, r5
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014ea:	eba5 0543 	sub.w	r5, r5, r3, lsl #1
 80014ee:	b2ed      	uxtb	r5, r5
            LCD_SetCursor(1,1);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4608      	mov	r0, r1
 80014f4:	f7ff fc50 	bl	8000d98 <LCD_SetCursor>
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 80014f8:	1d6b      	adds	r3, r5, #5
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	fba4 2403 	umull	r2, r4, r4, r3
 8001500:	08a4      	lsrs	r4, r4, #2
 8001502:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001506:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b04      	cmp	r3, #4
 800150e:	f200 80a3 	bhi.w	8001658 <lcd_handle+0x650>
 8001512:	e8df f003 	tbb	[pc, r3]
 8001516:	2d03      	.short	0x2d03
 8001518:	5142      	.short	0x5142
 800151a:	79          	.byte	0x79
 800151b:	00          	.byte	0x00
                LCD_Print(STR_BATV);
 800151c:	f240 23b8 	movw	r3, #696	@ 0x2b8
 8001520:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f7ff fc4d 	bl	8000dc4 <LCD_Print>
                    if (batInfo.batteryVoltage >= 24u)
 800152a:	f240 0320 	movw	r3, #32
 800152e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001532:	681b      	ldr	r3, [r3, #0]
                        batv = 24u;
 8001534:	2b18      	cmp	r3, #24
                    LCD_PrintUInt16(batv);
 8001536:	bf34      	ite	cc
 8001538:	200c      	movcc	r0, #12
 800153a:	2018      	movcs	r0, #24
 800153c:	f7ff fc4f 	bl	8000dde <LCD_PrintUInt16>
                    LCD_WriteChar('V');
 8001540:	2056      	movs	r0, #86	@ 0x56
 8001542:	f7ff fc3a 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,2);
 8001546:	2102      	movs	r1, #2
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fc25 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 800154e:	203e      	movs	r0, #62	@ 0x3e
 8001550:	f7ff fc33 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001554:	2102      	movs	r1, #2
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff fc1e 	bl	8000d98 <LCD_SetCursor>
            if (sel == 0) {
 800155c:	2d04      	cmp	r5, #4
 800155e:	f200 81e1 	bhi.w	8001924 <lcd_handle+0x91c>
 8001562:	e8df f015 	tbh	[pc, r5, lsl #1]
 8001566:	00a1      	.short	0x00a1
 8001568:	010a00cf 	.word	0x010a00cf
 800156c:	019c0159 	.word	0x019c0159
				LCD_Print(STR_CAPACITY);
 8001570:	f240 23b4 	movw	r3, #692	@ 0x2b4
 8001574:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f7ff fc23 	bl	8000dc4 <LCD_Print>
				LCD_PrintUInt16_1dp(batInfo.batteryCap);
 800157e:	f240 0320 	movw	r3, #32
 8001582:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001586:	8898      	ldrh	r0, [r3, #4]
 8001588:	f7ff fc95 	bl	8000eb6 <LCD_PrintUInt16_1dp>
				LCD_Print("Ah"); 
 800158c:	f645 10c4 	movw	r0, #22980	@ 0x59c4
 8001590:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001594:	f7ff fc16 	bl	8000dc4 <LCD_Print>
 8001598:	e7d5      	b.n	8001546 <lcd_handle+0x53e>
                LCD_Print(STR_COUNT);
 800159a:	f240 23b0 	movw	r3, #688	@ 0x2b0
 800159e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	f7ff fc0e 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16(batInfo.numberOfBattery);
 80015a8:	f240 0320 	movw	r3, #32
 80015ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015b0:	8918      	ldrh	r0, [r3, #8]
 80015b2:	f7ff fc14 	bl	8000dde <LCD_PrintUInt16>
 80015b6:	e7c6      	b.n	8001546 <lcd_handle+0x53e>
    return UI_STR_TABLE[lcdLangId][id];
 80015b8:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80015bc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80015c0:	f240 021d 	movw	r2, #29
 80015c4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_SAFE_CHARGE));
 80015ce:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80015d0:	f7ff fbf8 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80015d4:	f240 0320 	movw	r3, #32
 80015d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80015dc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2112      	moveq	r1, #18
 80015e6:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 80015e8:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80015ec:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80015f0:	f240 021d 	movw	r2, #29
 80015f4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80015fe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001602:	f7ff fbdf 	bl	8000dc4 <LCD_Print>
 8001606:	e79e      	b.n	8001546 <lcd_handle+0x53e>
    return UI_STR_TABLE[lcdLangId][id];
 8001608:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800160c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001610:	f240 021d 	movw	r2, #29
 8001614:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_SOFT_CHARGE));
 800161e:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8001620:	f7ff fbd0 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001624:	f240 0320 	movw	r3, #32
 8001628:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800162c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2112      	moveq	r1, #18
 8001636:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 8001638:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800163c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001640:	f240 021d 	movw	r2, #29
 8001644:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800164e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001652:	f7ff fbb7 	bl	8000dc4 <LCD_Print>
 8001656:	e776      	b.n	8001546 <lcd_handle+0x53e>
    return UI_STR_TABLE[lcdLangId][id];
 8001658:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800165c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001660:	f240 021d 	movw	r2, #29
 8001664:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_EQUALIZE));
 800166e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8001670:	f7ff fba8 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001674:	f240 0320 	movw	r3, #32
 8001678:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800167c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2112      	moveq	r1, #18
 8001686:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 8001688:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800168c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001690:	f240 021d 	movw	r2, #29
 8001694:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800169e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80016a2:	f7ff fb8f 	bl	8000dc4 <LCD_Print>
 80016a6:	e74e      	b.n	8001546 <lcd_handle+0x53e>
                LCD_Print(STR_BATV);
 80016a8:	f240 23b8 	movw	r3, #696	@ 0x2b8
 80016ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f7ff fb87 	bl	8000dc4 <LCD_Print>
                    if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; }
 80016b6:	f240 0320 	movw	r3, #32
 80016ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b18      	cmp	r3, #24
                    LCD_PrintUInt16(batv);
 80016c2:	bf34      	ite	cc
 80016c4:	200c      	movcc	r0, #12
 80016c6:	2018      	movcs	r0, #24
 80016c8:	f7ff fb89 	bl	8000dde <LCD_PrintUInt16>
                    LCD_WriteChar('V');
 80016cc:	2056      	movs	r0, #86	@ 0x56
 80016ce:	f7ff fb74 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,3);
 80016d2:	2103      	movs	r1, #3
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff fb5f 	bl	8000d98 <LCD_SetCursor>
                LCD_Print(STR_CAPACITY);
 80016da:	f240 23b4 	movw	r3, #692	@ 0x2b4
 80016de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f7ff fb6e 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16_1dp(batInfo.batteryCap);
 80016e8:	f240 0320 	movw	r3, #32
 80016ec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80016f0:	8898      	ldrh	r0, [r3, #4]
 80016f2:	f7ff fbe0 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                LCD_Print("Ah"); 
 80016f6:	f645 10c4 	movw	r0, #22980	@ 0x59c4
 80016fa:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80016fe:	f7ff fb61 	bl	8000dc4 <LCD_Print>
 8001702:	e635      	b.n	8001370 <lcd_handle+0x368>
                LCD_Print(STR_CAPACITY);
 8001704:	f240 23b4 	movw	r3, #692	@ 0x2b4
 8001708:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f7ff fb59 	bl	8000dc4 <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 8001712:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001716:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	bb2b      	cbnz	r3, 800176a <lcd_handle+0x762>
                LCD_PrintUInt16_1dp(batInfo.batteryCap);
 800171e:	f240 0320 	movw	r3, #32
 8001722:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001726:	8898      	ldrh	r0, [r3, #4]
 8001728:	f7ff fbc5 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 800172c:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001730:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b9e3      	cbnz	r3, 8001772 <lcd_handle+0x76a>
                LCD_Print("Ah");
 8001738:	f645 10c4 	movw	r0, #22980	@ 0x59c4
 800173c:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001740:	f7ff fb40 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 8001744:	2103      	movs	r1, #3
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff fb26 	bl	8000d98 <LCD_SetCursor>
                LCD_Print(STR_COUNT);
 800174c:	f240 23b0 	movw	r3, #688	@ 0x2b0
 8001750:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	f7ff fb35 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16(batInfo.numberOfBattery);
 800175a:	f240 0320 	movw	r3, #32
 800175e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001762:	8918      	ldrh	r0, [r3, #8]
 8001764:	f7ff fb3b 	bl	8000dde <LCD_PrintUInt16>
 8001768:	e602      	b.n	8001370 <lcd_handle+0x368>
                if (isEditing) LCD_WriteChar('[');
 800176a:	205b      	movs	r0, #91	@ 0x5b
 800176c:	f7ff fb25 	bl	8000dba <LCD_WriteChar>
 8001770:	e7d5      	b.n	800171e <lcd_handle+0x716>
                if (isEditing) LCD_WriteChar(']');
 8001772:	205d      	movs	r0, #93	@ 0x5d
 8001774:	f7ff fb21 	bl	8000dba <LCD_WriteChar>
 8001778:	e7de      	b.n	8001738 <lcd_handle+0x730>
                LCD_Print(STR_COUNT);
 800177a:	f240 23b0 	movw	r3, #688	@ 0x2b0
 800177e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f7ff fb1e 	bl	8000dc4 <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 8001788:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800178c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d138      	bne.n	8001808 <lcd_handle+0x800>
                LCD_PrintUInt16(batInfo.numberOfBattery);
 8001796:	f240 0320 	movw	r3, #32
 800179a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800179e:	8918      	ldrh	r0, [r3, #8]
 80017a0:	f7ff fb1d 	bl	8000dde <LCD_PrintUInt16>
                if (isEditing) LCD_WriteChar(']');
 80017a4:	f240 23d4 	movw	r3, #724	@ 0x2d4
 80017a8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	bb7b      	cbnz	r3, 8001810 <lcd_handle+0x808>
            LCD_SetCursor(1,3);
 80017b0:	2103      	movs	r1, #3
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff faf0 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80017b8:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80017bc:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80017c0:	f240 021d 	movw	r2, #29
 80017c4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_SAFE_CHARGE));
 80017ce:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80017d0:	f7ff faf8 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80017d4:	f240 0320 	movw	r3, #32
 80017d8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80017dc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2112      	moveq	r1, #18
 80017e6:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 80017e8:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80017ec:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80017f0:	f240 021d 	movw	r2, #29
 80017f4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80017fe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001802:	f7ff fadf 	bl	8000dc4 <LCD_Print>
 8001806:	e5b3      	b.n	8001370 <lcd_handle+0x368>
                if (isEditing) LCD_WriteChar('[');
 8001808:	205b      	movs	r0, #91	@ 0x5b
 800180a:	f7ff fad6 	bl	8000dba <LCD_WriteChar>
 800180e:	e7c2      	b.n	8001796 <lcd_handle+0x78e>
                if (isEditing) LCD_WriteChar(']');
 8001810:	205d      	movs	r0, #93	@ 0x5d
 8001812:	f7ff fad2 	bl	8000dba <LCD_WriteChar>
 8001816:	e7cb      	b.n	80017b0 <lcd_handle+0x7a8>
    return UI_STR_TABLE[lcdLangId][id];
 8001818:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800181c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001820:	f240 021d 	movw	r2, #29
 8001824:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_SAFE_CHARGE));
 800182e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8001830:	f7ff fac8 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001834:	f240 0320 	movw	r3, #32
 8001838:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800183c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf0c      	ite	eq
 8001844:	2212      	moveq	r2, #18
 8001846:	2211      	movne	r2, #17
    return UI_STR_TABLE[lcdLangId][id];
 8001848:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 800184c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001850:	f240 051d 	movw	r5, #29
 8001854:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001858:	782b      	ldrb	r3, [r5, #0]
 800185a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(batInfo.safeChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800185e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001862:	f7ff faaf 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 8001866:	2103      	movs	r1, #3
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff fa95 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 800186e:	782b      	ldrb	r3, [r5, #0]
 8001870:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_SOFT_CHARGE));
 8001874:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8001876:	f7ff faa5 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800187a:	f240 0320 	movw	r3, #32
 800187e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf0c      	ite	eq
 800188a:	2112      	moveq	r1, #18
 800188c:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 800188e:	782a      	ldrb	r2, [r5, #0]
 8001890:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001894:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8001898:	f7ff fa94 	bl	8000dc4 <LCD_Print>
 800189c:	e568      	b.n	8001370 <lcd_handle+0x368>
    return UI_STR_TABLE[lcdLangId][id];
 800189e:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80018a2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80018a6:	f240 021d 	movw	r2, #29
 80018aa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_SOFT_CHARGE));
 80018b4:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 80018b6:	f7ff fa85 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80018ba:	f240 0320 	movw	r3, #32
 80018be:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80018c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf0c      	ite	eq
 80018ca:	2212      	moveq	r2, #18
 80018cc:	2211      	movne	r2, #17
    return UI_STR_TABLE[lcdLangId][id];
 80018ce:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 80018d2:	f6c0 0400 	movt	r4, #2048	@ 0x800
 80018d6:	f240 051d 	movw	r5, #29
 80018da:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80018de:	782b      	ldrb	r3, [r5, #0]
 80018e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(batInfo.softChargeEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 80018e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80018e8:	f7ff fa6c 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 80018ec:	2103      	movs	r1, #3
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fa52 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80018f4:	782b      	ldrb	r3, [r5, #0]
 80018f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_EQUALIZE));
 80018fa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80018fc:	f7ff fa62 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001900:	f240 0320 	movw	r3, #32
 8001904:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001908:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2112      	moveq	r1, #18
 8001912:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 8001914:	782a      	ldrb	r2, [r5, #0]
 8001916:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800191a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800191e:	f7ff fa51 	bl	8000dc4 <LCD_Print>
 8001922:	e525      	b.n	8001370 <lcd_handle+0x368>
    return UI_STR_TABLE[lcdLangId][id];
 8001924:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001928:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800192c:	f240 021d 	movw	r2, #29
 8001930:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_EQUALIZE));
 800193a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800193c:	f7ff fa42 	bl	8000dc4 <LCD_Print>
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 8001940:	f240 0320 	movw	r3, #32
 8001944:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001948:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2112      	moveq	r1, #18
 8001952:	2111      	movne	r1, #17
    return UI_STR_TABLE[lcdLangId][id];
 8001954:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001958:	f6c0 0300 	movt	r3, #2048	@ 0x800
 800195c:	f240 021d 	movw	r2, #29
 8001960:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(batInfo.equalizationEnabled ? UI_STR_OPEN : UI_STR_CLOSE));
 800196a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800196e:	f7ff fa29 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 8001972:	2103      	movs	r1, #3
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fa0f 	bl	8000d98 <LCD_SetCursor>
                LCD_Print(STR_BATV);
 800197a:	f240 23b8 	movw	r3, #696	@ 0x2b8
 800197e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	f7ff fa1e 	bl	8000dc4 <LCD_Print>
                    if (batInfo.batteryVoltage >= 24u) { batv = 24u; } else { batv = 12u; } 
 8001988:	f240 0320 	movw	r3, #32
 800198c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b18      	cmp	r3, #24
                    LCD_PrintUInt16(batv);
 8001994:	bf34      	ite	cc
 8001996:	200c      	movcc	r0, #12
 8001998:	2018      	movcs	r0, #24
 800199a:	f7ff fa20 	bl	8000dde <LCD_PrintUInt16>
                    LCD_WriteChar('V');
 800199e:	2056      	movs	r0, #86	@ 0x56
 80019a0:	f7ff fa0b 	bl	8000dba <LCD_WriteChar>
 80019a4:	e4e4      	b.n	8001370 <lcd_handle+0x368>
            uint8_t sel = (uint8_t)(subIndex % total);
 80019a6:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80019aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80019ae:	781c      	ldrb	r4, [r3, #0]
 80019b0:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 80019b4:	2101      	movs	r1, #1
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff f9ee 	bl	8000d98 <LCD_SetCursor>
            if (sel == 0) {
 80019bc:	2c00      	cmp	r4, #0
 80019be:	d14b      	bne.n	8001a58 <lcd_handle+0xa50>
                LCD_Print("                    ");
 80019c0:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 80019c4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80019c8:	f7ff f9fc 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 80019cc:	2102      	movs	r1, #2
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff f9e2 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 80019d4:	203e      	movs	r0, #62	@ 0x3e
 80019d6:	f7ff f9f0 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 80019da:	2102      	movs	r1, #2
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff f9db 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("V set:");
 80019e2:	f645 10e0 	movw	r0, #23008	@ 0x59e0
 80019e6:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80019ea:	f7ff f9eb 	bl	8000dc4 <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 80019ee:	f240 23d4 	movw	r3, #724	@ 0x2d4
 80019f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d177      	bne.n	8001aec <lcd_handle+0xae4>
                LCD_PrintUInt16_1dp(outputVSet_dV);
 80019fc:	f240 0382 	movw	r3, #130	@ 0x82
 8001a00:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a04:	8818      	ldrh	r0, [r3, #0]
 8001a06:	f7ff fa56 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 8001a0a:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001a0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d16d      	bne.n	8001af4 <lcd_handle+0xaec>
                LCD_WriteChar('V');
 8001a18:	2056      	movs	r0, #86	@ 0x56
 8001a1a:	f7ff f9ce 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001a1e:	2103      	movs	r1, #3
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff f9b9 	bl	8000d98 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001a26:	2103      	movs	r1, #3
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff f9b5 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("I max:"); LCD_PrintUInt16_1dp(outputIMax_dA); LCD_WriteChar(CH_CURR);
 8001a2e:	f645 10e8 	movw	r0, #23016	@ 0x59e8
 8001a32:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001a36:	f7ff f9c5 	bl	8000dc4 <LCD_Print>
 8001a3a:	f240 0380 	movw	r3, #128	@ 0x80
 8001a3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a42:	8818      	ldrh	r0, [r3, #0]
 8001a44:	f7ff fa37 	bl	8000eb6 <LCD_PrintUInt16_1dp>
 8001a48:	f240 0302 	movw	r3, #2
 8001a4c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a50:	7818      	ldrb	r0, [r3, #0]
 8001a52:	f7ff f9b2 	bl	8000dba <LCD_WriteChar>
 8001a56:	e48b      	b.n	8001370 <lcd_handle+0x368>
                LCD_SetCursor(1,1);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	4608      	mov	r0, r1
 8001a5c:	f7ff f99c 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("V set:"); LCD_PrintUInt16_1dp(outputVSet_dV); LCD_WriteChar('V');
 8001a60:	f645 10e0 	movw	r0, #23008	@ 0x59e0
 8001a64:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001a68:	f7ff f9ac 	bl	8000dc4 <LCD_Print>
 8001a6c:	f240 0382 	movw	r3, #130	@ 0x82
 8001a70:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001a74:	8818      	ldrh	r0, [r3, #0]
 8001a76:	f7ff fa1e 	bl	8000eb6 <LCD_PrintUInt16_1dp>
 8001a7a:	2056      	movs	r0, #86	@ 0x56
 8001a7c:	f7ff f99d 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,2);
 8001a80:	2102      	movs	r1, #2
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff f988 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001a88:	203e      	movs	r0, #62	@ 0x3e
 8001a8a:	f7ff f996 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001a8e:	2102      	movs	r1, #2
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff f981 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("I max:");
 8001a96:	f645 10e8 	movw	r0, #23016	@ 0x59e8
 8001a9a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001a9e:	f7ff f991 	bl	8000dc4 <LCD_Print>
                if (isEditing) LCD_WriteChar('[');
 8001aa2:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001aa6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	bb33      	cbnz	r3, 8001afc <lcd_handle+0xaf4>
                LCD_PrintUInt16_1dp(outputIMax_dA);
 8001aae:	f240 0380 	movw	r3, #128	@ 0x80
 8001ab2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001ab6:	8818      	ldrh	r0, [r3, #0]
 8001ab8:	f7ff f9fd 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                if (isEditing) LCD_WriteChar(']');
 8001abc:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001ac0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b9eb      	cbnz	r3, 8001b04 <lcd_handle+0xafc>
                LCD_WriteChar(CH_CURR);
 8001ac8:	f240 0302 	movw	r3, #2
 8001acc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001ad0:	7818      	ldrb	r0, [r3, #0]
 8001ad2:	f7ff f972 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff f95d 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("                    ");
 8001ade:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001ae2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001ae6:	f7ff f96d 	bl	8000dc4 <LCD_Print>
 8001aea:	e441      	b.n	8001370 <lcd_handle+0x368>
                if (isEditing) LCD_WriteChar('[');
 8001aec:	205b      	movs	r0, #91	@ 0x5b
 8001aee:	f7ff f964 	bl	8000dba <LCD_WriteChar>
 8001af2:	e783      	b.n	80019fc <lcd_handle+0x9f4>
                if (isEditing) LCD_WriteChar(']');
 8001af4:	205d      	movs	r0, #93	@ 0x5d
 8001af6:	f7ff f960 	bl	8000dba <LCD_WriteChar>
 8001afa:	e78d      	b.n	8001a18 <lcd_handle+0xa10>
                if (isEditing) LCD_WriteChar('[');
 8001afc:	205b      	movs	r0, #91	@ 0x5b
 8001afe:	f7ff f95c 	bl	8000dba <LCD_WriteChar>
 8001b02:	e7d4      	b.n	8001aae <lcd_handle+0xaa6>
                if (isEditing) LCD_WriteChar(']');
 8001b04:	205d      	movs	r0, #93	@ 0x5d
 8001b06:	f7ff f958 	bl	8000dba <LCD_WriteChar>
 8001b0a:	e7dd      	b.n	8001ac8 <lcd_handle+0xac0>
        LCD_SetCursor(1,0);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7ff f942 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001b14:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001b18:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001b1c:	f240 021d 	movw	r2, #29
 8001b20:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	689c      	ldr	r4, [r3, #8]
            while (*t)
 8001b2c:	7820      	ldrb	r0, [r4, #0]
 8001b2e:	b160      	cbz	r0, 8001b4a <lcd_handle+0xb42>
                if (c >= 'a' && c <= 'z')
 8001b30:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001b38:	bf9c      	itt	ls
 8001b3a:	3820      	subls	r0, #32
 8001b3c:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001b3e:	f7ff f93c 	bl	8000dba <LCD_WriteChar>
            while (*t)
 8001b42:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d1f2      	bne.n	8001b30 <lcd_handle+0xb28>
        if (operatingMode == MODE_CHARGER) {
 8001b4a:	f240 4322 	movw	r3, #1058	@ 0x422
 8001b4e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 80b5 	bne.w	8001cc4 <lcd_handle+0xcbc>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001b5a:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8001b5e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001b62:	781c      	ldrb	r4, [r3, #0]
 8001b64:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff f914 	bl	8000d98 <LCD_SetCursor>
            if (sel == 0) {
 8001b70:	2c00      	cmp	r4, #0
 8001b72:	d14c      	bne.n	8001c0e <lcd_handle+0xc06>
                LCD_Print("                    ");
 8001b74:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001b78:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001b7c:	f7ff f922 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 8001b80:	2102      	movs	r1, #2
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff f908 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001b88:	203e      	movs	r0, #62	@ 0x3e
 8001b8a:	f7ff f916 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001b8e:	2102      	movs	r1, #2
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f901 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("Test V:");
 8001b96:	f645 10f0 	movw	r0, #23024	@ 0x59f0
 8001b9a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001b9e:	f7ff f911 	bl	8000dc4 <LCD_Print>
                if (isEditing)
 8001ba2:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001ba6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d179      	bne.n	8001ca4 <lcd_handle+0xc9c>
                LCD_PrintUInt16_1dp(testVoltage_dV);
 8001bb0:	f240 0386 	movw	r3, #134	@ 0x86
 8001bb4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001bb8:	8818      	ldrh	r0, [r3, #0]
 8001bba:	f7ff f97c 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                if (isEditing)
 8001bbe:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001bc2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d16f      	bne.n	8001cac <lcd_handle+0xca4>
                LCD_WriteChar('V');
 8001bcc:	2056      	movs	r0, #86	@ 0x56
 8001bce:	f7ff f8f4 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff f8df 	bl	8000d98 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff f8db 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("Test I:");
 8001be2:	f645 10f8 	movw	r0, #23032	@ 0x59f8
 8001be6:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001bea:	f7ff f8eb 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16_1dp(testCurrent_dA);
 8001bee:	f240 0384 	movw	r3, #132	@ 0x84
 8001bf2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001bf6:	8818      	ldrh	r0, [r3, #0]
 8001bf8:	f7ff f95d 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                LCD_WriteChar(CH_CURR);
 8001bfc:	f240 0302 	movw	r3, #2
 8001c00:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c04:	7818      	ldrb	r0, [r3, #0]
 8001c06:	f7ff f8d8 	bl	8000dba <LCD_WriteChar>
 8001c0a:	f7ff bbb1 	b.w	8001370 <lcd_handle+0x368>
                LCD_SetCursor(1,1);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4608      	mov	r0, r1
 8001c12:	f7ff f8c1 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("Test V:");
 8001c16:	f645 10f0 	movw	r0, #23024	@ 0x59f0
 8001c1a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001c1e:	f7ff f8d1 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16_1dp(testVoltage_dV);
 8001c22:	f240 0386 	movw	r3, #134	@ 0x86
 8001c26:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c2a:	8818      	ldrh	r0, [r3, #0]
 8001c2c:	f7ff f943 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                LCD_WriteChar('V');
 8001c30:	2056      	movs	r0, #86	@ 0x56
 8001c32:	f7ff f8c2 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,2);
 8001c36:	2102      	movs	r1, #2
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff f8ad 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001c3e:	203e      	movs	r0, #62	@ 0x3e
 8001c40:	f7ff f8bb 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001c44:	2102      	movs	r1, #2
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff f8a6 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("Test I:");
 8001c4c:	f645 10f8 	movw	r0, #23032	@ 0x59f8
 8001c50:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001c54:	f7ff f8b6 	bl	8000dc4 <LCD_Print>
                if (isEditing)
 8001c58:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001c5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	bb3b      	cbnz	r3, 8001cb4 <lcd_handle+0xcac>
                LCD_PrintUInt16_1dp(testCurrent_dA);
 8001c64:	f240 0384 	movw	r3, #132	@ 0x84
 8001c68:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c6c:	8818      	ldrh	r0, [r3, #0]
 8001c6e:	f7ff f922 	bl	8000eb6 <LCD_PrintUInt16_1dp>
                if (isEditing)
 8001c72:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8001c76:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b9f3      	cbnz	r3, 8001cbc <lcd_handle+0xcb4>
                LCD_WriteChar(CH_CURR);
 8001c7e:	f240 0302 	movw	r3, #2
 8001c82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001c86:	7818      	ldrb	r0, [r3, #0]
 8001c88:	f7ff f897 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(0,3);
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff f882 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("                    ");
 8001c94:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001c98:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001c9c:	f7ff f892 	bl	8000dc4 <LCD_Print>
 8001ca0:	f7ff bb66 	b.w	8001370 <lcd_handle+0x368>
                    LCD_WriteChar('[');
 8001ca4:	205b      	movs	r0, #91	@ 0x5b
 8001ca6:	f7ff f888 	bl	8000dba <LCD_WriteChar>
 8001caa:	e781      	b.n	8001bb0 <lcd_handle+0xba8>
                    LCD_WriteChar(']');
 8001cac:	205d      	movs	r0, #93	@ 0x5d
 8001cae:	f7ff f884 	bl	8000dba <LCD_WriteChar>
 8001cb2:	e78b      	b.n	8001bcc <lcd_handle+0xbc4>
                    LCD_WriteChar('[');
 8001cb4:	205b      	movs	r0, #91	@ 0x5b
 8001cb6:	f7ff f880 	bl	8000dba <LCD_WriteChar>
 8001cba:	e7d3      	b.n	8001c64 <lcd_handle+0xc5c>
                    LCD_WriteChar(']');
 8001cbc:	205d      	movs	r0, #93	@ 0x5d
 8001cbe:	f7ff f87c 	bl	8000dba <LCD_WriteChar>
 8001cc2:	e7dc      	b.n	8001c7e <lcd_handle+0xc76>
            LCD_SetCursor(0,1);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff f866 	bl	8000d98 <LCD_SetCursor>
            LCD_Print("                    ");
 8001ccc:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001cd0:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001cd4:	f7ff f876 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 8001cd8:	2102      	movs	r1, #2
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f7ff f85c 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001ce0:	203e      	movs	r0, #62	@ 0x3e
 8001ce2:	f7ff f86a 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f855 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001cee:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001cf2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001cf6:	f240 021d 	movw	r2, #29
 8001cfa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            LCD_Print(ui_get(UI_STR_SHORT_TEST)); 
 8001d04:	69d8      	ldr	r0, [r3, #28]
 8001d06:	f7ff f85d 	bl	8000dc4 <LCD_Print>
			if (shortCircuitTest) {
 8001d0a:	f240 4321 	movw	r3, #1057	@ 0x421
 8001d0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	b1cb      	cbz	r3, 8001d4a <lcd_handle+0xd42>
    return UI_STR_TABLE[lcdLangId][id];
 8001d16:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001d1a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d1e:	f240 021d 	movw	r2, #29
 8001d22:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				LCD_Print(ui_get(UI_STR_OPEN));
 8001d2c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001d2e:	f7ff f849 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,3);
 8001d32:	2103      	movs	r1, #3
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff f82f 	bl	8000d98 <LCD_SetCursor>
            LCD_Print("                    ");
 8001d3a:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001d3e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001d42:	f7ff f83f 	bl	8000dc4 <LCD_Print>
 8001d46:	f7ff bb13 	b.w	8001370 <lcd_handle+0x368>
    return UI_STR_TABLE[lcdLangId][id];
 8001d4a:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001d4e:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d52:	f240 021d 	movw	r2, #29
 8001d56:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				LCD_Print(ui_get(UI_STR_CLOSE));
 8001d60:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001d62:	f7ff f82f 	bl	8000dc4 <LCD_Print>
 8001d66:	e7e4      	b.n	8001d32 <lcd_handle+0xd2a>
        LCD_SetCursor(1,0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7ff f814 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001d70:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001d74:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001d78:	f240 021d 	movw	r2, #29
 8001d7c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	68dc      	ldr	r4, [r3, #12]
            while (*t)
 8001d88:	7820      	ldrb	r0, [r4, #0]
 8001d8a:	b160      	cbz	r0, 8001da6 <lcd_handle+0xd9e>
                if (c >= 'a' && c <= 'z')
 8001d8c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8001d94:	bf9c      	itt	ls
 8001d96:	3820      	subls	r0, #32
 8001d98:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8001d9a:	f7ff f80e 	bl	8000dba <LCD_WriteChar>
            while (*t)
 8001d9e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1f2      	bne.n	8001d8c <lcd_handle+0xd84>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001da6:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8001daa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001dae:	781c      	ldrb	r4, [r3, #0]
 8001db0:	f004 0401 	and.w	r4, r4, #1
            LCD_SetCursor(0,1);
 8001db4:	2101      	movs	r1, #1
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7fe ffee 	bl	8000d98 <LCD_SetCursor>
            if (sel == 0) {
 8001dbc:	bbd4      	cbnz	r4, 8001e34 <lcd_handle+0xe2c>
                LCD_Print("                    ");
 8001dbe:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001dc2:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001dc6:	f7fe fffd 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 8001dca:	2102      	movs	r1, #2
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7fe ffe3 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001dd2:	203e      	movs	r0, #62	@ 0x3e
 8001dd4:	f7fe fff1 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001dd8:	2102      	movs	r1, #2
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7fe ffdc 	bl	8000d98 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001de0:	2031      	movs	r0, #49	@ 0x31
 8001de2:	f7fe ffea 	bl	8000dba <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001de6:	202e      	movs	r0, #46	@ 0x2e
 8001de8:	f7fe ffe7 	bl	8000dba <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001dec:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 8001df0:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001df4:	f240 051d 	movw	r5, #29
 8001df8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001dfc:	782b      	ldrb	r3, [r5, #0]
 8001dfe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME)); 
 8001e02:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001e04:	f7fe ffde 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,3);
 8001e08:	2103      	movs	r1, #3
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7fe ffc4 	bl	8000d98 <LCD_SetCursor>
                LCD_SetCursor(1,3);
 8001e10:	2103      	movs	r1, #3
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7fe ffc0 	bl	8000d98 <LCD_SetCursor>
                LCD_WriteChar('2');
 8001e18:	2032      	movs	r0, #50	@ 0x32
 8001e1a:	f7fe ffce 	bl	8000dba <LCD_WriteChar>
                LCD_WriteChar('.');
 8001e1e:	202e      	movs	r0, #46	@ 0x2e
 8001e20:	f7fe ffcb 	bl	8000dba <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001e24:	782b      	ldrb	r3, [r5, #0]
 8001e26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_SUPPLY_NAME));
 8001e2a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e2c:	f7fe ffca 	bl	8000dc4 <LCD_Print>
 8001e30:	f7ff ba9e 	b.w	8001370 <lcd_handle+0x368>
                LCD_SetCursor(1,1); 
 8001e34:	2101      	movs	r1, #1
 8001e36:	4608      	mov	r0, r1
 8001e38:	f7fe ffae 	bl	8000d98 <LCD_SetCursor>
				LCD_WriteChar('1'); 
 8001e3c:	2031      	movs	r0, #49	@ 0x31
 8001e3e:	f7fe ffbc 	bl	8000dba <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001e42:	202e      	movs	r0, #46	@ 0x2e
 8001e44:	f7fe ffb9 	bl	8000dba <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001e48:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 8001e4c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001e50:	f240 051d 	movw	r5, #29
 8001e54:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001e58:	782b      	ldrb	r3, [r5, #0]
 8001e5a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_CHARGER_NAME));
 8001e5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001e60:	f7fe ffb0 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 8001e64:	2102      	movs	r1, #2
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7fe ff96 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001e6c:	203e      	movs	r0, #62	@ 0x3e
 8001e6e:	f7fe ffa4 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001e72:	2102      	movs	r1, #2
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7fe ff8f 	bl	8000d98 <LCD_SetCursor>
				LCD_WriteChar('2'); 
 8001e7a:	2032      	movs	r0, #50	@ 0x32
 8001e7c:	f7fe ff9d 	bl	8000dba <LCD_WriteChar>
				LCD_WriteChar('.'); 
 8001e80:	202e      	movs	r0, #46	@ 0x2e
 8001e82:	f7fe ff9a 	bl	8000dba <LCD_WriteChar>
    return UI_STR_TABLE[lcdLangId][id];
 8001e86:	782b      	ldrb	r3, [r5, #0]
 8001e88:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
				LCD_Print(ui_get(UI_STR_SUPPLY_NAME)); 
 8001e8c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e8e:	f7fe ff99 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,3);
 8001e92:	2103      	movs	r1, #3
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7fe ff7f 	bl	8000d98 <LCD_SetCursor>
                LCD_Print("                    ");
 8001e9a:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 8001e9e:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8001ea2:	f7fe ff8f 	bl	8000dc4 <LCD_Print>
 8001ea6:	f7ff ba63 	b.w	8001370 <lcd_handle+0x368>
        LCD_SetCursor(1,0);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7fe ff73 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001eb2:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001eb6:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001eba:	f240 021d 	movw	r2, #29
 8001ebe:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001ec2:	7812      	ldrb	r2, [r2, #0]
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	691c      	ldr	r4, [r3, #16]
            while (*t) { char c=*t++; if(c>='a'&&c<='z') c=(char)(c-'a'+'A'); LCD_WriteChar(c);}    
 8001eca:	7820      	ldrb	r0, [r4, #0]
 8001ecc:	b160      	cbz	r0, 8001ee8 <lcd_handle+0xee0>
 8001ece:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b19      	cmp	r3, #25
 8001ed6:	bf9c      	itt	ls
 8001ed8:	3820      	subls	r0, #32
 8001eda:	b2c0      	uxtbls	r0, r0
 8001edc:	f7fe ff6d 	bl	8000dba <LCD_WriteChar>
 8001ee0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1f2      	bne.n	8001ece <lcd_handle+0xec6>
            uint8_t sel = (uint8_t)(subIndex % total);
 8001ee8:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8001eec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001ef0:	781d      	ldrb	r5, [r3, #0]
 8001ef2:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8001ef6:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8001efa:	fba2 3105 	umull	r3, r1, r2, r5
 8001efe:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8001f02:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8001f06:	1aed      	subs	r5, r5, r3
 8001f08:	b2ed      	uxtb	r5, r5
            uint8_t prev = (uint8_t)((sel + total - 1u) % total);
 8001f0a:	1cab      	adds	r3, r5, #2
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	fba2 1203 	umull	r1, r2, r2, r3
 8001f12:	f002 01fe 	and.w	r1, r2, #254	@ 0xfe
 8001f16:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	b2dc      	uxtb	r4, r3
            LCD_SetCursor(1,1);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4608      	mov	r0, r1
 8001f22:	f7fe ff39 	bl	8000d98 <LCD_SetCursor>
            if (prev == 0) {
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d03f      	beq.n	8001faa <lcd_handle+0xfa2>
            else if (prev == 1) {
 8001f2a:	2c01      	cmp	r4, #1
 8001f2c:	d053      	beq.n	8001fd6 <lcd_handle+0xfce>
    return UI_STR_TABLE[lcdLangId][id];
 8001f2e:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001f32:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001f36:	f240 021d 	movw	r2, #29
 8001f3a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001f44:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001f46:	f7fe ff3d 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0,2);
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7fe ff23 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('>');
 8001f52:	203e      	movs	r0, #62	@ 0x3e
 8001f54:	f7fe ff31 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,2);
 8001f58:	2102      	movs	r1, #2
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7fe ff1c 	bl	8000d98 <LCD_SetCursor>
            if (sel == 0) {
 8001f60:	2d00      	cmp	r5, #0
 8001f62:	d051      	beq.n	8002008 <lcd_handle+0x1000>
            } else if (sel == 1) {
 8001f64:	2d01      	cmp	r5, #1
 8001f66:	d07a      	beq.n	800205e <lcd_handle+0x1056>
    return UI_STR_TABLE[lcdLangId][id];
 8001f68:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 8001f6c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8001f70:	f240 051d 	movw	r5, #29
 8001f74:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8001f78:	782b      	ldrb	r3, [r5, #0]
 8001f7a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 8001f7e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001f80:	f7fe ff20 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 8001f84:	2103      	movs	r1, #3
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7fe ff06 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 8001f8c:	782b      	ldrb	r3, [r5, #0]
 8001f8e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001f92:	6a18      	ldr	r0, [r3, #32]
 8001f94:	f7fe ff16 	bl	8000dc4 <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001f98:	f240 239c 	movw	r3, #668	@ 0x29c
 8001f9c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	f7fe ff0f 	bl	8000dc4 <LCD_Print>
 8001fa6:	f7ff b9e3 	b.w	8001370 <lcd_handle+0x368>
    return UI_STR_TABLE[lcdLangId][id];
 8001faa:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001fae:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001fb2:	f240 021d 	movw	r2, #29
 8001fb6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001fba:	7812      	ldrb	r2, [r2, #0]
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 8001fc0:	6a18      	ldr	r0, [r3, #32]
 8001fc2:	f7fe feff 	bl	8000dc4 <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8001fc6:	f240 239c 	movw	r3, #668	@ 0x29c
 8001fca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	f7fe fef8 	bl	8000dc4 <LCD_Print>
 8001fd4:	e7b9      	b.n	8001f4a <lcd_handle+0xf42>
    return UI_STR_TABLE[lcdLangId][id];
 8001fd6:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8001fda:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8001fde:	f240 021d 	movw	r2, #29
 8001fe2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8001fec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001fee:	f7fe fee9 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16(brightness);
 8001ff2:	f240 0314 	movw	r3, #20
 8001ff6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8001ffa:	7818      	ldrb	r0, [r3, #0]
 8001ffc:	f7fe feef 	bl	8000dde <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8002000:	2025      	movs	r0, #37	@ 0x25
 8002002:	f7fe feda 	bl	8000dba <LCD_WriteChar>
 8002006:	e7a0      	b.n	8001f4a <lcd_handle+0xf42>
    return UI_STR_TABLE[lcdLangId][id];
 8002008:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 800200c:	f6c0 0400 	movt	r4, #2048	@ 0x800
 8002010:	f240 051d 	movw	r5, #29
 8002014:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8002018:	782b      	ldrb	r3, [r5, #0]
 800201a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_LANG));
 800201e:	6a18      	ldr	r0, [r3, #32]
 8002020:	f7fe fed0 	bl	8000dc4 <LCD_Print>
                LCD_Print(STR_LANG_VAL);
 8002024:	f240 239c 	movw	r3, #668	@ 0x29c
 8002028:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f7fe fec9 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(1,3);
 8002032:	2103      	movs	r1, #3
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe feaf 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 800203a:	782b      	ldrb	r3, [r5, #0]
 800203c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8002040:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002042:	f7fe febf 	bl	8000dc4 <LCD_Print>
                LCD_PrintUInt16(brightness);
 8002046:	f240 0314 	movw	r3, #20
 800204a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800204e:	7818      	ldrb	r0, [r3, #0]
 8002050:	f7fe fec5 	bl	8000dde <LCD_PrintUInt16>
                LCD_WriteChar('%');
 8002054:	2025      	movs	r0, #37	@ 0x25
 8002056:	f7fe feb0 	bl	8000dba <LCD_WriteChar>
 800205a:	f7ff b989 	b.w	8001370 <lcd_handle+0x368>
    return UI_STR_TABLE[lcdLangId][id];
 800205e:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8002062:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002066:	f240 021d 	movw	r2, #29
 800206a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_BRIGHT));
 8002074:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002076:	f7fe fea5 	bl	8000dc4 <LCD_Print>
                if (isEditing)
 800207a:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800207e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	bb1b      	cbnz	r3, 80020ce <lcd_handle+0x10c6>
                LCD_PrintUInt16(brightness);
 8002086:	f240 0314 	movw	r3, #20
 800208a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800208e:	7818      	ldrb	r0, [r3, #0]
 8002090:	f7fe fea5 	bl	8000dde <LCD_PrintUInt16>
                if (isEditing)
 8002094:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002098:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b9d3      	cbnz	r3, 80020d6 <lcd_handle+0x10ce>
                LCD_WriteChar('%');
 80020a0:	2025      	movs	r0, #37	@ 0x25
 80020a2:	f7fe fe8a 	bl	8000dba <LCD_WriteChar>
            LCD_SetCursor(1,3);
 80020a6:	2103      	movs	r1, #3
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7fe fe75 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80020ae:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80020b2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80020b6:	f240 021d 	movw	r2, #29
 80020ba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                LCD_Print(ui_get(UI_STR_MFG_MENU));
 80020c4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80020c6:	f7fe fe7d 	bl	8000dc4 <LCD_Print>
 80020ca:	f7ff b951 	b.w	8001370 <lcd_handle+0x368>
                    LCD_WriteChar('[');
 80020ce:	205b      	movs	r0, #91	@ 0x5b
 80020d0:	f7fe fe73 	bl	8000dba <LCD_WriteChar>
 80020d4:	e7d7      	b.n	8002086 <lcd_handle+0x107e>
                    LCD_WriteChar(']');
 80020d6:	205d      	movs	r0, #93	@ 0x5d
 80020d8:	f7fe fe6f 	bl	8000dba <LCD_WriteChar>
 80020dc:	e7e0      	b.n	80020a0 <lcd_handle+0x1098>
    return UI_STR_TABLE[lcdLangId][id];
 80020de:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 80020e2:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80020e6:	f240 021d 	movw	r2, #29
 80020ea:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
            while (src[n] && n < 20) 
 80020f6:	780b      	ldrb	r3, [r1, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8091 	beq.w	8002220 <lcd_handle+0x1218>
 80020fe:	466c      	mov	r4, sp
 8002100:	2001      	movs	r0, #1
 8002102:	e000      	b.n	8002106 <lcd_handle+0x10fe>
 8002104:	4610      	mov	r0, r2
                if (c >= 'a' && c <= 'z') 
 8002106:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	2a19      	cmp	r2, #25
                    c = (char)(c - 'a' + 'A');
 800210e:	bf9c      	itt	ls
 8002110:	3b20      	subls	r3, #32
 8002112:	b2db      	uxtbls	r3, r3
                up[n] = c; 
 8002114:	f804 3b01 	strb.w	r3, [r4], #1
                n++; 
 8002118:	b2c5      	uxtb	r5, r0
            while (src[n] && n < 20) 
 800211a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800211e:	b113      	cbz	r3, 8002126 <lcd_handle+0x111e>
 8002120:	1c42      	adds	r2, r0, #1
 8002122:	2814      	cmp	r0, #20
 8002124:	d1ee      	bne.n	8002104 <lcd_handle+0x10fc>
            up[n]='\0';
 8002126:	f105 0318 	add.w	r3, r5, #24
 800212a:	eb0d 0503 	add.w	r5, sp, r3
 800212e:	2100      	movs	r1, #0
 8002130:	f805 1c18 	strb.w	r1, [r5, #-24]
            uint8_t col = (uint8_t)((20u - n) / 2u);
 8002134:	f1c0 0014 	rsb	r0, r0, #20
            LCD_SetCursor(col, 0);
 8002138:	f3c0 0047 	ubfx	r0, r0, #1, #8
 800213c:	f7fe fe2c 	bl	8000d98 <LCD_SetCursor>
            LCD_Print(up);
 8002140:	4668      	mov	r0, sp
 8002142:	f7fe fe3f 	bl	8000dc4 <LCD_Print>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8002146:	f240 23cc 	movw	r3, #716	@ 0x2cc
 800214a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d168      	bne.n	8002226 <lcd_handle+0x121e>
                mfgPinError = 0; msg = ui_get(UI_STR_ENTER_PIN);
 8002154:	f240 23cc 	movw	r3, #716	@ 0x2cc
 8002158:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    return UI_STR_TABLE[lcdLangId][id];
 8002160:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8002164:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002168:	f240 021d 	movw	r2, #29
 800216c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
            uint8_t len=0; while (msg[len] && len<20) len++;
 8002178:	782b      	ldrb	r3, [r5, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d069      	beq.n	8002252 <lcd_handle+0x124a>
 800217e:	f105 0014 	add.w	r0, r5, #20
 8002182:	462b      	mov	r3, r5
 8002184:	f1c5 0101 	rsb	r1, r5, #1
 8002188:	18cc      	adds	r4, r1, r3
 800218a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800218e:	b10a      	cbz	r2, 8002194 <lcd_handle+0x118c>
 8002190:	4283      	cmp	r3, r0
 8002192:	d1f9      	bne.n	8002188 <lcd_handle+0x1180>
            LCD_SetCursor(0, 1); LCD_Print("                    "); /* clear line */
 8002194:	2101      	movs	r1, #1
 8002196:	2000      	movs	r0, #0
 8002198:	f7fe fdfe 	bl	8000d98 <LCD_SetCursor>
 800219c:	f645 16c8 	movw	r6, #22984	@ 0x59c8
 80021a0:	f6c0 0600 	movt	r6, #2048	@ 0x800
 80021a4:	4630      	mov	r0, r6
 80021a6:	f7fe fe0d 	bl	8000dc4 <LCD_Print>
            uint8_t col = (uint8_t)((20u - len) / 2u);
 80021aa:	f1c4 0014 	rsb	r0, r4, #20
            LCD_SetCursor(col, 1); LCD_Print(msg);
 80021ae:	2101      	movs	r1, #1
 80021b0:	f3c0 0047 	ubfx	r0, r0, #1, #8
 80021b4:	f7fe fdf0 	bl	8000d98 <LCD_SetCursor>
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7fe fe03 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(0, 2);
 80021be:	2102      	movs	r1, #2
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fde9 	bl	8000d98 <LCD_SetCursor>
            LCD_Print("                    ");
 80021c6:	4630      	mov	r0, r6
 80021c8:	f7fe fdfc 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor(start, 2);
 80021cc:	2102      	movs	r1, #2
 80021ce:	2008      	movs	r0, #8
 80021d0:	f7fe fde2 	bl	8000d98 <LCD_SetCursor>
            for (uint8_t i = 0; i < 4; i++)
 80021d4:	f240 24c0 	movw	r4, #704	@ 0x2c0
 80021d8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80021dc:	1d25      	adds	r5, r4, #4
                LCD_WriteChar((char)('0' + mfgPinInput[i]));
 80021de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021e2:	3030      	adds	r0, #48	@ 0x30
 80021e4:	b2c0      	uxtb	r0, r0
 80021e6:	f7fe fde8 	bl	8000dba <LCD_WriteChar>
            for (uint8_t i = 0; i < 4; i++)
 80021ea:	42ac      	cmp	r4, r5
 80021ec:	d1f7      	bne.n	80021de <lcd_handle+0x11d6>
            LCD_SetCursor(0, 3);
 80021ee:	2103      	movs	r1, #3
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fdd1 	bl	8000d98 <LCD_SetCursor>
            LCD_Print("                    ");
 80021f6:	f645 10c8 	movw	r0, #22984	@ 0x59c8
 80021fa:	f6c0 0000 	movt	r0, #2048	@ 0x800
 80021fe:	f7fe fde1 	bl	8000dc4 <LCD_Print>
            LCD_SetCursor((uint8_t)(start + mfgPinPos), 3);
 8002202:	f240 23bc 	movw	r3, #700	@ 0x2bc
 8002206:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800220a:	7818      	ldrb	r0, [r3, #0]
 800220c:	3008      	adds	r0, #8
 800220e:	2103      	movs	r1, #3
 8002210:	b2c0      	uxtb	r0, r0
 8002212:	f7fe fdc1 	bl	8000d98 <LCD_SetCursor>
            LCD_WriteChar('^');
 8002216:	205e      	movs	r0, #94	@ 0x5e
 8002218:	f7fe fdcf 	bl	8000dba <LCD_WriteChar>
        break;
 800221c:	f7ff b8a8 	b.w	8001370 <lcd_handle+0x368>
            uint8_t n = 0; 
 8002220:	461d      	mov	r5, r3
            while (src[n] && n < 20) 
 8002222:	2000      	movs	r0, #0
 8002224:	e77f      	b.n	8002126 <lcd_handle+0x111e>
            if (mfgPinError && HAL_GetTick() < mfgPinErrorUntilMs) {
 8002226:	f001 fe5c 	bl	8003ee2 <HAL_GetTick>
 800222a:	f240 23c8 	movw	r3, #712	@ 0x2c8
 800222e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4298      	cmp	r0, r3
 8002236:	d28d      	bcs.n	8002154 <lcd_handle+0x114c>
    return UI_STR_TABLE[lcdLangId][id];
 8002238:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 800223c:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002240:	f240 021d 	movw	r2, #29
 8002244:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
                msg = ui_get(UI_STR_WRONG_PIN);
 8002250:	e792      	b.n	8002178 <lcd_handle+0x1170>
            uint8_t len=0; while (msg[len] && len<20) len++;
 8002252:	2400      	movs	r4, #0
 8002254:	e79e      	b.n	8002194 <lcd_handle+0x118c>
        LCD_SetCursor(1,0);
 8002256:	2100      	movs	r1, #0
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe fd9d 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 800225e:	f645 43c4 	movw	r3, #23748	@ 0x5cc4
 8002262:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8002266:	f240 021d 	movw	r2, #29
 800226a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
            while(*t)
 8002276:	7820      	ldrb	r0, [r4, #0]
 8002278:	b160      	cbz	r0, 8002294 <lcd_handle+0x128c>
                if (c >= 'a' && c <= 'z') 
 800227a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b19      	cmp	r3, #25
                    c = (char)(c - 'a' + 'A');
 8002282:	bf9c      	itt	ls
 8002284:	3820      	subls	r0, #32
 8002286:	b2c0      	uxtbls	r0, r0
                LCD_WriteChar(c);
 8002288:	f7fe fd97 	bl	8000dba <LCD_WriteChar>
            while(*t)
 800228c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002290:	2800      	cmp	r0, #0
 8002292:	d1f2      	bne.n	800227a <lcd_handle+0x1272>
        LCD_SetCursor(0,2);
 8002294:	2102      	movs	r1, #2
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe fd7e 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 800229c:	f645 44c4 	movw	r4, #23748	@ 0x5cc4
 80022a0:	f6c0 0400 	movt	r4, #2048	@ 0x800
 80022a4:	f240 051d 	movw	r5, #29
 80022a8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80022ac:	782b      	ldrb	r3, [r5, #0]
 80022ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
        LCD_Print(ui_get(UI_STR_FACTORY_PAGE));
 80022b2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80022b4:	f7fe fd86 	bl	8000dc4 <LCD_Print>
        LCD_SetCursor(0,3);
 80022b8:	2103      	movs	r1, #3
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7fe fd6c 	bl	8000d98 <LCD_SetCursor>
    return UI_STR_TABLE[lcdLangId][id];
 80022c0:	782b      	ldrb	r3, [r5, #0]
 80022c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
        LCD_Print(ui_get(UI_STR_LEFT_EXIT));
 80022c6:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80022c8:	f7fe fd7c 	bl	8000dc4 <LCD_Print>
}
 80022cc:	f7ff b850 	b.w	8001370 <lcd_handle+0x368>

080022d0 <button_handle>:
 * - Up: Toggle language EN/TR
 * - Down: No action
 * - Right: Next page
 * - Off: Set SHUTDOWN2 = 0
 */
void button_handle(void) {
 80022d0:	b508      	push	{r3, lr}
    if (buttonState == 0) 
 80022d2:	f240 23d8 	movw	r3, #728	@ 0x2d8
 80022d6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 84d3 	beq.w	8002c88 <button_handle+0x9b8>
        return;
    }

    /* Button order: Left, On, Up, Down, Right, Off */
    /* Structure by page for clarity (switch-case style) */
    if (buttonState & BUT_LEFT_M) 
 80022e2:	f013 0f01 	tst.w	r3, #1
 80022e6:	f000 80bf 	beq.w	8002468 <button_handle+0x198>
    {
        if (isEditing) 
 80022ea:	f240 23d4 	movw	r3, #724	@ 0x2d4
 80022ee:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b9ab      	cbnz	r3, 8002322 <button_handle+0x52>
            isEditing = 0u; 
            uiNeedsClear = 1u; 
            buttonState = 0; 
            return;
        }
        if (pageID == PAGE_MFG_PIN) 
 80022f6:	f240 23d9 	movw	r3, #729	@ 0x2d9
 80022fa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b06      	cmp	r3, #6
 8002302:	f200 80a7 	bhi.w	8002454 <button_handle+0x184>
 8002306:	2b02      	cmp	r3, #2
 8002308:	f200 80d0 	bhi.w	80024ac <button_handle+0x1dc>
 800230c:	f040 80ac 	bne.w	8002468 <button_handle+0x198>
    pageID = page;
 8002310:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002314:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 800231c:	f7fe fd33 	bl	8000d86 <LCD_Clear>
}
 8002320:	e0a2      	b.n	8002468 <button_handle+0x198>
            if (pageID == PAGE_ENTER_DATA) {
 8002322:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002326:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d016      	beq.n	800235e <button_handle+0x8e>
            } else if (pageID == PAGE_OUTPUT_CONTROL) {
 8002330:	2b04      	cmp	r3, #4
 8002332:	d057      	beq.n	80023e4 <button_handle+0x114>
            } else if (pageID == PAGE_SETTINGS) {
 8002334:	2b06      	cmp	r3, #6
 8002336:	d07a      	beq.n	800242e <button_handle+0x15e>
            isEditing = 0u; 
 8002338:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800233c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
            uiNeedsClear = 1u; 
 8002344:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8002348:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800234c:	2101      	movs	r1, #1
 800234e:	7019      	strb	r1, [r3, #0]
            buttonState = 0; 
 8002350:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002354:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002358:	701a      	strb	r2, [r3, #0]
            return;
 800235a:	f000 bc95 	b.w	8002c88 <button_handle+0x9b8>
                if (operatingMode == MODE_CHARGER) {
 800235e:	f240 4322 	movw	r3, #1058	@ 0x422
 8002362:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b9f3      	cbnz	r3, 80023a8 <button_handle+0xd8>
                    if (subIndex==1) batInfo.batteryCap = (uint16_t)editBackupValue;
 800236a:	f240 23d5 	movw	r3, #725	@ 0x2d5
 800236e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d00c      	beq.n	8002392 <button_handle+0xc2>
                    else if (subIndex==2) batInfo.numberOfBattery = (uint8_t)editBackupValue;
 8002378:	2b02      	cmp	r3, #2
 800237a:	d1dd      	bne.n	8002338 <button_handle+0x68>
 800237c:	f240 0320 	movw	r3, #32
 8002380:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002384:	f240 22c6 	movw	r2, #710	@ 0x2c6
 8002388:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	e7d2      	b.n	8002338 <button_handle+0x68>
                    if (subIndex==1) batInfo.batteryCap = (uint16_t)editBackupValue;
 8002392:	f240 0320 	movw	r3, #32
 8002396:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800239a:	f240 22c6 	movw	r2, #710	@ 0x2c6
 800239e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e7c7      	b.n	8002338 <button_handle+0x68>
                    if (subIndex==0) outputVSet_dV = editBackupValue;
 80023a8:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80023ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b953      	cbnz	r3, 80023ca <button_handle+0xfa>
 80023b4:	f240 0382 	movw	r3, #130	@ 0x82
 80023b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023bc:	f240 22c6 	movw	r2, #710	@ 0x2c6
 80023c0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e7b6      	b.n	8002338 <button_handle+0x68>
                    else if (subIndex==1) outputIMax_dA = editBackupValue;
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d1b4      	bne.n	8002338 <button_handle+0x68>
 80023ce:	f240 0380 	movw	r3, #128	@ 0x80
 80023d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023d6:	f240 22c6 	movw	r2, #710	@ 0x2c6
 80023da:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80023de:	8812      	ldrh	r2, [r2, #0]
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e7a9      	b.n	8002338 <button_handle+0x68>
                if (operatingMode == MODE_CHARGER) {
 80023e4:	f240 4322 	movw	r3, #1058	@ 0x422
 80023e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1a2      	bne.n	8002338 <button_handle+0x68>
                    if (subIndex==0) testVoltage_dV = editBackupValue;
 80023f2:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80023f6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b953      	cbnz	r3, 8002414 <button_handle+0x144>
 80023fe:	f240 0386 	movw	r3, #134	@ 0x86
 8002402:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002406:	f240 22c6 	movw	r2, #710	@ 0x2c6
 800240a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800240e:	8812      	ldrh	r2, [r2, #0]
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	e791      	b.n	8002338 <button_handle+0x68>
                    else if (subIndex==1) testCurrent_dA = editBackupValue;
 8002414:	2b01      	cmp	r3, #1
 8002416:	d18f      	bne.n	8002338 <button_handle+0x68>
 8002418:	f240 0384 	movw	r3, #132	@ 0x84
 800241c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002420:	f240 22c6 	movw	r2, #710	@ 0x2c6
 8002424:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	801a      	strh	r2, [r3, #0]
 800242c:	e784      	b.n	8002338 <button_handle+0x68>
                if (subIndex==1) brightness = (uint8_t)editBackupValue;
 800242e:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002432:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	f47f af7d 	bne.w	8002338 <button_handle+0x68>
 800243e:	f240 0314 	movw	r3, #20
 8002442:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002446:	f240 22c6 	movw	r2, #710	@ 0x2c6
 800244a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800244e:	8812      	ldrh	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e771      	b.n	8002338 <button_handle+0x68>
 8002454:	2b07      	cmp	r3, #7
 8002456:	d107      	bne.n	8002468 <button_handle+0x198>
    pageID = page;
 8002458:	f240 23d9 	movw	r3, #729	@ 0x2d9
 800245c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002460:	2206      	movs	r2, #6
 8002462:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002464:	f7fe fc8f 	bl	8000d86 <LCD_Clear>
        {
            /* other pages: no action unless specified later */
        }
    }
    /* On: set SHUTDOWN2 = 1 (same on all pages) */
    if (buttonState & BUT_ON_M) {
 8002468:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800246c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f013 0f02 	tst.w	r3, #2
 8002476:	d122      	bne.n	80024be <button_handle+0x1ee>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
        deviceOn = 1;
    }
    /* Off: set SHUTDOWN2 = 0 (same on all pages) 
	*/
    if (buttonState & BUT_OFF_M) {
 8002478:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800247c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f013 0f20 	tst.w	r3, #32
 8002486:	d12a      	bne.n	80024de <button_handle+0x20e>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
        deviceOn = 0;
    }

    /* Up/Down behavior depends on page */
    switch (pageID) {
 8002488:	f240 23d9 	movw	r3, #729	@ 0x2d9
 800248c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3b02      	subs	r3, #2
 8002494:	2b06      	cmp	r3, #6
 8002496:	f200 8497 	bhi.w	8002dc8 <button_handle+0xaf8>
 800249a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800249e:	0030      	.short	0x0030
 80024a0:	01c60065 	.word	0x01c60065
 80024a4:	02f8029e 	.word	0x02f8029e
 80024a8:	048403b6 	.word	0x048403b6
    pageID = page;
 80024ac:	f240 23d9 	movw	r3, #729	@ 0x2d9
 80024b0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 80024b8:	f7fe fc65 	bl	8000d86 <LCD_Clear>
}
 80024bc:	e7d4      	b.n	8002468 <button_handle+0x198>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80024c8:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80024cc:	f001 ff6e 	bl	80043ac <HAL_GPIO_WritePin>
        deviceOn = 1;
 80024d0:	f240 4320 	movw	r3, #1056	@ 0x420
 80024d4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e7cc      	b.n	8002478 <button_handle+0x1a8>
        HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80024e8:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 80024ec:	f001 ff5e 	bl	80043ac <HAL_GPIO_WritePin>
        deviceOn = 0;
 80024f0:	f240 4320 	movw	r3, #1056	@ 0x420
 80024f4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e7c4      	b.n	8002488 <button_handle+0x1b8>
    case PAGE_MENU:
        if (buttonState & BUT_UP_M) {
 80024fe:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002502:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f013 0f04 	tst.w	r3, #4
 800250c:	d008      	beq.n	8002520 <button_handle+0x250>
            menuIndex = (uint8_t)((menuIndex + 4u - 1u) % 4u);
 800250e:	f240 21d6 	movw	r1, #726	@ 0x2d6
 8002512:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002516:	780a      	ldrb	r2, [r1, #0]
 8002518:	3203      	adds	r2, #3
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	700a      	strb	r2, [r1, #0]
        }
        if (buttonState & BUT_DOWN_M) {
 8002520:	f013 0f08 	tst.w	r3, #8
 8002524:	d008      	beq.n	8002538 <button_handle+0x268>
            menuIndex = (uint8_t)((menuIndex + 1u) % 4u);
 8002526:	f240 21d6 	movw	r1, #726	@ 0x2d6
 800252a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800252e:	780a      	ldrb	r2, [r1, #0]
 8002530:	3201      	adds	r2, #1
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	700a      	strb	r2, [r1, #0]
    default:
        break;
    }

    /* Right: navigate/enter/edit */
    if (buttonState & BUT_RIGHT_M) {
 8002538:	f013 0f10 	tst.w	r3, #16
 800253c:	f000 8398 	beq.w	8002c70 <button_handle+0x9a0>
            lcd_menu_set_page(PAGE_MENU);
        } else if (pageID == PAGE_LOADING) {
            lcd_menu_set_page(PAGE_MAIN);
        } else if (pageID == PAGE_MENU) {
            /* Enter selected subpage */
            subIndex = 0;
 8002540:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002544:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
            switch (menuIndex) {
 800254c:	f240 23d6 	movw	r3, #726	@ 0x2d6
 8002550:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b03      	cmp	r3, #3
 8002558:	f200 838a 	bhi.w	8002c70 <button_handle+0x9a0>
 800255c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002560:	0473046a 	.word	0x0473046a
 8002564:	0485047c 	.word	0x0485047c
        if (isEditing) {
 8002568:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800256c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8107 	beq.w	8002786 <button_handle+0x4b6>
            if (operatingMode == MODE_CHARGER) {
 8002578:	f240 4322 	movw	r3, #1058	@ 0x422
 800257c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 808d 	bne.w	80026a2 <button_handle+0x3d2>
                if (buttonState & BUT_UP_M) {
 8002588:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800258c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f013 0f04 	tst.w	r3, #4
 8002596:	d062      	beq.n	800265e <button_handle+0x38e>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002598:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800259c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	b98a      	cbnz	r2, 80025c8 <button_handle+0x2f8>
 80025a4:	f240 0220 	movw	r2, #32
 80025a8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	2a18      	cmp	r2, #24
 80025b0:	bf34      	ite	cc
 80025b2:	2118      	movcc	r1, #24
 80025b4:	210c      	movcs	r1, #12
 80025b6:	f240 0220 	movw	r2, #32
 80025ba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025be:	6011      	str	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 80025c0:	f013 0f08 	tst.w	r3, #8
 80025c4:	d063      	beq.n	800268e <button_handle+0x3be>
 80025c6:	e054      	b.n	8002672 <button_handle+0x3a2>
                    else if (subIndex == 1 && batInfo.batteryCap < 999) { batInfo.batteryCap++; }
 80025c8:	2a01      	cmp	r2, #1
 80025ca:	d016      	beq.n	80025fa <button_handle+0x32a>
                    else if (subIndex == 2 && batInfo.numberOfBattery < 24) { batInfo.numberOfBattery++; }
 80025cc:	2a02      	cmp	r2, #2
 80025ce:	d034      	beq.n	800263a <button_handle+0x36a>
                if (buttonState & BUT_DOWN_M) {
 80025d0:	f013 0f08 	tst.w	r3, #8
 80025d4:	d05b      	beq.n	800268e <button_handle+0x3be>
                    else if (subIndex == 1 && batInfo.batteryCap > 1) { batInfo.batteryCap--; }
 80025d6:	2a01      	cmp	r2, #1
 80025d8:	d021      	beq.n	800261e <button_handle+0x34e>
                    else if (subIndex == 2 && batInfo.numberOfBattery > 1) { batInfo.numberOfBattery--; }
 80025da:	2a02      	cmp	r2, #2
 80025dc:	d157      	bne.n	800268e <button_handle+0x3be>
 80025de:	f240 0320 	movw	r3, #32
 80025e2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d950      	bls.n	800268e <button_handle+0x3be>
 80025ec:	f240 0220 	movw	r2, #32
 80025f0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80025f4:	3b01      	subs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]
 80025f8:	e049      	b.n	800268e <button_handle+0x3be>
                    else if (subIndex == 1 && batInfo.batteryCap < 999) { batInfo.batteryCap++; }
 80025fa:	f240 0120 	movw	r1, #32
 80025fe:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002602:	6849      	ldr	r1, [r1, #4]
 8002604:	f240 30e6 	movw	r0, #998	@ 0x3e6
 8002608:	4281      	cmp	r1, r0
 800260a:	d8e1      	bhi.n	80025d0 <button_handle+0x300>
 800260c:	f240 0220 	movw	r2, #32
 8002610:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002614:	3101      	adds	r1, #1
 8002616:	6051      	str	r1, [r2, #4]
                if (buttonState & BUT_DOWN_M) {
 8002618:	f013 0f08 	tst.w	r3, #8
 800261c:	d037      	beq.n	800268e <button_handle+0x3be>
                    else if (subIndex == 1 && batInfo.batteryCap > 1) { batInfo.batteryCap--; }
 800261e:	f240 0320 	movw	r3, #32
 8002622:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d930      	bls.n	800268e <button_handle+0x3be>
 800262c:	f240 0220 	movw	r2, #32
 8002630:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002634:	3b01      	subs	r3, #1
 8002636:	6053      	str	r3, [r2, #4]
 8002638:	e029      	b.n	800268e <button_handle+0x3be>
                    else if (subIndex == 2 && batInfo.numberOfBattery < 24) { batInfo.numberOfBattery++; }
 800263a:	f240 0220 	movw	r2, #32
 800263e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002642:	6892      	ldr	r2, [r2, #8]
 8002644:	2a17      	cmp	r2, #23
 8002646:	f200 84a1 	bhi.w	8002f8c <button_handle+0xcbc>
 800264a:	f240 0120 	movw	r1, #32
 800264e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002652:	3201      	adds	r2, #1
 8002654:	608a      	str	r2, [r1, #8]
                if (buttonState & BUT_DOWN_M) {
 8002656:	f013 0f08 	tst.w	r3, #8
 800265a:	d1c0      	bne.n	80025de <button_handle+0x30e>
 800265c:	e017      	b.n	800268e <button_handle+0x3be>
 800265e:	f013 0f08 	tst.w	r3, #8
 8002662:	d014      	beq.n	800268e <button_handle+0x3be>
                    if (subIndex == 0) { batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u; }
 8002664:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002668:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	2a00      	cmp	r2, #0
 8002670:	d1b1      	bne.n	80025d6 <button_handle+0x306>
 8002672:	f240 0320 	movw	r3, #32
 8002676:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b18      	cmp	r3, #24
 800267e:	bf34      	ite	cc
 8002680:	2218      	movcc	r2, #24
 8002682:	220c      	movcs	r2, #12
 8002684:	f240 0320 	movw	r3, #32
 8002688:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800268c:	601a      	str	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 800268e:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002692:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f013 0f10 	tst.w	r3, #16
 800269c:	f000 82e8 	beq.w	8002c70 <button_handle+0x9a0>
 80026a0:	e0ac      	b.n	80027fc <button_handle+0x52c>
                if (buttonState & BUT_UP_M) {
 80026a2:	f240 23d8 	movw	r3, #728	@ 0x2d8
 80026a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	f013 0f04 	tst.w	r3, #4
 80026b0:	d03c      	beq.n	800272c <button_handle+0x45c>
                    if (subIndex == 0 && outputVSet_dV < 240) { outputVSet_dV++; }
 80026b2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80026b6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	b9ba      	cbnz	r2, 80026ee <button_handle+0x41e>
 80026be:	f240 0282 	movw	r2, #130	@ 0x82
 80026c2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	2aef      	cmp	r2, #239	@ 0xef
 80026ca:	f200 846a 	bhi.w	8002fa2 <button_handle+0xcd2>
 80026ce:	f240 0182 	movw	r1, #130	@ 0x82
 80026d2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80026d6:	3201      	adds	r2, #1
 80026d8:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 80026da:	f013 0f08 	tst.w	r3, #8
 80026de:	d028      	beq.n	8002732 <button_handle+0x462>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 80026e0:	f240 0382 	movw	r3, #130	@ 0x82
 80026e4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f000 bc66 	b.w	8002fba <button_handle+0xcea>
                    else if (subIndex == 1 && outputIMax_dA < 400) { outputIMax_dA++; }
 80026ee:	2a01      	cmp	r2, #1
 80026f0:	d11c      	bne.n	800272c <button_handle+0x45c>
 80026f2:	f240 0280 	movw	r2, #128	@ 0x80
 80026f6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80026fa:	8812      	ldrh	r2, [r2, #0]
 80026fc:	f5b2 7fc8 	cmp.w	r2, #400	@ 0x190
 8002700:	d205      	bcs.n	800270e <button_handle+0x43e>
 8002702:	f240 0180 	movw	r1, #128	@ 0x80
 8002706:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800270a:	3201      	adds	r2, #1
 800270c:	800a      	strh	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) {
 800270e:	f013 0f08 	tst.w	r3, #8
 8002712:	d00e      	beq.n	8002732 <button_handle+0x462>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 8002714:	f240 0380 	movw	r3, #128	@ 0x80
 8002718:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	f240 0280 	movw	r2, #128	@ 0x80
 8002722:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002726:	3b01      	subs	r3, #1
 8002728:	8013      	strh	r3, [r2, #0]
 800272a:	e002      	b.n	8002732 <button_handle+0x462>
                if (buttonState & BUT_DOWN_M) {
 800272c:	f013 0f08 	tst.w	r3, #8
 8002730:	d117      	bne.n	8002762 <button_handle+0x492>
    if (buttonState & BUT_RIGHT_M) {
 8002732:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002736:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f013 0f10 	tst.w	r3, #16
 8002740:	f000 8296 	beq.w	8002c70 <button_handle+0x9a0>
                else
                {
                    batInfo.equalizationEnabled ^= 1u;
                }
            } else {
                if (!isEditing) {
 8002744:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002748:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 83bd 	beq.w	8002ece <button_handle+0xbfe>
                        }
                    }
                    isEditing = 1u;
                } else {
                    /* second Right: save and exit edit mode */
                    isEditing = 0u;
 8002754:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002758:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e286      	b.n	8002c70 <button_handle+0x9a0>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002762:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002766:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 841c 	beq.w	8002faa <button_handle+0xcda>
                    else if (subIndex == 1 && outputIMax_dA > 0) { outputIMax_dA--; }
 8002772:	2b01      	cmp	r3, #1
 8002774:	d1dd      	bne.n	8002732 <button_handle+0x462>
 8002776:	f240 0380 	movw	r3, #128	@ 0x80
 800277a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0d6      	beq.n	8002732 <button_handle+0x462>
 8002784:	e7cb      	b.n	800271e <button_handle+0x44e>
            if (operatingMode == MODE_CHARGER) { total = 6u; } else { total = 2u; }
 8002786:	f240 4322 	movw	r3, #1058	@ 0x422
 800278a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2202      	movne	r2, #2
 8002796:	2206      	moveq	r2, #6
            if (buttonState & BUT_UP_M) 
 8002798:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800279c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027a0:	7819      	ldrb	r1, [r3, #0]
 80027a2:	f011 0f04 	tst.w	r1, #4
 80027a6:	d00b      	beq.n	80027c0 <button_handle+0x4f0>
                subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 80027a8:	f240 20d5 	movw	r0, #725	@ 0x2d5
 80027ac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80027b0:	7803      	ldrb	r3, [r0, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	3b01      	subs	r3, #1
 80027b6:	fbb3 fcf2 	udiv	ip, r3, r2
 80027ba:	fb02 331c 	mls	r3, r2, ip, r3
 80027be:	7003      	strb	r3, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 80027c0:	f011 0f08 	tst.w	r1, #8
 80027c4:	d00a      	beq.n	80027dc <button_handle+0x50c>
                subIndex = (uint8_t)((subIndex + 1u) % total); 
 80027c6:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80027ca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80027ce:	780b      	ldrb	r3, [r1, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80027d6:	fb02 3310 	mls	r3, r2, r0, r3
 80027da:	700b      	strb	r3, [r1, #0]
    if (buttonState & BUT_RIGHT_M) {
 80027dc:	f240 23d8 	movw	r3, #728	@ 0x2d8
 80027e0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f013 0f10 	tst.w	r3, #16
 80027ea:	f000 8241 	beq.w	8002c70 <button_handle+0x9a0>
            if (operatingMode == MODE_CHARGER && subIndex == 0u) {
 80027ee:	f240 4322 	movw	r3, #1058	@ 0x422
 80027f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1a3      	bne.n	8002744 <button_handle+0x474>
 80027fc:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002800:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 8338 	bne.w	8002e7c <button_handle+0xbac>
                batInfo.batteryVoltage = (batInfo.batteryVoltage >= 24u) ? 12u : 24u;
 800280c:	f240 0320 	movw	r3, #32
 8002810:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b18      	cmp	r3, #24
 8002818:	bf34      	ite	cc
 800281a:	2218      	movcc	r2, #24
 800281c:	220c      	movcs	r2, #12
 800281e:	f240 0320 	movw	r3, #32
 8002822:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e222      	b.n	8002c70 <button_handle+0x9a0>
        if (isEditing) {
 800282a:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800282e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8082 	beq.w	800293e <button_handle+0x66e>
            if (operatingMode == MODE_CHARGER) {
 800283a:	f240 4322 	movw	r3, #1058	@ 0x422
 800283e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d14d      	bne.n	80028e4 <button_handle+0x614>
                if (buttonState & BUT_UP_M) {
 8002848:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800284c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f013 0f04 	tst.w	r3, #4
 8002856:	d020      	beq.n	800289a <button_handle+0x5ca>
                    if (subIndex == 0) { testVoltage_dV++; }
 8002858:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800285c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	b9c2      	cbnz	r2, 8002896 <button_handle+0x5c6>
 8002864:	f240 0286 	movw	r2, #134	@ 0x86
 8002868:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800286c:	8811      	ldrh	r1, [r2, #0]
 800286e:	3101      	adds	r1, #1
 8002870:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 8002872:	f013 0f08 	tst.w	r3, #8
 8002876:	f000 8086 	beq.w	8002986 <button_handle+0x6b6>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 800287a:	f240 0386 	movw	r3, #134	@ 0x86
 800287e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d07e      	beq.n	8002986 <button_handle+0x6b6>
 8002888:	f240 0286 	movw	r2, #134	@ 0x86
 800288c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002890:	3b01      	subs	r3, #1
 8002892:	8013      	strh	r3, [r2, #0]
 8002894:	e077      	b.n	8002986 <button_handle+0x6b6>
                    else if (subIndex == 1) { testCurrent_dA++; }
 8002896:	2a01      	cmp	r2, #1
 8002898:	d019      	beq.n	80028ce <button_handle+0x5fe>
                if (buttonState & BUT_DOWN_M) {
 800289a:	f013 0f08 	tst.w	r3, #8
 800289e:	d072      	beq.n	8002986 <button_handle+0x6b6>
                    if (subIndex == 0 && testVoltage_dV > 0) { testVoltage_dV--; }
 80028a0:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80028a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0e5      	beq.n	800287a <button_handle+0x5aa>
                    else if (subIndex == 1 && testCurrent_dA > 0) { testCurrent_dA--; }
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d169      	bne.n	8002986 <button_handle+0x6b6>
 80028b2:	f240 0384 	movw	r3, #132	@ 0x84
 80028b6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d062      	beq.n	8002986 <button_handle+0x6b6>
 80028c0:	f240 0284 	movw	r2, #132	@ 0x84
 80028c4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028c8:	3b01      	subs	r3, #1
 80028ca:	8013      	strh	r3, [r2, #0]
 80028cc:	e05b      	b.n	8002986 <button_handle+0x6b6>
                    else if (subIndex == 1) { testCurrent_dA++; }
 80028ce:	f240 0284 	movw	r2, #132	@ 0x84
 80028d2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028d6:	8811      	ldrh	r1, [r2, #0]
 80028d8:	3101      	adds	r1, #1
 80028da:	8011      	strh	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) {
 80028dc:	f013 0f08 	tst.w	r3, #8
 80028e0:	d1e7      	bne.n	80028b2 <button_handle+0x5e2>
 80028e2:	e050      	b.n	8002986 <button_handle+0x6b6>
                if (buttonState & BUT_UP_M) { shortCircuitTest ^= 1u; }
 80028e4:	f240 23d8 	movw	r3, #728	@ 0x2d8
 80028e8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f013 0f04 	tst.w	r3, #4
 80028f2:	d007      	beq.n	8002904 <button_handle+0x634>
 80028f4:	f240 4221 	movw	r2, #1057	@ 0x421
 80028f8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80028fc:	7811      	ldrb	r1, [r2, #0]
 80028fe:	f081 0101 	eor.w	r1, r1, #1
 8002902:	7011      	strb	r1, [r2, #0]
                if (buttonState & BUT_DOWN_M) { shortCircuitTest ^= 1u; }
 8002904:	f013 0f08 	tst.w	r3, #8
 8002908:	d007      	beq.n	800291a <button_handle+0x64a>
 800290a:	f240 4321 	movw	r3, #1057	@ 0x421
 800290e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002912:	781a      	ldrb	r2, [r3, #0]
 8002914:	f082 0201 	eor.w	r2, r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 800291a:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800291e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f013 0f10 	tst.w	r3, #16
 8002928:	f000 81a2 	beq.w	8002c70 <button_handle+0x9a0>
                } else {
                    isEditing = 0u; /* save current values */
                }
            } else {
                /* Supply: Short test immediate toggle */
                shortCircuitTest ^= 1u;
 800292c:	f240 4321 	movw	r3, #1057	@ 0x421
 8002930:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	f082 0201 	eor.w	r2, r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e198      	b.n	8002c70 <button_handle+0x9a0>
            if (operatingMode == MODE_CHARGER) {
 800293e:	f240 4322 	movw	r3, #1058	@ 0x422
 8002942:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e6      	bne.n	800291a <button_handle+0x64a>
                if (buttonState & BUT_UP_M) 
 800294c:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002950:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	f013 0f04 	tst.w	r3, #4
 800295a:	d008      	beq.n	800296e <button_handle+0x69e>
                    subIndex = (uint8_t)((subIndex + total - 1u) % total); 
 800295c:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8002960:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002964:	780a      	ldrb	r2, [r1, #0]
 8002966:	3201      	adds	r2, #1
 8002968:	f002 0201 	and.w	r2, r2, #1
 800296c:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 800296e:	f013 0f08 	tst.w	r3, #8
 8002972:	d008      	beq.n	8002986 <button_handle+0x6b6>
                    subIndex = (uint8_t)((subIndex + 1u) % total); 
 8002974:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8002978:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800297c:	7813      	ldrb	r3, [r2, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	7013      	strb	r3, [r2, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002986:	f240 23d8 	movw	r3, #728	@ 0x2d8
 800298a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f013 0f10 	tst.w	r3, #16
 8002994:	f000 816c 	beq.w	8002c70 <button_handle+0x9a0>
                if (!isEditing) {
 8002998:	f240 23d4 	movw	r3, #724	@ 0x2d4
 800299c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 82b4 	bne.w	8002f10 <button_handle+0xc40>
                    if (subIndex == 0u) 
 80029a8:	f240 23d5 	movw	r3, #725	@ 0x2d5
 80029ac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 82a6 	bne.w	8002f04 <button_handle+0xc34>
                        editBackupValue = testVoltage_dV; 
 80029b8:	f240 0386 	movw	r3, #134	@ 0x86
 80029bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	f240 23c6 	movw	r3, #710	@ 0x2c6
 80029c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029ca:	801a      	strh	r2, [r3, #0]
                    isEditing = 1u;
 80029cc:	f240 23d4 	movw	r3, #724	@ 0x2d4
 80029d0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e14a      	b.n	8002c70 <button_handle+0x9a0>
        if (isEditing) {
 80029da:	f240 23d4 	movw	r3, #724	@ 0x2d4
 80029de:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b3ab      	cbz	r3, 8002a52 <button_handle+0x782>
            if (buttonState & BUT_UP_M) { operatingMode = MODE_CHARGER; }
 80029e6:	f240 23d8 	movw	r3, #728	@ 0x2d8
 80029ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f013 0f04 	tst.w	r3, #4
 80029f4:	d005      	beq.n	8002a02 <button_handle+0x732>
 80029f6:	f240 4222 	movw	r2, #1058	@ 0x422
 80029fa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80029fe:	2100      	movs	r1, #0
 8002a00:	7011      	strb	r1, [r2, #0]
            if (buttonState & BUT_DOWN_M) { operatingMode = MODE_SUPPLY; }
 8002a02:	f013 0f08 	tst.w	r3, #8
 8002a06:	d005      	beq.n	8002a14 <button_handle+0x744>
 8002a08:	f240 4322 	movw	r3, #1058	@ 0x422
 8002a0c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    if (buttonState & BUT_RIGHT_M) {
 8002a14:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002a18:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	f013 0f10 	tst.w	r3, #16
 8002a22:	f000 8125 	beq.w	8002c70 <button_handle+0x9a0>
                mfgPinError = 0;
                lcd_menu_set_page(PAGE_MFG_PIN);
            }
        } else if (pageID == PAGE_OPERATING_MODE) {
            /* Sağ: seçili öğeye göre modu ATA ve ana sayfaya dön */
            if (subIndex == 0u) 
 8002a26:	f240 4322 	movw	r3, #1058	@ 0x422
 8002a2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a2e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8002a32:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	3a00      	subs	r2, #0
 8002a3a:	bf18      	it	ne
 8002a3c:	2201      	movne	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
    pageID = page;
 8002a40:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002a44:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002a4c:	f7fe f99b 	bl	8000d86 <LCD_Clear>
}
 8002a50:	e10e      	b.n	8002c70 <button_handle+0x9a0>
            if (buttonState & BUT_UP_M) 
 8002a52:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002a56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f013 0f04 	tst.w	r3, #4
 8002a60:	d008      	beq.n	8002a74 <button_handle+0x7a4>
                subIndex = (uint8_t)((subIndex + 2u - 1u) % 2u); 
 8002a62:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8002a66:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002a6a:	780a      	ldrb	r2, [r1, #0]
 8002a6c:	3201      	adds	r2, #1
 8002a6e:	f002 0201 	and.w	r2, r2, #1
 8002a72:	700a      	strb	r2, [r1, #0]
            if (buttonState & BUT_DOWN_M) 
 8002a74:	f013 0f08 	tst.w	r3, #8
 8002a78:	d0cc      	beq.n	8002a14 <button_handle+0x744>
                subIndex = (uint8_t)((subIndex + 1u) % 2u); 
 8002a7a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8002a7e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002a82:	7813      	ldrb	r3, [r2, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	7013      	strb	r3, [r2, #0]
 8002a8c:	e7c2      	b.n	8002a14 <button_handle+0x744>
        if (isEditing) {
 8002a8e:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002a92:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8085 	beq.w	8002ba8 <button_handle+0x8d8>
            if (subIndex == 1) {
 8002a9e:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002aa2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d02e      	beq.n	8002b0a <button_handle+0x83a>
    if (buttonState & BUT_RIGHT_M) {
 8002aac:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002ab0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	f013 0f10 	tst.w	r3, #16
 8002aba:	f000 80d9 	beq.w	8002c70 <button_handle+0x9a0>
            if (subIndex == 0u) {
 8002abe:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002ac2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8228 	beq.w	8002f1e <button_handle+0xc4e>
            } else if (subIndex == 1u) {
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d051      	beq.n	8002b76 <button_handle+0x8a6>
                mfgPinPos = 0; 
 8002ad2:	f240 22bc 	movw	r2, #700	@ 0x2bc
 8002ad6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ada:	2300      	movs	r3, #0
 8002adc:	7013      	strb	r3, [r2, #0]
                mfgPinInput[0] = mfgPinInput[1] = mfgPinInput[2] = mfgPinInput[3] = 0;
 8002ade:	f240 22c0 	movw	r2, #704	@ 0x2c0
 8002ae2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002ae6:	70d3      	strb	r3, [r2, #3]
 8002ae8:	7093      	strb	r3, [r2, #2]
 8002aea:	7053      	strb	r3, [r2, #1]
 8002aec:	7013      	strb	r3, [r2, #0]
                mfgPinError = 0;
 8002aee:	f240 22cc 	movw	r2, #716	@ 0x2cc
 8002af2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002af6:	7013      	strb	r3, [r2, #0]
    pageID = page;
 8002af8:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002afc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b00:	2207      	movs	r2, #7
 8002b02:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002b04:	f7fe f93f 	bl	8000d86 <LCD_Clear>
}
 8002b08:	e0b2      	b.n	8002c70 <button_handle+0x9a0>
                if (buttonState & BUT_UP_M) 
 8002b0a:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002b0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f013 0f04 	tst.w	r3, #4
 8002b18:	d01b      	beq.n	8002b52 <button_handle+0x882>
                    if (brightness < 100) 
 8002b1a:	f240 0214 	movw	r2, #20
 8002b1e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	2a63      	cmp	r2, #99	@ 0x63
 8002b26:	d805      	bhi.n	8002b34 <button_handle+0x864>
                        brightness++; 
 8002b28:	f240 0114 	movw	r1, #20
 8002b2c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002b30:	3201      	adds	r2, #1
 8002b32:	700a      	strb	r2, [r1, #0]
                if (buttonState & BUT_DOWN_M) 
 8002b34:	f013 0f08 	tst.w	r3, #8
 8002b38:	d015      	beq.n	8002b66 <button_handle+0x896>
                    if (brightness > 0) 
 8002b3a:	f240 0314 	movw	r3, #20
 8002b3e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b42:	781b      	ldrb	r3, [r3, #0]
                        brightness--; 
 8002b44:	f240 0214 	movw	r2, #20
 8002b48:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	7013      	strb	r3, [r2, #0]
 8002b50:	e009      	b.n	8002b66 <button_handle+0x896>
                if (buttonState & BUT_DOWN_M) 
 8002b52:	f013 0f08 	tst.w	r3, #8
 8002b56:	d006      	beq.n	8002b66 <button_handle+0x896>
                    if (brightness > 0) 
 8002b58:	f240 0314 	movw	r3, #20
 8002b5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <button_handle+0x874>
    if (buttonState & BUT_RIGHT_M) {
 8002b66:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002b6a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	f013 0f10 	tst.w	r3, #16
 8002b74:	d07c      	beq.n	8002c70 <button_handle+0x9a0>
                if (!isEditing) 
 8002b76:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002b7a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 81d6 	bne.w	8002f32 <button_handle+0xc62>
                    editBackupValue = brightness; 
 8002b86:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8002b8a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002b8e:	f240 0214 	movw	r2, #20
 8002b92:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	801a      	strh	r2, [r3, #0]
                    isEditing = 1u; 
 8002b9a:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002b9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e063      	b.n	8002c70 <button_handle+0x9a0>
            if (buttonState & BUT_UP_M) 
 8002ba8:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002bac:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	f012 0f04 	tst.w	r2, #4
 8002bb6:	d011      	beq.n	8002bdc <button_handle+0x90c>
                subIndex = (uint8_t)((subIndex + 3u - 1u) % 3u); 
 8002bb8:	f240 20d5 	movw	r0, #725	@ 0x2d5
 8002bbc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002bc0:	7803      	ldrb	r3, [r0, #0]
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 8002bc8:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 8002bcc:	fba1 c103 	umull	ip, r1, r1, r3
 8002bd0:	f401 7cff 	and.w	ip, r1, #510	@ 0x1fe
 8002bd4:	eb0c 0151 	add.w	r1, ip, r1, lsr #1
 8002bd8:	1a5b      	subs	r3, r3, r1
 8002bda:	7003      	strb	r3, [r0, #0]
            if (buttonState & BUT_DOWN_M) 
 8002bdc:	f012 0f08 	tst.w	r2, #8
 8002be0:	f43f af64 	beq.w	8002aac <button_handle+0x7dc>
                subIndex = (uint8_t)((subIndex + 1u) % 3u); 
 8002be4:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8002be8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002bec:	780b      	ldrb	r3, [r1, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8002bf4:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8002bf8:	fba2 0203 	umull	r0, r2, r2, r3
 8002bfc:	f402 70ff 	and.w	r0, r2, #510	@ 0x1fe
 8002c00:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	700b      	strb	r3, [r1, #0]
 8002c08:	e750      	b.n	8002aac <button_handle+0x7dc>
        if (buttonState & BUT_UP_M) 
 8002c0a:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002c0e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f013 0f04 	tst.w	r3, #4
 8002c18:	d037      	beq.n	8002c8a <button_handle+0x9ba>
            if (mfgPinInput[mfgPinPos] < 9) 
 8002c1a:	f240 22bc 	movw	r2, #700	@ 0x2bc
 8002c1e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c22:	7812      	ldrb	r2, [r2, #0]
 8002c24:	f240 21c0 	movw	r1, #704	@ 0x2c0
 8002c28:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002c2c:	5c89      	ldrb	r1, [r1, r2]
 8002c2e:	2908      	cmp	r1, #8
 8002c30:	d805      	bhi.n	8002c3e <button_handle+0x96e>
                mfgPinInput[mfgPinPos]++;
 8002c32:	f240 20c0 	movw	r0, #704	@ 0x2c0
 8002c36:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002c3a:	3101      	adds	r1, #1
 8002c3c:	5481      	strb	r1, [r0, r2]
        if (buttonState & BUT_DOWN_M) 
 8002c3e:	f013 0f08 	tst.w	r3, #8
 8002c42:	d00a      	beq.n	8002c5a <button_handle+0x98a>
            if (mfgPinInput[mfgPinPos] > 0) 
 8002c44:	f240 21c0 	movw	r1, #704	@ 0x2c0
 8002c48:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002c4c:	5c89      	ldrb	r1, [r1, r2]
                mfgPinInput[mfgPinPos]--;
 8002c4e:	f240 20c0 	movw	r0, #704	@ 0x2c0
 8002c52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8002c56:	3901      	subs	r1, #1
 8002c58:	5481      	strb	r1, [r0, r2]
        if (buttonState & BUT_LEFT_M) 
 8002c5a:	f013 0f01 	tst.w	r3, #1
 8002c5e:	d124      	bne.n	8002caa <button_handle+0x9da>
        if (buttonState & BUT_RIGHT_M) {
 8002c60:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002c64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f013 0f10 	tst.w	r3, #16
 8002c6e:	d125      	bne.n	8002cbc <button_handle+0x9ec>
            /* Sağ kısa: bir sonraki haneye geçsin */
            mfgPinPos = (uint8_t)((mfgPinPos + 1u) % 4u);
        }
    }

    uiNeedsClear = 1; /* clear-once after any button handling */
 8002c70:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8002c74:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
    buttonState = 0;
 8002c7c:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002c80:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
}
 8002c88:	bd08      	pop	{r3, pc}
        if (buttonState & BUT_DOWN_M) 
 8002c8a:	f013 0f08 	tst.w	r3, #8
 8002c8e:	d0e4      	beq.n	8002c5a <button_handle+0x98a>
            if (mfgPinInput[mfgPinPos] > 0) 
 8002c90:	f240 22bc 	movw	r2, #700	@ 0x2bc
 8002c94:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	f240 21c0 	movw	r1, #704	@ 0x2c0
 8002c9e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002ca2:	5c89      	ldrb	r1, [r1, r2]
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	d0d8      	beq.n	8002c5a <button_handle+0x98a>
 8002ca8:	e7d1      	b.n	8002c4e <button_handle+0x97e>
    pageID = page;
 8002caa:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002cae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cb2:	2206      	movs	r2, #6
 8002cb4:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002cb6:	f7fe f866 	bl	8000d86 <LCD_Clear>
}
 8002cba:	e7d1      	b.n	8002c60 <button_handle+0x990>
            GPIO_PinState rightNow = HAL_GPIO_ReadPin(B5_GPIO_Port, B5_Pin);
 8002cbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cc0:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002cc4:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8002cc8:	f001 fb6a 	bl	80043a0 <HAL_GPIO_ReadPin>
            if (rightNow == GPIO_PIN_SET) {
 8002ccc:	2801      	cmp	r0, #1
 8002cce:	d006      	beq.n	8002cde <button_handle+0xa0e>
                rightPressStartMs = 0u;
 8002cd0:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002cd4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e074      	b.n	8002dc8 <button_handle+0xaf8>
                if (rightPressStartMs == 0u) rightPressStartMs = HAL_GetTick();
 8002cde:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002ce2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d040      	beq.n	8002d6e <button_handle+0xa9e>
                if ((HAL_GetTick() - rightPressStartMs) >= 1000u) {
 8002cec:	f001 f8f9 	bl	8003ee2 <HAL_GetTick>
 8002cf0:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002cf4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1ac3      	subs	r3, r0, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d00:	d362      	bcc.n	8002dc8 <button_handle+0xaf8>
                    if (entered == mfgPinCode) {
 8002d02:	f240 20c4 	movw	r0, #708	@ 0x2c4
 8002d06:	f2c2 0000 	movt	r0, #8192	@ 0x2000
                    uint16_t entered = (uint16_t)(mfgPinInput[0]*1000 + mfgPinInput[1]*100 + mfgPinInput[2]*10 + mfgPinInput[3]);
 8002d0a:	f240 21c0 	movw	r1, #704	@ 0x2c0
 8002d0e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8002d12:	780b      	ldrb	r3, [r1, #0]
 8002d14:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8002d18:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002d1c:	784b      	ldrb	r3, [r1, #1]
 8002d1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d2c:	78ca      	ldrb	r2, [r1, #3]
 8002d2e:	4413      	add	r3, r2
 8002d30:	788a      	ldrb	r2, [r1, #2]
 8002d32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    if (entered == mfgPinCode) {
 8002d3a:	8802      	ldrh	r2, [r0, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d01d      	beq.n	8002d7e <button_handle+0xaae>
                        mfgPinError = 1; 
 8002d42:	f240 23cc 	movw	r3, #716	@ 0x2cc
 8002d46:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
                        mfgPinErrorUntilMs = HAL_GetTick() + 2000u; 
 8002d4e:	f001 f8c8 	bl	8003ee2 <HAL_GetTick>
 8002d52:	f240 23c8 	movw	r3, #712	@ 0x2c8
 8002d56:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d5a:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8002d5e:	6018      	str	r0, [r3, #0]
                        rightPressStartMs = 0u; /* stay on PIN, show error 2s */
 8002d60:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002d64:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e02c      	b.n	8002dc8 <button_handle+0xaf8>
                if (rightPressStartMs == 0u) rightPressStartMs = HAL_GetTick();
 8002d6e:	f001 f8b8 	bl	8003ee2 <HAL_GetTick>
 8002d72:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002d76:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d7a:	6018      	str	r0, [r3, #0]
 8002d7c:	e7b6      	b.n	8002cec <button_handle+0xa1c>
                        mfgPinError = 0; 
 8002d7e:	f240 23cc 	movw	r3, #716	@ 0x2cc
 8002d82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
                        rightPressStartMs = 0u; 
 8002d8a:	f240 23d0 	movw	r3, #720	@ 0x2d0
 8002d8e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d92:	601a      	str	r2, [r3, #0]
    pageID = page;
 8002d94:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002d98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002da0:	f7fd fff1 	bl	8000d86 <LCD_Clear>
}
 8002da4:	e010      	b.n	8002dc8 <button_handle+0xaf8>
        if (buttonState & BUT_LEFT_M) 
 8002da6:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002daa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	f013 0f01 	tst.w	r3, #1
 8002db4:	f43f af5c 	beq.w	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002db8:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002dbc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002dc4:	f7fd ffdf 	bl	8000d86 <LCD_Clear>
    if (buttonState & BUT_RIGHT_M) {
 8002dc8:	f240 23d8 	movw	r3, #728	@ 0x2d8
 8002dcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f013 0f10 	tst.w	r3, #16
 8002dd6:	f43f af4b 	beq.w	8002c70 <button_handle+0x9a0>
        if (pageID == PAGE_MAIN) {
 8002dda:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002dde:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	f63f af43 	bhi.w	8002c70 <button_handle+0x9a0>
 8002dea:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <button_handle+0xb20>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e11 	.word	0x08002e11
 8002df8:	08002541 	.word	0x08002541
 8002dfc:	080027ef 	.word	0x080027ef
 8002e00:	08002ef3 	.word	0x08002ef3
 8002e04:	08002a27 	.word	0x08002a27
 8002e08:	08002abf 	.word	0x08002abf
 8002e0c:	08002f41 	.word	0x08002f41
    pageID = page;
 8002e10:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e14:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e1c:	f7fd ffb3 	bl	8000d86 <LCD_Clear>
}
 8002e20:	e726      	b.n	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002e22:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e26:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e2e:	f7fd ffaa 	bl	8000d86 <LCD_Clear>
}
 8002e32:	e71d      	b.n	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002e34:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e38:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e40:	f7fd ffa1 	bl	8000d86 <LCD_Clear>
}
 8002e44:	e714      	b.n	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002e46:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e4a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e4e:	2204      	movs	r2, #4
 8002e50:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e52:	f7fd ff98 	bl	8000d86 <LCD_Clear>
}
 8002e56:	e70b      	b.n	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002e58:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e5c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e60:	2205      	movs	r2, #5
 8002e62:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e64:	f7fd ff8f 	bl	8000d86 <LCD_Clear>
}
 8002e68:	e702      	b.n	8002c70 <button_handle+0x9a0>
    pageID = page;
 8002e6a:	f240 23d9 	movw	r3, #729	@ 0x2d9
 8002e6e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e72:	2206      	movs	r2, #6
 8002e74:	701a      	strb	r2, [r3, #0]
    LCD_Clear();
 8002e76:	f7fd ff86 	bl	8000d86 <LCD_Clear>
}
 8002e7a:	e6f9      	b.n	8002c70 <button_handle+0x9a0>
            } else if (operatingMode == MODE_CHARGER && (subIndex == 3u || subIndex == 4u || subIndex == 5u)) {
 8002e7c:	1eda      	subs	r2, r3, #3
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	2a02      	cmp	r2, #2
 8002e82:	d867      	bhi.n	8002f54 <button_handle+0xc84>
                if (subIndex == 3u)
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d00c      	beq.n	8002ea2 <button_handle+0xbd2>
                else if (subIndex == 4u)
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d015      	beq.n	8002eb8 <button_handle+0xbe8>
                    batInfo.equalizationEnabled ^= 1u;
 8002e8c:	f240 0320 	movw	r3, #32
 8002e90:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002e94:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8002e98:	f082 0201 	eor.w	r2, r2, #1
 8002e9c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002ea0:	e6e6      	b.n	8002c70 <button_handle+0x9a0>
                    batInfo.safeChargeEnabled ^= 1u;
 8002ea2:	f240 0320 	movw	r3, #32
 8002ea6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002eaa:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8002eae:	f082 0201 	eor.w	r2, r2, #1
 8002eb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002eb6:	e6db      	b.n	8002c70 <button_handle+0x9a0>
                    batInfo.softChargeEnabled ^= 1u;
 8002eb8:	f240 0320 	movw	r3, #32
 8002ebc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ec0:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8002ec4:	f082 0201 	eor.w	r2, r2, #1
 8002ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002ecc:	e6d0      	b.n	8002c70 <button_handle+0x9a0>
                        if (subIndex == 0u) 
 8002ece:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8002ed2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b92b      	cbnz	r3, 8002ee6 <button_handle+0xc16>
                            editBackupValue = outputVSet_dV; 
 8002eda:	f240 0382 	movw	r3, #130	@ 0x82
 8002ede:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	e046      	b.n	8002f74 <button_handle+0xca4>
                            editBackupValue = outputIMax_dA; 
 8002ee6:	f240 0380 	movw	r3, #128	@ 0x80
 8002eea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	e040      	b.n	8002f74 <button_handle+0xca4>
            if (operatingMode == MODE_CHARGER) {
 8002ef2:	f240 4322 	movw	r3, #1058	@ 0x422
 8002ef6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f ad15 	bne.w	800292c <button_handle+0x65c>
 8002f02:	e549      	b.n	8002998 <button_handle+0x6c8>
                        editBackupValue = testCurrent_dA; 
 8002f04:	f240 0384 	movw	r3, #132	@ 0x84
 8002f08:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f0c:	881a      	ldrh	r2, [r3, #0]
 8002f0e:	e558      	b.n	80029c2 <button_handle+0x6f2>
                    isEditing = 0u; /* save current values */
 8002f10:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002f14:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	e6a8      	b.n	8002c70 <button_handle+0x9a0>
                lcd_menu_set_language((uint8_t)(lcdLangId ^ 1u));
 8002f1e:	f240 031d 	movw	r3, #29
 8002f22:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f26:	7818      	ldrb	r0, [r3, #0]
 8002f28:	f080 0001 	eor.w	r0, r0, #1
 8002f2c:	f7fe f85e 	bl	8000fec <lcd_menu_set_language>
 8002f30:	e69e      	b.n	8002c70 <button_handle+0x9a0>
                    isEditing = 0u; 
 8002f32:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002f36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e697      	b.n	8002c70 <button_handle+0x9a0>
            mfgPinPos = (uint8_t)((mfgPinPos + 1u) % 4u);
 8002f40:	f240 22bc 	movw	r2, #700	@ 0x2bc
 8002f44:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002f48:	7813      	ldrb	r3, [r2, #0]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	7013      	strb	r3, [r2, #0]
 8002f52:	e68d      	b.n	8002c70 <button_handle+0x9a0>
                if (!isEditing) {
 8002f54:	f240 22d4 	movw	r2, #724	@ 0x2d4
 8002f58:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	f47f abf8 	bne.w	8002754 <button_handle+0x484>
                        if (subIndex == 1u) 
 8002f64:	2b01      	cmp	r3, #1
                            editBackupValue = (uint16_t)batInfo.batteryCap; 
 8002f66:	f240 0320 	movw	r3, #32
 8002f6a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f6e:	bf0c      	ite	eq
 8002f70:	889a      	ldrheq	r2, [r3, #4]
                            editBackupValue = (uint16_t)batInfo.numberOfBattery; 
 8002f72:	891a      	ldrhne	r2, [r3, #8]
 8002f74:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8002f78:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f7c:	801a      	strh	r2, [r3, #0]
                    isEditing = 1u;
 8002f7e:	f240 23d4 	movw	r3, #724	@ 0x2d4
 8002f82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e671      	b.n	8002c70 <button_handle+0x9a0>
                if (buttonState & BUT_DOWN_M) {
 8002f8c:	f013 0f08 	tst.w	r3, #8
 8002f90:	f43f ab7d 	beq.w	800268e <button_handle+0x3be>
                    else if (subIndex == 2 && batInfo.numberOfBattery > 1) { batInfo.numberOfBattery--; }
 8002f94:	f240 0320 	movw	r3, #32
 8002f98:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f7ff bb25 	b.w	80025ec <button_handle+0x31c>
                if (buttonState & BUT_DOWN_M) {
 8002fa2:	f013 0f08 	tst.w	r3, #8
 8002fa6:	f43f abc4 	beq.w	8002732 <button_handle+0x462>
                    if (subIndex == 0 && outputVSet_dV > 0) { outputVSet_dV--; }
 8002faa:	f240 0382 	movw	r3, #130	@ 0x82
 8002fae:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f43f abbc 	beq.w	8002732 <button_handle+0x462>
 8002fba:	f240 0282 	movw	r2, #130	@ 0x82
 8002fbe:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	8013      	strh	r3, [r2, #0]
 8002fc6:	f7ff bbb4 	b.w	8002732 <button_handle+0x462>
 8002fca:	bf00      	nop

08002fcc <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fcc:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	f1c0 0c07 	rsb	ip, r0, #7
 8002fd4:	f1bc 0f04 	cmp.w	ip, #4
 8002fd8:	bf28      	it	cs
 8002fda:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	1d03      	adds	r3, r0, #4
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	bf8c      	ite	hi
 8002fe4:	1ec3      	subhi	r3, r0, #3
 8002fe6:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	fa00 fc0c 	lsl.w	ip, r0, ip
 8002ff0:	ea21 010c 	bic.w	r1, r1, ip
 8002ff4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff6:	4098      	lsls	r0, r3
 8002ff8:	ea22 0000 	bic.w	r0, r2, r0
         );
}
 8002ffc:	4308      	orrs	r0, r1
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_SetChannelSamplingTime>:
{
 8003000:	b530      	push	{r4, r5, lr}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003006:	fa93 f3a3 	rbit	r3, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	f001 7e00 	and.w	lr, r1, #33554432	@ 0x2000000
 8003012:	fa2e fe03 	lsr.w	lr, lr, r3
 8003016:	300c      	adds	r0, #12
  MODIFY_REG(*preg,
 8003018:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800301c:	f001 71f8 	and.w	r1, r1, #32505856	@ 0x1f00000
 8003020:	f04f 73f8 	mov.w	r3, #32505856	@ 0x1f00000
 8003024:	fa93 fca3 	rbit	ip, r3
 8003028:	fabc fc8c 	clz	ip, ip
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003038:	2507      	movs	r5, #7
 800303a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800303e:	ea24 0c0c 	bic.w	ip, r4, ip
 8003042:	40d9      	lsrs	r1, r3
 8003044:	408a      	lsls	r2, r1
 8003046:	ea4c 0202 	orr.w	r2, ip, r2
 800304a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
}
 800304e:	bd30      	pop	{r4, r5, pc}

08003050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003050:	b500      	push	{lr}
 8003052:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003054:	2300      	movs	r3, #0
 8003056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003058:	930c      	str	r3, [sp, #48]	@ 0x30
 800305a:	930d      	str	r3, [sp, #52]	@ 0x34
 800305c:	930e      	str	r3, [sp, #56]	@ 0x38
 800305e:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003060:	9303      	str	r3, [sp, #12]
 8003062:	9304      	str	r3, [sp, #16]
 8003064:	9305      	str	r3, [sp, #20]
 8003066:	9306      	str	r3, [sp, #24]
 8003068:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	9302      	str	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003070:	2201      	movs	r2, #1
 8003072:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003078:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800307a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307c:	2202      	movs	r2, #2
 800307e:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003080:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003082:	a808      	add	r0, sp, #32
 8003084:	f001 fa78 	bl	8004578 <HAL_RCC_OscConfig>
 8003088:	b9c0      	cbnz	r0, 80030bc <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800308a:	230f      	movs	r3, #15
 800308c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800308e:	2302      	movs	r3, #2
 8003090:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003092:	2100      	movs	r1, #0
 8003094:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003096:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003098:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800309a:	a803      	add	r0, sp, #12
 800309c:	f001 fd38 	bl	8004b10 <HAL_RCC_ClockConfig>
 80030a0:	b970      	cbnz	r0, 80030c0 <SystemClock_Config+0x70>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80030a2:	2302      	movs	r3, #2
 80030a4:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80030a6:	2300      	movs	r3, #0
 80030a8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030aa:	4668      	mov	r0, sp
 80030ac:	f001 fe17 	bl	8004cde <HAL_RCCEx_PeriphCLKConfig>
 80030b0:	b940      	cbnz	r0, 80030c4 <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80030b2:	f001 fcec 	bl	8004a8e <HAL_RCC_EnableCSS>
}
 80030b6:	b013      	add	sp, #76	@ 0x4c
 80030b8:	f85d fb04 	ldr.w	pc, [sp], #4
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030be:	e7fe      	b.n	80030be <SystemClock_Config+0x6e>
 80030c0:	b672      	cpsid	i
 80030c2:	e7fe      	b.n	80030c2 <SystemClock_Config+0x72>
 80030c4:	b672      	cpsid	i
 80030c6:	e7fe      	b.n	80030c6 <SystemClock_Config+0x76>

080030c8 <main>:
{
 80030c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80030cc:	b095      	sub	sp, #84	@ 0x54
  HAL_Init();
 80030ce:	f000 fef0 	bl	8003eb2 <HAL_Init>
  SystemClock_Config();
 80030d2:	f7ff ffbd 	bl	8003050 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d6:	2400      	movs	r4, #0
 80030d8:	940f      	str	r4, [sp, #60]	@ 0x3c
 80030da:	9410      	str	r4, [sp, #64]	@ 0x40
 80030dc:	9411      	str	r4, [sp, #68]	@ 0x44
 80030de:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e0:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 80030e4:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 80030e8:	69ab      	ldr	r3, [r5, #24]
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	61ab      	str	r3, [r5, #24]
 80030f0:	69ab      	ldr	r3, [r5, #24]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fa:	69ab      	ldr	r3, [r5, #24]
 80030fc:	f043 0320 	orr.w	r3, r3, #32
 8003100:	61ab      	str	r3, [r5, #24]
 8003102:	69ab      	ldr	r3, [r5, #24]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	9305      	str	r3, [sp, #20]
 800310a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	69ab      	ldr	r3, [r5, #24]
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	61ab      	str	r3, [r5, #24]
 8003114:	69ab      	ldr	r3, [r5, #24]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	9306      	str	r3, [sp, #24]
 800311c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	69ab      	ldr	r3, [r5, #24]
 8003120:	f043 0308 	orr.w	r3, r3, #8
 8003124:	61ab      	str	r3, [r5, #24]
 8003126:	69ab      	ldr	r3, [r5, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	9307      	str	r3, [sp, #28]
 800312e:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003130:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
 8003134:	f2c4 0b01 	movt	fp, #16385	@ 0x4001
 8003138:	4622      	mov	r2, r4
 800313a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800313e:	4658      	mov	r0, fp
 8003140:	f001 f934 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003144:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 8003148:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 800314c:	2201      	movs	r2, #1
 800314e:	2108      	movs	r1, #8
 8003150:	4640      	mov	r0, r8
 8003152:	f001 f92b 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin, GPIO_PIN_RESET);
 8003156:	f44f 6940 	mov.w	r9, #3072	@ 0xc00
 800315a:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 800315e:	4622      	mov	r2, r4
 8003160:	f248 0138 	movw	r1, #32824	@ 0x8038
 8003164:	4648      	mov	r0, r9
 8003166:	f001 f921 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 800316a:	4622      	mov	r2, r4
 800316c:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 8003170:	4640      	mov	r0, r8
 8003172:	f001 f91b 	bl	80043ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN1_Pin|SHUTDOWN2_Pin|BUZZER_Pin;
 8003176:	f44f 4760 	mov.w	r7, #57344	@ 0xe000
 800317a:	970f      	str	r7, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317c:	f04f 0a01 	mov.w	sl, #1
 8003180:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2602      	movs	r6, #2
 8003188:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318a:	a90f      	add	r1, sp, #60	@ 0x3c
 800318c:	4658      	mov	r0, fp
 800318e:	f000 ffc3 	bl	8004118 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D1_Pin
 8003192:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8003196:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003198:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	a90f      	add	r1, sp, #60	@ 0x3c
 80031a2:	4640      	mov	r0, r8
 80031a4:	f000 ffb8 	bl	8004118 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B6_Pin|B5_Pin|B4_Pin|B1_Pin
 80031a8:	f647 4304 	movw	r3, #31748	@ 0x7c04
 80031ac:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ae:	4623      	mov	r3, r4
 80031b0:	f2c1 0311 	movt	r3, #4113	@ 0x1011
 80031b4:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	a90f      	add	r1, sp, #60	@ 0x3c
 80031ba:	4648      	mov	r0, r9
 80031bc:	f000 ffac 	bl	8004118 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_RS_Pin|LCD_E_Pin|RTS_Pin;
 80031c0:	f248 0338 	movw	r3, #32824	@ 0x8038
 80031c4:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	9411      	str	r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	a90f      	add	r1, sp, #60	@ 0x3c
 80031d0:	4648      	mov	r0, r9
 80031d2:	f000 ffa1 	bl	8004118 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80031d6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80031da:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	a90f      	add	r1, sp, #60	@ 0x3c
 80031e2:	4640      	mov	r0, r8
 80031e4:	f000 ff98 	bl	8004118 <HAL_GPIO_Init>
  __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80031e8:	4622      	mov	r2, r4
 80031ea:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80031ee:	6853      	ldr	r3, [r2, #4]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fc:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI2_IRQn, 15, 0);
 80031fe:	4622      	mov	r2, r4
 8003200:	210f      	movs	r1, #15
 8003202:	2008      	movs	r0, #8
 8003204:	f000 fe9a 	bl	8003f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003208:	2008      	movs	r0, #8
 800320a:	f000 fed0 	bl	8003fae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800320e:	4622      	mov	r2, r4
 8003210:	210f      	movs	r1, #15
 8003212:	2028      	movs	r0, #40	@ 0x28
 8003214:	f000 fe92 	bl	8003f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003218:	2028      	movs	r0, #40	@ 0x28
 800321a:	f000 fec8 	bl	8003fae <HAL_NVIC_EnableIRQ>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800321e:	696b      	ldr	r3, [r5, #20]
 8003220:	ea43 030a 	orr.w	r3, r3, sl
 8003224:	616b      	str	r3, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003226:	696b      	ldr	r3, [r5, #20]
 8003228:	ea03 030a 	and.w	r3, r3, sl
 800322c:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800322e:	9b03      	ldr	r3, [sp, #12]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8003234:	f367 431f 	bfi	r3, r7, #16, #16
 8003238:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800323a:	4622      	mov	r2, r4
 800323c:	4621      	mov	r1, r4
 800323e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003242:	f7ff fec3 	bl	8002fcc <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003246:	0103      	lsls	r3, r0, #4
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800324e:	f367 421f 	bfi	r2, r7, #16, #16
 8003252:	f882 330b 	strb.w	r3, [r2, #779]	@ 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 800325a:	f367 431f 	bfi	r3, r7, #16, #16
 800325e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003262:	601a      	str	r2, [r3, #0]
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003264:	9408      	str	r4, [sp, #32]
 8003266:	9409      	str	r4, [sp, #36]	@ 0x24
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003268:	940a      	str	r4, [sp, #40]	@ 0x28
 800326a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800326c:	940c      	str	r4, [sp, #48]	@ 0x30
 800326e:	940d      	str	r4, [sp, #52]	@ 0x34
 8003270:	940e      	str	r4, [sp, #56]	@ 0x38
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	9410      	str	r4, [sp, #64]	@ 0x40
 8003274:	9411      	str	r4, [sp, #68]	@ 0x44
 8003276:	9412      	str	r4, [sp, #72]	@ 0x48
 8003278:	9413      	str	r4, [sp, #76]	@ 0x4c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800327a:	69ab      	ldr	r3, [r5, #24]
 800327c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003280:	61ab      	str	r3, [r5, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003282:	69ab      	ldr	r3, [r5, #24]
 8003284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003288:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800328a:	9b00      	ldr	r3, [sp, #0]
  SET_BIT(RCC->APB2ENR, Periphs);
 800328c:	69ab      	ldr	r3, [r5, #24]
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003294:	69ab      	ldr	r3, [r5, #24]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800329c:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800329e:	69ab      	ldr	r3, [r5, #24]
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	61ab      	str	r3, [r5, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80032a6:	69ab      	ldr	r3, [r5, #24]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80032ae:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_6
 80032b0:	f24c 73c7 	movw	r3, #51143	@ 0xc7c7
 80032b4:	930f      	str	r3, [sp, #60]	@ 0x3c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	a90f      	add	r1, sp, #60	@ 0x3c
 80032b8:	4640      	mov	r0, r8
 80032ba:	f002 f9af 	bl	800561c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80032be:	f240 3303 	movw	r3, #771	@ 0x303
 80032c2:	930f      	str	r3, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80032c4:	9410      	str	r4, [sp, #64]	@ 0x40
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c6:	a90f      	add	r1, sp, #60	@ 0x3c
 80032c8:	4648      	mov	r0, r9
 80032ca:	f002 f9a7 	bl	800561c <LL_GPIO_Init>
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80032ce:	4623      	mov	r3, r4
 80032d0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 80032e6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	f042 0220 	orr.w	r2, r2, #32
 80032ee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032fe:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003306:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003312:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003316:	609a      	str	r2, [r3, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800331c:	f367 431f 	bfi	r3, r7, #16, #16
 8003320:	68d8      	ldr	r0, [r3, #12]
  NVIC_SetPriority(ADC1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003322:	4622      	mov	r2, r4
 8003324:	4621      	mov	r1, r4
 8003326:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800332a:	f7ff fe4f 	bl	8002fcc <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	0103      	lsls	r3, r0, #4
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003336:	f367 421f 	bfi	r2, r7, #16, #16
 800333a:	f882 3312 	strb.w	r3, [r2, #786]	@ 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8003342:	f367 431f 	bfi	r3, r7, #16, #16
 8003346:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800334a:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800334c:	9408      	str	r4, [sp, #32]
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800334e:	f44f 7980 	mov.w	r9, #256	@ 0x100
 8003352:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003356:	f44f 5810 	mov.w	r8, #9216	@ 0x2400
 800335a:	f2c4 0801 	movt	r8, #16385	@ 0x4001
 800335e:	a908      	add	r1, sp, #32
 8003360:	4640      	mov	r0, r8
 8003362:	f002 f91f 	bl	80055a4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8003366:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800336a:	930a      	str	r3, [sp, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS;
 800336c:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8003370:	930b      	str	r3, [sp, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003372:	940c      	str	r4, [sp, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003374:	940d      	str	r4, [sp, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003376:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800337a:	a90a      	add	r1, sp, #40	@ 0x28
 800337c:	4640      	mov	r0, r8
 800337e:	f002 f925 	bl	80055cc <LL_ADC_REG_Init>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f44f 7740 	mov.w	r7, #768	@ 0x300
 8003386:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	f44f 7a00 	mov.w	sl, #512	@ 0x200
 8003392:	fa2a f303 	lsr.w	r3, sl, r3
 8003396:	f242 452c 	movw	r5, #9260	@ 0x242c
 800339a:	f2c4 0501 	movt	r5, #16385	@ 0x4001
  MODIFY_REG(*preg,
 800339e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80033a2:	f022 021f 	bic.w	r2, r2, #31
 80033a6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80033aa:	4632      	mov	r2, r6
 80033ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033b0:	4640      	mov	r0, r8
 80033b2:	f7ff fe25 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 80033b6:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 80033c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80033c6:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80033d2:	4632      	mov	r2, r6
 80033d4:	2101      	movs	r1, #1
 80033d6:	f2c0 2130 	movt	r1, #560	@ 0x230
 80033da:	4640      	mov	r0, r8
 80033dc:	f7ff fe10 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 80033e0:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 80033ec:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80033f0:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 80033f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80033fc:	4632      	mov	r2, r6
 80033fe:	4631      	mov	r1, r6
 8003400:	f2c0 2160 	movt	r1, #608	@ 0x260
 8003404:	4640      	mov	r0, r8
 8003406:	f7ff fdfb 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 800340a:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8003416:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 800341a:	f422 2278 	bic.w	r2, r2, #1015808	@ 0xf8000
 800341e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003422:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8003426:	4632      	mov	r2, r6
 8003428:	2106      	movs	r1, #6
 800342a:	f2c0 3120 	movt	r1, #800	@ 0x320
 800342e:	4640      	mov	r0, r8
 8003430:	f7ff fde6 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 8003434:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	fa2a f303 	lsr.w	r3, sl, r3
  MODIFY_REG(*preg,
 8003440:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8003444:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8003448:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 800344c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8003450:	4632      	mov	r2, r6
 8003452:	2107      	movs	r1, #7
 8003454:	f2c0 3150 	movt	r1, #848	@ 0x350
 8003458:	4640      	mov	r0, r8
 800345a:	f7ff fdd1 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 800345e:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	fa2a fa03 	lsr.w	sl, sl, r3
  MODIFY_REG(*preg,
 800346a:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800346e:	f023 5378 	bic.w	r3, r3, #1040187392	@ 0x3e000000
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	f845 302a 	str.w	r3, [r5, sl, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800347a:	4632      	mov	r2, r6
 800347c:	2108      	movs	r1, #8
 800347e:	f2c0 3180 	movt	r1, #896	@ 0x380
 8003482:	4640      	mov	r0, r8
 8003484:	f7ff fdbc 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
 8003488:	fa97 f3a7 	rbit	r3, r7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	fa29 f903 	lsr.w	r9, r9, r3
  MODIFY_REG(*preg,
 8003494:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
 8003498:	f023 031f 	bic.w	r3, r3, #31
 800349c:	f043 0309 	orr.w	r3, r3, #9
 80034a0:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80034a4:	4632      	mov	r2, r6
 80034a6:	2109      	movs	r1, #9
 80034a8:	f2c0 31b0 	movt	r1, #944	@ 0x3b0
 80034ac:	4640      	mov	r0, r8
 80034ae:	f7ff fda7 	bl	8003000 <LL_ADC_SetChannelSamplingTime>
  DAC_ChannelConfTypeDef sConfig = {0};
 80034b2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80034b4:	9410      	str	r4, [sp, #64]	@ 0x40
  hdac.Instance = DAC;
 80034b6:	f240 400c 	movw	r0, #1036	@ 0x40c
 80034ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80034be:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 80034c2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80034c6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80034c8:	f000 fd94 	bl	8003ff4 <HAL_DAC_Init>
 80034cc:	2800      	cmp	r0, #0
 80034ce:	f040 8118 	bne.w	8003702 <main+0x63a>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80034d2:	2200      	movs	r2, #0
 80034d4:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80034d6:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80034d8:	a90f      	add	r1, sp, #60	@ 0x3c
 80034da:	f240 400c 	movw	r0, #1036	@ 0x40c
 80034de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80034e2:	f000 fde8 	bl	80040b6 <HAL_DAC_ConfigChannel>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	f040 810d 	bne.w	8003706 <main+0x63e>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80034ec:	2210      	movs	r2, #16
 80034ee:	a90f      	add	r1, sp, #60	@ 0x3c
 80034f0:	f240 400c 	movw	r0, #1036	@ 0x40c
 80034f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80034f8:	f000 fddd 	bl	80040b6 <HAL_DAC_ConfigChannel>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f040 8104 	bne.w	800370a <main+0x642>
  hi2c1.Instance = I2C1;
 8003502:	f240 30b8 	movw	r0, #952	@ 0x3b8
 8003506:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800350a:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 800350e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003512:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003514:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8003518:	f2c0 0301 	movt	r3, #1
 800351c:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800351e:	2300      	movs	r3, #0
 8003520:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003522:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003524:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003528:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800352a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800352c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800352e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003530:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003532:	f000 ff53 	bl	80043dc <HAL_I2C_Init>
 8003536:	2800      	cmp	r0, #0
 8003538:	f040 80e9 	bne.w	800370e <main+0x646>
  huart1.Instance = USART1;
 800353c:	f240 20e0 	movw	r0, #736	@ 0x2e0
 8003540:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003544:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003548:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800354c:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800354e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003552:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003554:	2300      	movs	r3, #0
 8003556:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003558:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800355a:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800355c:	220c      	movs	r2, #12
 800355e:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003560:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003562:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003564:	f001 ffee 	bl	8005544 <HAL_UART_Init>
 8003568:	2800      	cmp	r0, #0
 800356a:	f040 80d2 	bne.w	8003712 <main+0x64a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800356e:	2300      	movs	r3, #0
 8003570:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003572:	9310      	str	r3, [sp, #64]	@ 0x40
 8003574:	9311      	str	r3, [sp, #68]	@ 0x44
 8003576:	9312      	str	r3, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003578:	930a      	str	r3, [sp, #40]	@ 0x28
 800357a:	930b      	str	r3, [sp, #44]	@ 0x2c
  htim3.Instance = TIM3;
 800357c:	f240 3070 	movw	r0, #880	@ 0x370
 8003580:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003588:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800358c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 800358e:	2217      	movs	r2, #23
 8003590:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003592:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8003594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003598:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800359e:	f001 fe37 	bl	8005210 <HAL_TIM_Base_Init>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	f040 80b7 	bne.w	8003716 <main+0x64e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ac:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035ae:	a90f      	add	r1, sp, #60	@ 0x3c
 80035b0:	f240 3070 	movw	r0, #880	@ 0x370
 80035b4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80035b8:	f001 fe62 	bl	8005280 <HAL_TIM_ConfigClockSource>
 80035bc:	2800      	cmp	r0, #0
 80035be:	f040 80ac 	bne.w	800371a <main+0x652>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035c2:	2320      	movs	r3, #32
 80035c4:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035ca:	a90a      	add	r1, sp, #40	@ 0x28
 80035cc:	f240 3070 	movw	r0, #880	@ 0x370
 80035d0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80035d4:	f001 ff09 	bl	80053ea <HAL_TIMEx_MasterConfigSynchronization>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f040 80a0 	bne.w	800371e <main+0x656>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035de:	2300      	movs	r3, #0
 80035e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80035e2:	9310      	str	r3, [sp, #64]	@ 0x40
  htim7.Instance = TIM7;
 80035e4:	f240 3028 	movw	r0, #808	@ 0x328
 80035e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80035ec:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80035f0:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80035f4:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 239;
 80035f6:	22ef      	movs	r2, #239	@ 0xef
 80035f8:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035fa:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 9999;
 80035fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003600:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003602:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003604:	f001 fe04 	bl	8005210 <HAL_TIM_Base_Init>
 8003608:	2800      	cmp	r0, #0
 800360a:	f040 808a 	bne.w	8003722 <main+0x65a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800360e:	2320      	movs	r3, #32
 8003610:	930f      	str	r3, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003612:	2300      	movs	r3, #0
 8003614:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003616:	a90f      	add	r1, sp, #60	@ 0x3c
 8003618:	f240 3028 	movw	r0, #808	@ 0x328
 800361c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003620:	f001 fee3 	bl	80053ea <HAL_TIMEx_MasterConfigSynchronization>
 8003624:	4680      	mov	r8, r0
 8003626:	2800      	cmp	r0, #0
 8003628:	d17d      	bne.n	8003726 <main+0x65e>
  adc_init();
 800362a:	f7fd fa7d 	bl	8000b28 <adc_init>
  HAL_TIM_Base_Start(&htim3);
 800362e:	f240 3070 	movw	r0, #880	@ 0x370
 8003632:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003636:	f001 fbf2 	bl	8004e1e <HAL_TIM_Base_Start>
  LCD_Backlight(1);
 800363a:	2001      	movs	r0, #1
 800363c:	f7fd fb57 	bl	8000cee <LCD_Backlight>
  LCD_Init();
 8003640:	f7fd fb62 	bl	8000d08 <LCD_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8003644:	f240 440c 	movw	r4, #1036	@ 0x40c
 8003648:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800364c:	2100      	movs	r1, #0
 800364e:	4620      	mov	r0, r4
 8003650:	f000 fce2 	bl	8004018 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8003654:	2110      	movs	r1, #16
 8003656:	4620      	mov	r0, r4
 8003658:	f000 fcde 	bl	8004018 <HAL_DAC_Start>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port,LCD_BL_Pin, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003662:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003666:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 800366a:	f000 fe9f 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN1_GPIO_Port, SHUTDOWN1_Pin, 0);
 800366e:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8003672:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8003676:	2200      	movs	r2, #0
 8003678:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800367c:	4628      	mov	r0, r5
 800367e:	f000 fe95 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SHUTDOWN2_GPIO_Port, SHUTDOWN2_Pin, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003688:	4628      	mov	r0, r5
 800368a:	f000 fe8f 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 800368e:	f240 23dc 	movw	r3, #732	@ 0x2dc
 8003692:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	2200      	movs	r2, #0
 800369a:	2110      	movs	r1, #16
 800369c:	4620      	mov	r0, r4
 800369e:	f000 fcf1 	bl	8004084 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValueI);
 80036a2:	f240 031e 	movw	r3, #30
 80036a6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	4611      	mov	r1, r2
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fce7 	bl	8004084 <HAL_DAC_SetValue>
  pageID = 0;
 80036b6:	f240 24d9 	movw	r4, #729	@ 0x2d9
 80036ba:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80036be:	2600      	movs	r6, #0
 80036c0:	7026      	strb	r6, [r4, #0]
  lcd_handle();
 80036c2:	f7fd fca1 	bl	8001008 <lcd_handle>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80036c6:	2201      	movs	r2, #1
 80036c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 fe6d 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_Delay(250);
 80036d2:	20fa      	movs	r0, #250	@ 0xfa
 80036d4:	f000 fc0b 	bl	8003eee <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80036d8:	4632      	mov	r2, r6
 80036da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 fe64 	bl	80043ac <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 80036e4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80036e8:	f000 fc01 	bl	8003eee <HAL_Delay>
  pageID = 1;
 80036ec:	2301      	movs	r3, #1
 80036ee:	7023      	strb	r3, [r4, #0]
	  switch(mainCounter)
 80036f0:	f240 24da 	movw	r4, #730	@ 0x2da
 80036f4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 80036f8:	f648 6639 	movw	r6, #36409	@ 0x8e39
 80036fc:	f6c3 06e3 	movt	r6, #14563	@ 0x38e3
 8003700:	e0f3      	b.n	80038ea <main+0x822>
  __ASM volatile ("cpsid i" : : : "memory");
 8003702:	b672      	cpsid	i
  while (1)
 8003704:	e7fe      	b.n	8003704 <main+0x63c>
 8003706:	b672      	cpsid	i
 8003708:	e7fe      	b.n	8003708 <main+0x640>
 800370a:	b672      	cpsid	i
 800370c:	e7fe      	b.n	800370c <main+0x644>
 800370e:	b672      	cpsid	i
 8003710:	e7fe      	b.n	8003710 <main+0x648>
 8003712:	b672      	cpsid	i
 8003714:	e7fe      	b.n	8003714 <main+0x64c>
 8003716:	b672      	cpsid	i
 8003718:	e7fe      	b.n	8003718 <main+0x650>
 800371a:	b672      	cpsid	i
 800371c:	e7fe      	b.n	800371c <main+0x654>
 800371e:	b672      	cpsid	i
 8003720:	e7fe      	b.n	8003720 <main+0x658>
 8003722:	b672      	cpsid	i
 8003724:	e7fe      	b.n	8003724 <main+0x65c>
 8003726:	b672      	cpsid	i
 8003728:	e7fe      	b.n	8003728 <main+0x660>
		  adcTEMP = adcMeanSum[listTEMP - 1] >> SAMPLE_2N ;
 800372a:	f240 131c 	movw	r3, #284	@ 0x11c
 800372e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003732:	f240 1284 	movw	r2, #388	@ 0x184
 8003736:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	1112      	asrs	r2, r2, #4
 800373e:	801a      	strh	r2, [r3, #0]
		  break;
 8003740:	2301      	movs	r3, #1
		  mainCounter++;
 8003742:	7023      	strb	r3, [r4, #0]
	  if(deviceOn == 1)
 8003744:	782b      	ldrb	r3, [r5, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f000 80a9 	beq.w	800389e <main+0x7d6>
	  switch(mainCounter)
 800374c:	7823      	ldrb	r3, [r4, #0]
 800374e:	2b08      	cmp	r3, #8
 8003750:	f200 80a3 	bhi.w	800389a <main+0x7d2>
 8003754:	a201      	add	r2, pc, #4	@ (adr r2, 800375c <main+0x694>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800372b 	.word	0x0800372b
 8003760:	08003781 	.word	0x08003781
 8003764:	0800379b 	.word	0x0800379b
 8003768:	080037b5 	.word	0x080037b5
 800376c:	080037cf 	.word	0x080037cf
 8003770:	080037e9 	.word	0x080037e9
 8003774:	08003803 	.word	0x08003803
 8003778:	08003883 	.word	0x08003883
 800377c:	0800388f 	.word	0x0800388f
		  adcIDC = adcMeanSum[listIDC - 1] >> SAMPLE_2N ;
 8003780:	f240 131a 	movw	r3, #282	@ 0x11a
 8003784:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003788:	f240 1284 	movw	r2, #388	@ 0x184
 800378c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003790:	6852      	ldr	r2, [r2, #4]
 8003792:	1112      	asrs	r2, r2, #4
 8003794:	801a      	strh	r2, [r3, #0]
		  break;
 8003796:	2302      	movs	r3, #2
 8003798:	e7d3      	b.n	8003742 <main+0x67a>
		  adcVBAT1 = adcMeanSum[listVBAT1 - 1] >> SAMPLE_2N ;
 800379a:	f240 1318 	movw	r3, #280	@ 0x118
 800379e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037a2:	f240 1284 	movw	r2, #388	@ 0x184
 80037a6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80037aa:	6892      	ldr	r2, [r2, #8]
 80037ac:	1112      	asrs	r2, r2, #4
 80037ae:	801a      	strh	r2, [r3, #0]
		  break;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e7c6      	b.n	8003742 <main+0x67a>
		  adcVDC1 = adcMeanSum[listVDC1 - 1] >> SAMPLE_2N ;
 80037b4:	f240 1316 	movw	r3, #278	@ 0x116
 80037b8:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037bc:	f240 1284 	movw	r2, #388	@ 0x184
 80037c0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	1112      	asrs	r2, r2, #4
 80037c8:	801a      	strh	r2, [r3, #0]
		  break;
 80037ca:	2304      	movs	r3, #4
 80037cc:	e7b9      	b.n	8003742 <main+0x67a>
		  adcVDC2 = adcMeanSum[listVDC2 - 1] >> SAMPLE_2N ;
 80037ce:	f240 1314 	movw	r3, #276	@ 0x114
 80037d2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037d6:	f240 1284 	movw	r2, #388	@ 0x184
 80037da:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80037de:	6912      	ldr	r2, [r2, #16]
 80037e0:	1112      	asrs	r2, r2, #4
 80037e2:	801a      	strh	r2, [r3, #0]
		  break;
 80037e4:	2305      	movs	r3, #5
 80037e6:	e7ac      	b.n	8003742 <main+0x67a>
		  adcIDC2 = adcMeanSum[listIDC2 - 1] >> SAMPLE_2N ;
 80037e8:	f240 1312 	movw	r3, #274	@ 0x112
 80037ec:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80037f0:	f240 1284 	movw	r2, #388	@ 0x184
 80037f4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80037f8:	6952      	ldr	r2, [r2, #20]
 80037fa:	1112      	asrs	r2, r2, #4
 80037fc:	801a      	strh	r2, [r3, #0]
		  break;
 80037fe:	2306      	movs	r3, #6
 8003800:	e79f      	b.n	8003742 <main+0x67a>
		  adcVAC = sqrt((double) (adcRmsSum / N_VALUE) );
 8003802:	f240 1328 	movw	r3, #296	@ 0x128
 8003806:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 8003812:	f022 4340 	bic.w	r3, r2, #3221225472	@ 0xc0000000
 8003816:	0f90      	lsrs	r0, r2, #30
 8003818:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 800381c:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 8003820:	4403      	add	r3, r0
 8003822:	eb03 7311 	add.w	r3, r3, r1, lsr #28
 8003826:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800382a:	fba6 7003 	umull	r7, r0, r6, r3
 800382e:	0840      	lsrs	r0, r0, #1
 8003830:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003834:	1a1b      	subs	r3, r3, r0
 8003836:	f02c 0c07 	bic.w	ip, ip, #7
 800383a:	4463      	add	r3, ip
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 8003842:	f24e 338e 	movw	r3, #58254	@ 0xe38e
 8003846:	f6c8 6338 	movt	r3, #36408	@ 0x8e38
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	fb06 3301 	mla	r3, r6, r1, r3
 8003852:	fba2 2106 	umull	r2, r1, r2, r6
 8003856:	4419      	add	r1, r3
 8003858:	0fc8      	lsrs	r0, r1, #31
 800385a:	1880      	adds	r0, r0, r2
 800385c:	f141 0100 	adc.w	r1, r1, #0
 8003860:	0840      	lsrs	r0, r0, #1
 8003862:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 8003866:	1049      	asrs	r1, r1, #1
 8003868:	f7fc fe60 	bl	800052c <__aeabi_l2d>
 800386c:	f001 ff94 	bl	8005798 <sqrt>
 8003870:	f240 171e 	movw	r7, #286	@ 0x11e
 8003874:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8003878:	f7fd f936 	bl	8000ae8 <__aeabi_d2uiz>
 800387c:	8038      	strh	r0, [r7, #0]
		  break;
 800387e:	2307      	movs	r3, #7
 8003880:	e75f      	b.n	8003742 <main+0x67a>
		  lcd_handle();
 8003882:	f7fd fbc1 	bl	8001008 <lcd_handle>
		  mainCounter++;
 8003886:	7823      	ldrb	r3, [r4, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	b2db      	uxtb	r3, r3
		  break;
 800388c:	e759      	b.n	8003742 <main+0x67a>
		  button_handle();
 800388e:	f7fe fd1f 	bl	80022d0 <button_handle>
		  mainCounter++;
 8003892:	7823      	ldrb	r3, [r4, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b2db      	uxtb	r3, r3
		  break;
 8003898:	e753      	b.n	8003742 <main+0x67a>
	  switch(mainCounter)
 800389a:	4643      	mov	r3, r8
 800389c:	e751      	b.n	8003742 <main+0x67a>
		  dacValueV +=PID_Compute(&pidVout, batInfo.floatVoltage, adcBuffer[listVBAT1]);
 800389e:	f240 227c 	movw	r2, #636	@ 0x27c
 80038a2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80038a6:	f240 0320 	movw	r3, #32
 80038aa:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80038ae:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80038b2:	6919      	ldr	r1, [r3, #16]
 80038b4:	f240 0050 	movw	r0, #80	@ 0x50
 80038b8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038bc:	f000 f81a 	bl	80038f4 <PID_Compute>
 80038c0:	f240 22dc 	movw	r2, #732	@ 0x2dc
 80038c4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80038c8:	8813      	ldrh	r3, [r2, #0]
 80038ca:	4403      	add	r3, r0
		  if(dacValueV > 4095)
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80038d2:	428b      	cmp	r3, r1
 80038d4:	bf28      	it	cs
 80038d6:	460b      	movcs	r3, r1
		  dacValueV +=PID_Compute(&pidVout, batInfo.floatVoltage, adcBuffer[listVBAT1]);
 80038d8:	8013      	strh	r3, [r2, #0]
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacValueV);
 80038da:	2200      	movs	r2, #0
 80038dc:	2110      	movs	r1, #16
 80038de:	f240 400c 	movw	r0, #1036	@ 0x40c
 80038e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80038e6:	f000 fbcd 	bl	8004084 <HAL_DAC_SetValue>
	  if(deviceOn == 1)
 80038ea:	f240 4520 	movw	r5, #1056	@ 0x420
 80038ee:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80038f2:	e72b      	b.n	800374c <main+0x684>

080038f4 <PID_Compute>:
    .chargeDay                  = 0,
    .chargeWeek                 = 0,
};

int PID_Compute(PIDController *pid, unsigned long setpoint, unsigned long measured)
{
 80038f4:	b410      	push	{r4}
    pid->setpoint = setpoint;
 80038f6:	60c1      	str	r1, [r0, #12]
    pid->measured = measured;
 80038f8:	6102      	str	r2, [r0, #16]

    pid->error = pid->setpoint - pid->measured ;
 80038fa:	1a89      	subs	r1, r1, r2
 80038fc:	6141      	str	r1, [r0, #20]

    pid->integral += pid->error;
 80038fe:	69c3      	ldr	r3, [r0, #28]
 8003900:	440b      	add	r3, r1
 8003902:	61c3      	str	r3, [r0, #28]
    pid->derivative = pid->error - pid->prevError;
 8003904:	6982      	ldr	r2, [r0, #24]
 8003906:	1a8a      	subs	r2, r1, r2
 8003908:	6202      	str	r2, [r0, #32]
    pid->prevError = pid->error;
 800390a:	6181      	str	r1, [r0, #24]


    if (pid->integral > PID_VOUT_INT_MAX)
 800390c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003910:	dd15      	ble.n	800393e <PID_Compute+0x4a>
        pid->integral = PID_VOUT_INT_MAX;
 8003912:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003916:	61c3      	str	r3, [r0, #28]
    else if (pid->integral < PID_VOUT_INT_MIN)
        pid->integral = PID_VOUT_INT_MIN;


    pid->output = pid->Kp * pid->error +
                  pid->Ki * pid->integral +
 8003918:	6843      	ldr	r3, [r0, #4]
    pid->output = pid->Kp * pid->error +
 800391a:	6804      	ldr	r4, [r0, #0]
 800391c:	fb04 f101 	mul.w	r1, r4, r1
 8003920:	69c4      	ldr	r4, [r0, #28]
 8003922:	fb04 1103 	mla	r1, r4, r3, r1
                  pid->Kd * pid->derivative;
 8003926:	6883      	ldr	r3, [r0, #8]
                  pid->Ki * pid->integral +
 8003928:	fb03 1102 	mla	r1, r3, r2, r1

    pid->output = pid->output >> 12;
 800392c:	1309      	asrs	r1, r1, #12
 800392e:	6241      	str	r1, [r0, #36]	@ 0x24

    if (pid->output > pid->outputMax)
 8003930:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003932:	4299      	cmp	r1, r3
 8003934:	dd0c      	ble.n	8003950 <PID_Compute+0x5c>
        pid->output = pid->outputMax;
 8003936:	6243      	str	r3, [r0, #36]	@ 0x24
    else if (pid->output < pid->outputMin)
        pid->output = pid->outputMin;

    return pid->output;
}
 8003938:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800393a:	bc10      	pop	{r4}
 800393c:	4770      	bx	lr
    else if (pid->integral < PID_VOUT_INT_MIN)
 800393e:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 8003942:	dae9      	bge.n	8003918 <PID_Compute+0x24>
        pid->integral = PID_VOUT_INT_MIN;
 8003944:	f64f 0330 	movw	r3, #63536	@ 0xf830
 8003948:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 800394c:	61c3      	str	r3, [r0, #28]
 800394e:	e7e3      	b.n	8003918 <PID_Compute+0x24>
    else if (pid->output < pid->outputMin)
 8003950:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003952:	4299      	cmp	r1, r3
        pid->output = pid->outputMin;
 8003954:	bfb8      	it	lt
 8003956:	6243      	strlt	r3, [r0, #36]	@ 0x24
 8003958:	e7ee      	b.n	8003938 <PID_Compute+0x44>

0800395a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800395a:	b500      	push	{lr}
 800395c:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800395e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003962:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	f042 0201 	orr.w	r2, r2, #1
 800396c:	619a      	str	r2, [r3, #24]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	f002 0201 	and.w	r2, r2, #1
 8003974:	9200      	str	r2, [sp, #0]
 8003976:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800397e:	61da      	str	r2, [r3, #28]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	4611      	mov	r1, r2
 800398e:	2005      	movs	r0, #5
 8003990:	f000 fad4 	bl	8003f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003994:	2005      	movs	r0, #5
 8003996:	f000 fb0a 	bl	8003fae <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800399a:	2200      	movs	r2, #0
 800399c:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80039a0:	6853      	ldr	r3, [r2, #4]
 80039a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80039a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ac:	b003      	add	sp, #12
 80039ae:	f85d fb04 	ldr.w	pc, [sp], #4

080039b2 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80039b2:	b500      	push	{lr}
 80039b4:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b6:	2300      	movs	r3, #0
 80039b8:	9302      	str	r3, [sp, #8]
 80039ba:	9303      	str	r3, [sp, #12]
 80039bc:	9304      	str	r3, [sp, #16]
 80039be:	9305      	str	r3, [sp, #20]
  if(hdac->Instance==DAC)
 80039c0:	f44f 43e8 	mov.w	r3, #29696	@ 0x7400
 80039c4:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 80039c8:	6802      	ldr	r2, [r0, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d002      	beq.n	80039d4 <HAL_DAC_MspInit+0x22>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80039ce:	b007      	add	sp, #28
 80039d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC_CLK_ENABLE();
 80039d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039d8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80039e2:	61da      	str	r2, [r3, #28]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 80039ea:	9200      	str	r2, [sp, #0]
 80039ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	f042 0204 	orr.w	r2, r2, #4
 80039f4:	619a      	str	r2, [r3, #24]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a00:	2330      	movs	r3, #48	@ 0x30
 8003a02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a04:	2303      	movs	r3, #3
 8003a06:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a08:	a902      	add	r1, sp, #8
 8003a0a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003a0e:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003a12:	f000 fb81 	bl	8004118 <HAL_GPIO_Init>
}
 8003a16:	e7da      	b.n	80039ce <HAL_DAC_MspInit+0x1c>

08003a18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8003a26:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8003a2a:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003a2e:	6802      	ldr	r2, [r0, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_MspInit+0x20>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003a34:	b006      	add	sp, #24
 8003a36:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a38:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003a3c:	f2c4 0402 	movt	r4, #16386	@ 0x4002
 8003a40:	69a3      	ldr	r3, [r4, #24]
 8003a42:	f043 0308 	orr.w	r3, r3, #8
 8003a46:	61a3      	str	r3, [r4, #24]
 8003a48:	69a3      	ldr	r3, [r4, #24]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a58:	2312      	movs	r3, #18
 8003a5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a60:	a902      	add	r1, sp, #8
 8003a62:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003a66:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003a6a:	f000 fb55 	bl	8004118 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003a74:	6853      	ldr	r3, [r2, #4]
 8003a76:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a80:	69e3      	ldr	r3, [r4, #28]
 8003a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a86:	61e3      	str	r3, [r4, #28]
 8003a88:	69e3      	ldr	r3, [r4, #28]
 8003a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	9b01      	ldr	r3, [sp, #4]
}
 8003a92:	e7cf      	b.n	8003a34 <HAL_I2C_MspInit+0x1c>

08003a94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a94:	b500      	push	{lr}
 8003a96:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 8003a98:	6802      	ldr	r2, [r0, #0]
 8003a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a9e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d008      	beq.n	8003ab8 <HAL_TIM_Base_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8003aa6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003aaa:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d018      	beq.n	8003ae4 <HAL_TIM_Base_MspInit+0x50>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003ab2:	b003      	add	sp, #12
 8003ab4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003abc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	f042 0202 	orr.w	r2, r2, #2
 8003ac6:	61da      	str	r2, [r3, #28]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	201d      	movs	r0, #29
 8003ad8:	f000 fa30 	bl	8003f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003adc:	201d      	movs	r0, #29
 8003ade:	f000 fa66 	bl	8003fae <HAL_NVIC_EnableIRQ>
 8003ae2:	e7e6      	b.n	8003ab2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ae8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	f042 0220 	orr.w	r2, r2, #32
 8003af2:	61da      	str	r2, [r3, #28]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003afe:	2200      	movs	r2, #0
 8003b00:	4611      	mov	r1, r2
 8003b02:	2037      	movs	r0, #55	@ 0x37
 8003b04:	f000 fa1a 	bl	8003f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003b08:	2037      	movs	r0, #55	@ 0x37
 8003b0a:	f000 fa50 	bl	8003fae <HAL_NVIC_EnableIRQ>
}
 8003b0e:	e7d0      	b.n	8003ab2 <HAL_TIM_Base_MspInit+0x1e>

08003b10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b10:	b510      	push	{r4, lr}
 8003b12:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	2300      	movs	r3, #0
 8003b16:	9302      	str	r3, [sp, #8]
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 8003b1e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003b22:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003b26:	6802      	ldr	r2, [r0, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_UART_MspInit+0x20>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003b2c:	b006      	add	sp, #24
 8003b2e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b34:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b3e:	619a      	str	r2, [r3, #24]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003b46:	9200      	str	r2, [sp, #0]
 8003b48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	f042 0208 	orr.w	r2, r2, #8
 8003b50:	619a      	str	r2, [r3, #24]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b5c:	2340      	movs	r3, #64	@ 0x40
 8003b5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b60:	2302      	movs	r3, #2
 8003b62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8003b6c:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8003b70:	a902      	add	r1, sp, #8
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 fad0 	bl	8004118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b82:	a902      	add	r1, sp, #8
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 fac7 	bl	8004118 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8003b90:	6853      	ldr	r3, [r2, #4]
 8003b92:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6053      	str	r3, [r2, #4]
}
 8003b9c:	e7c6      	b.n	8003b2c <HAL_UART_MspInit+0x1c>

08003b9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b9e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003ba0:	f001 f88a 	bl	8004cb8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <NMI_Handler+0x6>

08003ba6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ba6:	e7fe      	b.n	8003ba6 <HardFault_Handler>

08003ba8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba8:	e7fe      	b.n	8003ba8 <MemManage_Handler>

08003baa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <BusFault_Handler>

08003bac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <UsageFault_Handler>

08003bae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bae:	4770      	bx	lr

08003bb0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb0:	4770      	bx	lr

08003bb2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb2:	4770      	bx	lr

08003bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb6:	f000 f987 	bl	8003ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bba:	bd08      	pop	{r3, pc}

08003bbc <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003bbc:	4770      	bx	lr

08003bbe <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003bbe:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B6_Pin);
 8003bc0:	2004      	movs	r0, #4
 8003bc2:	f000 fbfa 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  {
    uint32_t idr = GPIOB->IDR;
 8003bc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003bca:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003bce:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8003bd0:	f240 21d8 	movw	r1, #728	@ 0x2d8
 8003bd4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003bd8:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8003bdc:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8003be6:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003bea:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8003bec:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8003bf0:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8003bf4:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8003bf8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8003bfc:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8003c00:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8003c04:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 8003c06:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8003c0a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c0e:	2401      	movs	r4, #1
 8003c10:	701c      	strb	r4, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8003c12:	f240 3028 	movw	r0, #808	@ 0x328
 8003c16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003c1a:	f001 f939 	bl	8004e90 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8003c1e:	4622      	mov	r2, r4
 8003c20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c24:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c28:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003c2c:	f000 fbbe 	bl	80043ac <HAL_GPIO_WritePin>
  }

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003c30:	bd10      	pop	{r4, pc}

08003c32 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c32:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	uint8_t adcChannelCounter = 0;
	uint16_t dcOffset = 1985;

	adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter] - dcOffset)
 8003c34:	f240 217c 	movw	r1, #636	@ 0x27c
 8003c38:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003c3c:	f240 2e8c 	movw	lr, #652	@ 0x28c
 8003c40:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8003c44:	f9be 3000 	ldrsh.w	r3, [lr]
 8003c48:	f2a3 73c1 	subw	r3, r3, #1985	@ 0x7c1
			* adcGain[adcChannelCounter]) >> 15);
 8003c4c:	f240 1004 	movw	r0, #260	@ 0x104
 8003c50:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003c54:	f9b0 2000 	ldrsh.w	r2, [r0]
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	13db      	asrs	r3, r3, #15
	adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter] - dcOffset)
 8003c5e:	800b      	strh	r3, [r1, #0]
	adcChannelCounter++;

	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8003c60:	4672      	mov	r2, lr
 8003c62:	468c      	mov	ip, r1
 8003c64:	f10e 0e0c 	add.w	lr, lr, #12
	{
		adcBuffer[adcChannelCounter] = (q15_t)(((int32_t)(adc1Buffer[adcChannelCounter]) * adcGain[adcChannelCounter]) >> 15);
 8003c68:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8003c6c:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 8003c70:	fb04 f303 	mul.w	r3, r4, r3
 8003c74:	13db      	asrs	r3, r3, #15
 8003c76:	f821 3f02 	strh.w	r3, [r1, #2]!
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8003c7a:	4572      	cmp	r2, lr
 8003c7c:	d1f4      	bne.n	8003c68 <DMA1_Channel1_IRQHandler+0x36>
		adcChannelCounter++;
	}
	adcChannelCounter = 1;
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
	{
		adcMeanSum[adcChannelCounter - 1] = adcMeanSum[adcChannelCounter - 1] - adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo];
 8003c7e:	f240 1380 	movw	r3, #384	@ 0x180
 8003c82:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003c86:	781c      	ldrb	r4, [r3, #0]
 8003c88:	f240 1084 	movw	r0, #388	@ 0x184
 8003c8c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003c90:	f240 1e9c 	movw	lr, #412	@ 0x19c
 8003c94:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 8003c98:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6802      	ldr	r2, [r0, #0]
 8003ca0:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
 8003ca4:	1a51      	subs	r1, r2, r1
		adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo] = adcBuffer[adcChannelCounter];
 8003ca6:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
 8003caa:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
		adcMeanSum[adcChannelCounter - 1] = adcMeanSum[adcChannelCounter - 1] + adcMeanBuffer[adcChannelCounter - 1][adcMeanBufferPo];
 8003cae:	440a      	add	r2, r1
 8003cb0:	f840 2b04 	str.w	r2, [r0], #4
	while(adcChannelCounter < ENUM_ADC_CHANNEL_COUNT)
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	2b60      	cmp	r3, #96	@ 0x60
 8003cb8:	d1f1      	bne.n	8003c9e <DMA1_Channel1_IRQHandler+0x6c>
		adcChannelCounter++;
	}

	adcMeanBufferPo++;
 8003cba:	1c63      	adds	r3, r4, #1
 8003cbc:	b2db      	uxtb	r3, r3
	if (adcMeanBufferPo >= ADC_MEAN_BUFFER_SIZE)
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	bf28      	it	cs
 8003cc2:	2300      	movcs	r3, #0
	adcMeanBufferPo++;
 8003cc4:	f240 1280 	movw	r2, #384	@ 0x180
 8003cc8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003ccc:	7013      	strb	r3, [r2, #0]
	{
		adcMeanBufferPo = 0;
	}

	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8003cce:	f240 1320 	movw	r3, #288	@ 0x120
 8003cd2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cd6:	f893 c000 	ldrb.w	ip, [r3]
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8003cda:	f240 237c 	movw	r3, #636	@ 0x27c
 8003cde:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003ce6:	fb02 f202 	mul.w	r2, r2, r2
	adcRmsSum = adcRmsSum - adcRmsBuffer[adcRmsBufferPo];
 8003cea:	f240 1128 	movw	r1, #296	@ 0x128
 8003cee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8003cf2:	f240 1330 	movw	r3, #304	@ 0x130
 8003cf6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003cfa:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
 8003cfe:	680b      	ldr	r3, [r1, #0]
 8003d00:	6848      	ldr	r0, [r1, #4]
 8003d02:	1b1b      	subs	r3, r3, r4
 8003d04:	eb60 70e4 	sbc.w	r0, r0, r4, asr #31
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8003d08:	189b      	adds	r3, r3, r2
 8003d0a:	eb40 70e2 	adc.w	r0, r0, r2, asr #31
	adcRmsBufferPo++;
 8003d0e:	f10c 0101 	add.w	r1, ip, #1
 8003d12:	b2c9      	uxtb	r1, r1
	if (adcRmsBufferPo >= ADC_RMS_BUFFER_SIZE)
 8003d14:	2914      	cmp	r1, #20
 8003d16:	bf28      	it	cs
 8003d18:	2100      	movcs	r1, #0
    adcRmsBuffer[adcRmsBufferPo] = (int32_t)adcBuffer[listVAC] * (int32_t)adcBuffer[listVAC];
 8003d1a:	f240 1430 	movw	r4, #304	@ 0x130
 8003d1e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8003d22:	f844 202c 	str.w	r2, [r4, ip, lsl #2]
	adcRmsSum = adcRmsSum + adcRmsBuffer[adcRmsBufferPo];
 8003d26:	f240 1228 	movw	r2, #296	@ 0x128
 8003d2a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	6050      	str	r0, [r2, #4]
	adcRmsBufferPo++;
 8003d32:	f240 1320 	movw	r3, #288	@ 0x120
 8003d36:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003d3a:	7019      	strb	r1, [r3, #0]
		adcRmsBufferPo = 0;
	}

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d4a:	bd10      	pop	{r4, pc}

08003d4c <ADC1_IRQHandler>:

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003d4c:	4770      	bx	lr

08003d4e <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d4e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d50:	f240 3070 	movw	r0, #880	@ 0x370
 8003d54:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003d58:	f001 f8dd 	bl	8004f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d5c:	bd08      	pop	{r3, pc}

08003d5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d5e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B5_Pin);
 8003d60:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d64:	f000 fb29 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B4_Pin);
 8003d68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d6c:	f000 fb25 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003d70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d74:	f000 fb21 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003d78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003d7c:	f000 fb1d 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8003d80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d84:	f000 fb19 	bl	80043ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
    uint32_t idr = GPIOB->IDR;
 8003d88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003d8c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8003d90:	689a      	ldr	r2, [r3, #8]
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
    );
    buttonState = s;
 8003d92:	f240 21d8 	movw	r1, #728	@ 0x2d8
 8003d96:	f2c2 0100 	movt	r1, #8192	@ 0x2000
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003d9a:	f3c2 3040 	ubfx	r0, r2, #13, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8003d9e:	f3c2 3380 	ubfx	r3, r2, #14, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
        ((!!(idr & B1_Pin)) << BUT_LEFT_POS)  |
 8003da8:	f3c2 3000 	ubfx	r0, r2, #12, #1
        ((!!(idr & B2_Pin)) << BUT_ON_POS)    |
 8003dac:	4303      	orrs	r3, r0
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8003dae:	f3c2 20c0 	ubfx	r0, r2, #11, #1
        ((!!(idr & B3_Pin)) << BUT_UP_POS)    |
 8003db2:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8003db6:	f3c2 2080 	ubfx	r0, r2, #10, #1
        ((!!(idr & B4_Pin)) << BUT_DOWN_POS)  |
 8003dba:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
        ((!!(idr & B6_Pin)) << BUT_OFF_POS)
 8003dbe:	f3c2 0280 	ubfx	r2, r2, #2, #1
        ((!!(idr & B5_Pin)) << BUT_RIGHT_POS) |
 8003dc2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    buttonState = s;
 8003dc6:	700b      	strb	r3, [r1, #0]
    uiNeedsClear = 1; /* UI refresh: clear once in lcd_handle */
 8003dc8:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8003dcc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003dd0:	2401      	movs	r4, #1
 8003dd2:	701c      	strb	r4, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim7); // IT = interrupt
 8003dd4:	f240 3028 	movw	r0, #808	@ 0x328
 8003dd8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003ddc:	f001 f858 	bl	8004e90 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8003de0:	4622      	mov	r2, r4
 8003de2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003de6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003dea:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003dee:	f000 fadd 	bl	80043ac <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003df2:	bd10      	pop	{r4, pc}

08003df4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003dfc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003e00:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8003e04:	f000 fad2 	bl	80043ac <HAL_GPIO_WritePin>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e08:	f240 3028 	movw	r0, #808	@ 0x328
 8003e0c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8003e10:	f001 f881 	bl	8004f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e14:	bd08      	pop	{r3, pc}

08003e16 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e16:	4770      	bx	lr

08003e18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e18:	f7ff fffd 	bl	8003e16 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e1c:	480b      	ldr	r0, [pc, #44]	@ (8003e4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003e1e:	490c      	ldr	r1, [pc, #48]	@ (8003e50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003e20:	4a0c      	ldr	r2, [pc, #48]	@ (8003e54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e24:	e002      	b.n	8003e2c <LoopCopyDataInit>

08003e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e2a:	3304      	adds	r3, #4

08003e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e30:	d3f9      	bcc.n	8003e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e32:	4a09      	ldr	r2, [pc, #36]	@ (8003e58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e34:	4c09      	ldr	r4, [pc, #36]	@ (8003e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e38:	e001      	b.n	8003e3e <LoopFillZerobss>

08003e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e3c:	3204      	adds	r2, #4

08003e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e40:	d3fb      	bcc.n	8003e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e42:	f001 fc85 	bl	8005750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e46:	f7ff f93f 	bl	80030c8 <main>
  bx lr
 8003e4a:	4770      	bx	lr
  ldr r0, =_sdata
 8003e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e50:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8003e54:	08005e30 	.word	0x08005e30
  ldr r2, =_sbss
 8003e58:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8003e5c:	20000560 	.word	0x20000560

08003e60 <CEC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e60:	e7fe      	b.n	8003e60 <CEC_IRQHandler>

08003e62 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e62:	b510      	push	{r4, lr}
 8003e64:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e66:	f240 0288 	movw	r2, #136	@ 0x88
 8003e6a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003e6e:	f240 038c 	movw	r3, #140	@ 0x8c
 8003e72:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003e76:	7819      	ldrb	r1, [r3, #0]
 8003e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e80:	6810      	ldr	r0, [r2, #0]
 8003e82:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e86:	f000 f8a0 	bl	8003fca <HAL_SYSTICK_Config>
 8003e8a:	b980      	cbnz	r0, 8003eae <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e8c:	2c0f      	cmp	r4, #15
 8003e8e:	d901      	bls.n	8003e94 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
 8003e92:	e00d      	b.n	8003eb0 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e94:	2200      	movs	r2, #0
 8003e96:	4621      	mov	r1, r4
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	f000 f84e 	bl	8003f3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ea0:	f240 0390 	movw	r3, #144	@ 0x90
 8003ea4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ea8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8003eae:	2001      	movs	r0, #1
}
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <HAL_Init>:
{
 8003eb2:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	f000 f82e 	bl	8003f16 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eba:	200f      	movs	r0, #15
 8003ebc:	f7ff ffd1 	bl	8003e62 <HAL_InitTick>
  HAL_MspInit();
 8003ec0:	f7ff fd4b 	bl	800395a <HAL_MspInit>
}
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	bd08      	pop	{r3, pc}

08003ec8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003ec8:	f240 4324 	movw	r3, #1060	@ 0x424
 8003ecc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	f240 028c 	movw	r2, #140	@ 0x8c
 8003ed6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	440a      	add	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ee2:	f240 4324 	movw	r3, #1060	@ 0x424
 8003ee6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003eea:	6818      	ldr	r0, [r3, #0]
}
 8003eec:	4770      	bx	lr

08003eee <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eee:	b538      	push	{r3, r4, r5, lr}
 8003ef0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ef2:	f7ff fff6 	bl	8003ee2 <HAL_GetTick>
 8003ef6:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003efc:	d005      	beq.n	8003f0a <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efe:	f240 038c 	movw	r3, #140	@ 0x8c
 8003f02:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f0a:	f7ff ffea 	bl	8003ee2 <HAL_GetTick>
 8003f0e:	1b40      	subs	r0, r0, r5
 8003f10:	42a0      	cmp	r0, r4
 8003f12:	d3fa      	bcc.n	8003f0a <HAL_Delay+0x1c>
  {
  }
}
 8003f14:	bd38      	pop	{r3, r4, r5, pc}

08003f16 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f16:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8003f1a:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8003f1e:	68d1      	ldr	r1, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003f20:	0203      	lsls	r3, r0, #8
 8003f22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f26:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003f2a:	0409      	lsls	r1, r1, #16
 8003f2c:	0c09      	lsrs	r1, r1, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2e:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8003f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003f38:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f3c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f3e:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 8003f42:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	f1c3 0c07 	rsb	ip, r3, #7
 8003f50:	f1bc 0f04 	cmp.w	ip, #4
 8003f54:	bf28      	it	cs
 8003f56:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	f103 0e04 	add.w	lr, r3, #4
 8003f5e:	f1be 0f06 	cmp.w	lr, #6
 8003f62:	bf8c      	ite	hi
 8003f64:	3b03      	subhi	r3, #3
 8003f66:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	f04f 3eff 	mov.w	lr, #4294967295
 8003f6c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f70:	ea21 010c 	bic.w	r1, r1, ip
 8003f74:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f76:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f7a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f7e:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003f80:	2800      	cmp	r0, #0
 8003f82:	db09      	blt.n	8003f98 <HAL_NVIC_SetPriority+0x5c>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f84:	0109      	lsls	r1, r1, #4
 8003f86:	b2c9      	uxtb	r1, r1
 8003f88:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003f8c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003f90:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f94:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f98:	f000 000f 	and.w	r0, r0, #15
 8003f9c:	0109      	lsls	r1, r1, #4
 8003f9e:	b2c9      	uxtb	r1, r1
 8003fa0:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 8003fa4:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 8003fa8:	4403      	add	r3, r0
 8003faa:	7619      	strb	r1, [r3, #24]
 8003fac:	e7f2      	b.n	8003f94 <HAL_NVIC_SetPriority+0x58>

08003fae <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	db0a      	blt.n	8003fc8 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb2:	0941      	lsrs	r1, r0, #5
 8003fb4:	f000 001f 	and.w	r0, r0, #31
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4083      	lsls	r3, r0
 8003fbc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8003fc0:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8003fc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fc8:	4770      	bx	lr

08003fca <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fca:	3801      	subs	r0, #1
 8003fcc:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003fd0:	d20e      	bcs.n	8003ff0 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003fd6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8003fdc:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8003fe0:	21f0      	movs	r1, #240	@ 0xf0
 8003fe2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fea:	2207      	movs	r2, #7
 8003fec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ff0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ff4:	b170      	cbz	r0, 8004014 <HAL_DAC_Init+0x20>
{
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ffa:	7903      	ldrb	r3, [r0, #4]
 8003ffc:	b133      	cbz	r3, 800400c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ffe:	2302      	movs	r3, #2
 8004000:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004002:	2000      	movs	r0, #0
 8004004:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004006:	2301      	movs	r3, #1
 8004008:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800400a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800400c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800400e:	f7ff fcd0 	bl	80039b2 <HAL_DAC_MspInit>
 8004012:	e7f4      	b.n	8003ffe <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8004014:	2001      	movs	r0, #1
}
 8004016:	4770      	bx	lr

08004018 <HAL_DAC_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004018:	b380      	cbz	r0, 800407c <HAL_DAC_Start+0x64>
 800401a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800401c:	7942      	ldrb	r2, [r0, #5]
 800401e:	2a01      	cmp	r2, #1
 8004020:	d02e      	beq.n	8004080 <HAL_DAC_Start+0x68>
{
 8004022:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 8004024:	2201      	movs	r2, #1
 8004026:	7142      	strb	r2, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004028:	2002      	movs	r0, #2
 800402a:	7118      	strb	r0, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	6804      	ldr	r4, [r0, #0]
 8004030:	f001 0c10 	and.w	ip, r1, #16
 8004034:	fa02 f20c 	lsl.w	r2, r2, ip
 8004038:	4322      	orrs	r2, r4
 800403a:	6002      	str	r2, [r0, #0]

  if (Channel == DAC_CHANNEL_1)
 800403c:	b981      	cbnz	r1, 8004060 <HAL_DAC_Start+0x48>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	680a      	ldr	r2, [r1, #0]
 8004042:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8004046:	2a3c      	cmp	r2, #60	@ 0x3c
 8004048:	d005      	beq.n	8004056 <HAL_DAC_Start+0x3e>
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800404a:	2201      	movs	r2, #1
 800404c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800404e:	2000      	movs	r0, #0
 8004050:	7158      	strb	r0, [r3, #5]

  /* Return function status */
  return HAL_OK;
}
 8004052:	bc10      	pop	{r4}
 8004054:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004056:	684a      	ldr	r2, [r1, #4]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	604a      	str	r2, [r1, #4]
 800405e:	e7f4      	b.n	800404a <HAL_DAC_Start+0x32>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	6801      	ldr	r1, [r0, #0]
 8004064:	f401 1170 	and.w	r1, r1, #3932160	@ 0x3c0000
 8004068:	223c      	movs	r2, #60	@ 0x3c
 800406a:	fa02 f20c 	lsl.w	r2, r2, ip
 800406e:	4291      	cmp	r1, r2
 8004070:	d1eb      	bne.n	800404a <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004072:	6842      	ldr	r2, [r0, #4]
 8004074:	f042 0202 	orr.w	r2, r2, #2
 8004078:	6042      	str	r2, [r0, #4]
 800407a:	e7e6      	b.n	800404a <HAL_DAC_Start+0x32>
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
 800407e:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8004080:	2002      	movs	r0, #2
}
 8004082:	4770      	bx	lr

08004084 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004084:	b410      	push	{r4}
 8004086:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8004088:	2400      	movs	r4, #0
 800408a:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800408c:	b188      	cbz	r0, 80040b2 <HAL_DAC_SetValue+0x2e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800408e:	6800      	ldr	r0, [r0, #0]
 8004090:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8004092:	b949      	cbnz	r1, 80040a8 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004094:	9901      	ldr	r1, [sp, #4]
 8004096:	3108      	adds	r1, #8
 8004098:	440a      	add	r2, r1
 800409a:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800409c:	9a01      	ldr	r2, [sp, #4]
 800409e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80040a0:	2000      	movs	r0, #0
}
 80040a2:	b003      	add	sp, #12
 80040a4:	bc10      	pop	{r4}
 80040a6:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80040a8:	9901      	ldr	r1, [sp, #4]
 80040aa:	3114      	adds	r1, #20
 80040ac:	440a      	add	r2, r1
 80040ae:	9201      	str	r2, [sp, #4]
 80040b0:	e7f4      	b.n	800409c <HAL_DAC_SetValue+0x18>
    return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
 80040b4:	e7f5      	b.n	80040a2 <HAL_DAC_SetValue+0x1e>

080040b6 <HAL_DAC_ConfigChannel>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80040b6:	b348      	cbz	r0, 800410c <HAL_DAC_ConfigChannel+0x56>
 80040b8:	4684      	mov	ip, r0
 80040ba:	b349      	cbz	r1, 8004110 <HAL_DAC_ConfigChannel+0x5a>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040bc:	7943      	ldrb	r3, [r0, #5]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d028      	beq.n	8004114 <HAL_DAC_ConfigChannel+0x5e>
{
 80040c2:	b510      	push	{r4, lr}
  __HAL_LOCK(hdac);
 80040c4:	f04f 0e01 	mov.w	lr, #1
 80040c8:	f880 e005 	strb.w	lr, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040cc:	2302      	movs	r3, #2
 80040ce:	7103      	strb	r3, [r0, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040d0:	6804      	ldr	r4, [r0, #0]
 80040d2:	6820      	ldr	r0, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80040d4:	f002 0210 	and.w	r2, r2, #16
 80040d8:	f640 73fe 	movw	r3, #4094	@ 0xffe
 80040dc:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80040de:	ea20 0003 	bic.w	r0, r0, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80040e2:	680b      	ldr	r3, [r1, #0]
 80040e4:	6849      	ldr	r1, [r1, #4]
 80040e6:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040e8:	4093      	lsls	r3, r2
 80040ea:	4303      	orrs	r3, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040ec:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80040ee:	f8dc 0000 	ldr.w	r0, [ip]
 80040f2:	6803      	ldr	r3, [r0, #0]
 80040f4:	21c0      	movs	r1, #192	@ 0xc0
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	ea23 0302 	bic.w	r3, r3, r2
 80040fe:	6003      	str	r3, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004100:	f88c e004 	strb.w	lr, [ip, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004104:	2000      	movs	r0, #0
 8004106:	f88c 0005 	strb.w	r0, [ip, #5]

  /* Return function status */
  return status;
}
 800410a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800410c:	2001      	movs	r0, #1
 800410e:	4770      	bx	lr
 8004110:	2001      	movs	r0, #1
 8004112:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8004114:	2002      	movs	r0, #2
}
 8004116:	4770      	bx	lr

08004118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800411e:	f8d1 9000 	ldr.w	r9, [r1]
 8004122:	f1b9 0f00 	cmp.w	r9, #0
 8004126:	f000 8137 	beq.w	8004398 <HAL_GPIO_Init+0x280>
 800412a:	4606      	mov	r6, r0
 800412c:	2200      	movs	r2, #0
  uint32_t config = 0x00u;
 800412e:	4617      	mov	r7, r2
  uint32_t position = 0x00u;
 8004130:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004132:	f04f 0c01 	mov.w	ip, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004136:	f44f 5e80 	mov.w	lr, #4096	@ 0x1000
 800413a:	f2c4 0e02 	movt	lr, #16386	@ 0x4002
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800413e:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8004142:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8004146:	f44f 6540 	mov.w	r5, #3072	@ 0xc00
 800414a:	f2c4 0501 	movt	r5, #16385	@ 0x4001
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800414e:	3004      	adds	r0, #4
 8004150:	9001      	str	r0, [sp, #4]
 8004152:	46a8      	mov	r8, r5
 8004154:	464d      	mov	r5, r9
 8004156:	e0d1      	b.n	80042fc <HAL_GPIO_Init+0x1e4>
      switch (GPIO_Init->Mode)
 8004158:	f04f 0a00 	mov.w	sl, #0
 800415c:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 8004160:	4555      	cmp	r5, sl
 8004162:	d024      	beq.n	80041ae <HAL_GPIO_Init+0x96>
 8004164:	f04f 0a00 	mov.w	sl, #0
 8004168:	f2c1 0a22 	movt	sl, #4130	@ 0x1022
 800416c:	4555      	cmp	r5, sl
 800416e:	d812      	bhi.n	8004196 <HAL_GPIO_Init+0x7e>
 8004170:	f04f 0a00 	mov.w	sl, #0
 8004174:	f2c1 0a12 	movt	sl, #4114	@ 0x1012
 8004178:	4555      	cmp	r5, sl
 800417a:	d018      	beq.n	80041ae <HAL_GPIO_Init+0x96>
 800417c:	f04f 0a00 	mov.w	sl, #0
 8004180:	f2c1 0a21 	movt	sl, #4129	@ 0x1021
 8004184:	4555      	cmp	r5, sl
 8004186:	d012      	beq.n	80041ae <HAL_GPIO_Init+0x96>
 8004188:	f04f 0a00 	mov.w	sl, #0
 800418c:	f2c1 0a11 	movt	sl, #4113	@ 0x1011
 8004190:	4555      	cmp	r5, sl
 8004192:	d119      	bne.n	80041c8 <HAL_GPIO_Init+0xb0>
 8004194:	e00b      	b.n	80041ae <HAL_GPIO_Init+0x96>
 8004196:	f04f 0a00 	mov.w	sl, #0
 800419a:	f2c1 0a31 	movt	sl, #4145	@ 0x1031
 800419e:	4555      	cmp	r5, sl
 80041a0:	d005      	beq.n	80041ae <HAL_GPIO_Init+0x96>
 80041a2:	f04f 0a00 	mov.w	sl, #0
 80041a6:	f2c1 0a32 	movt	sl, #4146	@ 0x1032
 80041aa:	4555      	cmp	r5, sl
 80041ac:	d10c      	bne.n	80041c8 <HAL_GPIO_Init+0xb0>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ae:	688d      	ldr	r5, [r1, #8]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	f000 80e6 	beq.w	8004382 <HAL_GPIO_Init+0x26a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041b6:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 80041b8:	bf0c      	ite	eq
 80041ba:	f8c6 9010 	streq.w	r9, [r6, #16]
            GPIOx->BRR = ioposition;
 80041be:	f8c6 9014 	strne.w	r9, [r6, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041c2:	2708      	movs	r7, #8
 80041c4:	e000      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041c6:	68cf      	ldr	r7, [r1, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041c8:	28ff      	cmp	r0, #255	@ 0xff
 80041ca:	bf99      	ittee	ls
 80041cc:	46b1      	movls	r9, r6
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041ce:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80041d0:	f8dd 9004 	ldrhi.w	r9, [sp, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80041d4:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041d8:	f8d9 5000 	ldr.w	r5, [r9]
 80041dc:	f04f 0b0f 	mov.w	fp, #15
 80041e0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80041e4:	ea25 050b 	bic.w	r5, r5, fp
 80041e8:	fa07 fa0a 	lsl.w	sl, r7, sl
 80041ec:	ea45 050a 	orr.w	r5, r5, sl
 80041f0:	f8c9 5000 	str.w	r5, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f4:	684d      	ldr	r5, [r1, #4]
 80041f6:	f015 5f80 	tst.w	r5, #268435456	@ 0x10000000
 80041fa:	d079      	beq.n	80042f0 <HAL_GPIO_Init+0x1d8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041fc:	f8de 5018 	ldr.w	r5, [lr, #24]
 8004200:	f045 0501 	orr.w	r5, r5, #1
 8004204:	f8ce 5018 	str.w	r5, [lr, #24]
 8004208:	f8de 5018 	ldr.w	r5, [lr, #24]
 800420c:	f005 0501 	and.w	r5, r5, #1
 8004210:	9503      	str	r5, [sp, #12]
 8004212:	9d03      	ldr	r5, [sp, #12]
        temp = AFIO->EXTICR[position >> 2u];
 8004214:	f023 0503 	bic.w	r5, r3, #3
 8004218:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 800421c:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8004220:	f8d5 a008 	ldr.w	sl, [r5, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004224:	f003 0b03 	and.w	fp, r3, #3
 8004228:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800422c:	f04f 090f 	mov.w	r9, #15
 8004230:	fa09 f90b 	lsl.w	r9, r9, fp
 8004234:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004238:	42a6      	cmp	r6, r4
 800423a:	f000 80a4 	beq.w	8004386 <HAL_GPIO_Init+0x26e>
 800423e:	4546      	cmp	r6, r8
 8004240:	f000 80a4 	beq.w	800438c <HAL_GPIO_Init+0x274>
 8004244:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 8004248:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 800424c:	454e      	cmp	r6, r9
 800424e:	f000 80a0 	beq.w	8004392 <HAL_GPIO_Init+0x27a>
 8004252:	f44f 59a0 	mov.w	r9, #5120	@ 0x1400
 8004256:	f2c4 0901 	movt	r9, #16385	@ 0x4001
 800425a:	454e      	cmp	r6, r9
 800425c:	bf14      	ite	ne
 800425e:	f04f 0904 	movne.w	r9, #4
 8004262:	f04f 0903 	moveq.w	r9, #3
 8004266:	fa09 f90b 	lsl.w	r9, r9, fp
 800426a:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 800426e:	f8c5 9008 	str.w	r9, [r5, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004272:	684d      	ldr	r5, [r1, #4]
 8004274:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004278:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800427c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8004280:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8004284:	bf14      	ite	ne
 8004286:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800428a:	ea29 0900 	biceq.w	r9, r9, r0
 800428e:	f8c5 9008 	str.w	r9, [r5, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004292:	684d      	ldr	r5, [r1, #4]
 8004294:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004298:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800429c:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80042a0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80042a4:	bf14      	ite	ne
 80042a6:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042aa:	ea29 0900 	biceq.w	r9, r9, r0
 80042ae:	f8c5 900c 	str.w	r9, [r5, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042b2:	684d      	ldr	r5, [r1, #4]
 80042b4:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80042b8:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80042bc:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80042c0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80042c4:	bf14      	ite	ne
 80042c6:	ea49 0900 	orrne.w	r9, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80042ca:	ea29 0900 	biceq.w	r9, r9, r0
 80042ce:	f8c5 9004 	str.w	r9, [r5, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042d2:	684d      	ldr	r5, [r1, #4]
 80042d4:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042d8:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80042dc:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 80042e0:	f8d5 9000 	ldr.w	r9, [r5]
 80042e4:	bf14      	ite	ne
 80042e6:	ea49 0000 	orrne.w	r0, r9, r0
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042ea:	ea29 0000 	biceq.w	r0, r9, r0
 80042ee:	6028      	str	r0, [r5, #0]
        }
      }
    }

	position++;
 80042f0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f2:	680d      	ldr	r5, [r1, #0]
 80042f4:	3204      	adds	r2, #4
 80042f6:	fa35 f003 	lsrs.w	r0, r5, r3
 80042fa:	d04d      	beq.n	8004398 <HAL_GPIO_Init+0x280>
    ioposition = (0x01uL << position);
 80042fc:	fa0c f903 	lsl.w	r9, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004300:	ea09 0005 	and.w	r0, r9, r5
    if (iocurrent == ioposition)
 8004304:	ea39 0505 	bics.w	r5, r9, r5
 8004308:	d1f2      	bne.n	80042f0 <HAL_GPIO_Init+0x1d8>
      switch (GPIO_Init->Mode)
 800430a:	684d      	ldr	r5, [r1, #4]
 800430c:	2d12      	cmp	r5, #18
 800430e:	f63f af23 	bhi.w	8004158 <HAL_GPIO_Init+0x40>
 8004312:	2d12      	cmp	r5, #18
 8004314:	f63f af58 	bhi.w	80041c8 <HAL_GPIO_Init+0xb0>
 8004318:	f20f 0a04 	addw	sl, pc, #4
 800431c:	f85a f025 	ldr.w	pc, [sl, r5, lsl #2]
 8004320:	080041af 	.word	0x080041af
 8004324:	080041c7 	.word	0x080041c7
 8004328:	08004373 	.word	0x08004373
 800432c:	0800437f 	.word	0x0800437f
 8004330:	080041c9 	.word	0x080041c9
 8004334:	080041c9 	.word	0x080041c9
 8004338:	080041c9 	.word	0x080041c9
 800433c:	080041c9 	.word	0x080041c9
 8004340:	080041c9 	.word	0x080041c9
 8004344:	080041c9 	.word	0x080041c9
 8004348:	080041c9 	.word	0x080041c9
 800434c:	080041c9 	.word	0x080041c9
 8004350:	080041c9 	.word	0x080041c9
 8004354:	080041c9 	.word	0x080041c9
 8004358:	080041c9 	.word	0x080041c9
 800435c:	080041c9 	.word	0x080041c9
 8004360:	080041c9 	.word	0x080041c9
 8004364:	0800436d 	.word	0x0800436d
 8004368:	08004379 	.word	0x08004379
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800436c:	68cf      	ldr	r7, [r1, #12]
 800436e:	3704      	adds	r7, #4
          break;
 8004370:	e72a      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004372:	68cf      	ldr	r7, [r1, #12]
 8004374:	3708      	adds	r7, #8
          break;
 8004376:	e727      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004378:	68cf      	ldr	r7, [r1, #12]
 800437a:	370c      	adds	r7, #12
          break;
 800437c:	e724      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
      switch (GPIO_Init->Mode)
 800437e:	2700      	movs	r7, #0
 8004380:	e722      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004382:	2704      	movs	r7, #4
 8004384:	e720      	b.n	80041c8 <HAL_GPIO_Init+0xb0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004386:	f04f 0900 	mov.w	r9, #0
 800438a:	e76c      	b.n	8004266 <HAL_GPIO_Init+0x14e>
 800438c:	f04f 0901 	mov.w	r9, #1
 8004390:	e769      	b.n	8004266 <HAL_GPIO_Init+0x14e>
 8004392:	f04f 0902 	mov.w	r9, #2
 8004396:	e766      	b.n	8004266 <HAL_GPIO_Init+0x14e>
  }
}
 8004398:	b005      	add	sp, #20
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop

080043a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043a0:	6883      	ldr	r3, [r0, #8]
 80043a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80043a4:	bf14      	ite	ne
 80043a6:	2001      	movne	r0, #1
 80043a8:	2000      	moveq	r0, #0
 80043aa:	4770      	bx	lr

080043ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ac:	b10a      	cbz	r2, 80043b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ae:	6101      	str	r1, [r0, #16]
 80043b0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043b2:	0409      	lsls	r1, r1, #16
 80043b4:	6101      	str	r1, [r0, #16]
  }
}
 80043b6:	4770      	bx	lr

080043b8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043b8:	4770      	bx	lr

080043ba <HAL_GPIO_EXTI_IRQHandler>:
{
 80043ba:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043c0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	4203      	tst	r3, r0
 80043c8:	d100      	bne.n	80043cc <HAL_GPIO_EXTI_IRQHandler+0x12>
}
 80043ca:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043d0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80043d4:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043d6:	f7ff ffef 	bl	80043b8 <HAL_GPIO_EXTI_Callback>
}
 80043da:	e7f6      	b.n	80043ca <HAL_GPIO_EXTI_IRQHandler+0x10>

080043dc <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043dc:	2800      	cmp	r0, #0
 80043de:	f000 80c7 	beq.w	8004570 <HAL_I2C_Init+0x194>
{
 80043e2:	b538      	push	{r3, r4, r5, lr}
 80043e4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8084 	beq.w	80044f8 <HAL_I2C_Init+0x11c>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f0:	2324      	movs	r3, #36	@ 0x24
 80043f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	6813      	ldr	r3, [r2, #0]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004408:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	6813      	ldr	r3, [r2, #0]
 800440e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004412:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004414:	f000 fc29 	bl	8004c6a <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004418:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 800441c:	f2c0 0301 	movt	r3, #1
 8004420:	6862      	ldr	r2, [r4, #4]
 8004422:	429a      	cmp	r2, r3
 8004424:	d86d      	bhi.n	8004502 <HAL_I2C_Init+0x126>
 8004426:	f248 437f 	movw	r3, #33919	@ 0x847f
 800442a:	f2c0 031e 	movt	r3, #30
 800442e:	4298      	cmp	r0, r3
 8004430:	f240 80a0 	bls.w	8004574 <HAL_I2C_Init+0x198>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004434:	f64d 6183 	movw	r1, #56963	@ 0xde83
 8004438:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 800443c:	fba1 3100 	umull	r3, r1, r1, r0
 8004440:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	686a      	ldr	r2, [r5, #4]
 8004446:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800444a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800444e:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004450:	6821      	ldr	r1, [r4, #0]
 8004452:	6a0a      	ldr	r2, [r1, #32]
 8004454:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004458:	f248 65a0 	movw	r5, #34464	@ 0x86a0
 800445c:	f2c0 0501 	movt	r5, #1
 8004460:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004464:	45ac      	cmp	ip, r5
 8004466:	d854      	bhi.n	8004512 <HAL_I2C_Init+0x136>
 8004468:	3301      	adds	r3, #1
 800446a:	4313      	orrs	r3, r2
 800446c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	69ca      	ldr	r2, [r1, #28]
 8004472:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8004476:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800447a:	6865      	ldr	r5, [r4, #4]
 800447c:	f248 63a0 	movw	r3, #34464	@ 0x86a0
 8004480:	f2c0 0301 	movt	r3, #1
 8004484:	429d      	cmp	r5, r3
 8004486:	d851      	bhi.n	800452c <HAL_I2C_Init+0x150>
 8004488:	1e43      	subs	r3, r0, #1
 800448a:	006d      	lsls	r5, r5, #1
 800448c:	fbb3 f3f5 	udiv	r3, r3, r5
 8004490:	3301      	adds	r3, #1
 8004492:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004496:	4203      	tst	r3, r0
 8004498:	d064      	beq.n	8004564 <HAL_I2C_Init+0x188>
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	431a      	orrs	r2, r3
 80044a0:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a2:	6821      	ldr	r1, [r4, #0]
 80044a4:	680a      	ldr	r2, [r1, #0]
 80044a6:	69e3      	ldr	r3, [r4, #28]
 80044a8:	6a20      	ldr	r0, [r4, #32]
 80044aa:	4303      	orrs	r3, r0
 80044ac:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	6821      	ldr	r1, [r4, #0]
 80044b6:	688a      	ldr	r2, [r1, #8]
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	68e0      	ldr	r0, [r4, #12]
 80044bc:	4303      	orrs	r3, r0
 80044be:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 80044c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044ca:	6821      	ldr	r1, [r4, #0]
 80044cc:	68ca      	ldr	r2, [r1, #12]
 80044ce:	6963      	ldr	r3, [r4, #20]
 80044d0:	69a0      	ldr	r0, [r4, #24]
 80044d2:	4303      	orrs	r3, r0
 80044d4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044d8:	4313      	orrs	r3, r2
 80044da:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044dc:	6822      	ldr	r2, [r4, #0]
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e6:	2000      	movs	r0, #0
 80044e8:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	2320      	movs	r3, #32
 80044ec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80044f8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80044fc:	f7ff fa8c 	bl	8003a18 <HAL_I2C_MspInit>
 8004500:	e776      	b.n	80043f0 <HAL_I2C_Init+0x14>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004502:	f640 03ff 	movw	r3, #2303	@ 0x8ff
 8004506:	f2c0 033d 	movt	r3, #61	@ 0x3d
 800450a:	4298      	cmp	r0, r3
 800450c:	d892      	bhi.n	8004434 <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
 8004510:	e7f1      	b.n	80044f6 <HAL_I2C_Init+0x11a>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004512:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8004516:	fb05 f303 	mul.w	r3, r5, r3
 800451a:	f644 55d3 	movw	r5, #19923	@ 0x4dd3
 800451e:	f2c1 0562 	movt	r5, #4194	@ 0x1062
 8004522:	fba5 5303 	umull	r5, r3, r5, r3
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	3301      	adds	r3, #1
 800452a:	e79e      	b.n	800446a <HAL_I2C_Init+0x8e>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	b95b      	cbnz	r3, 8004548 <HAL_I2C_Init+0x16c>
 8004530:	1e43      	subs	r3, r0, #1
 8004532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004536:	fbb3 f3f5 	udiv	r3, r3, r5
 800453a:	3301      	adds	r3, #1
 800453c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004540:	b193      	cbz	r3, 8004568 <HAL_I2C_Init+0x18c>
 8004542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004546:	e7aa      	b.n	800449e <HAL_I2C_Init+0xc2>
 8004548:	1e43      	subs	r3, r0, #1
 800454a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800454e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004552:	fbb3 f3f5 	udiv	r3, r3, r5
 8004556:	3301      	adds	r3, #1
 8004558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455c:	b133      	cbz	r3, 800456c <HAL_I2C_Init+0x190>
 800455e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004562:	e79c      	b.n	800449e <HAL_I2C_Init+0xc2>
 8004564:	2304      	movs	r3, #4
 8004566:	e79a      	b.n	800449e <HAL_I2C_Init+0xc2>
 8004568:	2301      	movs	r3, #1
 800456a:	e798      	b.n	800449e <HAL_I2C_Init+0xc2>
 800456c:	2301      	movs	r3, #1
 800456e:	e796      	b.n	800449e <HAL_I2C_Init+0xc2>
    return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
}
 8004572:	4770      	bx	lr
    return HAL_ERROR;
 8004574:	2001      	movs	r0, #1
 8004576:	e7be      	b.n	80044f6 <HAL_I2C_Init+0x11a>

08004578 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004578:	2800      	cmp	r0, #0
 800457a:	f000 827a 	beq.w	8004a72 <HAL_RCC_OscConfig+0x4fa>
{
 800457e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004586:	6803      	ldr	r3, [r0, #0]
 8004588:	f013 0f01 	tst.w	r3, #1
 800458c:	d038      	beq.n	8004600 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800458e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004592:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b04      	cmp	r3, #4
 800459e:	d023      	beq.n	80045e8 <HAL_RCC_OscConfig+0x70>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d012      	beq.n	80045d8 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d054      	beq.n	8004664 <HAL_RCC_OscConfig+0xec>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d16e      	bne.n	800469c <HAL_RCC_OscConfig+0x124>
 80045be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045c2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e04d      	b.n	8004674 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045dc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80045e6:	d0e4      	beq.n	80045b2 <HAL_RCC_OscConfig+0x3a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80045f6:	d003      	beq.n	8004600 <HAL_RCC_OscConfig+0x88>
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 823b 	beq.w	8004a76 <HAL_RCC_OscConfig+0x4fe>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	f013 0f02 	tst.w	r3, #2
 8004606:	f000 8097 	beq.w	8004738 <HAL_RCC_OscConfig+0x1c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800460e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f013 0f0c 	tst.w	r3, #12
 8004618:	d077      	beq.n	800470a <HAL_RCC_OscConfig+0x192>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800461a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800461e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b08      	cmp	r3, #8
 800462a:	d066      	beq.n	80046fa <HAL_RCC_OscConfig+0x182>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80ae 	beq.w	8004790 <HAL_RCC_OscConfig+0x218>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	2300      	movs	r3, #0
 8004636:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7ff fc50 	bl	8003ee2 <HAL_GetTick>
 8004642:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004648:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	f013 0f02 	tst.w	r3, #2
 8004652:	f040 8091 	bne.w	8004778 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004656:	f7ff fc44 	bl	8003ee2 <HAL_GetTick>
 800465a:	1b40      	subs	r0, r0, r5
 800465c:	2802      	cmp	r0, #2
 800465e:	d9f5      	bls.n	800464c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8004660:	2003      	movs	r0, #3
 8004662:	e20d      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004668:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004672:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	b373      	cbz	r3, 80046d6 <HAL_RCC_OscConfig+0x15e>
        tickstart = HAL_GetTick();
 8004678:	f7ff fc33 	bl	8003ee2 <HAL_GetTick>
 800467c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004682:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004686:	6833      	ldr	r3, [r6, #0]
 8004688:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800468c:	d1b8      	bne.n	8004600 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468e:	f7ff fc28 	bl	8003ee2 <HAL_GetTick>
 8004692:	1b40      	subs	r0, r0, r5
 8004694:	2864      	cmp	r0, #100	@ 0x64
 8004696:	d9f6      	bls.n	8004686 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8004698:	2003      	movs	r0, #3
 800469a:	e1f1      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a0:	d00c      	beq.n	80046bc <HAL_RCC_OscConfig+0x144>
 80046a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046a6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e7db      	b.n	8004674 <HAL_RCC_OscConfig+0xfc>
 80046bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046c0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e7ce      	b.n	8004674 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80046d6:	f7ff fc04 	bl	8003ee2 <HAL_GetTick>
 80046da:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046dc:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80046e0:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80046e4:	6833      	ldr	r3, [r6, #0]
 80046e6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80046ea:	d089      	beq.n	8004600 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7ff fbf9 	bl	8003ee2 <HAL_GetTick>
 80046f0:	1b40      	subs	r0, r0, r5
 80046f2:	2864      	cmp	r0, #100	@ 0x64
 80046f4:	d9f6      	bls.n	80046e4 <HAL_RCC_OscConfig+0x16c>
            return HAL_TIMEOUT;
 80046f6:	2003      	movs	r0, #3
 80046f8:	e1c2      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046fe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004708:	d190      	bne.n	800462c <HAL_RCC_OscConfig+0xb4>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800470e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f013 0f02 	tst.w	r3, #2
 8004718:	d003      	beq.n	8004722 <HAL_RCC_OscConfig+0x1aa>
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 81ac 	bne.w	8004a7a <HAL_RCC_OscConfig+0x502>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004726:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800472a:	6813      	ldr	r3, [r2, #0]
 800472c:	6961      	ldr	r1, [r4, #20]
 800472e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004732:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004736:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	f013 0f08 	tst.w	r3, #8
 800473e:	d051      	beq.n	80047e4 <HAL_RCC_OscConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004740:	69a3      	ldr	r3, [r4, #24]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 8083 	beq.w	800484e <HAL_RCC_OscConfig+0x2d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004748:	2300      	movs	r3, #0
 800474a:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800474e:	2201      	movs	r2, #1
 8004750:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004754:	f7ff fbc5 	bl	8003ee2 <HAL_GetTick>
 8004758:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800475e:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004762:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004764:	f013 0f02 	tst.w	r3, #2
 8004768:	d129      	bne.n	80047be <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476a:	f7ff fbba 	bl	8003ee2 <HAL_GetTick>
 800476e:	1b40      	subs	r0, r0, r5
 8004770:	2802      	cmp	r0, #2
 8004772:	d9f6      	bls.n	8004762 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8004774:	2003      	movs	r0, #3
 8004776:	e183      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004778:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800477c:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	6961      	ldr	r1, [r4, #20]
 8004784:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004788:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e7d3      	b.n	8004738 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8004790:	2300      	movs	r3, #0
 8004792:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800479a:	f7ff fba2 	bl	8003ee2 <HAL_GetTick>
 800479e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a0:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80047a4:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	f013 0f02 	tst.w	r3, #2
 80047ae:	d0c3      	beq.n	8004738 <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b0:	f7ff fb97 	bl	8003ee2 <HAL_GetTick>
 80047b4:	1b40      	subs	r0, r0, r5
 80047b6:	2802      	cmp	r0, #2
 80047b8:	d9f6      	bls.n	80047a8 <HAL_RCC_OscConfig+0x230>
            return HAL_TIMEOUT;
 80047ba:	2003      	movs	r0, #3
 80047bc:	e160      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047be:	f240 0388 	movw	r3, #136	@ 0x88
 80047c2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 80047cc:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	0a5b      	lsrs	r3, r3, #9
 80047d6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80047d8:	bf00      	nop
  }
  while (Delay --);
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f9      	bne.n	80047d8 <HAL_RCC_OscConfig+0x260>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	f013 0f04 	tst.w	r3, #4
 80047ea:	f000 80b3 	beq.w	8004954 <HAL_RCC_OscConfig+0x3dc>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047f2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80047fc:	d13f      	bne.n	800487e <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004802:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800480c:	61da      	str	r2, [r3, #28]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8004818:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800481e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004828:	d02b      	beq.n	8004882 <HAL_RCC_OscConfig+0x30a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d042      	beq.n	80048b6 <HAL_RCC_OscConfig+0x33e>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d15e      	bne.n	80048f2 <HAL_RCC_OscConfig+0x37a>
 8004834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004838:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	6a1a      	ldr	r2, [r3, #32]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	621a      	str	r2, [r3, #32]
 800484c:	e03b      	b.n	80048c6 <HAL_RCC_OscConfig+0x34e>
      __HAL_RCC_LSI_DISABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004854:	2200      	movs	r2, #0
 8004856:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800485a:	f7ff fb42 	bl	8003ee2 <HAL_GetTick>
 800485e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004864:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 8004868:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800486a:	f013 0f02 	tst.w	r3, #2
 800486e:	d0b9      	beq.n	80047e4 <HAL_RCC_OscConfig+0x26c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7ff fb37 	bl	8003ee2 <HAL_GetTick>
 8004874:	1b40      	subs	r0, r0, r5
 8004876:	2802      	cmp	r0, #2
 8004878:	d9f6      	bls.n	8004868 <HAL_RCC_OscConfig+0x2f0>
          return HAL_TIMEOUT;
 800487a:	2003      	movs	r0, #3
 800487c:	e100      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
    FlagStatus       pwrclkchanged = RESET;
 800487e:	2500      	movs	r5, #0
 8004880:	e7cb      	b.n	800481a <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004882:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004886:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004890:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004892:	f7ff fb26 	bl	8003ee2 <HAL_GetTick>
 8004896:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 800489c:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80048a6:	d1c0      	bne.n	800482a <HAL_RCC_OscConfig+0x2b2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a8:	f7ff fb1b 	bl	8003ee2 <HAL_GetTick>
 80048ac:	1b80      	subs	r0, r0, r6
 80048ae:	2864      	cmp	r0, #100	@ 0x64
 80048b0:	d9f6      	bls.n	80048a0 <HAL_RCC_OscConfig+0x328>
          return HAL_TIMEOUT;
 80048b2:	2003      	movs	r0, #3
 80048b4:	e0e4      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048ba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	b37b      	cbz	r3, 800492a <HAL_RCC_OscConfig+0x3b2>
      tickstart = HAL_GetTick();
 80048ca:	f7ff fb0a 	bl	8003ee2 <HAL_GetTick>
 80048ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 80048d4:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f013 0f02 	tst.w	r3, #2
 80048e2:	d136      	bne.n	8004952 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7ff fafd 	bl	8003ee2 <HAL_GetTick>
 80048e8:	1b80      	subs	r0, r0, r6
 80048ea:	4540      	cmp	r0, r8
 80048ec:	d9f6      	bls.n	80048dc <HAL_RCC_OscConfig+0x364>
          return HAL_TIMEOUT;
 80048ee:	2003      	movs	r0, #3
 80048f0:	e0c6      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d00c      	beq.n	8004910 <HAL_RCC_OscConfig+0x398>
 80048f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048fa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	6a1a      	ldr	r2, [r3, #32]
 8004908:	f022 0204 	bic.w	r2, r2, #4
 800490c:	621a      	str	r2, [r3, #32]
 800490e:	e7da      	b.n	80048c6 <HAL_RCC_OscConfig+0x34e>
 8004910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004914:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f042 0204 	orr.w	r2, r2, #4
 800491e:	621a      	str	r2, [r3, #32]
 8004920:	6a1a      	ldr	r2, [r3, #32]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	621a      	str	r2, [r3, #32]
 8004928:	e7cd      	b.n	80048c6 <HAL_RCC_OscConfig+0x34e>
      tickstart = HAL_GetTick();
 800492a:	f7ff fada 	bl	8003ee2 <HAL_GetTick>
 800492e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8004934:	f2c4 0702 	movt	r7, #16386	@ 0x4002
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004938:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	f013 0f02 	tst.w	r3, #2
 8004942:	d006      	beq.n	8004952 <HAL_RCC_OscConfig+0x3da>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7ff facd 	bl	8003ee2 <HAL_GetTick>
 8004948:	1b80      	subs	r0, r0, r6
 800494a:	4540      	cmp	r0, r8
 800494c:	d9f6      	bls.n	800493c <HAL_RCC_OscConfig+0x3c4>
          return HAL_TIMEOUT;
 800494e:	2003      	movs	r0, #3
 8004950:	e096      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
    if (pwrclkchanged == SET)
 8004952:	bb2d      	cbnz	r5, 80049a0 <HAL_RCC_OscConfig+0x428>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004954:	69e3      	ldr	r3, [r4, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8091 	beq.w	8004a7e <HAL_RCC_OscConfig+0x506>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800495c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004960:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004964:	6852      	ldr	r2, [r2, #4]
 8004966:	f002 020c 	and.w	r2, r2, #12
 800496a:	2a08      	cmp	r2, #8
 800496c:	d06e      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800496e:	2b02      	cmp	r3, #2
 8004970:	d01f      	beq.n	80049b2 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004978:	2200      	movs	r2, #0
 800497a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800497c:	f7ff fab1 	bl	8003ee2 <HAL_GetTick>
 8004980:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004982:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004986:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 800498a:	682b      	ldr	r3, [r5, #0]
 800498c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004990:	d05a      	beq.n	8004a48 <HAL_RCC_OscConfig+0x4d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7ff faa6 	bl	8003ee2 <HAL_GetTick>
 8004996:	1b00      	subs	r0, r0, r4
 8004998:	2802      	cmp	r0, #2
 800499a:	d9f6      	bls.n	800498a <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 800499c:	2003      	movs	r0, #3
 800499e:	e06f      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049a4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80049a8:	69da      	ldr	r2, [r3, #28]
 80049aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80049ae:	61da      	str	r2, [r3, #28]
 80049b0:	e7d0      	b.n	8004954 <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_PLL_DISABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80049b8:	2200      	movs	r2, #0
 80049ba:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80049bc:	f7ff fa91 	bl	8003ee2 <HAL_GetTick>
 80049c0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c2:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80049c6:	f2c4 0602 	movt	r6, #16386	@ 0x4002
 80049ca:	6833      	ldr	r3, [r6, #0]
 80049cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80049d0:	d006      	beq.n	80049e0 <HAL_RCC_OscConfig+0x468>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d2:	f7ff fa86 	bl	8003ee2 <HAL_GetTick>
 80049d6:	1b40      	subs	r0, r0, r5
 80049d8:	2802      	cmp	r0, #2
 80049da:	d9f6      	bls.n	80049ca <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 80049dc:	2003      	movs	r0, #3
 80049de:	e04f      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049e0:	6a23      	ldr	r3, [r4, #32]
 80049e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e6:	d022      	beq.n	8004a2e <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80049ec:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80049f0:	6851      	ldr	r1, [r2, #4]
 80049f2:	6a23      	ldr	r3, [r4, #32]
 80049f4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80049f6:	4303      	orrs	r3, r0
 80049f8:	f421 1174 	bic.w	r1, r1, #3997696	@ 0x3d0000
 80049fc:	430b      	orrs	r3, r1
 80049fe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a00:	2300      	movs	r3, #0
 8004a02:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004a06:	2201      	movs	r2, #1
 8004a08:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004a0a:	f7ff fa6a 	bl	8003ee2 <HAL_GetTick>
 8004a0e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a10:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 8004a14:	f2c4 0502 	movt	r5, #16386	@ 0x4002
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCC_OscConfig+0x4cc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7ff fa5f 	bl	8003ee2 <HAL_GetTick>
 8004a24:	1b00      	subs	r0, r0, r4
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d9f6      	bls.n	8004a18 <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	e028      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a32:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004a36:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	68a1      	ldr	r1, [r4, #8]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a42:	e7d1      	b.n	80049e8 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8004a44:	2000      	movs	r0, #0
 8004a46:	e01b      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e019      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d01a      	beq.n	8004a86 <HAL_RCC_OscConfig+0x50e>
        pll_config = RCC->CFGR;
 8004a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a54:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004a58:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5a:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8004a5e:	6a22      	ldr	r2, [r4, #32]
 8004a60:	4291      	cmp	r1, r2
 8004a62:	d112      	bne.n	8004a8a <HAL_RCC_OscConfig+0x512>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a64:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a68:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004a6a:	1a18      	subs	r0, r3, r0
 8004a6c:	bf18      	it	ne
 8004a6e:	2001      	movne	r0, #1
 8004a70:	e006      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
    return HAL_ERROR;
 8004a72:	2001      	movs	r0, #1
}
 8004a74:	4770      	bx	lr
        return HAL_ERROR;
 8004a76:	2001      	movs	r0, #1
 8004a78:	e002      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
        return HAL_ERROR;
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
  return HAL_OK;
 8004a7e:	2000      	movs	r0, #0
}
 8004a80:	b002      	add	sp, #8
 8004a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8004a86:	2001      	movs	r0, #1
 8004a88:	e7fa      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>
          return HAL_ERROR;
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	e7f8      	b.n	8004a80 <HAL_RCC_OscConfig+0x508>

08004a8e <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8004a94:	2201      	movs	r2, #1
 8004a96:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004a98:	4770      	bx	lr

08004a9a <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a9e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004aa2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004aa4:	f003 020c 	and.w	r2, r3, #12
 8004aa8:	2a04      	cmp	r2, #4
 8004aaa:	d027      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x62>
 8004aac:	2a08      	cmp	r2, #8
 8004aae:	d12a      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x6c>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ab0:	f645 6204 	movw	r2, #24068	@ 0x5e04
 8004ab4:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8004ab8:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8004abc:	5c50      	ldrb	r0, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004abe:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004ac2:	d014      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x54>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ac8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ace:	f44f 5258 	mov.w	r2, #13824	@ 0x3600
 8004ad2:	f2c0 126e 	movt	r2, #366	@ 0x16e
 8004ad6:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004ada:	f645 52f4 	movw	r2, #24052	@ 0x5df4
 8004ade:	f6c0 0200 	movt	r2, #2048	@ 0x800
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ae8:	fbb0 f0f3 	udiv	r0, r0, r3
 8004aec:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004aee:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8004af2:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8004af6:	fb03 f000 	mul.w	r0, r3, r0
 8004afa:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004afc:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8004b00:	f2c0 106e 	movt	r0, #366	@ 0x16e
 8004b04:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8004b06:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 8004b0a:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f000 80a6 	beq.w	8004c62 <HAL_RCC_ClockConfig+0x152>
{
 8004b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b18:	4604      	mov	r4, r0
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1a:	6803      	ldr	r3, [r0, #0]
 8004b1c:	f013 0f02 	tst.w	r3, #2
 8004b20:	d020      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x54>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b22:	f013 0f04 	tst.w	r3, #4
 8004b26:	d007      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b2c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004b36:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	f013 0f08 	tst.w	r3, #8
 8004b3e:	d007      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b44:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8004b4e:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b54:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004b58:	6853      	ldr	r3, [r2, #4]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b5e:	68a1      	ldr	r1, [r4, #8]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f013 0f01 	tst.w	r3, #1
 8004b6a:	d040      	beq.n	8004bee <HAL_RCC_ClockConfig+0xde>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6c:	6862      	ldr	r2, [r4, #4]
 8004b6e:	2a01      	cmp	r2, #1
 8004b70:	d029      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0xb6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b72:	2a02      	cmp	r2, #2
 8004b74:	d031      	beq.n	8004bda <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b7a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f013 0f02 	tst.w	r3, #2
 8004b84:	d06f      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x156>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b8a:	f2c4 0102 	movt	r1, #16386	@ 0x4002
 8004b8e:	684b      	ldr	r3, [r1, #4]
 8004b90:	f023 0303 	bic.w	r3, r3, #3
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004b98:	f7ff f9a3 	bl	8003ee2 <HAL_GetTick>
 8004b9c:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8004ba2:	f2c4 0602 	movt	r6, #16386	@ 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba6:	f241 3788 	movw	r7, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	6873      	ldr	r3, [r6, #4]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bb6:	d01a      	beq.n	8004bee <HAL_RCC_ClockConfig+0xde>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb8:	f7ff f993 	bl	8003ee2 <HAL_GetTick>
 8004bbc:	1b40      	subs	r0, r0, r5
 8004bbe:	42b8      	cmp	r0, r7
 8004bc0:	d9f3      	bls.n	8004baa <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8004bc2:	2003      	movs	r0, #3
 8004bc4:	e04c      	b.n	8004c60 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bca:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004bd4:	d1d7      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	e042      	b.n	8004c60 <HAL_RCC_ClockConfig+0x150>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bde:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004be8:	d1cd      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
 8004bec:	e038      	b.n	8004c60 <HAL_RCC_ClockConfig+0x150>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f013 0f04 	tst.w	r3, #4
 8004bf4:	d009      	beq.n	8004c0a <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004bfa:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004bfe:	6853      	ldr	r3, [r2, #4]
 8004c00:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c04:	68e1      	ldr	r1, [r4, #12]
 8004c06:	430b      	orrs	r3, r1
 8004c08:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f013 0f08 	tst.w	r3, #8
 8004c10:	d00a      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c16:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004c1a:	6853      	ldr	r3, [r2, #4]
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004c22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c26:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c28:	f7ff ff37 	bl	8004a9a <HAL_RCC_GetSysClockFreq>
 8004c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c30:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	f240 0388 	movw	r3, #136	@ 0x88
 8004c3a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004c3e:	f645 51e4 	movw	r1, #24036	@ 0x5de4
 8004c42:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8004c46:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004c4a:	5c8a      	ldrb	r2, [r1, r2]
 8004c4c:	40d0      	lsrs	r0, r2
 8004c4e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004c50:	f240 0390 	movw	r3, #144	@ 0x90
 8004c54:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f7ff f902 	bl	8003e62 <HAL_InitTick>
  return HAL_OK;
 8004c5e:	2000      	movs	r0, #0
}
 8004c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004c62:	2001      	movs	r0, #1
}
 8004c64:	4770      	bx	lr
        return HAL_ERROR;
 8004c66:	2001      	movs	r0, #1
 8004c68:	e7fa      	b.n	8004c60 <HAL_RCC_ClockConfig+0x150>

08004c6a <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c6e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c72:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8004c74:	f240 0388 	movw	r3, #136	@ 0x88
 8004c78:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c7c:	f645 51dc 	movw	r1, #24028	@ 0x5ddc
 8004c80:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8004c84:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8004c88:	5c8a      	ldrb	r2, [r1, r2]
 8004c8a:	6818      	ldr	r0, [r3, #0]
}
 8004c8c:	40d0      	lsrs	r0, r2
 8004c8e:	4770      	bx	lr

08004c90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c94:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004c98:	685a      	ldr	r2, [r3, #4]
  return SystemCoreClock;
 8004c9a:	f240 0388 	movw	r3, #136	@ 0x88
 8004c9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca2:	f645 51dc 	movw	r1, #24028	@ 0x5ddc
 8004ca6:	f6c0 0100 	movt	r1, #2048	@ 0x800
 8004caa:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8004cae:	5c8a      	ldrb	r2, [r1, r2]
 8004cb0:	6818      	ldr	r0, [r3, #0]
}
 8004cb2:	40d0      	lsrs	r0, r2
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_RCC_NMI_IRQHandler>:
{
 8004cb8:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cbe:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cc8:	d100      	bne.n	8004ccc <HAL_RCC_NMI_IRQHandler+0x14>
}
 8004cca:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8004ccc:	f7ff fff3 	bl	8004cb6 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cd4:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004cd8:	2280      	movs	r2, #128	@ 0x80
 8004cda:	729a      	strb	r2, [r3, #10]
}
 8004cdc:	e7f5      	b.n	8004cca <HAL_RCC_NMI_IRQHandler+0x12>

08004cde <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ce6:	6803      	ldr	r3, [r0, #0]
 8004ce8:	f013 0f01 	tst.w	r3, #1
 8004cec:	d04a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cf2:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004cfc:	d152      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d02:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d0c:	61da      	str	r2, [r3, #28]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d18:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004d1e:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d28:	d03e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xca>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d2e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004d32:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d34:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004d38:	d018      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004d3a:	6862      	ldr	r2, [r4, #4]
 8004d3c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d013      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d48:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004d4c:	6a19      	ldr	r1, [r3, #32]
 8004d4e:	f421 7040 	bic.w	r0, r1, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d52:	2200      	movs	r2, #0
 8004d54:	f2c4 2242 	movt	r2, #16962	@ 0x4242
 8004d58:	2601      	movs	r6, #1
 8004d5a:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5e:	2600      	movs	r6, #0
 8004d60:	f8c2 6440 	str.w	r6, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d64:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d66:	f011 0f01 	tst.w	r1, #1
 8004d6a:	d137      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d70:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004d74:	6a13      	ldr	r3, [r2, #32]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7a:	6861      	ldr	r1, [r4, #4]
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d13f      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f013 0f02 	tst.w	r3, #2
 8004d8a:	d044      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d90:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8004d94:	6853      	ldr	r3, [r2, #4]
 8004d96:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004d9a:	68a1      	ldr	r1, [r4, #8]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6053      	str	r3, [r2, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004da0:	2000      	movs	r0, #0
 8004da2:	e039      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus pwrclkchanged = RESET;
 8004da4:	2500      	movs	r5, #0
 8004da6:	e7b8      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8004dac:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004db8:	f7ff f893 	bl	8003ee2 <HAL_GetTick>
 8004dbc:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	f44f 47e0 	mov.w	r7, #28672	@ 0x7000
 8004dc2:	f2c4 0700 	movt	r7, #16384	@ 0x4000
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004dcc:	d1ad      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7ff f888 	bl	8003ee2 <HAL_GetTick>
 8004dd2:	1b80      	subs	r0, r0, r6
 8004dd4:	2864      	cmp	r0, #100	@ 0x64
 8004dd6:	d9f6      	bls.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          return HAL_TIMEOUT;
 8004dd8:	2003      	movs	r0, #3
 8004dda:	e01d      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8004ddc:	f7ff f881 	bl	8003ee2 <HAL_GetTick>
 8004de0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8004de6:	f2c4 0702 	movt	r7, #16386	@ 0x4002
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f013 0f02 	tst.w	r3, #2
 8004df4:	d1ba      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7ff f874 	bl	8003ee2 <HAL_GetTick>
 8004dfa:	1b80      	subs	r0, r0, r6
 8004dfc:	4540      	cmp	r0, r8
 8004dfe:	d9f6      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x110>
            return HAL_TIMEOUT;
 8004e00:	2003      	movs	r0, #3
 8004e02:	e009      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e08:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e12:	61da      	str	r2, [r3, #28]
 8004e14:	e7b6      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  return HAL_OK;
 8004e16:	2000      	movs	r0, #0
}
 8004e18:	b002      	add	sp, #8
 8004e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004e1e <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e1e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d12f      	bne.n	8004e88 <HAL_TIM_Base_Start+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	6803      	ldr	r3, [r0, #0]
 8004e30:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8004e34:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d01a      	beq.n	8004e72 <HAL_TIM_Base_Start+0x54>
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d017      	beq.n	8004e72 <HAL_TIM_Base_Start+0x54>
 8004e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e46:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d011      	beq.n	8004e72 <HAL_TIM_Base_Start+0x54>
 8004e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e52:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <HAL_TIM_Base_Start+0x54>
 8004e5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e5e:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d005      	beq.n	8004e72 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f042 0201 	orr.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6e:	2000      	movs	r0, #0
 8004e70:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	2a06      	cmp	r2, #6
 8004e7a:	d007      	beq.n	8004e8c <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e84:	2000      	movs	r0, #0
 8004e86:	4770      	bx	lr
    return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
 8004e8a:	4770      	bx	lr
  return HAL_OK;
 8004e8c:	2000      	movs	r0, #0
}
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d134      	bne.n	8004f04 <HAL_TIM_Base_Start_IT+0x74>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea0:	6802      	ldr	r2, [r0, #0]
 8004ea2:	68d3      	ldr	r3, [r2, #12]
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	6803      	ldr	r3, [r0, #0]
 8004eac:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8004eb0:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01a      	beq.n	8004eee <HAL_TIM_Base_Start_IT+0x5e>
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebc:	d017      	beq.n	8004eee <HAL_TIM_Base_Start_IT+0x5e>
 8004ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ec2:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d011      	beq.n	8004eee <HAL_TIM_Base_Start_IT+0x5e>
 8004eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ece:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00b      	beq.n	8004eee <HAL_TIM_Base_Start_IT+0x5e>
 8004ed6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004eda:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d005      	beq.n	8004eee <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eea:	2000      	movs	r0, #0
 8004eec:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	2a06      	cmp	r2, #6
 8004ef6:	d007      	beq.n	8004f08 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f00:	2000      	movs	r0, #0
 8004f02:	4770      	bx	lr
    return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	4770      	bx	lr
  return HAL_OK;
 8004f08:	2000      	movs	r0, #0
}
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f10:	4770      	bx	lr

08004f12 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f14:	4770      	bx	lr

08004f16 <HAL_TIM_IRQHandler>:
{
 8004f16:	b570      	push	{r4, r5, r6, lr}
 8004f18:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004f1a:	6803      	ldr	r3, [r0, #0]
 8004f1c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f1e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f20:	f015 0f02 	tst.w	r5, #2
 8004f24:	d010      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f26:	f016 0f02 	tst.w	r6, #2
 8004f2a:	d00d      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f2c:	f06f 0202 	mvn.w	r2, #2
 8004f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f36:	6803      	ldr	r3, [r0, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f013 0f03 	tst.w	r3, #3
 8004f3e:	d05e      	beq.n	8004ffe <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004f40:	f7ff ffe6 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f44:	2300      	movs	r3, #0
 8004f46:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f48:	f015 0f04 	tst.w	r5, #4
 8004f4c:	d012      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f4e:	f016 0f04 	tst.w	r6, #4
 8004f52:	d00f      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	f06f 0204 	mvn.w	r2, #4
 8004f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004f68:	d04f      	beq.n	800500a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f7ff ffd0 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	2300      	movs	r3, #0
 8004f72:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f74:	f015 0f08 	tst.w	r5, #8
 8004f78:	d012      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f7a:	f016 0f08 	tst.w	r6, #8
 8004f7e:	d00f      	beq.n	8004fa0 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f06f 0208 	mvn.w	r2, #8
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	2304      	movs	r3, #4
 8004f8a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f013 0f03 	tst.w	r3, #3
 8004f94:	d040      	beq.n	8005018 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff ffba 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fa0:	f015 0f10 	tst.w	r5, #16
 8004fa4:	d012      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fa6:	f016 0f10 	tst.w	r6, #16
 8004faa:	d00f      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f06f 0210 	mvn.w	r2, #16
 8004fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004fc0:	d031      	beq.n	8005026 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f7ff ffa4 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fcc:	f015 0f01 	tst.w	r5, #1
 8004fd0:	d002      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fd2:	f016 0f01 	tst.w	r6, #1
 8004fd6:	d12d      	bne.n	8005034 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fd8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004fdc:	d002      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fde:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004fe2:	d12f      	bne.n	8005044 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fe4:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004fe8:	d002      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fea:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004fee:	d131      	bne.n	8005054 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ff0:	f015 0f20 	tst.w	r5, #32
 8004ff4:	d002      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff6:	f016 0f20 	tst.w	r6, #32
 8004ffa:	d133      	bne.n	8005064 <HAL_TIM_IRQHandler+0x14e>
}
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	f7ff ff86 	bl	8004f0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff ff85 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
 8005008:	e79c      	b.n	8004f44 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ff7f 	bl	8004f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005010:	4620      	mov	r0, r4
 8005012:	f7ff ff7e 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
 8005016:	e7ab      	b.n	8004f70 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff ff78 	bl	8004f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff ff77 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
 8005024:	e7ba      	b.n	8004f9c <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff71 	bl	8004f0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	4620      	mov	r0, r4
 800502e:	f7ff ff70 	bl	8004f12 <HAL_TIM_PWM_PulseFinishedCallback>
 8005032:	e7c9      	b.n	8004fc8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	f06f 0201 	mvn.w	r2, #1
 800503a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800503c:	4620      	mov	r0, r4
 800503e:	f7ff ff65 	bl	8004f0c <HAL_TIM_PeriodElapsedCallback>
 8005042:	e7c9      	b.n	8004fd8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800504a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fa0c 	bl	800546a <HAL_TIMEx_BreakCallback>
 8005052:	e7c7      	b.n	8004fe4 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800505a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800505c:	4620      	mov	r0, r4
 800505e:	f7ff ff59 	bl	8004f14 <HAL_TIM_TriggerCallback>
 8005062:	e7c5      	b.n	8004ff0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	f06f 0220 	mvn.w	r2, #32
 800506a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800506c:	4620      	mov	r0, r4
 800506e:	f000 f9fb 	bl	8005468 <HAL_TIMEx_CommutCallback>
}
 8005072:	e7c3      	b.n	8004ffc <HAL_TIM_IRQHandler+0xe6>

08005074 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005074:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005076:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800507a:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800507e:	4290      	cmp	r0, r2
 8005080:	f000 8095 	beq.w	80051ae <TIM_Base_SetConfig+0x13a>
 8005084:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005088:	f000 80af 	beq.w	80051ea <TIM_Base_SetConfig+0x176>
 800508c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005090:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8005094:	4290      	cmp	r0, r2
 8005096:	f000 8085 	beq.w	80051a4 <TIM_Base_SetConfig+0x130>
 800509a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800509e:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80050a2:	4290      	cmp	r0, r2
 80050a4:	d01b      	beq.n	80050de <TIM_Base_SetConfig+0x6a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80050aa:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80050ae:	4290      	cmp	r0, r2
 80050b0:	d06a      	beq.n	8005188 <TIM_Base_SetConfig+0x114>
 80050b2:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80050b6:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80050ba:	4290      	cmp	r0, r2
 80050bc:	d048      	beq.n	8005150 <TIM_Base_SetConfig+0xdc>
 80050be:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 80050c2:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80050c6:	4290      	cmp	r0, r2
 80050c8:	d050      	beq.n	800516c <TIM_Base_SetConfig+0xf8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ce:	694a      	ldr	r2, [r1, #20]
 80050d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80050d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d4:	688b      	ldr	r3, [r1, #8]
 80050d6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050dc:	e07a      	b.n	80051d4 <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80050e2:	684a      	ldr	r2, [r1, #4]
 80050e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80050ea:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80050ee:	4290      	cmp	r0, r2
 80050f0:	d061      	beq.n	80051b6 <TIM_Base_SetConfig+0x142>
 80050f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80050f6:	d07c      	beq.n	80051f2 <TIM_Base_SetConfig+0x17e>
 80050f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050fc:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8005100:	4290      	cmp	r0, r2
 8005102:	d076      	beq.n	80051f2 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005108:	68ca      	ldr	r2, [r1, #12]
 800510a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800510c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005110:	694a      	ldr	r2, [r1, #20]
 8005112:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005114:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005116:	688b      	ldr	r3, [r1, #8]
 8005118:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8005122:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005126:	4298      	cmp	r0, r3
 8005128:	d052      	beq.n	80051d0 <TIM_Base_SetConfig+0x15c>
 800512a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800512e:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8005132:	4298      	cmp	r0, r3
 8005134:	d04c      	beq.n	80051d0 <TIM_Base_SetConfig+0x15c>
 8005136:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800513a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800513e:	4298      	cmp	r0, r3
 8005140:	d046      	beq.n	80051d0 <TIM_Base_SetConfig+0x15c>
 8005142:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8005146:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800514a:	4298      	cmp	r0, r3
 800514c:	d040      	beq.n	80051d0 <TIM_Base_SetConfig+0x15c>
 800514e:	e041      	b.n	80051d4 <TIM_Base_SetConfig+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005154:	68ca      	ldr	r2, [r1, #12]
 8005156:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515c:	694a      	ldr	r2, [r1, #20]
 800515e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005160:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005162:	688b      	ldr	r3, [r1, #8]
 8005164:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516a:	e031      	b.n	80051d0 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800516c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005170:	68ca      	ldr	r2, [r1, #12]
 8005172:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	694a      	ldr	r2, [r1, #20]
 800517a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800517c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517e:	688b      	ldr	r3, [r1, #8]
 8005180:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005182:	680b      	ldr	r3, [r1, #0]
 8005184:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005186:	e023      	b.n	80051d0 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518c:	68ca      	ldr	r2, [r1, #12]
 800518e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005194:	694a      	ldr	r2, [r1, #20]
 8005196:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005198:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519a:	688b      	ldr	r3, [r1, #8]
 800519c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800519e:	680b      	ldr	r3, [r1, #0]
 80051a0:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a2:	e015      	b.n	80051d0 <TIM_Base_SetConfig+0x15c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051a8:	684a      	ldr	r2, [r1, #4]
 80051aa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ac:	e021      	b.n	80051f2 <TIM_Base_SetConfig+0x17e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051b2:	684a      	ldr	r2, [r1, #4]
 80051b4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ba:	68ca      	ldr	r2, [r1, #12]
 80051bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051c2:	694a      	ldr	r2, [r1, #20]
 80051c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80051c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c8:	688b      	ldr	r3, [r1, #8]
 80051ca:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	690b      	ldr	r3, [r1, #16]
 80051d2:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	2301      	movs	r3, #1
 80051d6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051d8:	6903      	ldr	r3, [r0, #16]
 80051da:	f013 0f01 	tst.w	r3, #1
 80051de:	d016      	beq.n	800520e <TIM_Base_SetConfig+0x19a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051e0:	6903      	ldr	r3, [r0, #16]
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	6103      	str	r3, [r0, #16]
  }
}
 80051e8:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80051ee:	684a      	ldr	r2, [r1, #4]
 80051f0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f6:	68ca      	ldr	r2, [r1, #12]
 80051f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fe:	694a      	ldr	r2, [r1, #20]
 8005200:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005202:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005204:	688b      	ldr	r3, [r1, #8]
 8005206:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005208:	680b      	ldr	r3, [r1, #0]
 800520a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	e7e2      	b.n	80051d4 <TIM_Base_SetConfig+0x160>
}
 800520e:	4770      	bx	lr

08005210 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005210:	b340      	cbz	r0, 8005264 <HAL_TIM_Base_Init+0x54>
{
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005216:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800521a:	b1f3      	cbz	r3, 800525a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	2302      	movs	r3, #2
 800521e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	4621      	mov	r1, r4
 8005224:	f851 0b04 	ldr.w	r0, [r1], #4
 8005228:	f7ff ff24 	bl	8005074 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	2301      	movs	r3, #1
 800522e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005236:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800523a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800523e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800524a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800524e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005252:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005256:	2000      	movs	r0, #0
}
 8005258:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800525a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800525e:	f7fe fc19 	bl	8003a94 <HAL_TIM_Base_MspInit>
 8005262:	e7db      	b.n	800521c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005264:	2001      	movs	r0, #1
}
 8005266:	4770      	bx	lr

08005268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005268:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005270:	430a      	orrs	r2, r1
 8005272:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005276:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527a:	6082      	str	r2, [r0, #8]
}
 800527c:	bc10      	pop	{r4}
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_ConfigClockSource>:
{
 8005280:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005282:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	f000 80ad 	beq.w	80053e6 <HAL_TIM_ConfigClockSource+0x166>
 800528c:	4604      	mov	r4, r0
 800528e:	2301      	movs	r3, #1
 8005290:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	2302      	movs	r3, #2
 8005296:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800529a:	6802      	ldr	r2, [r0, #0]
 800529c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80052a6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	2b60      	cmp	r3, #96	@ 0x60
 80052ac:	d060      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0xf0>
 80052ae:	d837      	bhi.n	8005320 <HAL_TIM_ConfigClockSource+0xa0>
 80052b0:	2b40      	cmp	r3, #64	@ 0x40
 80052b2:	d079      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x128>
 80052b4:	d815      	bhi.n	80052e2 <HAL_TIM_ConfigClockSource+0x62>
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d007      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x4a>
 80052ba:	d804      	bhi.n	80052c6 <HAL_TIM_ConfigClockSource+0x46>
 80052bc:	f033 0210 	bics.w	r2, r3, #16
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x4a>
 80052c2:	2001      	movs	r0, #1
 80052c4:	e040      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
 80052c6:	2b30      	cmp	r3, #48	@ 0x30
 80052c8:	d109      	bne.n	80052de <HAL_TIM_ConfigClockSource+0x5e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ca:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80052cc:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80052d8:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80052da:	2000      	movs	r0, #0
}
 80052dc:	e034      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80052de:	2001      	movs	r0, #1
 80052e0:	e032      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
 80052e2:	2b50      	cmp	r3, #80	@ 0x50
 80052e4:	d11a      	bne.n	800531c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80052ea:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80052ec:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005300:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005304:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800530c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800530e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005312:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005316:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2000      	movs	r0, #0
}
 800531a:	e015      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 800531c:	2001      	movs	r0, #1
 800531e:	e013      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
 8005320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005324:	d05b      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x15e>
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532a:	d014      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xd6>
 800532c:	2b70      	cmp	r3, #112	@ 0x70
 800532e:	d158      	bne.n	80053e2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8005330:	68cb      	ldr	r3, [r1, #12]
 8005332:	684a      	ldr	r2, [r1, #4]
 8005334:	6889      	ldr	r1, [r1, #8]
 8005336:	6800      	ldr	r0, [r0, #0]
 8005338:	f7ff ff96 	bl	8005268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005340:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005344:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005346:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005348:	2301      	movs	r3, #1
 800534a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800534e:	2300      	movs	r3, #0
 8005350:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005354:	bd38      	pop	{r3, r4, r5, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	68cb      	ldr	r3, [r1, #12]
 8005358:	684a      	ldr	r2, [r1, #4]
 800535a:	6889      	ldr	r1, [r1, #8]
 800535c:	6800      	ldr	r0, [r0, #0]
 800535e:	f7ff ff83 	bl	8005268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	6893      	ldr	r3, [r2, #8]
 8005366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800536a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2000      	movs	r0, #0
      break;
 800536e:	e7eb      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005370:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8005372:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005374:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005376:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005378:	6a19      	ldr	r1, [r3, #32]
 800537a:	f021 0110 	bic.w	r1, r1, #16
 800537e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005380:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005386:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800538a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800538e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005392:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005396:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005398:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80053a2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2000      	movs	r0, #0
}
 80053a6:	e7cf      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a8:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80053ac:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80053ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ba:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80053c6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80053c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053cc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80053ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d4:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80053d8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2000      	movs	r0, #0
}
 80053dc:	e7b4      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2000      	movs	r0, #0
 80053e0:	e7b2      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 80053e2:	2001      	movs	r0, #1
 80053e4:	e7b0      	b.n	8005348 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 80053e6:	2002      	movs	r0, #2
 80053e8:	e7b4      	b.n	8005354 <HAL_TIM_ConfigClockSource+0xd4>

080053ea <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ea:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80053ee:	2a01      	cmp	r2, #1
 80053f0:	d038      	beq.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
{
 80053f2:	b430      	push	{r4, r5}
 80053f4:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80053f6:	2201      	movs	r2, #1
 80053f8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	2202      	movs	r2, #2
 80053fe:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005402:	6804      	ldr	r4, [r0, #0]
 8005404:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005406:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800540c:	680d      	ldr	r5, [r1, #0]
 800540e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005410:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f44f 5430 	mov.w	r4, #11264	@ 0x2c00
 8005418:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 800541c:	42a2      	cmp	r2, r4
 800541e:	d014      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005420:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8005424:	d011      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005426:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800542a:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 800542e:	42a2      	cmp	r2, r4
 8005430:	d00b      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005432:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005436:	f2c4 0400 	movt	r4, #16384	@ 0x4000
 800543a:	42a2      	cmp	r2, r4
 800543c:	d005      	beq.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800543e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 8005442:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8005446:	42a2      	cmp	r2, r4
 8005448:	d104      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	6849      	ldr	r1, [r1, #4]
 8005450:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005452:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800545a:	2000      	movs	r0, #0
 800545c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8005460:	bc30      	pop	{r4, r5}
 8005462:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005464:	2002      	movs	r0, #2
}
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005468:	4770      	bx	lr

0800546a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800546a:	4770      	bx	lr

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005470:	6802      	ldr	r2, [r0, #0]
 8005472:	6913      	ldr	r3, [r2, #16]
 8005474:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005478:	68c1      	ldr	r1, [r0, #12]
 800547a:	430b      	orrs	r3, r1
 800547c:	6113      	str	r3, [r2, #16]
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 800547e:	6801      	ldr	r1, [r0, #0]
 8005480:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005482:	6883      	ldr	r3, [r0, #8]
 8005484:	6900      	ldr	r0, [r0, #16]
 8005486:	4303      	orrs	r3, r0
 8005488:	6960      	ldr	r0, [r4, #20]
 800548a:	4303      	orrs	r3, r0
 800548c:	69e0      	ldr	r0, [r4, #28]
 800548e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8005490:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8005494:	f022 020c 	bic.w	r2, r2, #12
 8005498:	4313      	orrs	r3, r2
 800549a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	6953      	ldr	r3, [r2, #20]
 80054a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a4:	69a1      	ldr	r1, [r4, #24]
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80054aa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80054ae:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d021      	beq.n	80054fc <UART_SetConfig+0x90>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054b8:	f7ff fbd7 	bl	8004c6a <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054bc:	69e3      	ldr	r3, [r4, #28]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c2:	d01e      	beq.n	8005502 <UART_SetConfig+0x96>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80054c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	f248 511f 	movw	r1, #34079	@ 0x851f
 80054da:	f2c5 11eb 	movt	r1, #20971	@ 0x51eb
 80054de:	fba1 4203 	umull	r4, r2, r1, r3
 80054e2:	0952      	lsrs	r2, r2, #5
 80054e4:	2464      	movs	r4, #100	@ 0x64
 80054e6:	fb04 3312 	mls	r3, r4, r2, r3
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	3332      	adds	r3, #50	@ 0x32
 80054ee:	fba1 1303 	umull	r1, r3, r1, r3
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 80054f8:	6082      	str	r2, [r0, #8]
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 80054fa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80054fc:	f7ff fbc8 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 8005500:	e7dc      	b.n	80054bc <UART_SetConfig+0x50>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005506:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800550a:	6863      	ldr	r3, [r4, #4]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005512:	f248 521f 	movw	r2, #34079	@ 0x851f
 8005516:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 800551a:	fba2 0103 	umull	r0, r1, r2, r3
 800551e:	0949      	lsrs	r1, r1, #5
 8005520:	2064      	movs	r0, #100	@ 0x64
 8005522:	fb00 3311 	mls	r3, r0, r1, r3
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	3332      	adds	r3, #50	@ 0x32
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8005534:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800553e:	4413      	add	r3, r2
 8005540:	6083      	str	r3, [r0, #8]
 8005542:	e7da      	b.n	80054fa <UART_SetConfig+0x8e>

08005544 <HAL_UART_Init>:
  if (huart == NULL)
 8005544:	b360      	cbz	r0, 80055a0 <HAL_UART_Init+0x5c>
{
 8005546:	b510      	push	{r4, lr}
 8005548:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800554a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800554e:	b313      	cbz	r3, 8005596 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	2324      	movs	r3, #36	@ 0x24
 8005552:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	68d3      	ldr	r3, [r2, #12]
 800555a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800555e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff ff83 	bl	800546c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	6913      	ldr	r3, [r2, #16]
 800556a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800556e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005570:	6822      	ldr	r2, [r4, #0]
 8005572:	6953      	ldr	r3, [r2, #20]
 8005574:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8005578:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	68d3      	ldr	r3, [r2, #12]
 800557e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005582:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	2000      	movs	r0, #0
 8005586:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005588:	2320      	movs	r3, #32
 800558a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800558e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005592:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005594:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005596:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800559a:	f7fe fab9 	bl	8003b10 <HAL_UART_MspInit>
 800559e:	e7d7      	b.n	8005550 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80055a0:	2001      	movs	r0, #1
}
 80055a2:	4770      	bx	lr

080055a4 <LL_ADC_Init>:
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80055a4:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80055a6:	f013 0f01 	tst.w	r3, #1
 80055aa:	d10d      	bne.n	80055c8 <LL_ADC_Init+0x24>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80055ac:	6843      	ldr	r3, [r0, #4]
 80055ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055b2:	684a      	ldr	r2, [r1, #4]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	6043      	str	r3, [r0, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80055b8:	6883      	ldr	r3, [r0, #8]
 80055ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055be:	680a      	ldr	r2, [r1, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 80055c4:	2000      	movs	r0, #0
 80055c6:	4770      	bx	lr

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80055c8:	2001      	movs	r0, #1
  }
  return status;
}
 80055ca:	4770      	bx	lr

080055cc <LL_ADC_REG_Init>:
 80055cc:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80055ce:	f013 0f01 	tst.w	r3, #1
 80055d2:	d121      	bne.n	8005618 <LL_ADC_REG_Init+0x4c>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80055d4:	684a      	ldr	r2, [r1, #4]
 80055d6:	b1d2      	cbz	r2, 800560e <LL_ADC_REG_Init+0x42>
    {
      MODIFY_REG(ADCx->CR1,
 80055d8:	6843      	ldr	r3, [r0, #4]
 80055da:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 80055de:	4313      	orrs	r3, r2
 80055e0:	688a      	ldr	r2, [r1, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80055e6:	6883      	ldr	r3, [r0, #8]
 80055e8:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80055ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80055f0:	680a      	ldr	r2, [r1, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	68ca      	ldr	r2, [r1, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	690a      	ldr	r2, [r1, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80055fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005600:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005604:	684a      	ldr	r2, [r1, #4]
 8005606:	4313      	orrs	r3, r2
 8005608:	62c3      	str	r3, [r0, #44]	@ 0x2c
  ErrorStatus status = SUCCESS;
 800560a:	2000      	movs	r0, #0
}
 800560c:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 800560e:	6843      	ldr	r3, [r0, #4]
 8005610:	f423 4368 	bic.w	r3, r3, #59392	@ 0xe800
 8005614:	6043      	str	r3, [r0, #4]
 8005616:	e7e6      	b.n	80055e6 <LL_ADC_REG_Init+0x1a>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8005618:	2001      	movs	r0, #1
  }
  return status;
}
 800561a:	4770      	bx	lr

0800561c <LL_GPIO_Init>:
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800561c:	680b      	ldr	r3, [r1, #0]
 800561e:	f3c3 2c0f 	ubfx	ip, r3, #8, #16
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005622:	fa9c f2ac 	rbit	r2, ip
  pinpos = POSITION_VAL(pinmask);
 8005626:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800562a:	fa3c f302 	lsrs.w	r3, ip, r2
 800562e:	f000 8087 	beq.w	8005740 <LL_GPIO_Init+0x124>
{
 8005632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8005636:	f04f 0e01 	mov.w	lr, #1
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800563a:	240f      	movs	r4, #15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800563c:	f04f 0803 	mov.w	r8, #3
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005640:	f04f 1501 	mov.w	r5, #65537	@ 0x10001
        currentpin = (0x00000101uL << pinpos);
 8005644:	f240 1701 	movw	r7, #257	@ 0x101
 8005648:	46e1      	mov	r9, ip
 800564a:	e025      	b.n	8005698 <LL_GPIO_Init+0x7c>
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800564c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8005650:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005654:	faba fa8a 	clz	sl, sl
 8005658:	fa93 fba3 	rbit	fp, r3
 800565c:	fabb fb8b 	clz	fp, fp
 8005660:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005664:	fa04 fa0a 	lsl.w	sl, r4, sl
 8005668:	f850 600c 	ldr.w	r6, [r0, ip]
 800566c:	ea26 0a0a 	bic.w	sl, r6, sl
 8005670:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005674:	684e      	ldr	r6, [r1, #4]
 8005676:	fa06 f60b 	lsl.w	r6, r6, fp
 800567a:	ea4a 0606 	orr.w	r6, sl, r6
 800567e:	f840 600c 	str.w	r6, [r0, ip]
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005682:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005686:	f02a 0a08 	bic.w	sl, sl, #8
 800568a:	f1ba 0f01 	cmp.w	sl, #1
 800568e:	d025      	beq.n	80056dc <LL_GPIO_Init+0xc0>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 8005690:	3201      	adds	r2, #1
  while ((pinmask  >> pinpos) != 0u)
 8005692:	fa39 f302 	lsrs.w	r3, r9, r2
 8005696:	d050      	beq.n	800573a <LL_GPIO_Init+0x11e>
    if ((pinmask & (1u << pinpos)) != 0u)
 8005698:	fa0e f302 	lsl.w	r3, lr, r2
 800569c:	ea13 0f09 	tst.w	r3, r9
 80056a0:	d0f6      	beq.n	8005690 <LL_GPIO_Init+0x74>
      if (pinpos < GPIO_PIN_MASK_POS)
 80056a2:	2a07      	cmp	r2, #7
        currentpin = (0x00000101uL << pinpos);
 80056a4:	bf91      	iteee	ls
 80056a6:	fa07 f302 	lslls.w	r3, r7, r2
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80056aa:	f1a2 0308 	subhi.w	r3, r2, #8
 80056ae:	fa05 f303 	lslhi.w	r3, r5, r3
 80056b2:	f043 6380 	orrhi.w	r3, r3, #67108864	@ 0x4000000
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80056b6:	684e      	ldr	r6, [r1, #4]
 80056b8:	2e08      	cmp	r6, #8
 80056ba:	d1c7      	bne.n	800564c <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80056bc:	68c6      	ldr	r6, [r0, #12]
 80056be:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80056c2:	fa9c faac 	rbit	sl, ip
 80056c6:	faba fa8a 	clz	sl, sl
 80056ca:	ea26 0c0c 	bic.w	ip, r6, ip
 80056ce:	690e      	ldr	r6, [r1, #16]
 80056d0:	fa06 f60a 	lsl.w	r6, r6, sl
 80056d4:	ea4c 0606 	orr.w	r6, ip, r6
 80056d8:	60c6      	str	r6, [r0, #12]
}
 80056da:	e7b7      	b.n	800564c <LL_GPIO_Init+0x30>
 80056dc:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80056e0:	faba fa8a 	clz	sl, sl
 80056e4:	fa93 fba3 	rbit	fp, r3
 80056e8:	fabb fb8b 	clz	fp, fp
 80056ec:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80056f0:	fa08 fa0a 	lsl.w	sl, r8, sl
 80056f4:	ea26 0a0a 	bic.w	sl, r6, sl
 80056f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80056fc:	688e      	ldr	r6, [r1, #8]
 80056fe:	fa06 f60b 	lsl.w	r6, r6, fp
 8005702:	ea4a 0606 	orr.w	r6, sl, r6
 8005706:	f840 600c 	str.w	r6, [r0, ip]
 800570a:	fa93 faa3 	rbit	sl, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800570e:	faba fa8a 	clz	sl, sl
 8005712:	fa93 f3a3 	rbit	r3, r3
 8005716:	fab3 f383 	clz	r3, r3
 800571a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800571e:	f04f 0b04 	mov.w	fp, #4
 8005722:	fa0b fa0a 	lsl.w	sl, fp, sl
 8005726:	ea26 0a0a 	bic.w	sl, r6, sl
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	68ce      	ldr	r6, [r1, #12]
 800572e:	409e      	lsls	r6, r3
 8005730:	ea4a 0606 	orr.w	r6, sl, r6
 8005734:	f840 600c 	str.w	r6, [r0, ip]
}
 8005738:	e7aa      	b.n	8005690 <LL_GPIO_Init+0x74>
  }
  return (SUCCESS);
}
 800573a:	2000      	movs	r0, #0
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	2000      	movs	r0, #0
 8005742:	4770      	bx	lr

08005744 <__errno>:
 8005744:	4b01      	ldr	r3, [pc, #4]	@ (800574c <__errno+0x8>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20000094 	.word	0x20000094

08005750 <__libc_init_array>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	2600      	movs	r6, #0
 8005754:	4d0c      	ldr	r5, [pc, #48]	@ (8005788 <__libc_init_array+0x38>)
 8005756:	4c0d      	ldr	r4, [pc, #52]	@ (800578c <__libc_init_array+0x3c>)
 8005758:	1b64      	subs	r4, r4, r5
 800575a:	10a4      	asrs	r4, r4, #2
 800575c:	42a6      	cmp	r6, r4
 800575e:	d109      	bne.n	8005774 <__libc_init_array+0x24>
 8005760:	f000 f910 	bl	8005984 <_init>
 8005764:	2600      	movs	r6, #0
 8005766:	4d0a      	ldr	r5, [pc, #40]	@ (8005790 <__libc_init_array+0x40>)
 8005768:	4c0a      	ldr	r4, [pc, #40]	@ (8005794 <__libc_init_array+0x44>)
 800576a:	1b64      	subs	r4, r4, r5
 800576c:	10a4      	asrs	r4, r4, #2
 800576e:	42a6      	cmp	r6, r4
 8005770:	d105      	bne.n	800577e <__libc_init_array+0x2e>
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	f855 3b04 	ldr.w	r3, [r5], #4
 8005778:	4798      	blx	r3
 800577a:	3601      	adds	r6, #1
 800577c:	e7ee      	b.n	800575c <__libc_init_array+0xc>
 800577e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005782:	4798      	blx	r3
 8005784:	3601      	adds	r6, #1
 8005786:	e7f2      	b.n	800576e <__libc_init_array+0x1e>
 8005788:	08005e28 	.word	0x08005e28
 800578c:	08005e28 	.word	0x08005e28
 8005790:	08005e28 	.word	0x08005e28
 8005794:	08005e2c 	.word	0x08005e2c

08005798 <sqrt>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	4606      	mov	r6, r0
 800579c:	460f      	mov	r7, r1
 800579e:	f000 f81f 	bl	80057e0 <__ieee754_sqrt>
 80057a2:	4632      	mov	r2, r6
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	463b      	mov	r3, r7
 80057aa:	4630      	mov	r0, r6
 80057ac:	4639      	mov	r1, r7
 80057ae:	f7fb f985 	bl	8000abc <__aeabi_dcmpun>
 80057b2:	b990      	cbnz	r0, 80057da <sqrt+0x42>
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fb f956 	bl	8000a6c <__aeabi_dcmplt>
 80057c0:	b158      	cbz	r0, 80057da <sqrt+0x42>
 80057c2:	f7ff ffbf 	bl	8005744 <__errno>
 80057c6:	2321      	movs	r3, #33	@ 0x21
 80057c8:	2200      	movs	r2, #0
 80057ca:	6003      	str	r3, [r0, #0]
 80057cc:	2300      	movs	r3, #0
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f7fb f803 	bl	80007dc <__aeabi_ddiv>
 80057d6:	4604      	mov	r4, r0
 80057d8:	460d      	mov	r5, r1
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057e0 <__ieee754_sqrt>:
 80057e0:	4a65      	ldr	r2, [pc, #404]	@ (8005978 <__ieee754_sqrt+0x198>)
 80057e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e6:	438a      	bics	r2, r1
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	460b      	mov	r3, r1
 80057ee:	4604      	mov	r4, r0
 80057f0:	d10e      	bne.n	8005810 <__ieee754_sqrt+0x30>
 80057f2:	4602      	mov	r2, r0
 80057f4:	f7fa fec8 	bl	8000588 <__aeabi_dmul>
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fa fd0c 	bl	800021c <__adddf3>
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	4630      	mov	r0, r6
 800580a:	4639      	mov	r1, r7
 800580c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	2900      	cmp	r1, #0
 8005812:	dc0c      	bgt.n	800582e <__ieee754_sqrt+0x4e>
 8005814:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8005818:	4302      	orrs	r2, r0
 800581a:	d0f5      	beq.n	8005808 <__ieee754_sqrt+0x28>
 800581c:	b189      	cbz	r1, 8005842 <__ieee754_sqrt+0x62>
 800581e:	4602      	mov	r2, r0
 8005820:	f7fa fcfa 	bl	8000218 <__aeabi_dsub>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	f7fa ffd8 	bl	80007dc <__aeabi_ddiv>
 800582c:	e7ea      	b.n	8005804 <__ieee754_sqrt+0x24>
 800582e:	150a      	asrs	r2, r1, #20
 8005830:	d115      	bne.n	800585e <__ieee754_sqrt+0x7e>
 8005832:	2100      	movs	r1, #0
 8005834:	e009      	b.n	800584a <__ieee754_sqrt+0x6a>
 8005836:	0ae3      	lsrs	r3, r4, #11
 8005838:	3a15      	subs	r2, #21
 800583a:	0564      	lsls	r4, r4, #21
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0fa      	beq.n	8005836 <__ieee754_sqrt+0x56>
 8005840:	e7f7      	b.n	8005832 <__ieee754_sqrt+0x52>
 8005842:	460a      	mov	r2, r1
 8005844:	e7fa      	b.n	800583c <__ieee754_sqrt+0x5c>
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	3101      	adds	r1, #1
 800584a:	02d8      	lsls	r0, r3, #11
 800584c:	d5fb      	bpl.n	8005846 <__ieee754_sqrt+0x66>
 800584e:	1e48      	subs	r0, r1, #1
 8005850:	1a12      	subs	r2, r2, r0
 8005852:	f1c1 0020 	rsb	r0, r1, #32
 8005856:	fa24 f000 	lsr.w	r0, r4, r0
 800585a:	4303      	orrs	r3, r0
 800585c:	408c      	lsls	r4, r1
 800585e:	2700      	movs	r7, #0
 8005860:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8005864:	2116      	movs	r1, #22
 8005866:	07d2      	lsls	r2, r2, #31
 8005868:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800586c:	463a      	mov	r2, r7
 800586e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005876:	bf5c      	itt	pl
 8005878:	005b      	lslpl	r3, r3, #1
 800587a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800587e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005882:	bf58      	it	pl
 8005884:	0064      	lslpl	r4, r4, #1
 8005886:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800588a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800588e:	0064      	lsls	r4, r4, #1
 8005890:	1815      	adds	r5, r2, r0
 8005892:	429d      	cmp	r5, r3
 8005894:	bfde      	ittt	le
 8005896:	182a      	addle	r2, r5, r0
 8005898:	1b5b      	suble	r3, r3, r5
 800589a:	183f      	addle	r7, r7, r0
 800589c:	0fe5      	lsrs	r5, r4, #31
 800589e:	3901      	subs	r1, #1
 80058a0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80058a4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80058a8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80058ac:	d1f0      	bne.n	8005890 <__ieee754_sqrt+0xb0>
 80058ae:	460d      	mov	r5, r1
 80058b0:	2620      	movs	r6, #32
 80058b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80058b6:	4293      	cmp	r3, r2
 80058b8:	eb00 0c01 	add.w	ip, r0, r1
 80058bc:	dc02      	bgt.n	80058c4 <__ieee754_sqrt+0xe4>
 80058be:	d113      	bne.n	80058e8 <__ieee754_sqrt+0x108>
 80058c0:	45a4      	cmp	ip, r4
 80058c2:	d811      	bhi.n	80058e8 <__ieee754_sqrt+0x108>
 80058c4:	f1bc 0f00 	cmp.w	ip, #0
 80058c8:	eb0c 0100 	add.w	r1, ip, r0
 80058cc:	da3e      	bge.n	800594c <__ieee754_sqrt+0x16c>
 80058ce:	2900      	cmp	r1, #0
 80058d0:	db3c      	blt.n	800594c <__ieee754_sqrt+0x16c>
 80058d2:	f102 0e01 	add.w	lr, r2, #1
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	4672      	mov	r2, lr
 80058da:	45a4      	cmp	ip, r4
 80058dc:	bf88      	it	hi
 80058de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80058e2:	eba4 040c 	sub.w	r4, r4, ip
 80058e6:	4405      	add	r5, r0
 80058e8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80058ec:	3e01      	subs	r6, #1
 80058ee:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80058f2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80058f6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80058fa:	d1dc      	bne.n	80058b6 <__ieee754_sqrt+0xd6>
 80058fc:	431c      	orrs	r4, r3
 80058fe:	d01a      	beq.n	8005936 <__ieee754_sqrt+0x156>
 8005900:	4c1e      	ldr	r4, [pc, #120]	@ (800597c <__ieee754_sqrt+0x19c>)
 8005902:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8005980 <__ieee754_sqrt+0x1a0>
 8005906:	e9d4 0100 	ldrd	r0, r1, [r4]
 800590a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800590e:	f7fa fc83 	bl	8000218 <__aeabi_dsub>
 8005912:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f7fb f8af 	bl	8000a80 <__aeabi_dcmple>
 8005922:	b140      	cbz	r0, 8005936 <__ieee754_sqrt+0x156>
 8005924:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005928:	e9d9 2300 	ldrd	r2, r3, [r9]
 800592c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005930:	d10e      	bne.n	8005950 <__ieee754_sqrt+0x170>
 8005932:	4635      	mov	r5, r6
 8005934:	3701      	adds	r7, #1
 8005936:	107b      	asrs	r3, r7, #1
 8005938:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800593c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005940:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8005944:	086b      	lsrs	r3, r5, #1
 8005946:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800594a:	e75b      	b.n	8005804 <__ieee754_sqrt+0x24>
 800594c:	4696      	mov	lr, r2
 800594e:	e7c2      	b.n	80058d6 <__ieee754_sqrt+0xf6>
 8005950:	f7fa fc64 	bl	800021c <__adddf3>
 8005954:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4650      	mov	r0, sl
 800595e:	4659      	mov	r1, fp
 8005960:	f7fb f884 	bl	8000a6c <__aeabi_dcmplt>
 8005964:	b120      	cbz	r0, 8005970 <__ieee754_sqrt+0x190>
 8005966:	1cab      	adds	r3, r5, #2
 8005968:	bf08      	it	eq
 800596a:	3701      	addeq	r7, #1
 800596c:	3502      	adds	r5, #2
 800596e:	e7e2      	b.n	8005936 <__ieee754_sqrt+0x156>
 8005970:	1c6b      	adds	r3, r5, #1
 8005972:	f023 0501 	bic.w	r5, r3, #1
 8005976:	e7de      	b.n	8005936 <__ieee754_sqrt+0x156>
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	08005e20 	.word	0x08005e20
 8005980:	08005e18 	.word	0x08005e18

08005984 <_init>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	bf00      	nop
 8005988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800598a:	bc08      	pop	{r3}
 800598c:	469e      	mov	lr, r3
 800598e:	4770      	bx	lr

08005990 <_fini>:
 8005990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005992:	bf00      	nop
 8005994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005996:	bc08      	pop	{r3}
 8005998:	469e      	mov	lr, r3
 800599a:	4770      	bx	lr
